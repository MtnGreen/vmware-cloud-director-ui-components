var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionDisplayConfig.html",[0,0.058,1,3.086]],["body/interfaces/ActionDisplayConfig.html",[0,0.09,1,4.743,2,1.025,3,0.114,4,0.092,5,0.08,6,3.669,7,3.669,8,0.312,9,1.886,10,7.344,11,5.97,12,0.209,13,0.493,14,0.759,15,3.304,16,6.381,17,4.743,18,0.306,19,0.009,20,1.608,21,4.06,22,3.159,23,6.994,24,6.133,25,2.058,26,0.183,27,2.376,28,5.602,29,4.617,30,1.963,31,2.276,32,4.617,33,5.055,34,1.313,35,1.495,36,1.576,37,5.446,38,3.346,39,2.681,40,2.42,41,3.145,42,3.925,43,3.131,44,5.446,45,2.781,46,4.617,47,1.648,48,3.669,49,4.212,50,0.599,51,3.91,52,0.937,53,5.446,54,4.212,55,2.834,56,6.615,57,1.993,58,1.823,59,0.549,60,1.4,61,1.495,62,1.871,63,2.844,64,2.078,65,2.622,66,1.539,67,2.989,68,4.212,69,4.743,70,4.617,71,1.757,72,0.764,73,2.832,74,4.617,75,0.432,76,1.823,77,0.08,78,2.146,79,2.085,80,1.391,81,3.468,82,1.531,83,2.91,84,0.688,85,3.585,86,2.028,87,2.942,88,5.97,89,1.921,90,1.607,91,4.617,92,2.347,93,4.212,94,1.012,95,3.91,96,2.906,97,0.909,98,2.357,99,1.569,100,1.777,101,4.212,102,4.617,103,4.617,104,4.617,105,4.617,106,1.777,107,0.744,108,4.617,109,2.028,110,2.422,111,2.422,112,1.296,113,0.71,114,4.617,115,4.212,116,1.459,117,2.935,118,3.181,119,4.617,120,4.617,121,4.617,122,1.689,123,2.551,124,1.531,125,2.781,126,0.53,127,1.871,128,2.622,129,0.669,130,3.91,131,3.034,132,2.276,133,2.781,134,1.495,135,2.085,136,2.781,137,2.551,138,1.823,139,3.466,140,2.551,141,2.781,142,2.347,143,2.781,144,1.1,145,0.005,146,0.007,147,0.005]],["title/interfaces/ActionItem.html",[0,0.058,69,3.086]],["body/interfaces/ActionItem.html",[0,0.084,1,3.339,2,0.933,3,0.104,4,0.083,5,0.073,6,3.339,7,3.339,8,0.284,9,1.328,10,7.27,11,4.202,12,0.19,13,0.463,14,0.872,15,3.089,16,3.834,18,0.318,19,0.009,20,1.566,21,3.258,22,2.534,23,5.611,24,5.35,25,1.859,26,0.179,27,2.29,28,6.348,29,4.202,30,2.029,31,2.071,32,4.202,33,4.752,34,1.284,35,1.36,36,1.505,37,5.119,38,3.145,39,2.732,40,2.466,41,2.862,42,3.998,43,2.943,44,5.119,45,2.531,46,4.202,47,1.499,48,3.339,49,3.834,50,0.545,51,3.559,52,1.159,53,6.15,54,3.834,55,2.846,56,7.379,57,2.178,58,1.659,59,0.5,60,1.529,61,1.816,62,2.274,63,2.911,64,2.199,65,2.961,66,1.682,67,3.277,68,5.119,69,5.581,70,5.611,71,1.984,72,0.928,73,2.921,74,6.742,75,0.481,76,2.215,77,0.097,78,2.608,79,2.534,80,1.691,81,4.214,82,1.861,83,3.119,84,0.626,85,3.423,86,1.906,87,2.766,88,5.611,89,1.748,90,1.463,91,4.202,92,2.136,93,6.15,94,0.966,95,4.752,96,3.293,97,1.105,98,2.662,99,1.906,100,2.159,101,5.119,102,5.611,103,5.611,104,5.611,105,5.611,106,2.159,107,0.904,108,5.611,109,2.465,110,2.943,111,2.943,112,1.575,113,0.751,114,5.611,115,5.119,116,1.773,117,3.076,118,3.174,119,5.611,120,5.611,121,6.742,122,1.537,123,2.398,124,1.393,125,2.531,126,0.498,127,1.703,128,2.465,129,0.609,130,3.559,131,2.852,132,2.071,133,2.531,134,1.36,135,1.898,136,2.531,137,2.398,138,1.659,139,3.258,140,2.398,141,2.531,142,2.136,143,2.531,144,1.001,145,0.005,146,0.006,147,0.005]],["title/components/ActionMenuComponent.html",[148,0.309,149,1.805]],["body/components/ActionMenuComponent.html",[1,6.008,3,0.076,4,0.061,5,0.054,8,0.361,9,1.686,10,7.336,12,0.139,13,0.372,14,0.752,15,3.232,16,5.707,18,0.314,19,0.009,20,1.597,24,4.518,25,1.841,26,0.076,28,5.987,30,1.945,34,0.928,36,1.073,39,1.826,40,2.696,41,3.069,42,3.993,45,2.714,50,0.917,51,3.816,52,0.838,54,5.707,55,3.016,57,1.358,59,0.699,60,1.129,61,1.458,63,2.781,65,1.979,66,1.456,67,1.926,68,4.111,69,6.35,72,0.882,73,1.69,75,0.387,77,0.041,83,1.875,84,0.671,92,3.593,93,5.36,94,1.127,96,2.748,107,1.117,113,0.803,117,1.826,118,1.979,123,2.794,126,0.474,128,1.979,129,0.98,130,4.976,136,3.938,137,1.313,140,2.511,145,0.003,146,0.005,147,0.003,148,0.497,149,2.73,150,1.125,151,1.044,152,2.093,153,1.07,154,1.388,155,7.217,156,7.217,157,3.073,158,5.106,159,5.106,160,5.106,161,2.938,162,5.106,163,3.58,164,1.979,165,1.388,166,1.705,167,1.806,168,1.979,169,6.045,170,1.494,171,5.106,172,1.569,173,7.409,174,6.045,175,3.213,176,3.213,177,3.213,178,0.745,179,5.106,180,5.106,181,5.106,182,5.106,183,5.106,184,5.106,185,1.608,186,6.045,187,6.045,188,2.221,189,7.089,190,6.045,191,6.045,192,0.911,193,5.106,194,2.074,195,1.904,196,1.81,197,5.106,198,0.579,199,3.482,200,1.608,201,2.616,202,5.106,203,3.482,204,5.106,205,2.442,206,3.482,207,3.482,208,3.769,209,7.409,210,3.482,211,5.106,212,3.482,213,1.108,214,1.612,215,0.912,216,2.094,217,5.106,218,3.482,219,3.832,220,3.539,221,2.896,222,2.32,223,5.106,224,3.482,225,2.035,226,5.106,227,1.926,228,4.506,229,2.714,230,5.106,231,3.482,232,5.106,233,3.482,234,2.526,235,5.106,236,3.482,237,4.506,238,4.111,239,5.106,240,2.156,241,1.073,242,3.539,243,3.482,244,3.482,245,0.931,246,1.826,247,3.482,248,2.149,249,3.482,250,3.482,251,5.106,252,2.221,253,3.482,254,3.482,255,3.482,256,3.482,257,3.482,258,3.482,259,3.482,260,3.482,261,3.539,262,6.658,263,3.482,264,3.482,265,6.658,266,3.482,267,3.482,268,2.616,269,5.106,270,0.318,271,0.355,272,3.073,273,3.482,274,5.106,275,3.482,276,7.655,277,3.482,278,0.602,279,3.482,280,5.106,281,3.482,282,5.106,283,3.482,284,0.754,285,3.482,286,3.482,287,3.213,288,3.482,289,3.482,290,3.482,291,3.482,292,3.482,293,3.482,294,5.106,295,5.106,296,6.045,297,3.482,298,3.482,299,3.482,300,3.482,301,3.482,302,3.482,303,3.482,304,3.482,305,5.106,306,3.482,307,5.106,308,3.482,309,3.482,310,3.482,311,3.482,312,3.482,313,3.482,314,1.279,315,5.106,316,3.482,317,3.482,318,3.482,319,1.153,320,1.152,321,1.207,322,1.182,323,3.082,324,1.612,325,1.612,326,1.07,327,1.124,328,1.424,329,2.363,330,1.044,331,1.47,332,1.612,333,1.35,334,1.612,335,0.926,336,1.612,337,1.279,338,1.813,339,1.313,340,3.082,341,1.213,342,1.313,343,1.35,344,0.883,345,1.213,346,1.428,347,0.804,348,1.612,349,1.47,350,1.35,351,2.276,352,1.612,353,1.35,354,2.363,355,1.313,356,1.612,357,1.428,358,1.097,359,1.612,360,1.279,361,1.686,362,1.47,363,1.07,364,1.124,365,1.428,366,1.245,367,0.804,368,1.019,369,0.971,370,1.612,371,1.313,372,1.562,373,1.612,374,1.279,375,1.515,376,1.612]],["title/classes/ActivityPromiseResolver.html",[77,0.052,377,2.645]],["body/classes/ActivityPromiseResolver.html",[0,0.09,3,0.116,4,0.093,5,0.082,8,0.45,12,0.212,14,0.653,18,0.303,19,0.009,26,0.165,34,1.048,50,0.781,57,1.814,58,3.24,60,0.99,66,1.636,75,0.474,77,0.09,81,5,84,1.083,122,2.435,145,0.008,146,0.007,147,0.005,178,0.996,192,0.695,195,2.508,208,2.455,213,0.897,214,1.401,215,0.738,216,2.798,225,3.007,245,0.967,278,0.659,328,2.532,347,1.903,377,4.788,378,1.59,379,4.535,380,4.535,381,3.963,382,5.494,383,4.784,384,5.494,385,4.248,386,2.806,387,3.627,388,5.099,389,3.94,390,4.784,391,2.798,392,2.881,393,5.462,394,5.29,395,6.074,396,1.039,397,6.074,398,6.823,399,5.303,400,5.868,401,5.303,402,3.572,403,2.881,404,6.413,405,5.953,406,5,407,5.615,408,2.118,409,6.413,410,6.635,411,3.363,412,5.279,413,6.635,414,6.413,415,5.494,416,5.303,417,5.279,418,5.279,419,5.29,420,6.074,421,6.074,422,4.784,423,4.269,424,4.269,425,1.859,426,4.269,427,5.494,428,5.494,429,4.269,430,4.269]],["title/classes/ActivityReporter.html",[77,0.052,431,2.037]],["body/classes/ActivityReporter.html",[3,0.112,4,0.09,5,0.079,8,0.443,12,0.205,14,0.801,18,0.308,19,0.009,26,0.112,34,1.208,39,2.814,50,0.851,57,1.976,58,3.207,59,0.878,62,2.39,64,1.578,65,3.163,72,0.975,75,0.476,77,0.061,84,0.879,106,2.269,109,3.242,122,2.158,145,0.005,146,0.007,147,0.005,178,0.975,192,0.867,208,3.094,213,1.173,214,1.793,215,0.904,216,2.106,270,0.32,278,0.573,284,0.879,328,2.332,347,1.884,358,2.105,377,5.119,378,1.54,379,5.19,380,5.19,385,3.643,386,2.54,389,4.036,400,5.723,405,4.995,406,3.404,407,4.956,408,2.17,417,4.43,418,3.404,431,3.094,432,4.533,433,6.684,434,6.684,435,3.196,436,2.591,437,6.25,438,4.995,439,2.004,440,3.306,441,6.684,442,6.684,443,6.524,444,5.381,445,5.381,446,5.381,447,3.51,448,5.381,449,5.381,450,6.336,451,0.959,452,4.533,453,5.136,454,2.39,455,3.094,456,8.159,457,2.105,458,6.684,459,5.898,460,5.381,461,5.381,462,5.136,463,6.734,464,5.381,465,6.336,466,5.381,467,5.136,468,5.381,469,5.136,470,5.381,471,5.381,472,5.136,473,4.337,474,6.569,475,4.686,476,4.995,477,5.381,478,5.136,479,5.136,480,1.789,481,4.135,482,7.43,483,7.43,484,5.982,485,6.684,486,6.684,487,6.684,488,6.684,489,6.684,490,5.136,491,6.557,492,5.136,493,5.136,494,5.136,495,5.136,496,5.136,497,5.136]],["title/interfaces/ActivityResponse.html",[0,0.058,422,3.086]],["body/interfaces/ActivityResponse.html",[0,0.094,2,1.111,3,0.124,4,0.099,5,0.087,8,0.338,12,0.227,13,0.519,14,0.782,18,0.297,19,0.009,26,0.17,34,0.871,50,0.816,57,1.894,58,3.166,60,1.059,66,1.462,75,0.481,77,0.085,81,4.719,84,1.106,122,2.299,145,0.008,146,0.007,147,0.006,195,2.242,208,2.625,225,3.103,245,1.298,278,0.652,328,2.523,347,2.067,377,4.28,379,3.409,380,3.409,381,4.238,382,4.566,383,3.976,384,4.566,385,4.265,386,2.812,387,3.014,388,4.238,389,3.522,390,3.976,391,2.326,392,2.394,393,5.159,394,4.993,395,5.733,397,4.566,400,5.689,402,3.194,403,2.394,404,5.733,405,5.322,406,4.719,407,5.638,408,1.894,409,5.733,410,6.573,411,3.006,412,4.719,413,6.573,414,5.733,415,4.566,417,5.159,418,5.159,419,4.993,420,5.733,421,5.733,422,5.458,423,5.733,424,4.566,425,1.897,426,4.566,427,5.733,428,5.733,429,4.566,430,4.566,498,5.671]],["title/components/BannerActivityReporterComponent.html",[148,0.309,326,1.352]],["body/components/BannerActivityReporterComponent.html",[3,0.094,4,0.075,5,0.066,8,0.405,12,0.171,13,0.431,14,0.794,18,0.312,19,0.009,21,4.067,26,0.094,30,1.967,34,0.909,39,2.118,57,1.804,58,3.045,59,0.928,60,0.801,63,1.35,65,2.295,72,0.864,75,0.487,77,0.051,84,0.961,94,0.579,97,0.745,99,2.301,106,2.857,107,0.842,109,2.629,111,1.985,122,1.384,126,0.532,129,0.868,145,0.004,146,0.006,147,0.004,148,0.476,149,1.758,150,1.305,151,1.285,153,1.317,154,1.709,165,1.709,166,1.74,167,1.85,170,1.733,172,0.84,178,0.864,185,1.865,192,0.908,194,2.323,198,0.515,208,1.985,213,1.162,214,1.767,215,0.945,216,1.758,245,1.334,270,0.478,271,0.437,319,1.419,320,1.336,321,1.4,322,1.456,323,3.386,324,1.985,325,1.985,326,2.247,327,2.777,328,2.532,329,2.741,330,1.285,331,1.81,332,1.985,333,1.662,334,1.985,335,1.14,336,1.985,337,1.574,338,1.992,339,1.617,340,3.386,341,1.494,342,1.617,343,1.662,344,1.088,345,1.494,346,1.758,347,1.773,348,1.985,349,1.81,350,1.662,351,2.439,352,1.985,353,1.662,354,2.741,355,1.617,356,1.985,357,1.758,358,2.417,359,1.985,360,1.574,361,1.892,362,1.81,363,1.317,364,1.384,365,1.758,366,1.533,367,0.99,368,1.255,369,1.196,370,1.985,371,1.617,372,1.923,373,1.985,374,1.574,375,1.865,376,1.985,377,4.397,379,5.215,386,2.626,389,2.929,400,5.828,406,2.842,407,4.272,408,1.575,417,3.924,418,2.842,431,3.895,437,4.425,443,5.932,444,4.767,445,4.767,446,4.767,447,3.164,448,5.889,449,5.889,450,6.55,451,1.106,455,3.14,460,5.461,461,3.452,463,5.461,464,3.452,465,4.767,466,3.452,468,3.452,470,3.452,471,5.461,473,3.147,474,4.767,475,5.972,476,3.204,477,5.461,499,6.985,500,3.452,501,5.226,502,2.089,503,0.956,504,5.226,505,4.272,506,7.315,507,7.315,508,3.796,509,7.676,510,3.784,511,3.453,512,5.921,513,3.671,514,5.921,515,3.408,516,4.288,517,7.315,518,4.288,519,4.288,520,4.288,521,4.288,522,4.288,523,5.226,524,1.612,525,2.656,526,3.255,527,3.784,528,3.784,529,3.784,530,3.784,531,3.784,532,3.784,533,4.288,534,4.288,535,3.784,536,3.452,537,1.96,538,4.288,539,3.784,540,6.455,541,7.315,542,6.455,543,2.197]],["title/classes/BannerActivityReporterWidgetObject.html",[77,0.052,544,3.544]],["body/classes/BannerActivityReporterWidgetObject.html",[3,0.108,4,0.087,5,0.076,8,0.481,12,0.198,13,0.475,14,0.82,18,0.316,19,0.009,25,1.895,26,0.108,34,0.76,35,1.414,57,1.317,59,0.814,66,1.499,71,1.895,72,1.065,75,0.504,77,0.059,80,1.735,94,0.668,107,0.704,124,2.27,126,0.511,129,1.096,134,1.864,142,2.221,145,0.005,146,0.008,147,0.005,148,0.566,153,2.005,166,1.396,167,1.34,178,0.952,188,2.838,192,0.921,198,0.766,200,1.559,201,3.343,213,1.159,214,1.759,215,0.926,216,2.993,245,0.903,270,0.406,278,0.588,321,2.12,326,1.521,327,2.106,328,2.389,367,1.912,378,1.484,391,3.182,396,0.97,411,2.09,425,1.117,455,3.378,475,5.118,499,6.666,503,1.053,505,4.597,526,3.589,544,5.254,545,6.666,546,3.986,547,4.415,548,3.879,549,1.543,550,2.992,551,4.124,552,2.829,553,3.879,554,4.11,555,4.11,556,3.879,557,4.11,558,4.11,559,4.11,560,7.298,561,7.298,562,4.951,563,2.632,564,3.281,565,2.368,566,1.681,567,2.632,568,1.559,569,2.632,570,2.449,571,2.632,572,2.632,573,3.397,574,4.805,575,3.281,576,2.537,577,3.468,578,1.909,579,3.468,580,2.529,581,4.487,582,3.838,583,3.74,584,2.61,585,2.632,586,2.867,587,4.401,588,3.281,589,2.632,590,3.281,591,2.221,592,2.703,593,2.927,594,3.343,595,2.632,596,3.281,597,2.838,598,2.449,599,2.632,600,3.281,601,2.632,602,2.632,603,3.281,604,1.771,605,1.639,606,2.632,607,2.632,608,3.281,609,2.632,610,2.632,611,3.281,612,2.632,613,3.343,614,2.537,615,2.632,616,2.368,617,2.449,618,2.632,619,1.559,620,3.468,621,2.632,622,3.281,623,1.348,624,2.632,625,4.369,626,4.951,627,4.369,628,4.951,629,4.951,630,4.951,631,4.951,632,4.369,633,2.368,634,4.369,635,4.369,636,4.951,637,4.951,638,4.951]],["title/classes/BaseFormControl.html",[77,0.052,639,2.772]],["body/classes/BaseFormControl.html",[3,0.1,4,0.081,5,0.071,8,0.484,12,0.184,13,0.453,14,0.753,18,0.317,19,0.009,26,0.1,45,3.303,52,1.044,59,0.906,62,2.222,75,0.475,77,0.055,82,2.205,83,2.282,94,1.153,96,3.05,97,1.08,98,2.165,99,2.431,107,1.228,113,0.652,126,0.487,129,1.007,132,3.606,145,0.005,146,0.006,147,0.005,148,0.436,178,0.907,185,1.957,188,2.703,192,0.922,198,0.72,213,1.066,214,1.616,215,0.896,270,0.469,271,0.469,278,0.549,284,0.469,322,2.753,347,1.872,351,2.834,378,2.11,438,4.644,451,0.859,524,1.692,550,2.329,639,3.914,640,7.308,641,3.706,642,3.433,643,3.074,644,6.215,645,6.215,646,3.86,647,6.215,648,2.006,649,2.282,650,4.97,651,6.215,652,1.653,653,7.036,654,5.259,655,5.259,656,2.9,657,5.259,658,5.881,659,5.259,660,4.644,661,4.644,662,4.644,663,4.644,664,5.259,665,4.934,666,5.259,667,3.646,668,7.036,669,7.036,670,5.485,671,6.109,672,6.215,673,4.602,674,4.602,675,5.631,676,4.602,677,2.972,678,4.358,679,3.433,680,4.644,681,2.057,682,4.602,683,2.703,684,5.631,685,4.602,686,4.644,687,4.644,688,5.686,689,4.969,690,4.602,691,4.644,692,4.602,693,4.644,694,4.358,695,4.602,696,4.358,697,4.644,698,4.602,699,2.358,700,5.631,701,4.602,702,5.631,703,2.477,704,4.644,705,2.972,706,4.602,707,3.735,708,3.576,709,3.576,710,4.602,711,2.972,712,4.602,713,1.504,714,4.602,715,4.644,716,2.006,717,4.062,718,4.602,719,6.215,720,4.602,721,4.602,722,4.602,723,4.602,724,5.485,725,1.524,726,3.433,727,3.227,728,2.766,729,3.05,730,4.602,731,2.899,732,4.602,733,1.106,734,4.062,735,4.602,736,4.602,737,3.227,738,4.602,739,6.215,740,4.602,741,4.602,742,4.602,743,4.602,744,4.602,745,4.602,746,4.602,747,4.602,748,4.602,749,3.44]],["title/components/BoldTextRendererComponent.html",[148,0.309,330,1.32]],["body/components/BoldTextRendererComponent.html",[0,0.073,3,0.12,4,0.096,5,0.084,8,0.327,12,0.219,18,0.27,19,0.009,26,0.167,30,1.358,50,0.923,52,0.76,55,1.96,60,1.024,63,1.726,72,1.32,75,0.418,77,0.065,89,2.813,107,0.991,113,0.731,126,0.601,145,0.005,146,0.007,147,0.005,148,0.607,149,2.248,150,1.536,151,2.417,153,1.684,154,2.185,165,2.185,166,1.774,167,1.894,185,2.194,192,0.558,196,1.811,215,0.9,248,2.25,270,0.477,271,0.558,278,0.508,319,1.814,320,1.572,321,1.647,322,1.861,323,3.733,324,2.537,325,2.537,326,1.684,327,1.769,328,1.943,329,3.226,330,2.623,331,3.65,332,2.537,333,2.125,334,2.537,335,1.457,336,2.537,337,2.012,338,2.196,339,2.067,340,3.733,341,1.91,342,2.067,343,2.125,344,1.39,345,1.91,346,2.248,347,1.266,348,2.537,349,2.314,350,2.125,351,2.614,352,2.537,353,2.125,354,3.226,355,2.067,356,2.537,357,2.248,358,1.726,359,2.537,360,2.012,361,2.137,362,2.314,363,1.684,364,1.769,365,2.248,366,1.96,367,1.266,368,1.604,369,1.529,370,2.537,371,2.067,372,2.458,373,2.537,374,2.012,375,2.384,376,2.537,396,1.579,454,1.96,652,1.853,750,4.886,751,4.096,752,3.414,753,3.142,754,1.99,755,2.778,756,2.039,757,6.492,758,2.25,759,1.991,760,2.858,761,2.889,762,4.389,763,6.15,764,6.762,765,3.989,766,5.481,767,2.458,768,1.96,769,5.208,770,2.536,771,2.808,772,2.808,773,4.096,774,4.837,775,4.837,776,4.096,777,4.413,778,4.837,779,4.837]],["title/interfaces/BoldTextRendererConfig.html",[0,0.058,765,2.177]],["body/interfaces/BoldTextRendererConfig.html",[0,0.083,2,1.231,3,0.137,4,0.11,5,0.097,8,0.375,12,0.251,13,0.553,18,0.299,19,0.009,26,0.178,30,1.879,50,0.969,52,0.871,55,2.247,72,1.338,75,0.462,77,0.075,89,2.785,107,1.079,113,0.66,145,0.006,146,0.008,147,0.006,148,0.594,151,2.274,166,1.202,167,1.291,196,1.486,248,2.029,270,0.507,271,0.64,278,0.553,330,2.597,331,3.657,396,1.486,454,2.247,652,1.671,750,4.407,751,4.697,752,3.341,753,3.111,754,1.97,755,2.505,756,1.839,757,6.108,758,2.029,759,1.795,760,2.577,761,2.767,762,3.959,763,5.546,764,5.546,765,4.186,767,2.819,768,2.247,769,5.669,770,2.697,771,3.22,772,3.22,773,5.669,774,6.695,775,6.695,776,4.697,777,5.06,778,5.546,779,5.546]],["title/classes/BoldTextRendererWidgetObject.html",[77,0.052,780,3.544]],["body/classes/BoldTextRendererWidgetObject.html",[3,0.107,4,0.085,5,0.075,8,0.492,12,0.195,13,0.471,14,0.818,18,0.317,19,0.009,25,1.883,26,0.141,34,0.75,35,1.395,50,0.741,52,0.677,57,1.299,59,0.81,66,1.489,71,1.883,72,1.307,75,0.503,77,0.077,80,1.719,107,0.695,124,2.258,126,0.605,129,1.093,134,1.847,142,2.19,145,0.005,146,0.008,147,0.005,148,0.563,153,1.986,166,1.386,167,1.328,178,0.944,188,2.813,192,0.907,198,0.765,200,1.538,201,3.313,213,1.157,214,1.754,215,0.923,216,2.973,245,0.89,270,0.48,271,0.497,278,0.562,284,0.497,321,2.116,330,1.939,331,3.389,367,1.905,378,1.464,391,3.164,396,0.956,411,2.062,425,1.635,503,1.17,526,3.58,547,4.407,548,3.853,549,1.529,550,2.988,551,4.102,552,2.81,553,3.853,554,4.073,555,4.073,556,4.102,557,4.073,558,4.073,559,4.073,563,2.596,564,3.236,565,2.335,566,1.658,567,2.596,568,1.538,569,2.596,570,2.416,571,2.596,572,2.596,573,3.391,574,4.797,575,3.236,576,2.502,577,3.437,578,1.892,579,3.437,580,2.506,581,4.472,582,3.817,583,3.714,584,2.592,585,2.596,586,2.857,587,4.384,588,3.236,589,2.596,590,3.236,591,2.19,592,2.797,593,2.9,594,3.313,595,2.596,596,3.236,597,2.813,598,2.416,599,2.596,600,3.236,601,2.596,602,2.596,603,3.236,604,1.746,605,1.617,606,2.596,607,2.596,608,3.236,609,2.596,610,2.596,611,3.236,612,2.596,613,3.313,614,2.502,615,2.596,616,2.335,617,2.416,618,2.596,619,1.538,620,3.437,621,2.596,622,3.236,623,1.33,624,2.596,716,1.576,731,3.076,750,5.083,754,1.679,761,2.62,780,5.206,781,3.932,782,4.883,783,4.883,784,3.649,785,4.883,786,3.932,787,4.31,788,4.31,789,3.932,790,3.424,791,3.424,792,1.658,793,3.932,794,4.883,795,4.883,796,4.883,797,2.335,798,4.883,799,6.466,800,4.883,801,4.883,802,4.883]],["title/interfaces/Button.html",[0,0.058,73,1.457]],["body/interfaces/Button.html",[0,0.111,2,0.765,3,0.085,4,0.068,5,0.06,8,0.233,9,2.149,12,0.156,13,0.512,14,0.531,15,2.649,18,0.312,19,0.009,20,1.061,21,3.598,22,2.957,26,0.186,27,2.106,30,2.042,34,0.991,35,1.116,36,1.356,38,1.933,39,2.947,40,2.615,43,1.809,47,2.032,50,0.944,52,1.222,55,2.756,57,1.039,58,1.933,59,0.582,60,0.73,61,1.116,64,1.2,65,2.151,66,1.325,67,2.798,72,1.125,73,2.986,75,0.481,76,1.933,77,0.094,78,1.602,79,1.557,82,1.624,84,1.013,89,2.91,90,1.2,94,0.948,97,0.679,98,1.361,100,2.385,110,1.809,112,1.964,113,0.778,116,1.09,117,2.512,118,3.073,122,1.261,123,3.325,124,1.624,125,2.077,126,0.506,127,2.896,128,2.151,129,0.71,131,1.753,132,3.227,133,2.077,134,1.843,135,1.557,136,2.077,137,2.093,139,2.002,141,2.949,143,2.077,145,0.004,146,0.006,147,0.004,148,0.568,150,0.861,161,2.249,192,0.565,194,1.143,195,1.23,196,1.822,198,0.561,200,1.23,208,3.251,219,3.193,222,1.933,225,1.557,234,3.191,240,1.65,246,1.984,270,0.437,278,0.404,284,0.565,320,1.673,330,1.171,367,0.902,369,1.09,386,1.261,396,1.264,408,1.039,425,1.673,439,2.106,451,0.73,454,1.397,502,1.116,503,1.041,515,3.193,524,1.757,566,1.327,619,1.23,643,1.933,648,1.791,681,1.293,703,1.557,713,0.946,752,1.602,754,2.324,755,2.572,756,1.143,758,2.083,759,2.006,760,2.275,761,2.75,765,1.933,768,1.397,770,2.455,792,1.327,803,2.077,804,2.077,805,3.335,806,2.158,807,3.132,808,2.987,809,3.878,810,3.042,811,3.564,812,4.042,813,2.843,814,2.343,815,3.733,816,1.65,817,1.65,818,3.306,819,1.557,820,1.2,821,1.515,822,1.435,823,1.933,824,1.602,825,1.475,826,1.933,827,2.136,828,2.275,829,3.88,830,3.878,831,3.713,832,2.843,833,1.435,834,2.447,835,2.653,836,2.501,837,3.878,838,3.474,839,4.221,840,3.065,841,2.349,842,2.212,843,2.275,844,2.212,845,2.349,846,2.572,847,2.349,848,2.349,849,1.65,850,1.65,851,2.002,852,1.557,853,1.65,854,2.249,855,2.843,856,1.747,857,2.349,858,2.159,859,2.275,860,2.723,861,1.293,862,2.433,863,1.361,864,1.65,865,2.349,866,2.037,867,3.878,868,3.335,869,3.335,870,3.335,871,1.511,872,2.349,873,2.349,874,2.136,875,2.349,876,3.065,877,1.747,878,1.65,879,1.327,880,1.933,881,1.809,882,2.349,883,2.159,884,2.349,885,2.159,886,1.23,887,1.397,888,2.349,889,1.293,890,2.349,891,2.077,892,1.557,893,2.249,894,2.349,895,2.349,896,1.515,897,1.7,898,2.249,899,2.159,900,2.349,901,1.515,902,2.249,903,2.349,904,3.065,905,1.116,906,1.397,907,2.002,908,2.077,909,3.335,910,2.349,911,1.869,912,1.809,913,1.602,914,2.249,915,1.602,916,2.002,917,1.602,918,1.65,919,1.602,920,1.7,921,1.933,922,2.002,923,1.933,924,2.002,925,2.002,926,1.7,927,2.249]],["title/interfaces/ButtonConfig.html",[0,0.058,852,1.754]],["body/interfaces/ButtonConfig.html",[0,0.109,2,0.771,3,0.086,4,0.069,5,0.06,8,0.235,9,2.215,12,0.157,13,0.513,14,0.675,15,2.657,18,0.311,19,0.009,20,1.066,21,3.61,22,2.964,26,0.186,27,2.112,30,1.968,34,0.994,35,1.124,36,1.362,38,1.946,39,3.027,40,2.702,43,1.821,47,2.039,50,0.945,52,1.173,55,2.762,57,1.046,58,1.943,59,0.585,60,0.735,61,1.124,64,1.209,65,2.162,66,1.33,67,2.103,72,1.085,73,2.921,75,0.47,76,1.371,77,0.077,78,1.614,79,1.568,82,1.632,84,1.015,89,2.916,90,1.209,94,0.951,97,0.684,98,1.371,100,2.392,110,1.821,112,1.843,113,0.78,116,1.097,117,2.519,118,3.079,122,1.27,123,3.378,124,1.632,125,2.092,126,0.508,127,2.902,128,2.162,129,0.714,131,1.765,132,2.426,133,2.092,134,1.85,135,1.568,136,2.092,137,2.103,139,2.016,141,3.443,143,2.092,145,0.004,146,0.006,147,0.004,148,0.569,150,0.867,161,2.264,192,0.568,194,1.151,195,1.239,196,1.826,198,0.563,200,1.239,208,3.261,219,3.727,222,1.943,225,1.568,234,3.204,240,1.661,246,1.994,270,0.438,278,0.406,284,0.568,320,1.678,330,1.18,367,0.909,369,1.097,386,1.27,396,1.268,408,1.046,425,1.742,439,2.112,451,0.735,454,1.407,502,1.124,503,1.045,515,2.264,524,1.764,566,1.336,619,1.239,643,1.946,648,1.8,681,1.303,703,1.568,713,0.952,752,1.614,754,2.326,755,2.582,756,1.151,758,2.091,759,2.012,760,2.287,761,2.755,765,1.946,768,1.407,770,2.462,792,1.336,803,2.092,804,2.092,805,2.365,806,2.165,807,3.14,808,2.511,809,3.352,810,3.05,811,3.578,812,4.054,813,2.016,814,1.661,815,3.443,816,1.661,817,1.661,818,3.318,819,1.568,820,1.209,821,1.525,822,1.445,823,1.943,824,1.614,825,1.483,826,1.943,827,2.144,828,2.287,829,3.892,830,3.893,831,3.727,832,2.857,833,1.445,834,2.455,835,2.66,836,2.511,837,3.893,838,3.821,839,4.642,840,3.892,841,2.365,842,2.223,843,2.287,844,2.342,845,2.365,846,3.234,847,2.365,848,2.365,849,1.661,850,1.661,851,2.857,852,2.223,853,2.975,854,3.209,855,2.857,856,1.756,857,2.365,858,2.174,859,2.287,860,2.731,861,1.303,862,2.443,863,1.371,864,1.661,865,2.365,866,2.047,867,3.893,868,3.352,869,3.352,870,3.352,871,1.518,872,2.365,873,2.365,874,2.144,875,2.365,876,3.081,877,1.756,878,1.661,879,1.336,880,1.946,881,1.821,882,2.365,883,2.174,884,2.365,885,2.174,886,1.239,887,1.407,888,2.365,889,1.303,890,2.365,891,2.092,892,1.568,893,2.264,894,2.365,895,2.365,896,1.525,897,1.712,898,2.264,899,2.174,900,2.365,901,1.525,902,2.264,903,2.365,904,3.081,905,1.124,906,1.407,907,2.016,908,2.092,909,3.352,910,2.365,911,1.882,912,1.821,913,1.614,914,2.264,915,1.614,916,2.016,917,1.614,918,1.661,919,1.614,920,1.712,921,1.946,922,2.016,923,1.946,924,2.016,925,2.016,926,1.712,927,2.264]],["title/classes/Bytes.html",[77,0.052,928,3.544]],["body/classes/Bytes.html",[3,0.085,4,0.068,5,0.06,8,0.472,12,0.155,13,0.402,14,0.757,18,0.314,19,0.009,20,1.229,25,2.276,26,0.12,34,1.074,48,2.718,62,2.748,71,1.996,75,0.48,77,0.066,83,3.063,84,1.081,107,0.995,113,0.848,126,0.71,129,1.052,145,0.004,146,0.005,147,0.004,172,1.653,178,0.805,192,0.93,198,0.81,213,1.195,214,1.624,215,0.874,222,2.238,227,2.789,241,0.815,245,1.348,278,0.51,284,0.562,361,2.619,378,1.162,436,2.713,447,3.54,480,1.351,503,0.89,526,3.655,549,2.107,591,1.739,646,4.274,709,2.231,733,1.316,755,2.789,797,3.347,838,3.658,879,2.376,928,6.367,929,2.569,930,5.546,931,3.447,932,5.669,933,6.423,934,5.767,935,6.423,936,2.554,937,4.869,938,4.869,939,5.185,940,5.185,941,6.188,942,5.849,943,5.849,944,5.389,945,4.907,946,5.545,947,4.638,948,5.241,949,3.876,950,3.876,951,6.998,952,3.876,953,3.876,954,2.098,955,3.876,956,3.876,957,3.876,958,3.876,959,3.876,960,3.876,961,3.876,962,3.876,963,3.876,964,3.876,965,3.876,966,3.876,967,3.421,968,3.421,969,2.897,970,2.897,971,3.876,972,3.876,973,3.876,974,5.185,975,5.697,976,3.421,977,2.554,978,5.414,979,3.222,980,4.434,981,4.466,982,4.052,983,3.869,984,3.869,985,2.554,986,3.869,987,5.185,988,3.421,989,3.421,990,2.634,991,4.504,992,3.421,993,3.421,994,4.504,995,5.451,996,3.421,997,3.421,998,3.421,999,3.243,1000,5.094,1001,5.094,1002,5.389,1003,4.504,1004,3.421,1005,4.257,1006,2.634,1007,2.897,1008,2.897,1009,2.897,1010,2.897,1011,2.897,1012,2.897,1013,2.897,1014,2.718,1015,1.794,1016,1.503,1017,3.869,1018,3.869,1019,3.869,1020,2.718,1021,2.718,1022,2.569,1023,2.718,1024,2.718,1025,2.718,1026,3.869,1027,3.869,1028,2.718]],["title/interfaces/CanBeReadOnly.html",[0,0.058,654,3.289]],["body/interfaces/CanBeReadOnly.html",[0,0.107,2,1.367,3,0.152,4,0.122,5,0.107,8,0.416,12,0.279,13,0.588,18,0.246,19,0.009,26,0.152,60,1.507,94,1.149,97,1.402,145,0.007,146,0.008,147,0.007,150,1.538,566,2.74,646,3.576,654,6.031,665,6.138,731,4.395,896,2.705,1029,6.159,1030,6.159,1031,4.016,1032,8.07,1033,5.083,1034,8.07,1035,7.122,1036,8.07,1037,6.497]],["title/interfaces/CliptextConfig.html",[0,0.058,818,2.255]],["body/interfaces/CliptextConfig.html",[0,0.055,2,0.808,3,0.09,4,0.072,5,0.063,8,0.246,9,1.608,12,0.165,13,0.42,14,0.751,18,0.254,19,0.009,25,1.072,26,0.157,27,1.729,30,1.876,36,0.868,38,2.042,50,0.473,52,0.921,59,0.927,72,0.97,77,0.049,80,1.534,82,1.208,84,0.758,86,1.237,94,0.971,96,3.121,97,0.717,99,1.993,100,2.257,106,1.402,107,0.587,113,0.433,116,1.151,126,0.615,144,1.212,145,0.004,146,0.006,147,0.004,152,2.481,153,1.268,164,1.6,166,0.789,167,0.848,172,1.302,194,2.442,195,1.3,196,1.571,200,2.266,221,1.795,227,1.557,241,1.649,252,3.904,270,0.257,271,0.42,278,0.616,284,0.82,320,0.931,321,1.79,322,2.663,374,2.117,375,1.795,439,1.237,457,1.3,480,1.438,524,1.57,549,0.976,584,2.062,586,1.402,598,2.042,601,2.194,605,1.366,648,1.332,652,1.098,713,0.999,749,5.658,755,2.299,792,1.958,818,3.406,820,2.326,832,2.955,844,2.384,859,2.365,866,2.117,874,1.366,886,1.3,887,1.476,904,4.333,905,1.647,906,2.879,907,2.115,908,4.169,954,2.27,982,2.115,1038,2.28,1039,2.6,1040,2.175,1041,3.672,1042,5.351,1043,3.611,1044,2.587,1045,1.772,1046,2.117,1047,4.405,1048,5.378,1049,4.019,1050,5.658,1051,4.183,1052,5.658,1053,4.325,1054,5.658,1055,3.085,1056,3.323,1057,3.085,1058,3.323,1059,3.323,1060,3.323,1061,2.235,1062,3.085,1063,3.085,1064,3.323,1065,3.323,1066,2.481,1067,5.336,1068,3.323,1069,3.323,1070,1.851,1071,4.643,1072,3.323,1073,3.288,1074,5.351,1075,3.323,1076,4.044,1077,2.638,1078,3.323,1079,3.323,1080,3.323,1081,3.085,1082,3.323,1083,3.085,1084,3.323,1085,5.658,1086,3.323,1087,4.643,1088,3.323,1089,2.758,1090,3.323,1091,5.351,1092,4.643,1093,3.323,1094,4.643,1095,3.323,1096,4.643,1097,2.736,1098,3.323,1099,5.351,1100,3.323,1101,3.323,1102,3.323,1103,4.643,1104,4.643,1105,3.323,1106,3.323,1107,4.044,1108,3.323,1109,3.323,1110,3.323,1111,3.323,1112,3.323,1113,5.351,1114,3.323,1115,3.323,1116,3.323,1117,5.793,1118,3.323,1119,4.643,1120,4.643,1121,3.323,1122,5.351,1123,3.323,1124,3.323,1125,3.323,1126,3.323,1127,3.323,1128,2.669,1129,3.323,1130,3.323,1131,4.643,1132,3.323,1133,4.643,1134,5.793,1135,4.643,1136,4.405,1137,4.643,1138,1.974,1139,4.643,1140,3.323,1141,3.085,1142,3.323,1143,2.894,1144,4.643,1145,3.323,1146,3.323,1147,3.323,1148,3.323,1149,2.736,1150,3.323,1151,2.894,1152,3.085,1153,3.323,1154,3.323,1155,3.323,1156,4.643,1157,5.351,1158,3.323,1159,3.323,1160,3.323,1161,3.323,1162,3.323,1163,4.643,1164,5.793,1165,2.894,1166,2.894,1167,2.894,1168,2.894,1169,6.096,1170,4.643,1171,5.089,1172,3.323,1173,5.793,1174,3.643,1175,3.643,1176,3.323,1177,3.643,1178,3.643,1179,3.323,1180,4.31,1181,3.323,1182,3.643,1183,3.323,1184,3.085,1185,3.643,1186,3.643,1187,3.643,1188,3.643,1189,5.089,1190,3.643,1191,5.089,1192,5.866,1193,3.643,1194,5.089,1195,5.089,1196,3.643,1197,3.643,1198,3.643,1199,3.643,1200,3.643,1201,1.557,1202,3.643,1203,5.866,1204,3.643,1205,3.643,1206,5.089,1207,5.089,1208,2.375,1209,5.089,1210,3.643,1211,3.643,1212,3.643,1213,3.643,1214,3.643,1215,3.643,1216,1.332,1217,3.085,1218,3.643,1219,3.643,1220,3.643,1221,3.643,1222,3.643,1223,5.089,1224,3.643,1225,3.643,1226,3.643,1227,3.323,1228,3.643,1229,3.643,1230,3.323,1231,2.736,1232,1.645,1233,3.323,1234,3.323]],["title/interfaces/ColumnConfigInternal.html",[0,0.058,1235,2.255]],["body/interfaces/ColumnConfigInternal.html",[0,0.094,2,0.413,3,0.046,4,0.037,5,0.032,8,0.126,9,1.564,12,0.289,13,0.37,14,0.609,15,1.657,18,0.249,19,0.009,20,0.662,22,0.842,25,0.548,26,0.164,27,1.037,30,1.702,31,0.918,34,1.112,36,1.648,39,0.755,40,1.81,42,1.01,47,0.665,50,0.875,52,0.609,55,2.908,59,0.776,60,1.125,61,1.816,62,0.755,63,0.665,64,1.85,66,0.71,67,1.305,71,0.898,72,0.505,73,2.67,75,0.428,76,1.205,77,0.052,79,0.842,80,0.92,82,0.618,83,2.059,84,0.668,85,3.286,86,1.805,87,0.918,89,2.805,90,0.649,92,3.473,94,1.045,96,1.341,97,0.883,98,0.736,99,2.12,100,0.717,106,1.904,107,1.172,109,2.173,112,0.523,113,0.721,116,1.225,117,1.237,118,2.334,122,0.682,123,2.591,124,1.012,126,0.683,127,1.237,128,0.818,129,0.814,134,1.451,135,0.842,137,1.657,138,2.215,140,2.115,144,1.444,145,0.003,146,0.003,147,0.002,148,0.508,150,0.762,151,1.523,164,1.341,166,0.404,167,0.71,168,0.818,170,0.618,172,1.58,175,1.122,176,1.122,177,1.122,178,0.641,185,1.089,192,0.215,195,2.226,196,1.424,198,0.382,205,1.01,213,0.737,215,0.475,220,1.122,221,1.505,222,0.736,227,0.796,229,2.701,241,1.444,242,1.839,245,1.412,246,0.755,248,1.419,252,0.918,261,1.122,268,1.082,270,0.46,271,0.215,278,0.641,284,0.849,287,2.701,314,1.27,320,1.146,321,0.818,326,0.649,327,0.682,328,1.225,335,0.561,338,0.575,344,0.536,347,0.799,358,0.665,363,0.649,364,0.682,368,1.012,385,1.601,386,0.682,392,0.891,396,0.677,402,0.947,403,3.225,408,0.92,425,1.146,431,1.601,435,2.101,439,1.681,440,2.513,451,0.394,455,1.601,457,1.384,502,0.988,503,0.558,511,1.911,513,1.654,524,1.64,525,2.279,537,0.699,543,1.082,549,1.039,552,1.341,568,1.089,573,1.305,578,1.762,580,1.341,584,0.755,586,1.492,604,2.373,605,1.994,619,0.665,623,0.942,633,1.01,648,1.117,649,0.775,652,0.561,656,0.755,677,1.01,681,0.699,683,0.918,705,1.01,711,1.01,713,0.511,716,1.117,733,1.289,753,1.802,754,1.836,756,0.618,758,2.386,759,2.019,767,0.947,768,0.755,770,1.856,771,1.772,772,1.772,792,2.254,806,2.516,807,1.46,810,1.419,814,0.891,816,0.891,817,0.891,819,0.842,820,0.649,821,0.818,824,0.866,825,0.561,826,1.531,827,1.455,828,1.802,833,2.335,834,2.73,835,1.237,836,2.173,842,1.379,843,1.802,844,1.384,846,0.842,849,0.891,850,2.145,852,2.235,853,0.891,856,0.665,861,1.455,862,2.503,863,1.531,864,0.891,866,0.775,871,0.942,874,0.699,877,1.384,879,1.492,886,1.089,892,0.842,896,1.97,901,0.818,905,2.369,906,2.528,915,1.419,919,1.802,931,1.551,936,2.595,977,1.601,985,2.352,990,1.802,999,1.419,1006,0.866,1015,0.977,1016,0.818,1040,1.305,1043,1.971,1044,1.551,1045,1.063,1046,1.27,1070,0.947,1073,1.044,1089,2.101,1128,0.977,1138,3.286,1201,0.796,1216,0.682,1232,0.842,1235,2.873,1236,1.044,1237,2.428,1238,1.911,1239,2.428,1240,2.807,1241,2.603,1242,2.807,1243,1.839,1244,2.336,1245,2.595,1246,1.166,1247,2.005,1248,1.911,1249,0.866,1250,1.839,1251,2.428,1252,1.911,1253,0.589,1254,1.505,1255,0.947,1256,0.755,1257,0.947,1258,1.145,1259,3.344,1260,2.873,1261,1.122,1262,2.251,1263,1.082,1264,1.044,1265,1.711,1266,0.977,1267,1.839,1268,2.251,1269,1.082,1270,1.122,1271,0.866,1272,1.122,1273,2.603,1274,1.122,1275,4.21,1276,1.772,1277,1.122,1278,2.336,1279,1.772,1280,2.513,1281,1.911,1282,1.166,1283,1.654,1284,1.166,1285,1.711,1286,1.166,1287,2.807,1288,1.772,1289,1.166,1290,1.166,1291,1.911,1292,1.122,1293,2.701,1294,1.166,1295,2.034,1296,1.772,1297,1.911,1298,1.911,1299,1.911,1300,2.603,1301,2.428,1302,1.01,1303,0.977,1304,1.122,1305,1.166,1306,1.166,1307,0.947,1308,3.097,1309,4.001,1310,2.428,1311,0.866,1312,1.166,1313,1.166,1314,4.156,1315,1.082,1316,2.084,1317,3.513,1318,1.082,1319,1.166,1320,2.251,1321,1.044,1322,0.775,1323,1.166,1324,1.166,1325,2.98,1326,1.166,1327,1.379,1328,2.251,1329,0.818,1330,0.891,1331,2.428,1332,1.551,1333,1.166,1334,1.082,1335,1.911,1336,1.911,1337,1.166,1338,1.166,1339,1.711,1340,1.082,1341,1.166,1342,1.166,1343,1.166,1344,1.839,1345,2.428,1346,1.166,1347,1.166,1348,1.166,1349,1.911,1350,1.166,1351,1.911,1352,1.166,1353,2.428,1354,1.166,1355,1.082,1356,1.082,1357,1.166,1358,1.911,1359,1.166,1360,1.166,1361,1.166,1362,1.166,1363,1.166,1364,1.166,1365,1.122,1366,1.166,1367,1.911,1368,1.166,1369,1.122,1370,1.166,1371,1.802,1372,1.166,1373,2.428,1374,1.839,1375,1.166,1376,1.166,1377,3.327,1378,1.166,1379,1.911,1380,1.166,1381,1.166,1382,1.911,1383,2.428,1384,2.428,1385,1.911,1386,2.428,1387,2.807,1388,1.166,1389,1.911,1390,2.701,1391,1.166,1392,1.911,1393,1.166,1394,1.166,1395,1.166,1396,0.699,1397,1.166,1398,1.166,1399,1.166,1400,1.166,1401,1.166,1402,1.166,1403,1.911,1404,1.911,1405,1.911,1406,1.911,1407,2.428,1408,1.166,1409,1.166,1410,1.166,1411,1.166,1412,1.911,1413,1.911,1414,2.807,1415,1.166,1416,1.166,1417,1.166,1418,1.166,1419,1.911,1420,2.807,1421,2.807,1422,0.891,1423,1.166,1424,2.428,1425,1.166,1426,1.122,1427,1.839,1428,1.166,1429,1.166,1430,1.166,1431,1.166,1432,1.166,1433,1.166,1434,1.166,1435,1.166,1436,1.166,1437,1.166,1438,1.166,1439,1.122,1440,1.166,1441,1.166,1442,1.911,1443,1.166,1444,1.166,1445,1.166,1446,1.082,1447,1.166,1448,1.166,1449,1.166,1450,1.166,1451,1.044,1452,1.166,1453,1.082,1454,1.166,1455,1.166,1456,1.166,1457,1.166,1458,0.947,1459,1.166,1460,1.166,1461,1.166,1462,1.166,1463,1.166,1464,1.166,1465,1.166,1466,1.166,1467,1.166,1468,1.166,1469,1.166,1470,1.166,1471,0.842,1472,1.166,1473,1.911,1474,1.911,1475,1.911,1476,1.166,1477,2.428,1478,2.807,1479,1.911,1480,1.166,1481,1.166,1482,1.166,1483,1.166,1484,1.166,1485,1.166,1486,1.166,1487,1.082,1488,1.166,1489,1.166,1490,1.166,1491,0.699,1492,1.166,1493,1.166,1494,1.166,1495,1.166,1496,1.166,1497,1.166,1498,2.428,1499,0.977,1500,1.166,1501,1.166,1502,1.166,1503,1.166,1504,1.166,1505,1.166,1506,1.166,1507,1.166,1508,1.166,1509,2.513,1510,1.166,1511,1.166,1512,1.122,1513,1.166,1514,1.166,1515,1.166,1516,1.911,1517,1.166,1518,1.166,1519,1.166,1520,1.166,1521,1.911,1522,1.166,1523,1.166,1524,1.166,1525,1.166,1526,1.166,1527,1.166,1528,1.166,1529,1.166,1530,1.166,1531,1.166,1532,1.166,1533,1.166,1534,1.166,1535,1.166,1536,1.166,1537,1.166,1538,1.122,1539,1.122,1540,1.166,1541,1.166,1542,1.911,1543,1.911,1544,1.551,1545,1.911,1546,1.839,1547,1.166,1548,1.166,1549,1.911,1550,1.166,1551,1.911,1552,1.166,1553,1.166,1554,1.166,1555,1.166,1556,1.166,1557,1.166,1558,1.122,1559,1.166,1560,1.122,1561,1.166,1562,1.166,1563,1.166,1564,1.911,1565,1.166,1566,1.166,1567,1.166,1568,1.166,1569,1.166,1570,1.166,1571,1.166,1572,1.166,1573,1.166,1574,1.911,1575,2.807,1576,2.428,1577,1.166,1578,1.166,1579,1.166,1580,1.166,1581,1.911,1582,1.166,1583,1.166,1584,1.166,1585,1.166,1586,1.166,1587,1.166,1588,1.166,1589,1.911,1590,1.166,1591,1.166,1592,1.166,1593,0.977,1594,1.166,1595,1.166,1596,1.166,1597,1.166,1598,1.166,1599,1.166,1600,1.166,1601,1.166,1602,1.166,1603,1.166,1604,1.166,1605,1.166,1606,1.166,1607,2.807,1608,1.166,1609,1.166,1610,1.166,1611,1.166,1612,1.166,1613,1.166,1614,1.122,1615,1.166,1616,1.166,1617,1.911,1618,1.166,1619,1.911,1620,1.166,1621,1.166,1622,1.911,1623,1.166,1624,1.166,1625,1.166,1626,1.166,1627,1.166,1628,2.428,1629,1.166,1630,1.166,1631,1.166,1632,1.839,1633,1.166,1634,1.166,1635,1.166,1636,1.166,1637,1.166,1638,1.166,1639,1.166,1640,1.166,1641,1.166,1642,1.166,1643,0.977,1644,1.166,1645,1.166,1646,1.166,1647,0.977,1648,1.166,1649,1.166,1650,1.911,1651,3.097,1652,1.01,1653,1.166,1654,1.166,1655,1.166,1656,1.166,1657,1.166,1658,1.166,1659,1.911,1660,1.166,1661,1.166,1662,1.839,1663,1.166,1664,1.082,1665,1.166,1666,1.166,1667,1.166,1668,1.166,1669,1.166,1670,1.166]],["title/interfaces/ColumnRendererSpec.html",[0,0.058,770,1.457]],["body/interfaces/ColumnRendererSpec.html",[0,0.11,2,0.778,3,0.087,4,0.07,5,0.061,8,0.237,9,2.269,12,0.159,13,0.516,15,2.669,18,0.309,19,0.009,20,1.074,21,3.625,22,2.975,26,0.187,27,2.121,30,1.973,34,1,35,1.135,36,1.369,38,1.965,39,2.958,40,2.626,43,1.839,47,2.05,50,0.947,52,1.204,55,2.771,57,1.056,58,1.956,59,0.589,60,0.742,61,1.604,64,1.221,65,2.176,66,1.337,67,2.118,72,1.089,73,2.924,75,0.471,76,1.384,77,0.077,78,1.629,79,1.584,82,1.643,84,1.018,89,2.924,90,1.221,94,0.955,97,0.69,98,1.384,100,2.403,110,1.839,112,1.849,113,0.813,116,1.108,117,2.53,118,3.087,122,1.282,123,3.332,124,1.643,125,2.112,126,0.51,127,2.848,128,2.176,129,0.718,131,1.782,132,2.442,133,2.112,134,1.86,135,1.584,136,2.112,137,2.118,139,2.036,141,2.984,143,2.112,145,0.004,146,0.006,147,0.004,148,0.595,150,0.875,161,2.286,192,0.572,194,1.162,195,1.251,196,1.982,198,0.566,200,1.251,208,3.275,219,3.231,222,1.956,225,1.584,234,3.221,240,1.677,246,2.008,270,0.44,278,0.409,284,0.572,320,1.684,330,1.191,367,0.917,369,1.566,386,1.282,396,1.275,408,1.056,425,1.748,439,2.121,451,0.742,454,2.008,502,1.135,503,1.142,515,2.286,524,1.773,566,1.349,619,1.251,643,1.965,648,1.812,681,1.315,703,1.584,713,0.961,752,1.629,754,2.341,755,2.82,756,1.162,758,2.102,759,2.021,760,2.302,761,2.809,765,1.965,768,1.421,770,2.565,792,1.349,803,2.112,804,2.112,805,2.388,806,2,807,2.37,808,2.524,809,3.374,810,2.67,811,3.102,812,3.747,813,2.036,814,1.677,815,3.461,816,1.677,817,1.677,818,3.336,819,1.584,820,1.221,821,1.54,822,1.459,823,1.956,824,1.629,825,1.493,826,1.956,827,2.342,828,2.302,829,3.909,830,3.913,831,3.747,832,2.876,833,1.459,834,2.465,835,2.848,836,2.524,837,3.913,838,3.5,839,4.253,840,3.102,841,2.388,842,2.238,843,2.302,844,2.228,845,2.388,846,2.595,847,2.388,848,2.388,849,1.677,850,1.677,851,2.036,852,1.584,853,1.677,854,2.286,855,3.336,856,2.05,857,2.388,858,2.195,859,2.302,860,2.743,861,1.315,862,2.456,863,1.384,864,1.677,865,2.388,866,2.061,867,3.913,868,3.374,869,3.374,870,3.374,871,1.529,872,2.388,873,2.388,874,2.155,875,2.388,876,3.102,877,1.768,878,1.677,879,1.349,880,1.965,881,1.839,882,2.388,883,2.195,884,2.388,885,2.195,886,1.251,887,1.421,888,2.388,889,1.315,890,2.388,891,2.112,892,1.584,893,2.286,894,2.388,895,2.388,896,1.54,897,1.728,898,2.286,899,2.195,900,2.388,901,1.54,902,2.286,903,2.388,904,3.102,905,1.135,906,1.421,907,2.036,908,2.112,909,3.374,910,2.388,911,1.9,912,1.839,913,1.629,914,2.286,915,1.629,916,2.036,917,1.629,918,1.677,919,1.629,920,1.728,921,1.965,922,2.036,923,1.965,924,2.036,925,2.036,926,1.728,927,2.286]],["title/classes/CommonUtil.html",[77,0.052,1671,3.289]],["body/classes/CommonUtil.html",[3,0.145,4,0.116,5,0.102,8,0.396,12,0.265,14,0.635,18,0.294,19,0.009,25,2.166,26,0.145,60,1.463,77,0.079,84,1.03,122,2.53,126,0.723,127,2.802,129,1.067,145,0.007,146,0.008,147,0.007,178,1.144,192,0.676,198,0.764,213,0.872,214,1.363,215,0.717,241,1.395,245,1.429,278,0.484,378,1.989,954,2.583,1170,6.309,1671,5.856,1672,6.915,1673,5.856,1674,7.836,1675,7.836,1676,7.863,1677,6.636,1678,7.836,1679,7.836,1680,8.615,1681,7.836,1682,6.915,1683,6.915,1684,6.636]],["title/interfaces/ComponentRenderer.html",[0,0.058,752,1.805]],["body/interfaces/ComponentRenderer.html",[0,0.102,2,1.259,3,0.14,4,0.113,5,0.099,8,0.383,12,0.257,13,0.56,18,0.318,19,0.009,26,0.18,50,1.013,52,0.891,57,2.188,64,1.975,87,2.797,107,0.914,113,0.863,145,0.006,146,0.008,147,0.006,148,0.627,150,1.694,151,2.305,196,2.091,213,0.845,248,2.482,270,0.4,271,0.655,320,1.735,369,1.793,391,2.637,402,2.884,425,1.966,451,1.436,570,3.18,689,3.7,752,3.374,770,2.128,773,5.747,826,2.679,827,2.128,835,3.049,856,2.024,858,3.552,860,2.981,861,2.128,912,2.976,1316,2.637,1647,3.947,1664,3.294,1685,4.805,1686,4.805,1687,6.786,1688,5.978,1689,5.674,1690,5.674,1691,6.786,1692,3.7,1693,5.674,1694,5.674,1695,3.552,1696,5.674]],["title/directives/ComponentRendererOutletDirective.html",[322,1.495,369,1.227]],["body/directives/ComponentRendererOutletDirective.html",[3,0.115,4,0.092,5,0.081,8,0.314,9,2.215,12,0.21,13,0.495,14,0.72,17,5.271,18,0.314,19,0.009,26,0.115,33,6.554,36,1.107,50,0.91,52,0.729,55,3.011,57,2.112,59,0.863,66,1.394,77,0.063,87,2.954,107,1.13,110,3.143,145,0.005,146,0.007,147,0.005,148,0.645,163,5.271,164,2.632,165,2.098,166,1.299,172,1.783,178,0.991,185,2.138,188,2.954,192,0.884,194,1.54,196,1.777,213,1.044,214,1.544,215,0.813,270,0.423,271,0.536,278,0.495,284,0.536,321,1.878,322,2.697,368,1.54,369,1.894,396,1.33,402,3.046,408,1.806,451,0.983,480,1.834,568,2.138,623,2.047,752,2.159,753,2.785,756,1.987,757,6.395,761,3.003,767,2.361,768,1.882,770,2.248,792,2.553,826,2.619,827,2.836,835,2.428,859,2.785,892,2.098,1077,2.984,1316,3.596,1340,4.07,1344,4.222,1427,2.798,1652,2.517,1697,7.739,1698,4.645,1699,6.791,1700,5.993,1701,6.791,1702,6.791,1703,6.791,1704,7.943,1705,4.082,1706,8.419,1707,8.679,1708,7.943,1709,6.791,1710,7.943,1711,7.943,1712,5.264,1713,8.419,1714,7.518,1715,7.943,1716,6.791,1717,6.791,1718,7.518,1719,6.053,1720,6.791,1721,5.264,1722,4.762,1723,5.264,1724,5.264,1725,5.264,1726,5.264,1727,5.264,1728,6.791,1729,6.791,1730,5.264,1731,5.264,1732,5.264,1733,7.943,1734,5.264,1735,5.264,1736,5.264,1737,5.264,1738,5.264,1739,5.264,1740,5.264,1741,5.264,1742,5.264,1743,5.264,1744,5.264]],["title/interfaces/ComponentRendererSpec.html",[0,0.058,827,1.457]],["body/interfaces/ComponentRendererSpec.html",[0,0.1,2,1.224,3,0.136,4,0.109,5,0.096,8,0.373,12,0.25,13,0.551,18,0.325,19,0.009,26,0.177,50,1.007,52,1.048,57,1.662,64,2.323,87,3.289,107,1.075,113,0.793,145,0.006,146,0.008,147,0.006,148,0.629,150,1.377,151,1.874,196,2.102,213,0.994,248,2.018,270,0.389,271,0.636,320,1.41,369,2.108,391,3.1,402,3.391,425,2.006,451,1.577,570,3.74,689,3.597,752,3.333,770,2.503,773,6.312,826,2.942,827,2.503,835,3.093,856,2.381,858,3.453,860,3.274,861,2.503,912,2.893,1316,3.1,1647,3.5,1664,3.874,1685,4.671,1686,4.671,1687,5.515,1688,6.064,1689,5.515,1690,6.672,1691,7.453,1692,4.351,1693,5.515,1694,6.672,1695,4.177,1696,5.515,1745,6.25]],["title/interfaces/ContextualButton.html",[0,0.058,842,1.754]],["body/interfaces/ContextualButton.html",[0,0.109,2,0.772,3,0.086,4,0.069,5,0.061,8,0.235,9,2.155,12,0.157,13,0.514,15,2.807,18,0.311,19,0.009,20,1.068,21,3.612,22,2.966,26,0.187,27,2.114,30,2.046,34,0.995,35,1.126,36,1.363,38,1.949,39,2.994,40,2.665,43,1.824,47,2.041,50,0.946,52,1.223,55,2.763,57,1.048,58,1.945,59,0.586,60,0.736,61,1.126,64,1.211,65,2.164,66,1.331,67,2.807,72,1.086,73,2.982,75,0.477,76,1.373,77,0.077,78,1.616,79,1.571,82,1.633,84,1.016,89,2.918,90,1.211,94,0.952,97,0.685,98,1.373,100,2.394,110,1.824,112,1.969,113,0.781,116,1.557,117,2.903,118,3.147,122,1.272,123,3.329,124,1.633,125,2.095,126,0.508,127,2.841,128,2.164,129,0.714,131,1.768,132,2.428,133,2.095,134,1.852,135,1.571,136,2.095,137,2.105,139,2.019,141,2.967,143,2.095,145,0.004,146,0.006,147,0.004,148,0.57,150,0.868,161,2.268,192,0.568,194,1.153,195,1.241,196,1.827,198,0.563,200,1.241,208,3.263,219,3.212,222,1.945,225,1.571,234,3.206,240,1.664,246,1.996,270,0.439,278,0.407,284,0.568,320,1.679,330,1.181,367,0.91,369,1.099,386,1.272,396,1.27,408,1.048,425,1.679,439,2.114,451,0.736,454,1.409,502,1.126,503,1.138,515,2.268,524,1.765,566,1.338,619,1.241,643,1.949,648,1.802,681,1.305,703,1.571,713,0.954,752,1.616,754,2.326,755,2.584,756,1.153,758,2.092,759,2.014,760,2.289,761,2.756,765,1.949,768,1.409,770,2.463,792,1.338,803,2.095,804,2.095,805,2.369,806,1.991,807,2.357,808,2.996,809,3.896,810,2.658,811,3.084,812,3.73,813,2.019,814,1.664,815,3.747,816,1.664,817,1.664,818,3.321,819,1.571,820,1.211,821,1.528,822,1.447,823,1.945,824,1.616,825,1.484,826,1.945,827,2.146,828,2.289,829,3.895,830,3.896,831,3.73,832,2.86,833,1.447,834,2.456,835,2.661,836,2.513,837,3.896,838,3.681,839,4.473,840,3.084,841,3.355,842,2.584,843,2.289,844,2.22,845,2.369,846,2.584,847,2.369,848,2.369,849,1.664,850,1.664,851,2.019,852,1.571,853,1.664,854,2.268,855,2.86,856,1.758,857,2.369,858,2.177,859,2.289,860,2.733,861,1.305,862,2.445,863,1.373,864,1.664,865,2.369,866,2.05,867,3.896,868,3.355,869,3.355,870,3.355,871,1.52,872,2.369,873,2.369,874,2.146,875,2.369,876,3.084,877,1.758,878,1.664,879,1.338,880,1.949,881,1.824,882,2.369,883,2.177,884,2.369,885,2.177,886,1.241,887,1.409,888,2.369,889,1.305,890,2.369,891,2.095,892,1.571,893,2.268,894,2.369,895,2.369,896,1.528,897,1.714,898,2.268,899,2.177,900,2.369,901,1.528,902,2.268,903,2.369,904,3.084,905,1.126,906,1.409,907,2.019,908,2.095,909,3.355,910,2.369,911,1.885,912,1.824,913,1.616,914,2.268,915,1.616,916,2.019,917,1.616,918,1.664,919,1.616,920,1.714,921,1.949,922,2.019,923,1.949,924,2.019,925,2.019,926,1.714,927,2.268]],["title/interfaces/ContextualButtonConfig.html",[0,0.058,846,1.754]],["body/interfaces/ContextualButtonConfig.html",[0,0.109,2,0.754,3,0.084,4,0.067,5,0.059,8,0.23,9,2.201,12,0.154,13,0.508,14,0.734,15,2.892,18,0.312,19,0.009,20,1.334,21,3.574,22,2.939,26,0.186,27,2.091,30,1.955,34,1.132,35,1.099,36,1.612,38,1.903,39,2.936,40,2.604,43,2.54,47,2.014,50,0.94,52,1.168,55,2.742,57,1.023,58,1.912,59,0.576,60,0.719,61,1.099,64,1.182,65,2.127,66,1.314,67,2.07,72,1.076,73,2.925,75,0.475,76,1.341,77,0.076,78,1.578,79,1.534,82,1.606,84,1.008,89,2.897,90,1.182,94,0.941,97,0.668,98,1.912,100,2.504,110,1.781,112,1.827,113,0.805,116,1.073,117,2.742,118,3.374,122,1.772,123,3.432,124,1.872,125,2.917,126,0.618,127,2.936,128,2.972,129,0.819,131,2.462,132,2.783,133,2.917,134,1.992,135,2.188,136,3.707,137,2.631,139,1.972,141,2.917,143,2.045,145,0.004,146,0.005,147,0.004,148,0.566,150,0.848,161,2.214,192,0.559,194,1.126,195,1.212,196,1.812,198,0.556,200,1.212,208,3.229,219,3.158,222,1.912,225,1.534,234,3.165,240,1.625,246,1.963,270,0.434,278,0.4,284,0.559,320,1.663,330,1.154,367,0.889,369,1.073,386,1.242,396,1.253,408,1.023,425,1.663,439,2.091,451,0.719,454,1.376,502,1.099,503,1.033,515,2.214,524,1.742,566,1.307,619,1.212,643,1.903,648,2.475,681,1.274,703,1.534,713,0.931,752,1.578,754,2.32,755,2.55,756,1.126,758,2.065,759,1.992,760,2.251,761,2.739,765,1.903,768,1.376,770,2.441,792,1.864,803,2.045,804,2.045,805,2.313,806,2.143,807,2.317,808,2.48,809,3.299,810,2.623,811,3.032,812,3.681,813,1.972,814,1.625,815,3.4,816,1.625,817,1.625,818,3.278,819,1.534,820,1.182,821,1.492,822,1.413,823,1.912,824,1.578,825,1.459,826,1.912,827,2.118,828,2.251,829,3.853,830,3.845,831,3.681,832,2.812,833,1.413,834,2.43,835,2.637,836,2.48,837,3.845,838,3.45,839,4.192,840,3.032,841,2.313,842,2.78,843,2.86,844,2.196,845,3.299,846,2.78,847,3.299,848,2.313,849,2.317,850,2.317,851,1.972,852,1.534,853,1.625,854,2.214,855,2.812,856,1.728,857,2.313,858,2.126,859,2.251,860,2.704,861,1.274,862,2.413,863,1.341,864,1.625,865,2.313,866,2.015,867,3.845,868,3.299,869,3.299,870,3.299,871,1.495,872,2.313,873,2.313,874,2.118,875,2.313,876,3.032,877,1.728,878,1.625,879,1.307,880,1.903,881,1.781,882,2.313,883,2.126,884,2.313,885,2.126,886,1.212,887,1.376,888,2.313,889,1.274,890,2.313,891,2.045,892,1.534,893,2.214,894,2.313,895,2.313,896,1.492,897,1.674,898,2.214,899,2.126,900,2.313,901,1.492,902,2.214,903,2.313,904,3.032,905,1.099,906,1.376,907,1.972,908,2.045,909,3.299,910,2.313,911,1.84,912,1.781,913,1.578,914,2.214,915,1.578,916,1.972,917,1.578,918,1.625,919,1.578,920,1.674,921,1.903,922,1.972,923,1.903,924,1.972,925,1.972,926,1.674,927,2.214,1746,3.848]],["title/injectables/CsvExporterService.html",[1747,2.533,1748,3.086]],["body/injectables/CsvExporterService.html",[3,0.11,4,0.088,5,0.125,8,0.44,12,0.202,14,0.706,18,0.276,19,0.009,20,0.966,26,0.161,35,2.233,36,1.062,50,0.578,52,1.083,57,1.343,59,0.694,60,1.555,75,0.498,77,0.06,82,2.156,84,1.144,94,1.095,99,2.209,100,1.715,113,0.694,129,0.646,142,3.305,144,1.062,145,0.008,146,0.007,147,0.005,178,0.965,192,0.75,194,1.478,198,0.64,213,1.067,214,1.513,215,0.877,241,1.062,245,0.921,270,0.314,271,0.514,278,0.627,284,0.826,387,3.514,454,2.364,481,5.933,549,2.057,594,2.588,617,2.498,650,4.319,689,4.241,733,1.177,755,3.116,834,2.901,856,2.082,866,1.854,878,2.132,879,2.655,883,2.79,886,2.082,1089,3.161,1280,3.867,1371,2.071,1652,2.415,1747,3.804,1748,4.635,1749,3.774,1750,4.499,1751,5.843,1752,3.774,1753,6.61,1754,6.61,1755,5.322,1756,6.61,1757,6.503,1758,5.05,1759,7.369,1760,6.611,1761,7.818,1762,6.295,1763,6.9,1764,7.486,1765,6.504,1766,6.504,1767,4.118,1768,7.593,1769,6.61,1770,6.703,1771,5.05,1772,3.973,1773,5.322,1774,5.322,1775,6.533,1776,6.61,1777,5.05,1778,6.504,1779,5.05,1780,5.05,1781,5.05,1782,5.834,1783,5.05,1784,5.05,1785,6.61,1786,5.05,1787,4.457,1788,5.05,1789,5.05,1790,2.906,1791,4.066,1792,5.05,1793,5.05,1794,5.05,1795,5.05,1796,6.61,1797,5.05,1798,5.05,1799,5.05,1800,5.05,1801,5.05,1802,5.05,1803,5.05,1804,4.066,1805,3.774,1806,4.457,1807,5.05,1808,5.05,1809,4.457,1810,4.457,1811,5.05,1812,5.05,1813,5.05,1814,4.457,1815,7.347,1816,5.834,1817,5.834,1818,4.457,1819,6.504,1820,3.181,1821,4.066,1822,5.322,1823,4.457,1824,6.61,1825,5.05,1826,3.347,1827,5.05,1828,5.05,1829,5.05,1830,5.05,1831,4.066,1832,5.05,1833,5.05,1834,5.05,1835,5.05,1836,5.05,1837,4.457,1838,4.457,1839,4.457,1840,4.457,1841,5.05]],["title/interfaces/DataExportRequestEvent.html",[0,0.058,1842,3.289]],["body/interfaces/DataExportRequestEvent.html",[0,0.074,2,0.768,3,0.141,4,0.069,5,0.108,8,0.234,12,0.157,13,0.405,18,0.228,19,0.009,20,1.237,26,0.177,27,1.176,30,1.912,34,0.854,35,1.121,36,1.17,40,2.398,50,0.741,52,0.975,58,2.451,59,0.81,60,1.608,62,1.403,66,1.143,72,1.247,73,2.554,75,0.384,77,0.047,82,1.148,84,0.731,85,3.553,94,1.071,95,2.932,97,1.291,99,2.473,106,2.389,107,1.265,111,3.257,112,1.743,113,0.412,126,0.582,132,2.42,140,2.099,144,1.359,145,0.004,146,0.006,147,0.004,148,0.39,166,0.75,167,0.806,168,1.521,170,1.148,172,1.588,198,0.611,205,1.876,215,0.601,216,2.282,225,1.564,238,3.159,241,1.359,245,0.715,270,0.48,271,0.399,278,0.648,284,0.786,333,1.521,344,1.64,347,0.906,386,2.617,390,2.751,412,2.6,425,1.255,435,2.661,436,1.521,457,1.752,480,1.367,502,1.121,511,2.813,513,4.218,525,2.9,537,1.299,578,1.148,605,1.299,623,1.068,649,1.44,652,1.043,667,3.35,679,3.887,683,2.42,703,2.218,713,0.949,716,2.271,725,1.299,733,1.533,754,2.004,758,2.617,760,1.609,790,2.751,792,1.889,834,1.367,861,2.14,862,1.48,877,1.752,897,1.706,981,3.074,990,1.609,1016,1.521,1033,2.471,1040,1.48,1045,1.709,1046,2.043,1061,1.521,1070,2.9,1076,2.751,1201,1.48,1216,1.266,1241,3.605,1245,2.993,1247,2.312,1249,1.609,1253,1.094,1256,1.99,1257,1.76,1266,1.816,1280,1.941,1356,2.851,1471,1.564,1487,2.01,1705,2.358,1748,4.534,1750,2.258,1757,4.158,1760,5.766,1762,5.665,1770,3.159,1773,4.48,1774,3.159,1775,3.159,1805,4.158,1842,4.158,1843,2.471,1844,2.932,1845,4.48,1846,6.556,1847,6.81,1848,6.556,1849,5.706,1850,4.91,1851,4.91,1852,4.91,1853,4.91,1854,5.93,1855,5.706,1856,6.641,1857,2.932,1858,3.156,1859,4.91,1860,3.462,1861,3.462,1862,3.159,1863,3.462,1864,1.876,1865,3.159,1866,4.48,1867,4.48,1868,5.981,1869,3.159,1870,3.462,1871,3.462,1872,2.471,1873,3.462,1874,5.706,1875,2.751,1876,2.932,1877,3.159,1878,3.462,1879,3.462,1880,3.462,1881,3.462,1882,3.462,1883,3.462,1884,4.91,1885,5.706,1886,3.462,1887,3.462,1888,2.751,1889,3.462,1890,3.462,1891,3.462,1892,3.462,1893,3.159,1894,3.462,1895,3.462,1896,3.462,1897,3.462,1898,3.462,1899,3.462,1900,3.462,1901,3.462,1902,3.462,1903,3.462,1904,3.462,1905,3.462,1906,5.706,1907,4.263,1908,3.462,1909,3.462,1910,3.462,1911,3.462,1912,4.158,1913,3.462,1914,3.462,1915,3.462,1916,3.462,1917,3.462,1918,3.462,1919,3.462,1920,3.462,1921,3.462,1922,3.462,1923,3.462,1924,3.462,1925,3.462,1926,3.462,1927,4.832,1928,3.462,1929,4.48,1930,3.462,1931,4.48,1932,3.462,1933,4.91,1934,3.159,1935,3.159,1936,4.91,1937,3.462,1938,3.462,1939,3.462,1940,5.706,1941,3.462,1942,4.91,1943,3.462,1944,3.462,1945,3.462,1946,3.462,1947,6.209,1948,3.462,1949,3.462,1950,3.462,1951,3.462,1952,4.91,1953,3.462,1954,3.462,1955,3.462,1956,3.462,1957,3.462,1958,3.462,1959,3.462,1960,3.462,1961,3.462,1962,3.462,1963,3.462,1964,3.462,1965,3.462,1966,5.706,1967,3.462,1968,3.462,1969,3.462,1970,3.462,1971,3.462,1972,3.462,1973,3.462,1974,3.462,1975,3.462,1976,3.462,1977,3.462,1978,1.941,1979,3.462,1980,3.462,1981,3.462,1982,3.462,1983,3.462,1984,4.48,1985,3.462,1986,3.462,1987,3.462,1988,3.462,1989,3.462,1990,3.462,1991,3.462,1992,3.462,1993,3.462,1994,3.462,1995,3.462,1996,3.462,1997,3.462,1998,3.462,1999,3.462,2000,3.462,2001,3.462,2002,3.462,2003,3.462,2004,3.462,2005,3.462,2006,3.462,2007,3.462]],["title/classes/DataExporterWidgetObject.html",[77,0.052,2008,3.544]],["body/classes/DataExporterWidgetObject.html",[3,0.094,4,0.076,5,0.066,8,0.496,12,0.337,13,0.434,14,0.817,18,0.314,19,0.009,25,1.77,26,0.149,34,0.664,35,1.236,50,0.495,57,1.15,59,0.924,60,1.273,66,1.399,71,1.77,72,0.994,73,2.699,75,0.5,77,0.051,80,1.584,82,1.743,83,2.696,84,0.783,94,0.804,107,0.847,117,1.547,124,2.148,126,0.651,129,1.063,132,1.882,134,1.702,140,2.247,142,1.94,144,1.252,145,0.004,146,0.007,147,0.004,148,0.54,153,1.83,166,1.303,167,1.223,178,0.869,188,2.591,192,0.919,198,0.749,200,1.362,201,3.052,205,2.849,213,1.182,214,1.752,215,0.922,216,2.795,221,3.194,241,1.544,245,1.242,270,0.371,278,0.535,321,2.081,333,2.641,358,1.876,367,1.838,378,1.297,391,3.011,396,0.847,411,1.826,425,1.537,439,1.786,503,0.962,525,2.672,526,3.499,547,4.329,548,3.622,549,1.408,550,2.944,551,4.231,552,2.641,553,3.622,554,3.752,555,3.752,556,3.622,557,3.752,558,3.752,559,3.752,563,2.299,564,2.867,565,2.069,566,1.469,567,2.299,568,1.362,569,2.299,570,2.14,571,2.299,572,2.299,573,3.339,574,4.727,575,2.867,576,4.32,577,3.167,578,1.743,579,3.167,580,2.309,581,4.335,582,3.632,583,3.491,584,2.437,585,2.299,586,2.769,587,4.231,588,2.867,589,2.299,590,2.867,591,1.94,592,2.374,593,2.672,594,3.052,595,2.299,596,2.867,597,2.591,598,2.14,599,2.299,600,2.867,601,2.299,602,2.299,603,2.867,604,1.547,605,1.432,606,2.299,607,2.299,608,2.867,609,2.299,610,2.299,611,2.867,612,2.299,613,3.052,614,2.216,615,2.299,616,2.069,617,2.14,618,2.299,619,1.362,620,3.167,621,2.299,622,2.867,623,1.178,624,2.299,716,1.923,754,2.286,787,3.817,893,3.428,1232,2.375,1271,1.774,1426,3.167,1750,4.91,1843,5.374,1856,5.911,1877,4.796,1893,4.796,1907,3.765,2008,4.796,2009,3.817,2010,3.167,2011,7.342,2012,5.957,2013,7.342,2014,7.342,2015,6.814,2016,6.814,2017,6.814,2018,4.326,2019,4.326,2020,5.957,2021,4.326,2022,4.326,2023,5.957,2024,5.957,2025,4.326,2026,5.957,2027,4.326,2028,4.326,2029,4.326,2030,5.957,2031,5.957,2032,4.326,2033,4.326,2034,7.342,2035,3.948,2036,4.326,2037,4.326,2038,4.177,2039,3.817,2040,4.326,2041,5.957,2042,5.957,2043,4.326,2044,5.957,2045,4.326,2046,4.326,2047,4.326,2048,4.326]],["title/classes/DatagridFilter.html",[77,0.052,1258,1.457]],["body/classes/DatagridFilter.html",[0,0.075,3,0.087,4,0.07,5,0.061,8,0.237,9,2.27,12,0.159,13,0.475,14,0.678,18,0.316,19,0.009,26,0.163,35,1.137,36,0.837,45,3.971,47,1.254,50,0.981,52,0.903,59,0.868,60,0.743,61,2.023,66,1.154,75,0.458,77,0.067,94,0.956,97,1.132,107,1.007,109,2.179,110,1.843,112,1.393,113,0.899,116,1.568,126,0.585,129,0.956,144,0.837,145,0.004,146,0.006,147,0.004,148,0.571,150,1.646,172,1.277,178,1.034,185,2.23,188,2.446,192,0.91,196,2.025,198,0.777,213,1.115,214,1.454,215,0.766,240,1.681,248,2.286,270,0.506,271,0.405,278,0.581,284,0.664,335,1.495,338,1.531,341,1.387,345,1.387,351,1.727,361,1.568,369,1.975,378,2.389,387,2.988,389,2.781,396,0.78,408,1.986,425,1.268,436,3.005,439,1.686,447,3.506,451,1.05,503,1.052,550,2.808,566,1.352,568,1.77,578,2.332,592,2.836,623,1.531,643,1.969,649,1.462,652,1.495,679,3.106,699,2.881,703,1.587,713,1.714,725,1.318,733,1.26,752,2.904,754,1.693,756,1.165,759,1.137,761,1.909,767,1.785,768,1.424,806,2.002,808,2.745,822,2.393,823,2.467,825,2.398,826,1.959,827,2.158,835,2.671,855,2.04,856,2.052,859,2.306,860,3.37,863,2.271,871,1.084,874,1.861,878,2.374,887,2.01,889,1.861,901,1.543,911,1.904,912,1.843,913,1.633,916,2.04,917,1.633,918,3.494,920,1.732,921,1.969,922,2.04,923,1.969,924,2.04,925,2.04,926,1.732,954,1.193,1040,2.121,1041,3.106,1045,2.002,1046,2.393,1061,2.179,1201,2.671,1208,2.291,1216,2.286,1238,2.446,1247,2.01,1253,1.11,1254,1.732,1255,1.785,1256,2.671,1257,1.785,1258,2.158,1271,2.306,1302,1.904,1327,1.587,1329,2.896,1330,2.752,1332,1.785,1396,1.318,1422,2.374,1471,2.241,1688,3.942,1692,3.235,1705,2.393,1772,3.918,1858,3.65,1864,2.689,2049,3.761,2050,2.638,2051,4.526,2052,4.202,2053,4.526,2054,4.461,2055,6.242,2056,5.248,2057,4.105,2058,4.257,2059,3.503,2060,3.764,2061,3.942,2062,3.942,2063,3.541,2064,3.503,2065,5.622,2066,2.116,2067,3.981,2068,3.379,2069,4.461,2070,3.981,2071,4.105,2072,3.981,2073,3.981,2074,3.541,2075,3.981,2076,3.379,2077,3.981,2078,3.541,2079,3.981,2080,3.235,2081,3.106,2082,3.981,2083,3.541,2084,3.541,2085,3.981,2086,3.981,2087,2.988,2088,3.981,2089,3.379,2090,3.541,2091,3.541,2092,4.461,2093,3.235,2094,3.981,2095,2.781,2096,5.622,2097,3.981,2098,3.981,2099,3.981,2100,3.981,2101,3.981,2102,3.205,2103,3.205,2104,3.205,2105,2.975,2106,2.975,2107,2.975,2108,3.942,2109,2.975,2110,3.205,2111,3.205,2112,3.205,2113,3.205,2114,3.205,2115,3.205,2116,5.248,2117,3.205,2118,3.205,2119,3.205,2120,3.205,2121,3.205,2122,3.205,2123,3.205,2124,3.205,2125,3.205,2126,3.205,2127,2.638,2128,2.602,2129,4.526,2130,3.205,2131,2.638,2132,2.975,2133,2.975,2134,2.638,2135,2.638,2136,2.975,2137,2.975]],["title/components/DatagridMultiSelectFilterComponent.html",[148,0.309,337,1.616]],["body/components/DatagridMultiSelectFilterComponent.html",[0,0.083,3,0.08,4,0.064,5,0.057,8,0.22,9,1.483,12,0.147,13,0.387,14,0.694,18,0.303,19,0.009,20,1.307,26,0.149,31,1.601,34,1.049,36,1.118,45,2.826,50,0.783,52,0.51,59,0.866,60,0.688,61,1.052,63,1.159,65,2.061,72,0.537,75,0.465,77,0.044,78,2.18,80,1.414,84,0.699,90,1.634,94,0.923,97,0.64,107,0.524,112,0.912,113,0.837,116,1.741,126,0.592,129,0.928,138,3.046,145,0.004,146,0.005,147,0.004,148,0.48,149,1.51,150,1.172,151,1.104,153,1.131,154,1.468,165,1.468,166,1.715,167,1.819,170,1.556,172,1.041,178,0.776,185,1.965,192,0.918,196,1.996,198,0.777,213,1.143,214,1.488,215,0.912,245,0.671,248,2.34,270,0.485,271,0.375,278,0.55,284,0.636,319,1.219,320,1.704,321,1.257,322,1.25,323,3.164,324,1.704,325,1.704,326,1.131,327,1.189,328,1.483,329,2.461,330,1.104,331,1.554,332,1.704,333,1.427,334,1.704,335,1.66,336,1.704,337,2.86,338,2.057,339,3.28,340,3.164,341,1.283,342,1.389,343,1.427,344,2.061,345,1.283,346,1.51,347,0.85,348,1.704,349,1.554,350,1.427,351,2.496,352,1.704,353,1.427,354,2.461,355,1.389,356,1.704,357,1.51,358,1.159,359,1.704,360,1.352,361,1.741,362,1.554,363,1.131,364,1.189,365,1.51,366,1.317,367,0.85,368,1.077,369,1.483,370,1.704,371,1.389,372,1.651,373,1.704,374,1.352,375,1.601,376,1.704,378,1.871,387,1.957,389,1.821,396,1.041,408,0.979,436,2.419,439,1.104,447,3.288,451,0.688,454,1.317,480,1.283,502,1.952,503,1.17,526,3.521,550,2.689,568,1.159,578,2,592,2.526,597,1.601,623,1.003,652,1.414,656,2.232,667,2.635,707,2.213,713,1.287,725,1.219,726,2.937,727,2.582,728,2.213,729,2.44,733,1.419,737,2.582,754,1.381,756,1.556,758,1.716,759,1.519,760,2.18,761,1.805,806,1.634,808,3.019,813,2.724,822,1.952,823,2.526,825,2.325,859,1.51,860,2.65,861,1.76,863,1.283,871,1.448,874,1.219,878,1.554,881,2.461,887,1.317,889,1.219,905,1.783,918,2.245,982,1.886,1016,2.419,1033,4.305,1040,1.389,1041,2.034,1045,1.917,1061,1.427,1077,1.283,1201,2.354,1216,2.514,1232,1.468,1238,1.601,1247,1.317,1253,1.027,1256,2.232,1258,2.908,1281,2.313,1311,3.098,1316,2.18,1322,1.352,1329,2.061,1330,1.554,1371,1.51,1396,1.219,1422,1.554,1471,1.468,1491,1.219,1643,1.704,1692,2.119,1722,2.582,1772,2.213,1858,3.786,1864,1.761,1907,3.776,1978,1.821,2038,3.728,2049,3.482,2054,4.305,2057,3.349,2058,3.751,2059,3.852,2060,4.14,2061,3.944,2062,4.793,2063,2.319,2064,3.381,2066,2.826,2068,2.213,2069,3.349,2071,3.349,2074,2.319,2076,2.213,2078,2.319,2080,2.119,2081,2.937,2083,2.319,2084,2.319,2087,3.317,2089,2.213,2090,2.319,2091,2.319,2092,3.349,2093,2.119,2095,1.821,2138,1.704,2139,3.381,2140,3.524,2141,3.974,2142,4.53,2143,3.974,2144,3.974,2145,2.937,2146,3.682,2147,2.751,2148,3.682,2149,3.682,2150,3.682,2151,3.682,2152,3.682,2153,4.53,2154,3.682,2155,3.974,2156,3.524,2157,3.249,2158,2.751,2159,2.751,2160,2.751,2161,2.751,2162,2.751,2163,2.751,2164,2.751,2165,2.751,2166,2.751,2167,4.136,2168,3.682,2169,3.974,2170,2.751,2171,2.751,2172,2.751,2173,2.751,2174,3.317,2175,2.319,2176,1.761,2177,2.034,2178,1.957,2179,4.53,2180,2.319,2181,2.751,2182,3.728,2183,2.751,2184,2.44,2185,2.034,2186,2.582,2187,2.751,2188,2.751,2189,2.751,2190,2.751,2191,2.751,2192,2.751,2193,2.751,2194,3.974,2195,2.751,2196,2.751,2197,2.751,2198,2.751,2199,2.751,2200,2.751,2201,2.751,2202,2.751,2203,2.751,2204,2.751,2205,2.751,2206,2.751,2207,2.751,2208,2.751,2209,2.44,2210,4.281,2211,5.503,2212,3.524]],["title/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.058,2153,2.917]],["body/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.099,2,1.019,3,0.113,4,0.091,5,0.08,12,0.208,13,0.491,18,0.264,19,0.009,20,1.512,26,0.173,31,2.262,34,1.035,36,1.093,50,0.906,52,0.721,59,0.784,65,2.016,75,0.458,77,0.062,78,2.763,80,1.383,84,0.886,90,1.598,94,0.702,107,0.74,113,0.83,116,1.45,126,0.408,129,0.665,138,3.167,145,0.005,146,0.007,147,0.005,148,0.473,166,0.995,167,1.068,170,1.522,192,0.53,196,1.936,198,0.772,215,0.562,245,0.948,248,2.175,270,0.532,271,0.53,278,0.597,284,0.761,320,1.686,335,1.383,337,2.745,338,1.416,339,2.982,344,2.167,351,2.07,396,1.019,454,1.86,480,1.812,502,1.925,503,1.322,550,1.722,592,1.812,597,2.262,652,1.383,656,2.673,667,2.845,707,3.126,713,1.259,725,1.722,726,3.723,727,3.647,728,3.126,729,3.447,733,1.494,737,3.647,754,1.351,756,1.522,758,1.679,759,1.486,760,2.133,761,1.766,806,1.598,808,2.016,813,2.665,822,2.745,823,2.755,825,2.302,861,1.722,871,1.416,881,2.407,905,1.925,982,2.665,1016,2.612,1033,4.708,1045,2.07,1077,1.812,1216,1.679,1232,2.073,1253,1.45,1258,2.231,1281,2.931,1311,3.359,1316,2.133,1322,1.91,1371,2.133,1396,1.722,1491,1.722,1643,2.407,1722,3.647,1858,3.674,1907,4.13,1978,2.573,2038,3.647,2049,2.196,2059,2.573,2060,2.764,2061,2.573,2064,3.333,2066,2.764,2087,2.764,2138,2.407,2139,3.698,2140,3.447,2141,3.887,2142,4.466,2143,3.887,2144,3.887,2145,2.873,2153,4.954,2155,3.887,2156,3.447,2167,4.466,2169,3.887,2174,3.973,2175,3.276,2176,2.487,2177,2.873,2178,2.764,2179,5.562,2180,3.276,2181,3.887,2182,4.725,2183,3.887,2184,3.447,2185,2.873,2186,3.647,2187,3.887,2188,3.887,2189,3.887,2190,3.887,2191,3.887,2192,3.887,2193,3.887,2194,5.036,2195,3.887,2196,3.887,2197,3.887,2198,3.887,2199,3.887,2200,3.887,2201,3.887,2202,3.887,2203,3.887,2204,3.887,2205,3.887,2206,3.887,2207,3.887,2208,3.887,2209,3.447]],["title/components/DatagridNumericFilterComponent.html",[148,0.309,341,1.533]],["body/components/DatagridNumericFilterComponent.html",[0,0.048,3,0.079,4,0.063,5,0.056,9,1.725,12,0.145,13,0.451,14,0.742,18,0.313,19,0.009,26,0.148,27,1.086,36,1.105,40,1.997,45,2.794,50,0.602,52,0.502,59,0.899,60,0.677,61,1.035,63,1.141,72,0.529,75,0.41,77,0.043,84,0.813,86,1.086,94,0.916,97,0.63,99,1.086,107,1.129,112,0.898,113,0.552,116,1.011,126,0.68,129,0.961,138,2.155,140,1.367,145,0.004,146,0.005,147,0.004,148,0.476,149,1.486,150,1.158,151,1.086,152,2.178,153,1.113,154,1.444,165,1.444,166,1.713,167,1.822,168,2.038,170,1.538,172,1.555,178,0.767,185,1.948,188,2.286,192,0.929,196,1.776,198,0.749,213,1.152,214,1.591,215,0.91,241,0.762,245,0.661,248,1.17,270,0.482,271,0.369,278,0.607,284,0.63,314,3.018,319,1.2,320,1.186,321,1.243,322,1.23,323,3.141,324,1.677,325,1.677,326,1.113,327,1.17,328,1.466,329,2.433,330,1.086,331,1.53,332,1.677,333,1.405,334,1.677,335,0.964,336,1.677,337,1.331,338,2.046,339,1.367,340,3.141,341,2.51,342,3.421,343,1.405,344,1.721,345,1.263,346,1.486,347,0.837,348,1.677,349,1.53,350,1.405,351,2.525,352,1.677,353,1.405,354,2.433,355,1.367,356,1.677,357,1.486,358,1.141,359,1.677,360,2.759,361,2.534,362,1.53,363,1.113,364,1.17,365,1.486,366,1.296,367,0.837,368,1.06,369,1.466,370,1.677,371,1.367,372,1.625,373,1.677,374,1.331,375,1.576,376,1.677,378,1.854,387,1.926,389,1.793,408,0.964,436,2.63,439,1.086,447,3.276,451,0.677,454,1.296,480,1.263,503,0.998,526,3.512,550,2.679,568,1.141,578,1.985,592,2.364,623,0.987,650,2.002,652,1.398,667,1.53,681,1.2,699,3.691,713,0.877,725,1.2,733,1.337,797,2.514,808,3.004,822,2.271,823,2.155,825,2.214,844,1.141,859,1.486,860,2.63,863,1.263,874,1.2,878,1.53,887,1.296,889,1.2,905,2.146,918,2.219,980,3.606,981,2.904,1040,1.367,1041,2.002,1045,1.9,1046,2.271,1061,1.405,1077,1.263,1201,2.333,1216,2.502,1238,1.576,1247,1.296,1249,1.486,1253,1.011,1256,2.212,1258,2.902,1271,2.156,1321,1.793,1322,1.331,1329,2.038,1330,1.53,1422,1.53,1471,1.444,1692,2.085,1772,2.178,1858,3.561,1864,1.733,1978,1.793,2049,3.733,2054,4.273,2057,3.311,2058,3.718,2059,3.834,2060,3.288,2061,3.927,2062,4.757,2063,2.282,2064,3.356,2066,2.794,2068,2.178,2069,3.311,2071,3.311,2074,2.282,2076,2.178,2078,2.282,2080,2.085,2081,3.417,2083,2.282,2084,2.282,2087,3.288,2089,2.178,2090,2.282,2091,2.282,2092,3.311,2093,2.085,2095,1.793,2138,1.677,2139,2.6,2145,2.904,2147,2.708,2156,3.484,2157,3.198,2158,2.708,2159,2.708,2160,2.708,2161,2.708,2162,2.708,2163,2.708,2164,2.708,2165,2.708,2166,2.708,2170,2.708,2171,2.708,2172,2.708,2173,2.708,2176,2.514,2177,2.002,2178,1.926,2185,2.002,2213,5.459,2214,5.459,2215,4.98,2216,5.459,2217,5.459,2218,5.459,2219,5.988,2220,6.047,2221,3.624,2222,4.639,2223,5.256,2224,3.624,2225,3.624,2226,3.624,2227,3.624,2228,5.051,2229,3.624,2230,5.8,2231,3.198,2232,3.624,2233,3.198,2234,4.232,2235,4.639,2236,3.198,2237,5.459,2238,3.624,2239,4.639,2240,3.624,2241,3.624,2242,3.624,2243,3.624,2244,3.624,2245,3.624,2246,3.624,2247,2.282,2248,2.541,2249,2.918,2250,3.198,2251,3.198,2252,4.232,2253,5.459,2254,4.98,2255,4.232,2256,4.232,2257,3.198,2258,5.459,2259,3.198,2260,4.639,2261,3.198,2262,3.198,2263,3.198,2264,2.918,2265,3.198,2266,3.198,2267,2.918,2268,3.198,2269,3.198,2270,2.402,2271,4.639,2272,4.639,2273,3.198,2274,3.198,2275,3.198,2276,3.198,2277,3.198,2278,2.708,2279,4.232,2280,4.639,2281,3.624,2282,2.918]],["title/interfaces/DatagridNumericFilterConfig.html",[0,0.058,2228,3.086]],["body/interfaces/DatagridNumericFilterConfig.html",[0,0.069,2,1.022,3,0.114,4,0.091,5,0.08,8,0.311,9,1.883,12,0.208,13,0.577,14,0.758,18,0.289,19,0.009,26,0.173,27,1.564,36,1.42,40,2.18,50,0.773,52,0.723,59,0.831,75,0.285,77,0.062,84,0.984,86,2.025,94,0.704,99,1.564,107,1.195,126,0.701,129,0.668,138,2.353,140,1.968,145,0.005,146,0.007,147,0.005,148,0.474,166,0.998,167,1.072,168,2.023,170,1.527,172,1.323,196,1.596,198,0.73,245,0.951,270,0.532,271,0.531,278,0.643,284,0.762,314,3.242,338,1.421,341,2.353,342,3.224,344,1.713,351,1.603,360,2.749,361,2.585,436,2.618,454,1.866,480,1.818,503,1.208,550,1.727,592,2.353,652,1.388,667,2.203,681,1.727,699,3.836,725,1.727,733,1.409,797,2.495,808,2.023,822,3.011,823,2.608,825,2.18,905,2.139,980,3.589,981,2.883,1045,2.075,1046,2.48,1077,1.818,1216,1.685,1249,2.14,1253,1.455,1258,2.235,1321,2.581,1322,1.916,1858,3.358,1978,2.581,2049,2.203,2059,2.581,2061,2.581,2064,3.34,2066,2.774,2081,2.883,2087,2.774,2138,2.415,2139,3.34,2145,2.883,2156,3.458,2176,3.229,2177,2.883,2178,2.774,2185,2.883,2213,4.605,2214,4.605,2215,4.201,2216,4.605,2217,4.605,2218,4.605,2219,4.605,2220,6.475,2228,5.551,2230,6.028,2235,4.605,2237,4.605,2239,4.605,2247,3.287,2248,3.659,2249,4.201,2250,5.959,2251,4.605,2252,5.437,2253,6.607,2254,6.028,2255,5.437,2256,5.437,2257,4.605,2258,6.607,2259,4.605,2260,5.959,2261,4.605,2262,4.605,2263,4.605,2264,4.201,2265,4.605,2266,4.605,2267,4.201,2268,4.605,2269,4.605,2270,3.458,2271,5.959,2272,5.959,2273,4.605,2274,4.605,2275,4.605,2276,4.605,2277,4.605,2278,3.9]],["title/components/DatagridSelectFilterComponent.html",[148,0.309,343,1.706]],["body/components/DatagridSelectFilterComponent.html",[0,0.051,3,0.084,4,0.067,5,0.059,8,0.228,9,1.525,12,0.153,13,0.398,14,0.666,18,0.303,19,0.009,20,1.22,26,0.139,30,1.355,34,1.175,35,1.562,36,1.149,45,2.906,50,0.797,52,0.53,59,0.845,60,0.715,61,1.093,63,1.205,65,2.119,66,0.786,72,0.559,75,0.454,77,0.046,80,1.454,84,0.838,94,1.033,97,0.95,107,0.907,112,0.948,113,0.772,116,1.779,126,0.652,129,0.979,138,2.898,145,0.004,146,0.005,147,0.004,148,0.488,149,1.57,150,1.205,151,1.147,153,1.176,154,1.526,165,1.526,166,1.722,167,1.827,170,1.6,172,1.249,178,0.798,185,2.008,192,0.915,196,1.862,198,0.792,213,1.143,214,1.429,215,0.886,234,2.704,241,0.805,245,0.698,248,1.236,270,0.476,271,0.39,278,0.574,284,0.557,319,1.267,320,1.233,321,1.292,322,1.3,323,3.221,324,1.772,325,1.772,326,1.176,327,1.236,328,1.525,329,2.531,330,1.147,331,1.616,332,1.772,333,1.484,334,1.772,335,1.696,336,1.772,337,1.405,338,2.084,339,1.444,340,3.221,341,1.333,342,1.444,343,3.054,344,2.278,345,1.333,346,1.57,347,0.884,348,1.772,349,1.616,350,1.484,351,2.42,352,1.772,353,1.484,354,2.531,355,1.444,356,1.772,357,1.57,358,1.205,359,1.772,360,1.405,361,1.779,362,1.616,363,1.176,364,1.236,365,1.57,366,1.369,367,0.884,368,1.12,369,1.525,370,1.772,371,1.444,372,1.717,373,1.772,374,1.405,375,1.665,376,1.772,378,1.912,387,2.034,389,1.893,396,1.071,408,1.018,436,2.472,439,1.147,447,3.316,451,0.715,454,1.369,480,1.333,503,1.029,526,3.543,550,2.714,566,1.3,568,1.205,578,2.036,592,2.564,623,1.042,652,1.454,667,2.308,681,1.267,713,0.926,725,1.267,733,1.31,754,1.42,756,1.6,758,1.765,759,1.562,760,2.242,761,1.856,806,1.68,808,3.054,822,2.007,823,2.564,825,2.358,859,1.57,860,2.697,863,1.333,874,1.267,878,1.616,881,2.531,887,1.369,889,1.267,905,1.822,918,2.308,1040,1.444,1041,2.114,1045,1.96,1046,2.342,1061,1.484,1077,1.333,1201,2.406,1216,2.543,1217,4.086,1238,1.665,1247,1.369,1253,1.067,1256,2.281,1258,2.923,1279,2.801,1311,3.018,1316,2.242,1322,1.405,1329,2.472,1330,1.616,1396,1.267,1422,1.616,1471,1.526,1593,1.772,1692,2.203,1772,2.3,1858,3.613,1864,1.83,1978,2.704,2049,3.462,2054,4.382,2057,3.443,2058,3.834,2059,3.897,2060,4.188,2061,3.985,2062,3.833,2063,2.411,2064,3.442,2066,2.906,2068,2.3,2069,3.443,2071,3.443,2074,2.411,2076,2.3,2078,2.411,2080,2.203,2081,2.114,2083,2.411,2084,2.411,2087,2.034,2089,2.3,2090,2.411,2091,2.411,2092,3.443,2093,3.671,2095,1.893,2138,1.772,2139,3.442,2145,3.02,2147,2.86,2158,2.86,2159,2.86,2160,2.86,2161,2.86,2162,2.86,2163,2.86,2164,2.86,2165,2.86,2166,2.86,2170,2.86,2171,2.86,2172,2.86,2173,2.86,2174,3.912,2175,2.411,2176,2.615,2177,2.114,2178,2.034,2185,2.114,2210,4.402,2211,5.602,2212,3.623,2222,3.378,2231,3.378,2247,4.382,2270,2.537,2283,5.2,2284,4.086,2285,4.825,2286,4.879,2287,4.825,2288,5.629,2289,4.767,2290,3.827,2291,3.378,2292,3.827,2293,3.827,2294,3.827,2295,3.827,2296,4.825,2297,2.86,2298,2.86,2299,3.378,2300,4.825,2301,5.602,2302,5.629,2303,3.081,2304,3.378,2305,3.081,2306,3.378,2307,3.081,2308,2.86,2309,3.378,2310,5.629,2311,2.86,2312,2.86,2313,2.86,2314,5.467]],["title/interfaces/DatagridSelectFilterConfig.html",[0,0.058,2297,3.289]],["body/interfaces/DatagridSelectFilterConfig.html",[0,0.071,2,1.049,3,0.117,4,0.094,5,0.082,8,0.319,12,0.214,13,0.5,14,0.657,18,0.282,19,0.009,20,1.581,26,0.165,30,1.326,34,1.164,35,1.529,36,1.443,50,0.915,52,0.742,59,0.72,65,2.075,66,1.41,75,0.413,77,0.064,80,1.424,84,0.996,94,1.116,97,0.93,107,0.976,113,0.795,116,1.493,126,0.594,129,0.685,138,3.155,145,0.005,146,0.007,147,0.005,148,0.482,166,1.024,167,1.099,170,1.567,172,1.049,196,1.791,198,0.794,234,3.749,241,1.126,245,0.976,270,0.526,271,0.545,278,0.616,284,0.699,335,1.424,338,1.458,343,3.099,344,2.277,396,1.049,454,1.914,480,1.865,503,1.223,550,1.772,566,1.818,592,1.865,652,1.424,667,2.898,681,2.273,725,1.772,733,1.349,754,1.39,756,1.567,758,1.728,759,1.529,760,2.195,761,1.818,806,1.645,808,2.075,822,2.783,823,2.785,825,2.374,881,2.478,905,1.961,1045,2.109,1046,2.521,1077,1.865,1216,1.728,1217,4.001,1253,1.493,1258,2.273,1279,2.743,1311,3.108,1316,2.195,1322,1.966,1329,2.661,1396,1.772,1593,3.178,1858,3.399,1978,3.396,2049,2.26,2059,2.648,2060,2.846,2061,2.648,2064,3.396,2066,2.846,2093,3.081,2138,2.478,2139,3.749,2145,2.958,2174,4.495,2175,3.372,2176,3.283,2177,2.958,2178,2.846,2185,2.958,2247,4.324,2270,3.548,2283,5.13,2284,4.001,2285,4.725,2286,4.814,2287,4.725,2288,4.725,2289,4.001,2296,4.725,2297,5.13,2298,5.13,2299,6.059,2300,6.059,2301,6.924,2302,6.688,2303,4.31,2304,4.725,2305,4.31,2306,4.725,2307,4.31,2308,4.001,2309,4.725,2310,6.688,2311,4.001,2312,4.001,2313,4.001]],["title/components/DatagridStringFilterComponent.html",[148,0.309,345,1.533]],["body/components/DatagridStringFilterComponent.html",[0,0.056,3,0.091,4,0.073,5,0.064,9,1.626,12,0.167,13,0.425,14,0.729,18,0.302,19,0.009,26,0.158,27,1.257,45,3.098,50,0.48,52,0.808,59,0.865,60,0.783,61,1.197,63,1.32,66,0.861,72,0.612,75,0.504,77,0.05,84,0.766,94,0.978,97,0.728,107,0.596,112,1.038,113,0.612,116,1.169,126,0.568,129,1.009,144,0.881,145,0.004,146,0.006,147,0.004,148,0.508,149,1.719,150,1.284,151,1.257,153,1.288,154,1.671,165,1.671,166,1.737,167,1.846,170,1.706,172,1.491,178,0.851,185,2.11,192,0.92,196,1.8,198,0.773,213,1.158,214,1.563,215,0.916,241,0.881,245,1.222,248,1.353,270,0.474,271,0.427,278,0.601,284,0.682,319,1.388,320,1.315,321,1.378,322,1.423,323,3.353,324,1.94,325,1.94,326,1.288,327,1.353,328,1.626,329,2.698,330,1.257,331,1.77,332,1.94,333,1.625,334,1.94,335,1.115,336,1.94,337,1.539,338,2.146,339,1.581,340,3.353,341,1.46,342,1.581,343,1.625,344,1.063,345,2.653,346,1.719,347,0.968,348,1.94,349,1.77,350,1.625,351,2.484,352,1.94,353,1.625,354,2.698,355,1.581,356,1.94,357,1.719,358,1.32,359,1.94,360,1.539,361,1.869,362,1.77,363,1.288,364,1.353,365,1.719,366,1.499,367,0.968,368,1.227,369,1.626,370,1.94,371,1.581,372,1.88,373,1.94,374,1.539,375,1.823,376,1.94,378,2.009,387,2.228,389,2.073,408,1.115,411,1.77,436,2.598,439,1.257,447,3.38,451,0.783,454,1.499,480,1.46,503,1.082,524,1.141,526,3.594,550,2.609,568,1.32,578,2.12,592,2.335,593,2.614,623,1.141,648,2.61,652,1.55,667,2.461,713,1.014,725,1.388,733,1.355,808,3.134,822,2.14,823,2.335,825,2.255,859,1.719,860,2.808,863,1.46,874,1.388,878,1.77,887,1.499,889,1.388,905,1.914,918,2.461,954,1.257,1040,1.581,1041,2.316,1045,2.059,1061,1.625,1077,1.46,1201,2.528,1216,2.61,1238,1.823,1247,2.397,1253,1.169,1256,2.397,1258,2.956,1283,2.005,1322,1.539,1329,2.808,1330,1.77,1422,1.77,1471,1.671,1692,2.412,1772,2.519,1858,3.698,1864,2.005,1978,2.073,2049,3.481,2054,4.563,2057,3.671,2058,4.028,2059,3.999,2060,3.562,2061,4.078,2062,4.087,2063,2.64,2064,3.583,2066,3.098,2068,2.519,2069,3.671,2071,3.671,2074,2.64,2076,2.519,2078,2.64,2080,2.412,2081,2.316,2083,2.64,2084,2.64,2087,2.228,2089,2.519,2090,2.64,2091,2.64,2092,3.671,2093,3.857,2095,2.073,2138,1.94,2139,2.883,2145,3.22,2147,3.132,2158,3.132,2159,3.132,2160,3.132,2161,3.132,2162,3.132,2163,3.132,2164,3.132,2165,3.132,2166,3.132,2170,3.132,2171,3.132,2172,3.132,2173,3.132,2176,2.788,2177,2.316,2178,2.228,2185,2.316,2233,3.699,2236,3.699,2247,2.64,2270,2.778,2291,3.699,2308,3.132,2311,3.132,2315,5.829,2316,4.191,2317,5.144,2318,6.06,2319,6.393,2320,4.191,2321,5.144,2322,5.914,2323,4.191,2324,4.191,2325,4.087,2326,3.132,2327,5.144,2328,4.356,2329,3.699,2330,3.132,2331,5.144,2332,5.144,2333,3.699,2334,5.144,2335,3.699,2336,5.144,2337,3.699,2338,3.375,2339,3.699,2340,5.144,2341,3.699,2342,3.132]],["title/interfaces/DatagridStringFilterConfig.html",[0,0.058,2330,3.289]],["body/interfaces/DatagridStringFilterConfig.html",[0,0.077,2,1.135,3,0.126,4,0.101,5,0.089,8,0.346,12,0.232,13,0.526,14,0.691,18,0.255,19,0.009,26,0.18,27,1.738,50,0.664,52,1,59,0.758,66,1.19,75,0.499,77,0.069,84,0.949,94,0.782,129,0.742,144,1.219,145,0.006,146,0.007,147,0.006,148,0.507,166,1.109,167,1.19,170,1.696,172,1.135,196,1.707,198,0.761,241,1.219,245,1.316,270,0.527,271,0.59,278,0.638,284,0.801,338,1.579,345,2.515,411,2.447,454,2.073,480,2.02,503,1.269,524,1.579,593,3.238,648,2.733,652,1.542,667,3.048,725,1.919,733,1.399,808,2.247,822,2.887,823,2.739,825,2.091,905,2.062,954,1.738,1045,2.218,1077,2.02,1216,1.871,1247,2.811,1253,1.617,1258,2.39,1283,2.772,1322,2.129,1329,3.048,1858,3.526,1978,2.868,2049,2.447,2059,2.868,2061,2.868,2064,3.571,2066,3.081,2093,3.336,2138,2.683,2139,3.571,2145,3.203,2176,3.452,2177,3.203,2178,3.081,2185,3.203,2247,3.651,2270,3.842,2308,4.332,2311,4.332,2317,5.116,2318,6.429,2319,6.371,2321,5.116,2322,6.371,2325,5.062,2326,4.332,2327,6.371,2328,5.395,2329,6.371,2330,5.395,2331,6.371,2332,6.371,2333,5.116,2334,6.371,2335,5.116,2336,6.371,2337,5.116,2338,4.667,2339,5.116,2340,6.371,2341,5.116,2342,4.332]],["title/interfaces/DetailPane.html",[0,0.058,1320,2.255]],["body/interfaces/DetailPane.html",[0,0.094,2,0.414,3,0.046,4,0.037,5,0.033,8,0.126,9,1.681,12,0.29,13,0.371,14,0.203,15,1.66,18,0.243,19,0.009,20,0.663,22,0.843,25,0.549,26,0.164,27,1.039,30,1.704,31,0.92,34,1.113,36,1.648,39,0.757,40,1.812,42,1.012,47,0.666,50,0.875,52,0.61,55,2.909,59,0.776,60,1.126,61,1.818,62,0.757,63,0.666,64,1.852,66,0.712,67,1.307,71,0.9,72,0.506,73,2.672,75,0.428,76,1.207,77,0.052,79,0.843,80,1.17,82,0.619,83,2.061,84,0.669,85,3.288,86,1.807,87,0.92,89,2.807,90,0.65,92,3.475,94,1.046,96,1.343,97,0.884,98,0.737,99,2.121,100,0.718,106,1.906,107,1.173,109,2.176,112,0.524,113,0.742,116,1.227,117,1.239,118,2.337,122,0.683,123,2.593,124,1.014,126,0.683,127,1.239,128,0.82,129,0.814,134,1.453,135,0.843,137,1.66,138,2.217,140,2.117,144,1.446,145,0.003,146,0.003,147,0.002,148,0.536,150,0.764,151,1.319,164,1.343,166,0.405,167,0.712,168,0.82,170,0.619,172,1.581,175,1.125,176,1.125,177,1.125,178,0.642,185,1.091,192,0.215,195,2.228,196,1.425,198,0.382,205,1.012,213,0.738,215,0.476,220,1.125,221,1.507,222,0.737,227,0.798,229,2.704,241,1.446,242,1.842,245,1.413,246,0.757,248,1.119,252,0.92,261,1.125,268,1.084,270,0.46,271,0.215,278,0.641,284,0.85,287,2.704,314,1.272,320,0.993,321,0.819,326,0.65,327,0.683,328,1.227,335,0.563,338,0.576,344,0.537,347,0.8,358,0.666,363,0.65,364,0.683,368,1.014,385,1.604,386,0.683,392,0.893,396,0.679,402,0.949,403,3.227,408,0.921,425,1.148,431,1.604,435,1.657,439,1.683,440,2.517,451,0.395,455,1.604,457,1.386,502,0.99,503,0.341,511,1.914,513,1.657,524,1.642,525,2.282,537,0.7,543,1.084,549,1.04,552,1.343,568,1.091,573,1.307,578,1.764,580,1.343,584,0.757,586,1.494,604,2.375,605,1.996,619,0.666,623,0.944,633,1.012,648,1.119,649,0.777,652,0.563,656,0.757,677,1.012,681,0.7,683,0.92,705,1.012,711,1.012,713,0.512,716,1.119,733,1.29,753,1.805,754,1.837,756,0.619,758,2.388,759,1.964,767,0.949,768,0.757,770,1.457,771,1.775,772,1.775,792,2.255,806,2.517,807,1.463,810,1.421,814,0.893,816,0.893,817,0.893,819,0.843,820,0.65,821,0.82,824,0.868,825,0.563,826,1.956,827,1.457,828,1.805,833,2.213,834,2.732,835,1.239,836,1.706,842,1.381,843,1.805,844,1.602,846,0.843,849,0.893,850,2.148,852,2.237,853,0.893,856,0.666,861,1.457,862,2.79,863,1.533,864,0.893,866,0.777,871,0.944,874,0.7,877,1.386,879,1.494,886,1.386,892,0.843,896,1.972,901,0.82,905,2.383,906,2.53,915,1.421,919,1.421,931,1.554,936,2.355,977,1.604,985,2.355,990,1.805,999,1.421,1006,0.868,1015,0.979,1016,0.82,1040,1.307,1043,1.974,1044,1.554,1045,1.065,1046,1.272,1070,0.949,1073,1.047,1089,2.433,1128,0.979,1138,3.288,1201,0.798,1216,0.683,1232,0.843,1235,2.607,1236,1.047,1237,1.914,1238,1.507,1239,1.914,1240,1.169,1241,1.084,1242,1.169,1243,1.842,1244,2.339,1245,2.598,1246,1.169,1247,2.007,1248,1.914,1249,0.868,1250,1.842,1251,2.431,1252,1.914,1253,0.59,1254,1.507,1255,0.949,1256,0.757,1257,0.949,1258,1.147,1259,3.346,1260,2.876,1261,1.125,1262,2.255,1263,1.084,1264,1.047,1265,1.714,1266,0.979,1267,1.842,1268,2.255,1269,1.084,1270,1.125,1271,0.868,1272,1.125,1273,2.607,1274,1.125,1275,4.212,1276,1.775,1277,1.125,1278,2.339,1279,1.775,1280,2.517,1281,1.914,1282,1.169,1283,1.657,1284,1.169,1285,1.714,1286,1.169,1287,2.811,1288,1.775,1289,1.169,1290,1.169,1291,1.914,1292,1.125,1293,2.704,1294,1.169,1295,2.037,1296,1.775,1297,1.914,1298,1.914,1299,1.914,1300,2.607,1301,2.431,1302,1.012,1303,0.979,1304,1.125,1305,1.169,1306,1.169,1307,0.949,1308,3.101,1309,4.003,1310,2.431,1311,0.868,1312,1.169,1313,1.169,1314,4.332,1315,1.084,1316,2.086,1317,3.909,1318,1.084,1319,1.914,1320,2.607,1321,1.714,1322,1.272,1323,1.169,1324,1.169,1325,2.984,1326,1.169,1327,1.381,1328,2.255,1329,0.82,1330,0.893,1331,2.431,1332,1.554,1333,1.169,1334,1.084,1335,1.914,1336,1.914,1337,1.169,1338,1.169,1339,1.714,1340,1.084,1341,1.169,1342,1.169,1343,1.169,1344,1.842,1345,2.431,1346,1.169,1347,1.169,1348,1.169,1349,1.914,1350,1.169,1351,1.914,1352,1.169,1353,2.431,1354,1.169,1355,1.084,1356,1.084,1357,1.169,1358,1.914,1359,1.169,1360,1.169,1361,1.169,1362,1.169,1363,1.169,1364,1.169,1365,1.125,1366,1.169,1367,1.914,1368,1.169,1369,1.125,1370,1.169,1371,1.805,1372,1.169,1373,2.431,1374,1.842,1375,1.169,1376,1.169,1377,3.33,1378,1.169,1379,1.914,1380,1.169,1381,1.169,1382,1.914,1383,2.431,1384,2.431,1385,1.914,1386,2.431,1387,2.811,1388,1.169,1389,1.914,1390,2.704,1391,1.169,1392,1.914,1393,1.169,1394,1.169,1395,1.169,1396,0.7,1397,1.169,1398,1.169,1399,1.169,1400,1.169,1401,1.169,1402,1.169,1403,1.914,1404,1.914,1405,1.914,1406,1.914,1407,2.431,1408,1.169,1409,1.169,1410,1.169,1411,1.169,1412,1.914,1413,1.914,1414,2.811,1415,1.169,1416,1.169,1417,1.169,1418,1.169,1419,1.914,1420,2.811,1421,2.811,1422,0.893,1423,1.169,1424,2.431,1425,1.169,1426,1.125,1427,1.842,1428,1.169,1429,1.169,1430,1.169,1431,1.169,1432,1.169,1433,1.169,1434,1.169,1435,1.169,1436,1.169,1437,1.169,1438,1.169,1439,1.125,1440,1.169,1441,1.169,1442,1.914,1443,1.169,1444,1.169,1445,1.169,1446,1.084,1447,1.169,1448,1.169,1449,1.169,1450,1.169,1451,1.047,1452,1.169,1453,1.084,1454,1.169,1455,1.169,1456,1.169,1457,1.169,1458,0.949,1459,1.169,1460,1.169,1461,1.169,1462,1.169,1463,1.169,1464,1.169,1465,1.169,1466,1.169,1467,1.169,1468,1.169,1469,1.169,1470,1.169,1471,0.843,1472,1.169,1473,1.914,1474,1.914,1475,1.914,1476,1.169,1477,2.431,1478,2.811,1479,1.914,1480,1.169,1481,1.169,1482,1.169,1483,1.169,1484,1.169,1485,1.169,1486,1.169,1487,1.084,1488,1.169,1489,1.169,1490,1.169,1491,0.7,1492,1.169,1493,1.169,1494,1.169,1495,1.169,1496,1.169,1497,1.169,1498,2.431,1499,0.979,1500,1.169,1501,1.169,1502,1.169,1503,1.169,1504,1.169,1505,1.169,1506,1.169,1507,1.169,1508,1.169,1509,2.517,1510,1.169,1511,1.169,1512,1.125,1513,1.169,1514,1.169,1515,1.169,1516,1.914,1517,1.169,1518,1.169,1519,1.169,1520,1.169,1521,1.914,1522,1.169,1523,1.169,1524,1.169,1525,1.169,1526,1.169,1527,1.169,1528,1.169,1529,1.169,1530,1.169,1531,1.169,1532,1.169,1533,1.169,1534,1.169,1535,1.169,1536,1.169,1537,1.169,1538,1.125,1539,1.125,1540,1.169,1541,1.169,1542,1.914,1543,1.914,1544,1.554,1545,1.914,1546,1.842,1547,1.169,1548,1.169,1549,1.914,1550,1.169,1551,1.914,1552,1.169,1553,1.169,1554,1.169,1555,1.169,1556,1.169,1557,1.169,1558,1.125,1559,1.169,1560,1.125,1561,1.169,1562,1.169,1563,1.169,1564,1.914,1565,1.169,1566,1.169,1567,1.169,1568,1.169,1569,1.169,1570,1.169,1571,1.169,1572,1.169,1573,1.169,1574,1.914,1575,2.811,1576,2.431,1577,1.169,1578,1.169,1579,1.169,1580,1.169,1581,1.914,1582,1.169,1583,1.169,1584,1.169,1585,1.169,1586,1.169,1587,1.169,1588,1.169,1589,1.914,1590,1.169,1591,1.169,1592,1.169,1593,0.979,1594,1.169,1595,1.169,1596,1.169,1597,1.169,1598,1.169,1599,1.169,1600,1.169,1601,1.169,1602,1.169,1603,1.169,1604,1.169,1605,1.169,1606,1.169,1607,2.811,1608,1.169,1609,1.169,1610,1.169,1611,1.169,1612,1.169,1613,1.169,1614,1.125,1615,1.169,1616,1.169,1617,1.914,1618,1.169,1619,1.914,1620,1.169,1621,1.169,1622,1.914,1623,1.169,1624,1.169,1625,1.169,1626,1.169,1627,1.169,1628,2.431,1629,1.169,1630,1.169,1631,1.169,1632,1.842,1633,1.169,1634,1.169,1635,1.169,1636,1.169,1637,1.169,1638,1.169,1639,1.169,1640,1.169,1641,1.169,1642,1.169,1643,0.979,1644,1.169,1645,1.169,1646,1.169,1647,0.979,1648,1.169,1649,1.169,1650,1.914,1651,3.101,1652,1.012,1653,1.169,1654,1.169,1655,1.169,1656,1.169,1657,1.169,1658,1.169,1659,1.914,1660,1.169,1661,1.169,1662,1.842,1663,1.169,1664,1.084,1665,1.169,1666,1.169,1667,1.169,1668,1.169,1669,1.169,1670,1.169]],["title/interfaces/DetailPaneConfig.html",[0,0.058,1318,2.255]],["body/interfaces/DetailPaneConfig.html",[0,0.094,2,0.416,3,0.046,4,0.037,5,0.033,8,0.127,9,1.684,12,0.29,13,0.372,14,0.203,15,1.664,18,0.235,19,0.009,20,0.665,22,0.847,25,0.552,26,0.164,27,1.042,30,1.706,31,0.924,34,1.114,36,1.65,39,0.759,40,1.816,42,1.016,47,0.669,50,0.876,52,0.611,55,2.951,59,0.777,60,1.128,61,1.821,62,0.759,63,0.669,64,1.855,66,0.906,67,1.311,71,0.903,72,0.507,73,2.674,75,0.417,76,1.211,77,0.052,79,0.847,80,0.924,82,0.621,83,2.065,84,0.67,85,3.293,86,1.811,87,0.924,89,2.94,90,0.652,92,3.478,94,1.047,96,1.347,97,0.886,98,0.74,99,2.124,100,0.721,106,1.91,107,1.174,109,2.18,112,0.526,113,0.723,116,1.231,117,1.243,118,2.341,122,0.686,123,2.597,124,1.017,126,0.683,127,1.243,128,0.823,129,0.816,134,1.457,135,0.847,137,1.664,138,2.221,140,2.121,144,1.448,145,0.003,146,0.003,147,0.002,148,0.519,150,0.766,151,1.323,164,1.347,166,0.406,167,0.714,168,0.823,170,0.621,172,1.582,175,1.129,176,1.129,177,1.129,178,0.644,185,1.095,192,0.216,195,2.231,196,1.428,198,0.383,205,1.016,213,0.739,215,0.477,220,1.129,221,1.512,222,0.74,227,0.801,229,2.71,241,1.448,242,1.848,245,1.414,246,0.759,248,1.122,252,0.924,261,1.129,268,1.088,270,0.461,271,0.216,278,0.641,284,0.85,287,2.71,314,1.276,320,0.995,321,0.822,326,0.652,327,0.686,328,1.231,335,0.565,338,0.578,344,0.539,347,0.803,358,0.669,363,0.652,364,0.686,368,1.017,385,1.609,386,0.686,392,0.897,396,0.681,402,0.953,403,3.23,408,0.924,425,1.269,431,1.609,435,1.662,439,1.686,440,2.522,451,0.397,455,1.609,457,1.389,502,0.993,503,0.343,511,1.919,513,1.662,524,1.645,525,2.287,537,0.703,543,1.088,549,1.043,552,1.347,568,1.095,573,1.311,578,1.767,580,1.347,584,0.759,586,1.498,604,2.379,605,1.999,619,0.669,623,0.947,633,1.016,648,1.122,649,0.78,652,0.565,656,0.759,677,1.016,681,0.703,683,0.924,705,1.016,711,1.016,713,0.514,716,1.122,733,1.291,753,1.809,754,1.84,756,0.621,758,2.39,759,1.967,767,0.953,768,0.759,770,1.461,771,1.781,772,1.781,792,2.259,806,2.519,807,1.468,810,1.425,814,0.897,816,0.897,817,0.897,819,0.847,820,0.652,821,0.823,824,0.871,825,0.565,826,1.537,827,1.461,828,1.809,833,2.217,834,2.734,835,1.243,836,1.71,842,1.385,843,1.809,844,1.389,846,0.847,849,0.897,850,2.153,852,2.242,853,0.897,856,0.669,861,1.461,862,2.509,863,1.537,864,0.897,866,0.78,871,0.947,874,0.703,877,1.389,879,1.498,886,1.095,892,0.847,896,1.977,901,0.823,905,2.371,906,2.533,915,1.425,919,1.425,931,1.559,936,2.36,977,1.609,985,2.36,990,1.809,999,1.425,1006,0.871,1015,0.983,1016,0.823,1040,1.311,1043,1.979,1044,1.559,1045,1.068,1046,1.276,1070,0.953,1073,1.051,1089,2.11,1128,0.983,1138,3.293,1201,0.801,1216,0.686,1232,0.847,1235,2.613,1236,1.051,1237,1.92,1238,1.512,1239,1.92,1240,1.173,1241,1.088,1242,1.173,1243,1.848,1244,2.345,1245,2.603,1246,1.173,1247,2.011,1248,1.92,1249,0.871,1250,1.848,1251,2.438,1252,1.92,1253,0.592,1254,1.512,1255,0.953,1256,0.759,1257,0.953,1258,1.151,1259,3.349,1260,2.882,1261,1.129,1262,2.261,1263,1.088,1264,1.051,1265,1.719,1266,0.983,1267,1.848,1268,2.261,1269,1.088,1270,1.129,1271,0.871,1272,1.129,1273,2.613,1274,1.129,1275,4.216,1276,1.781,1277,1.129,1278,2.345,1279,1.781,1280,2.522,1281,1.919,1282,1.173,1283,1.662,1284,1.173,1285,1.719,1286,1.173,1287,2.817,1288,1.781,1289,1.173,1290,1.173,1291,1.92,1292,1.129,1293,2.71,1294,1.173,1295,2.042,1296,1.781,1297,1.92,1298,1.92,1299,1.92,1300,2.613,1301,2.438,1302,1.016,1303,0.983,1304,1.129,1305,1.173,1306,1.173,1307,0.953,1308,3.107,1309,4.008,1310,2.438,1311,0.871,1312,1.173,1313,1.173,1314,4.284,1315,1.088,1316,2.307,1317,3.804,1318,1.781,1319,1.173,1320,2.261,1321,1.051,1322,0.78,1323,1.173,1324,1.173,1325,2.99,1326,1.173,1327,1.385,1328,2.261,1329,0.823,1330,0.897,1331,2.438,1332,1.559,1333,1.173,1334,1.088,1335,1.92,1336,1.92,1337,1.173,1338,1.173,1339,1.719,1340,1.088,1341,1.173,1342,1.173,1343,1.173,1344,1.848,1345,2.438,1346,1.173,1347,1.173,1348,1.173,1349,1.92,1350,1.173,1351,1.92,1352,1.173,1353,2.438,1354,1.173,1355,1.088,1356,1.088,1357,1.173,1358,1.92,1359,1.173,1360,1.173,1361,1.173,1362,1.173,1363,1.173,1364,1.173,1365,1.129,1366,1.173,1367,1.92,1368,1.173,1369,1.129,1370,1.173,1371,1.809,1372,1.173,1373,2.438,1374,1.848,1375,1.173,1376,1.173,1377,3.336,1378,1.173,1379,1.92,1380,1.173,1381,1.173,1382,1.92,1383,2.438,1384,2.438,1385,1.92,1386,2.438,1387,2.817,1388,1.173,1389,1.92,1390,2.71,1391,1.173,1392,1.92,1393,1.173,1394,1.173,1395,1.173,1396,0.703,1397,1.173,1398,1.173,1399,1.173,1400,1.173,1401,1.173,1402,1.173,1403,1.92,1404,1.92,1405,1.92,1406,1.92,1407,2.438,1408,1.173,1409,1.173,1410,1.173,1411,1.173,1412,1.92,1413,1.92,1414,2.817,1415,1.173,1416,1.173,1417,1.173,1418,1.173,1419,1.92,1420,2.817,1421,2.817,1422,0.897,1423,1.173,1424,2.438,1425,1.173,1426,1.129,1427,1.848,1428,1.173,1429,1.173,1430,1.173,1431,1.173,1432,1.173,1433,1.173,1434,1.173,1435,1.173,1436,1.173,1437,1.173,1438,1.173,1439,1.129,1440,1.173,1441,1.173,1442,1.92,1443,1.173,1444,1.173,1445,1.173,1446,1.088,1447,1.173,1448,1.173,1449,1.173,1450,1.173,1451,1.051,1452,1.173,1453,1.088,1454,1.173,1455,1.173,1456,1.173,1457,1.173,1458,0.953,1459,1.173,1460,1.173,1461,1.173,1462,1.173,1463,1.173,1464,1.173,1465,1.173,1466,1.173,1467,1.173,1468,1.173,1469,1.173,1470,1.173,1471,0.847,1472,1.173,1473,1.92,1474,1.92,1475,1.92,1476,1.173,1477,2.438,1478,2.817,1479,1.92,1480,1.173,1481,1.173,1482,1.173,1483,1.173,1484,1.173,1485,1.173,1486,1.173,1487,1.088,1488,1.173,1489,1.173,1490,1.173,1491,0.703,1492,1.173,1493,1.173,1494,1.173,1495,1.173,1496,1.173,1497,1.173,1498,2.438,1499,0.983,1500,1.173,1501,1.173,1502,1.173,1503,1.173,1504,1.173,1505,1.173,1506,1.173,1507,1.173,1508,1.173,1509,2.522,1510,1.173,1511,1.173,1512,1.129,1513,1.173,1514,1.173,1515,1.173,1516,1.92,1517,1.173,1518,1.173,1519,1.173,1520,1.173,1521,1.92,1522,1.173,1523,1.173,1524,1.173,1525,1.173,1526,1.173,1527,1.173,1528,1.173,1529,1.173,1530,1.173,1531,1.173,1532,1.173,1533,1.173,1534,1.173,1535,1.173,1536,1.173,1537,1.173,1538,1.129,1539,1.129,1540,1.173,1541,1.173,1542,1.92,1543,1.92,1544,1.559,1545,1.92,1546,1.848,1547,1.173,1548,1.173,1549,1.92,1550,1.173,1551,1.92,1552,1.173,1553,1.173,1554,1.173,1555,1.173,1556,1.173,1557,1.173,1558,1.129,1559,1.173,1560,1.129,1561,1.173,1562,1.173,1563,1.173,1564,1.92,1565,1.173,1566,1.173,1567,1.173,1568,1.173,1569,1.173,1570,1.173,1571,1.173,1572,1.173,1573,1.173,1574,1.92,1575,2.817,1576,2.438,1577,1.173,1578,1.173,1579,1.173,1580,1.173,1581,1.92,1582,1.173,1583,1.173,1584,1.173,1585,1.173,1586,1.173,1587,1.173,1588,1.173,1589,1.92,1590,1.173,1591,1.173,1592,1.173,1593,0.983,1594,1.173,1595,1.173,1596,1.173,1597,1.173,1598,1.173,1599,1.173,1600,1.173,1601,1.173,1602,1.173,1603,1.173,1604,1.173,1605,1.173,1606,1.173,1607,2.817,1608,1.173,1609,1.173,1610,1.173,1611,1.173,1612,1.173,1613,1.173,1614,1.129,1615,1.173,1616,1.173,1617,1.92,1618,1.173,1619,1.92,1620,1.173,1621,1.173,1622,1.92,1623,1.173,1624,1.173,1625,1.173,1626,1.173,1627,1.173,1628,2.438,1629,1.173,1630,1.173,1631,1.173,1632,1.848,1633,1.173,1634,1.173,1635,1.173,1636,1.173,1637,1.173,1638,1.173,1639,1.173,1640,1.173,1641,1.173,1642,1.173,1643,0.983,1644,1.173,1645,1.173,1646,1.173,1647,0.983,1648,1.173,1649,1.173,1650,1.92,1651,3.107,1652,1.016,1653,1.173,1654,1.173,1655,1.173,1656,1.173,1657,1.173,1658,1.173,1659,1.92,1660,1.173,1661,1.173,1662,1.848,1663,1.173,1664,1.088,1665,1.173,1666,1.173,1667,1.173,1668,1.173,1669,1.173,1670,1.173]],["title/interfaces/DetailRowConfig.html",[0,0.058,1315,2.255]],["body/interfaces/DetailRowConfig.html",[0,0.094,2,0.413,3,0.046,4,0.037,5,0.032,8,0.126,9,1.679,12,0.309,13,0.37,14,0.202,15,1.657,18,0.249,19,0.009,20,0.662,22,0.842,25,0.548,26,0.164,27,1.037,30,1.702,31,0.918,34,1.112,36,1.648,39,0.755,40,1.81,42,1.01,47,0.665,50,0.875,52,0.609,55,2.948,59,0.776,60,1.125,61,1.816,62,0.755,63,0.665,64,1.85,66,0.902,67,1.305,71,0.898,72,0.505,73,2.67,75,0.417,76,1.205,77,0.052,79,0.842,80,0.92,82,0.618,83,2.059,84,0.668,85,3.286,86,1.805,87,0.918,89,2.936,90,0.649,92,3.473,94,1.045,96,1.341,97,0.883,98,0.736,99,2.12,100,0.717,106,1.904,107,1.172,109,2.173,112,0.523,113,0.721,116,1.225,117,1.237,118,2.334,122,0.682,123,2.591,124,1.012,126,0.69,127,1.237,128,0.818,129,0.814,134,1.451,135,0.842,137,1.657,138,2.215,140,2.115,144,1.444,145,0.003,146,0.003,147,0.002,148,0.519,150,0.762,151,1.317,164,1.341,166,0.404,167,0.71,168,0.818,170,0.618,172,1.58,175,1.122,176,1.122,177,1.122,178,0.641,185,1.089,192,0.215,195,2.226,196,1.424,198,0.382,205,1.01,213,0.737,215,0.475,220,1.122,221,1.505,222,0.736,227,0.796,229,3.38,241,1.444,242,1.839,245,1.412,246,0.755,248,1.117,252,0.918,261,1.122,268,1.082,270,0.46,271,0.215,278,0.641,284,0.849,287,2.701,314,1.27,320,0.991,321,0.818,326,0.649,327,0.682,328,1.225,335,0.561,338,0.575,344,0.536,347,0.799,358,0.665,363,0.649,364,0.682,368,1.012,385,1.601,386,0.682,392,0.891,396,0.677,402,0.947,403,3.225,408,0.92,425,1.265,431,1.601,435,1.654,439,1.681,440,2.513,451,0.394,455,1.601,457,1.384,502,0.988,503,0.341,511,1.911,513,1.654,524,1.64,525,2.279,537,0.699,543,1.082,549,1.039,552,1.341,568,1.089,573,1.305,578,1.762,580,1.341,584,0.755,586,1.492,604,2.373,605,1.994,619,0.665,623,0.942,633,1.01,648,1.117,649,0.775,652,0.561,656,0.755,677,1.01,681,0.699,683,0.918,705,1.01,711,1.01,713,0.511,716,1.117,733,1.289,753,1.802,754,1.836,756,0.618,758,2.386,759,1.963,767,0.947,768,0.755,770,1.455,771,1.772,772,1.772,792,2.254,806,2.516,807,1.46,810,1.419,814,0.891,816,0.891,817,0.891,819,0.842,820,0.649,821,0.818,824,0.866,825,0.561,826,1.531,827,1.455,828,1.802,833,2.211,834,2.81,835,1.237,836,1.703,842,1.379,843,1.802,844,1.384,846,0.842,849,0.891,850,2.367,852,2.235,853,0.891,856,0.665,861,1.455,862,2.503,863,1.531,864,0.891,866,0.775,871,0.942,874,0.699,877,1.384,879,1.492,886,1.089,892,0.842,896,1.97,901,0.818,905,2.394,906,2.528,915,1.419,919,1.419,931,1.551,936,2.352,977,1.601,985,2.352,990,1.802,999,1.419,1006,0.866,1015,0.977,1016,0.818,1040,1.305,1043,1.971,1044,1.551,1045,1.063,1046,1.27,1070,0.947,1073,1.044,1089,2.101,1128,0.977,1138,3.286,1201,0.796,1216,0.682,1232,0.842,1235,2.603,1236,1.044,1237,1.911,1238,1.505,1239,1.911,1240,1.166,1241,1.082,1242,1.166,1243,1.839,1244,2.336,1245,2.595,1246,1.166,1247,2.005,1248,1.911,1249,0.866,1250,1.839,1251,2.428,1252,1.911,1253,0.589,1254,1.505,1255,0.947,1256,0.755,1257,0.947,1258,1.145,1259,3.344,1260,2.873,1261,1.122,1262,2.251,1263,1.082,1264,1.044,1265,1.711,1266,0.977,1267,1.839,1268,2.251,1269,1.082,1270,1.122,1271,0.866,1272,1.122,1273,2.603,1274,1.122,1275,4.21,1276,1.772,1277,1.122,1278,2.336,1279,1.772,1280,2.773,1281,1.911,1282,1.166,1283,1.654,1284,1.166,1285,1.711,1286,1.166,1287,2.807,1288,1.772,1289,1.166,1290,1.166,1291,1.911,1292,1.122,1293,2.701,1294,1.166,1295,2.034,1296,1.772,1297,1.911,1298,1.911,1299,1.911,1300,2.603,1301,2.428,1302,1.01,1303,0.977,1304,1.122,1305,1.166,1306,1.166,1307,0.947,1308,3.097,1309,4.001,1310,2.428,1311,0.866,1312,1.166,1313,1.166,1314,4.329,1315,1.772,1316,2.299,1317,3.513,1318,1.082,1319,1.166,1320,2.251,1321,1.044,1322,0.775,1323,1.166,1324,1.166,1325,2.98,1326,1.166,1327,1.379,1328,2.251,1329,0.818,1330,0.891,1331,2.428,1332,1.551,1333,1.166,1334,1.082,1335,1.911,1336,1.911,1337,1.166,1338,1.166,1339,1.711,1340,1.082,1341,1.166,1342,1.166,1343,1.166,1344,1.839,1345,2.428,1346,1.166,1347,1.166,1348,1.166,1349,1.911,1350,1.166,1351,1.911,1352,1.166,1353,2.428,1354,1.166,1355,1.082,1356,1.082,1357,1.166,1358,1.911,1359,1.166,1360,1.166,1361,1.166,1362,1.166,1363,1.166,1364,1.166,1365,1.122,1366,1.166,1367,1.911,1368,1.166,1369,1.122,1370,1.166,1371,1.802,1372,1.166,1373,2.428,1374,1.839,1375,1.166,1376,1.166,1377,3.327,1378,1.166,1379,1.911,1380,1.166,1381,1.166,1382,1.911,1383,2.428,1384,2.428,1385,1.911,1386,2.428,1387,2.807,1388,1.166,1389,1.911,1390,2.701,1391,1.166,1392,1.911,1393,1.166,1394,1.166,1395,1.166,1396,0.699,1397,1.166,1398,1.166,1399,1.166,1400,1.166,1401,1.166,1402,1.166,1403,1.911,1404,1.911,1405,1.911,1406,1.911,1407,2.428,1408,1.166,1409,1.166,1410,1.166,1411,1.166,1412,1.911,1413,1.911,1414,2.807,1415,1.166,1416,1.166,1417,1.166,1418,1.166,1419,1.911,1420,2.807,1421,2.807,1422,0.891,1423,1.166,1424,2.428,1425,1.166,1426,1.122,1427,1.839,1428,1.166,1429,1.166,1430,1.166,1431,1.166,1432,1.166,1433,1.166,1434,1.166,1435,1.166,1436,1.166,1437,1.166,1438,1.166,1439,1.122,1440,1.166,1441,1.166,1442,1.911,1443,1.166,1444,1.166,1445,1.166,1446,1.082,1447,1.166,1448,1.166,1449,1.166,1450,1.166,1451,1.044,1452,1.166,1453,1.082,1454,1.166,1455,1.166,1456,1.166,1457,1.166,1458,0.947,1459,1.166,1460,1.166,1461,1.166,1462,1.166,1463,1.166,1464,1.166,1465,1.166,1466,1.166,1467,1.166,1468,1.166,1469,1.166,1470,1.166,1471,0.842,1472,1.166,1473,1.911,1474,1.911,1475,1.911,1476,1.166,1477,2.428,1478,2.807,1479,1.911,1480,1.166,1481,1.166,1482,1.166,1483,1.166,1484,1.166,1485,1.166,1486,1.166,1487,1.082,1488,1.166,1489,1.166,1490,1.166,1491,0.699,1492,1.166,1493,1.166,1494,1.166,1495,1.166,1496,1.166,1497,1.166,1498,2.428,1499,0.977,1500,1.166,1501,1.166,1502,1.166,1503,1.166,1504,1.166,1505,1.166,1506,1.166,1507,1.166,1508,1.166,1509,2.513,1510,1.166,1511,1.166,1512,1.122,1513,1.166,1514,1.166,1515,1.166,1516,1.911,1517,1.166,1518,1.166,1519,1.166,1520,1.166,1521,1.911,1522,1.166,1523,1.166,1524,1.166,1525,1.166,1526,1.166,1527,1.166,1528,1.166,1529,1.166,1530,1.166,1531,1.166,1532,1.166,1533,1.166,1534,1.166,1535,1.166,1536,1.166,1537,1.166,1538,1.122,1539,1.122,1540,1.166,1541,1.166,1542,1.911,1543,1.911,1544,1.551,1545,1.911,1546,1.839,1547,1.166,1548,1.166,1549,1.911,1550,1.166,1551,1.911,1552,1.166,1553,1.166,1554,1.166,1555,1.166,1556,1.166,1557,1.166,1558,1.122,1559,1.166,1560,1.122,1561,1.166,1562,1.166,1563,1.166,1564,1.911,1565,1.166,1566,1.166,1567,1.166,1568,1.166,1569,1.166,1570,1.166,1571,1.166,1572,1.166,1573,1.166,1574,1.911,1575,2.807,1576,2.428,1577,1.166,1578,1.166,1579,1.166,1580,1.166,1581,1.911,1582,1.166,1583,1.166,1584,1.166,1585,1.166,1586,1.166,1587,1.166,1588,1.166,1589,1.911,1590,1.166,1591,1.166,1592,1.166,1593,0.977,1594,1.166,1595,1.166,1596,1.166,1597,1.166,1598,1.166,1599,1.166,1600,1.166,1601,1.166,1602,1.166,1603,1.166,1604,1.166,1605,1.166,1606,1.166,1607,2.807,1608,1.166,1609,1.166,1610,1.166,1611,1.166,1612,1.166,1613,1.166,1614,1.122,1615,1.166,1616,1.166,1617,1.911,1618,1.166,1619,1.911,1620,1.166,1621,1.166,1622,1.911,1623,1.166,1624,1.166,1625,1.166,1626,1.166,1627,1.166,1628,2.428,1629,1.166,1630,1.166,1631,1.166,1632,1.839,1633,1.166,1634,1.166,1635,1.166,1636,1.166,1637,1.166,1638,1.166,1639,1.166,1640,1.166,1641,1.166,1642,1.166,1643,0.977,1644,1.166,1645,1.166,1646,1.166,1647,0.977,1648,1.166,1649,1.166,1650,1.911,1651,3.097,1652,1.01,1653,1.166,1654,1.166,1655,1.166,1656,1.166,1657,1.166,1658,1.166,1659,1.911,1660,1.166,1661,1.166,1662,1.839,1663,1.166,1664,1.082,1665,1.166,1666,1.166,1667,1.166,1668,1.166,1669,1.166,1670,1.166]],["title/components/ErrorBannerComponent.html",[148,0.309,346,1.805]],["body/components/ErrorBannerComponent.html",[3,0.159,4,0.086,5,0.076,8,0.293,12,0.196,13,0.473,14,0.622,18,0.311,19,0.009,26,0.107,30,1.609,36,1.034,59,0.763,60,0.918,63,1.548,66,1.334,72,0.718,75,0.46,77,0.058,94,1.086,97,1.344,98,2.263,106,2.206,107,1.1,126,0.57,129,0.99,145,0.005,146,0.006,147,0.005,148,0.564,149,2.016,150,1.431,151,1.474,152,2.955,153,1.511,154,1.96,165,1.96,166,1.76,167,1.876,168,2.518,170,1.901,172,1.425,178,0.948,185,2.045,188,2.825,192,0.882,198,0.672,213,0.854,214,1.334,215,0.911,270,0.306,271,0.501,278,0.358,319,1.628,320,1.465,321,1.535,322,1.67,323,3.582,324,2.276,325,2.276,326,1.511,327,2.721,328,1.811,329,3.007,330,1.474,331,2.076,332,2.276,333,1.906,334,2.276,335,1.308,336,2.276,337,1.805,338,2.107,339,1.855,340,3.582,341,1.713,342,1.855,343,1.906,344,1.247,345,1.713,346,3.173,347,2.109,348,2.276,349,2.076,350,1.906,351,2.539,352,2.276,353,1.906,354,3.007,355,1.855,356,2.276,357,2.016,358,1.548,359,2.276,360,1.805,361,2.028,362,2.076,363,1.511,364,1.587,365,2.016,366,1.758,367,1.135,368,1.439,369,1.371,370,2.276,371,1.855,372,2.205,373,2.276,374,1.805,375,2.139,376,2.276,386,2.762,407,4.091,411,2.742,459,5.732,476,6.531,586,2.206,623,2.107,699,3.727,733,1.156,811,3.588,954,1.474,1049,2.519,1051,2.717,1183,5.23,1245,3.724,1247,2.601,1271,3.299,1339,3.213,1422,3.267,1491,1.628,1546,3.453,1705,3.904,1790,2.83,2279,3.959,2280,4.339,2282,5.23,2343,7.037,2344,4.339,2345,8.809,2346,7.274,2347,6.495,2348,7.274,2349,8.264,2350,6.495,2351,7.274,2352,7.274,2353,8.045,2354,7.274,2355,4.917,2356,6.495,2357,6.495,2358,7.737,2359,6.495,2360,4.917,2361,4.917,2362,4.854,2363,6.495,2364,6.495,2365,6.495,2366,4.917,2367,4.917,2368,6.495,2369,4.917,2370,4.917,2371,4.917,2372,4.917,2373,4.917,2374,7.274,2375,4.917,2376,4.917,2377,4.917,2378,4.917,2379,2.519,2380,2.432,2381,2.519,2382,2.519,2383,2.519,2384,2.519,2385,2.519,2386,6.495]],["title/interfaces/ExportColumn.html",[0,0.058,1854,3.289]],["body/interfaces/ExportColumn.html",[0,0.074,2,0.775,3,0.142,4,0.069,5,0.109,8,0.236,12,0.158,13,0.408,18,0.198,19,0.009,20,1.351,26,0.177,27,1.186,30,1.917,34,0.86,35,1.13,36,1.177,40,2.28,50,0.744,58,2.461,59,0.812,60,1.582,62,1.415,66,0.812,72,1.249,73,2.561,75,0.443,77,0.047,82,1.158,84,0.736,85,3.378,94,1.074,95,2.957,97,1.295,99,2.478,106,2.398,107,1.266,111,2.591,112,1.609,113,0.415,126,0.584,132,2.435,140,2.111,144,1.366,145,0.004,146,0.006,147,0.004,148,0.393,166,0.757,167,0.812,168,1.534,170,1.158,172,1.592,198,0.564,205,1.892,215,0.702,216,2.296,225,2.231,238,3.186,241,1.366,245,0.721,270,0.482,271,0.403,278,0.649,284,0.788,333,1.534,344,1.792,347,0.914,386,2.623,390,2.774,412,2.622,425,1.263,435,2.677,436,1.534,457,1.763,480,1.379,502,1.13,511,2.826,513,4.223,525,2.511,537,1.31,578,1.158,605,1.31,623,1.077,649,1.453,652,1.052,667,3.359,679,4.117,683,2.435,703,2.231,713,0.958,716,2.28,725,1.31,733,1.523,754,2.066,758,2.623,760,2.896,790,2.774,792,1.344,834,1.379,861,1.853,862,1.492,877,1.763,897,1.721,981,3.589,990,1.623,1016,2.17,1033,2.492,1040,1.492,1045,1.72,1046,2.055,1061,1.534,1070,2.914,1076,2.774,1201,1.492,1216,1.277,1241,4.076,1245,3.007,1247,2.323,1249,1.623,1253,1.103,1256,2.002,1257,1.775,1266,2.591,1280,1.957,1356,2.027,1471,1.577,1487,2.027,1705,2.378,1748,4.555,1750,2.277,1757,4.184,1760,5.57,1762,5.686,1770,3.186,1773,4.507,1774,3.186,1775,3.186,1805,4.184,1842,2.957,1843,2.492,1844,2.957,1845,3.186,1846,4.94,1847,5.733,1848,4.94,1849,4.94,1850,3.492,1851,3.492,1852,3.492,1853,3.492,1854,5.783,1855,4.94,1856,6.542,1857,2.957,1858,3.168,1859,4.94,1860,3.492,1861,4.94,1862,4.507,1863,4.94,1864,2.677,1865,3.186,1866,4.507,1867,4.507,1868,6,1869,3.186,1870,3.492,1871,3.492,1872,2.492,1873,3.492,1874,5.733,1875,2.774,1876,2.957,1877,3.186,1878,3.492,1879,3.492,1880,3.492,1881,3.492,1882,3.492,1883,3.492,1884,4.94,1885,5.733,1886,3.492,1887,3.492,1888,2.774,1889,3.492,1890,3.492,1891,3.492,1892,3.492,1893,3.186,1894,3.492,1895,3.492,1896,3.492,1897,3.492,1898,3.492,1899,3.492,1900,3.492,1901,3.492,1902,3.492,1903,3.492,1904,3.492,1905,3.492,1906,5.733,1907,4.275,1908,3.492,1909,3.492,1910,3.492,1911,3.492,1912,4.184,1913,3.492,1914,3.492,1915,3.492,1916,3.492,1917,3.492,1918,3.492,1919,3.492,1920,3.492,1921,3.492,1922,3.492,1923,3.492,1924,3.492,1925,3.492,1926,3.492,1927,4.855,1928,3.492,1929,4.507,1930,3.492,1931,4.507,1932,3.492,1933,4.94,1934,3.186,1935,3.186,1936,4.94,1937,3.492,1938,3.492,1939,3.492,1940,5.733,1941,3.492,1942,4.94,1943,3.492,1944,3.492,1945,3.492,1946,3.492,1947,6.233,1948,3.492,1949,3.492,1950,3.492,1951,3.492,1952,4.94,1953,3.492,1954,3.492,1955,3.492,1956,3.492,1957,3.492,1958,3.492,1959,3.492,1960,3.492,1961,3.492,1962,3.492,1963,3.492,1964,3.492,1965,3.492,1966,5.733,1967,3.492,1968,3.492,1969,3.492,1970,3.492,1971,3.492,1972,3.492,1973,3.492,1974,3.492,1975,3.492,1976,3.492,1977,3.492,1978,1.957,1979,3.492,1980,3.492,1981,3.492,1982,3.492,1983,3.492,1984,4.507,1985,3.492,1986,3.492,1987,3.492,1988,3.492,1989,3.492,1990,3.492,1991,3.492,1992,3.492,1993,3.492,1994,3.492,1995,3.492,1996,3.492,1997,3.492,1998,3.492,1999,3.492,2000,3.492,2001,3.492,2002,3.492,2003,3.492,2004,3.492,2005,3.492,2006,3.492,2007,3.492]],["title/classes/FilterBuilder.html",[77,0.052,2176,2.105]],["body/classes/FilterBuilder.html",[3,0.073,4,0.058,5,0.051,8,0.198,12,0.133,13,0.36,14,0.82,18,0.309,19,0.009,26,0.128,35,1.86,59,0.518,61,1.41,71,0.864,75,0.477,77,0.04,81,3.272,94,0.449,113,0.518,125,4.119,126,0.679,129,0.426,145,0.006,146,0.005,147,0.003,172,1.697,178,0.72,192,0.901,194,1.722,198,0.784,213,1.193,214,1.758,215,0.936,227,2.749,278,0.634,284,0.851,314,1.813,378,0.997,412,3.272,435,2.361,451,0.621,549,2.176,565,4.306,573,2.624,699,1.705,713,1.576,733,1.159,756,1.445,825,2.394,833,1.813,844,2.051,871,1.773,886,1.555,889,1.634,898,3.748,911,2.361,913,2.025,990,2.025,1061,1.914,1181,6.661,1327,2.905,1682,4.357,1826,5.483,2076,2.967,2081,1.838,2176,4.475,2178,3.462,2264,3.975,2267,3.975,2289,3.69,2307,6.486,2326,5.447,2362,3.69,2387,6.631,2388,2.486,2389,4.937,2390,4.937,2391,4.937,2392,7.288,2393,4.937,2394,4.937,2395,4.937,2396,4.937,2397,4.937,2398,4.937,2399,4.937,2400,4.937,2401,4.937,2402,5.886,2403,4.937,2404,6.513,2405,5.748,2406,4.937,2407,6.513,2408,4.937,2409,4.937,2410,4.937,2411,4.937,2412,4.937,2413,4.937,2414,4.937,2415,3.327,2416,3.327,2417,4.937,2418,3.327,2419,8.663,2420,8.922,2421,3.327,2422,3.327,2423,7.545,2424,8.273,2425,3.327,2426,3.327,2427,4.937,2428,3.327,2429,3.327,2430,4.937,2431,3.327,2432,4.937,2433,3.327,2434,4.937,2435,7.288,2436,4.937,2437,4.937,2438,3.327,2439,3.327,2440,4.937,2441,7.684,2442,8.173,2443,3.327,2444,4.937,2445,3.327,2446,3.327,2447,4.937,2448,4.937,2449,3.327,2450,4.937,2451,3.327,2452,4.937,2453,3.327,2454,4.937,2455,3.327,2456,4.937,2457,3.327,2458,4.937,2459,3.327,2460,3.327,2461,3.327,2462,4.937,2463,3.327,2464,2.679,2465,4.357,2466,4.357,2467,4.357,2468,4.357,2469,2.936,2470,2.936,2471,7.749,2472,3.327,2473,3.327,2474,3.327,2475,3.327,2476,6.513,2477,7.545,2478,7.545,2479,4.937,2480,6.513,2481,8.616,2482,4.937,2483,7.288,2484,6.513,2485,6.513,2486,6.513,2487,6.513,2488,3.327,2489,3.327,2490,3.327,2491,3.327,2492,3.327,2493,3.327,2494,3.327,2495,4.937,2496,3.327,2497,4.937,2498,3.327,2499,4.937,2500,3.327,2501,4.937,2502,3.327,2503,3.327,2504,3.327,2505,3.327,2506,3.327,2507,3.327,2508,3.327]],["title/interfaces/FilterConfig.html",[0,0.058,822,1.616]],["body/interfaces/FilterConfig.html",[0,0.084,2,0.921,3,0.103,4,0.082,5,0.072,8,0.28,9,2.21,12,0.188,13,0.554,14,0.728,18,0.313,19,0.009,26,0.173,35,1.343,36,0.988,45,3.781,47,1.481,50,1.009,52,0.986,59,0.798,60,1.177,61,2.171,66,0.965,75,0.462,77,0.075,94,0.851,97,1.095,107,1.012,109,1.823,110,2.176,112,1.165,113,0.9,116,1.311,126,0.596,129,0.602,144,0.988,145,0.005,146,0.006,147,0.005,148,0.572,150,1.567,172,0.921,178,0.92,185,1.481,192,0.479,196,1.97,198,0.774,240,1.985,248,2.035,270,0.527,271,0.479,278,0.595,284,0.724,335,1.25,338,1.28,341,1.638,345,1.638,351,1.445,361,1.758,369,1.758,378,2.133,387,2.499,389,2.326,396,0.921,408,1.892,425,1.422,436,2.757,439,1.41,447,3.252,451,0.878,503,1.018,550,2.516,566,2.141,568,1.481,578,2.081,592,2.761,623,1.28,643,2.326,649,1.726,652,1.25,679,3.93,699,2.409,703,1.874,713,1.839,725,1.556,733,1.122,752,2.917,754,1.974,756,1.376,759,1.343,761,2.141,767,2.109,768,1.681,806,2.507,808,1.823,822,2.612,823,2.648,825,2.356,826,2.197,827,2.355,835,2.834,855,2.409,856,1.985,859,1.928,860,3.326,863,2.478,871,1.28,874,1.556,878,1.985,887,1.681,889,1.556,901,1.823,911,2.249,912,2.176,913,1.928,916,2.409,917,1.928,918,3.519,920,2.045,921,2.326,922,2.409,923,2.326,924,2.409,925,2.409,926,2.045,954,1.41,1040,1.773,1041,2.598,1045,1.937,1046,2.315,1061,1.823,1201,1.773,1208,2.706,1216,1.518,1238,2.045,1247,1.681,1253,1.311,1254,2.045,1255,2.109,1256,2.255,1257,2.109,1258,1.556,1271,1.928,1302,3.015,1327,2.513,1329,2.757,1330,2.662,1332,2.828,1396,1.556,1422,1.985,1471,1.874,1688,3.297,1692,2.706,1705,2.826,1772,4.275,1858,3.409,1864,2.249,2049,1.985,2050,3.116,2051,3.786,2052,3.514,2053,3.786,2054,2.961,2055,6.569,2056,5.076,2057,2.961,2058,2.826,2059,2.326,2060,2.499,2061,3.519,2063,2.961,2064,3.119,2068,2.826,2069,3.971,2071,2.961,2074,2.961,2076,2.826,2078,2.961,2080,2.706,2081,2.598,2083,2.961,2084,2.961,2087,2.499,2089,2.826,2090,2.961,2091,2.961,2092,3.971,2093,2.706,2095,2.326,2102,3.786,2103,3.786,2104,3.786,2105,3.514,2106,3.514,2107,3.514,2108,4.421,2109,3.514,2110,5.076,2111,5.076,2112,3.786,2113,3.786,2114,3.786,2115,3.786,2116,5.727,2117,3.786,2118,3.786,2119,3.786,2120,3.786,2121,3.786,2122,3.786,2123,3.786,2124,3.786,2125,3.786,2126,3.786,2127,3.116,2128,2.918,2129,5.076,2130,3.786,2131,3.116,2132,3.514,2133,3.514,2134,3.116,2135,3.116,2136,3.514,2137,3.514]],["title/interfaces/FilterRendererSpec.html",[0,0.058,823,1.533]],["body/interfaces/FilterRendererSpec.html",[0,0.084,2,0.925,3,0.103,4,0.083,5,0.073,8,0.282,9,2.327,12,0.189,13,0.519,18,0.313,19,0.009,26,0.173,35,1.349,36,0.993,45,3.789,47,1.487,50,1.009,52,0.988,59,0.799,60,0.882,61,2.175,66,0.97,75,0.446,77,0.075,94,0.853,97,1.098,107,1.014,109,1.83,110,2.186,112,1.17,113,0.901,116,1.317,126,0.597,129,0.604,144,0.993,145,0.005,146,0.006,147,0.005,148,0.602,150,1.571,172,0.925,178,0.923,185,1.487,192,0.481,196,2.068,198,0.754,240,1.993,248,2.041,270,0.528,271,0.481,278,0.595,284,0.726,335,1.256,338,1.286,341,1.645,345,1.645,351,1.451,361,1.763,369,1.988,378,2.137,387,2.51,389,2.336,396,0.925,408,1.896,425,1.608,436,2.763,439,1.416,447,3.256,451,0.882,503,1.151,550,2.52,566,1.603,568,1.487,578,2.086,592,2.907,623,1.286,643,2.336,649,1.734,652,1.256,679,3.493,699,2.419,703,1.882,713,1.725,725,1.563,733,1.125,752,2.923,754,2.061,756,1.382,759,1.349,761,2.42,767,2.118,768,1.688,806,2.19,808,1.83,822,2.322,823,2.765,825,2.381,826,2.203,827,2.52,835,2.921,855,3.239,856,2.245,859,1.936,860,3.392,863,2.203,871,1.286,874,1.563,878,1.993,887,1.688,889,1.563,901,1.83,911,2.258,912,2.186,913,1.936,916,2.419,917,1.936,918,3.351,920,2.054,921,2.336,922,2.419,923,2.336,924,2.419,925,2.419,926,2.054,954,1.416,1040,1.781,1041,2.609,1045,1.942,1046,2.322,1061,1.83,1201,1.781,1208,2.717,1216,1.524,1238,2.054,1247,1.688,1253,1.317,1254,2.054,1255,2.118,1256,2.261,1257,2.118,1258,1.563,1271,1.936,1302,2.258,1327,1.882,1329,2.763,1330,2.669,1332,2.118,1396,1.563,1422,1.993,1471,1.882,1688,3.311,1692,2.717,1705,2.838,1772,3.8,1858,3.415,1864,2.258,2049,1.993,2050,3.129,2051,3.802,2052,3.529,2053,3.802,2054,2.974,2055,5.739,2056,5.09,2057,2.974,2058,2.838,2059,2.336,2060,2.51,2061,3.526,2063,2.974,2064,3.128,2068,2.838,2069,3.982,2071,2.974,2074,2.974,2076,2.838,2078,2.974,2080,2.717,2081,2.609,2083,2.974,2084,2.974,2087,2.51,2089,2.838,2090,2.974,2091,2.974,2092,3.982,2093,2.717,2095,2.336,2102,3.802,2103,3.802,2104,3.802,2105,3.529,2106,3.529,2107,3.529,2108,4.433,2109,3.529,2110,3.802,2111,3.802,2112,3.802,2113,3.802,2114,3.802,2115,3.802,2116,5.739,2117,3.802,2118,3.802,2119,3.802,2120,3.802,2121,3.802,2122,3.802,2123,3.802,2124,3.802,2125,3.802,2126,3.802,2127,3.129,2128,2.927,2129,5.09,2130,3.802,2131,3.129,2132,3.529,2133,3.529,2134,3.129,2135,3.129,2136,3.529,2137,3.529]],["title/components/FilterTestHostComponent.html",[148,0.309,349,1.858]],["body/components/FilterTestHostComponent.html",[3,0.101,4,0.081,5,0.071,8,0.277,9,1.294,12,0.185,13,0.455,14,0.444,18,0.31,19,0.009,25,2.049,26,0.154,47,2.225,50,0.716,52,1.048,58,1.617,59,0.742,60,1.167,63,1.461,72,0.677,75,0.386,77,0.055,84,0.821,86,2.267,112,1.548,113,0.793,126,0.554,129,0.904,144,0.976,145,0.005,146,0.006,147,0.005,148,0.554,149,1.903,150,1.377,151,2.267,153,1.426,154,1.85,165,1.85,166,1.745,167,1.855,178,0.912,192,0.77,196,2.023,198,0.706,213,0.821,214,1.283,215,0.879,245,1.139,248,2.281,270,0.526,271,0.473,278,0.455,284,0.77,319,1.536,320,1.705,321,1.477,322,1.576,323,3.499,324,2.148,325,2.148,326,1.426,327,1.498,328,1.743,329,2.893,330,1.391,331,1.959,332,2.148,333,1.799,334,2.148,335,1.234,336,2.148,337,1.704,338,2.059,339,1.75,340,3.499,341,1.617,342,1.75,343,1.799,344,1.177,345,2.177,346,1.903,347,1.072,348,2.148,349,3.566,350,1.799,351,2.497,352,2.148,353,1.799,354,2.893,355,1.75,356,2.148,357,1.903,358,1.461,359,2.148,360,1.704,361,2.201,362,1.959,363,1.426,364,1.498,365,1.903,366,1.659,367,1.072,368,1.358,369,1.294,370,2.148,371,1.75,372,2.081,373,2.148,374,1.704,375,2.019,376,2.148,396,0.909,403,2.639,425,1.047,443,3.468,454,2.703,473,3.322,484,3.736,511,2.718,537,1.536,565,2.219,592,1.617,597,2.019,623,1.264,649,2.295,656,2.235,703,2.491,726,3.453,728,2.789,729,3.076,733,1.258,754,2.32,759,2.018,760,2.563,761,2.122,762,2.923,786,3.736,791,3.254,806,2.497,823,2.177,825,2.394,860,3.274,877,1.461,881,3.762,896,2.423,905,1.326,917,2.563,918,1.959,1061,2.423,1077,2.177,1208,2.671,1258,2.339,1285,3.495,1329,2.423,1339,3.091,1371,2.563,1539,3.322,2010,4.32,2128,3.499,2139,3.091,2184,3.076,2318,3.254,2328,3.468,2509,6.353,2510,3.736,2511,6.249,2512,7.066,2513,7.066,2514,7.066,2515,4.641,2516,5.447,2517,4.743,2518,4.641,2519,6.249,2520,7.173,2521,7.066,2522,4.641,2523,6.249,2524,4.641,2525,4.641,2526,3.076,2527,2.789,2528,6.249,2529,4.142,2530,4.641,2531,2.177,2532,5.689,2533,4.641,2534,2.671,2535,2.148,2536,1.903,2537,4.641,2538,4.641,2539,4.641,2540,4.095,2541,3.468,2542,4.641,2543,4.095,2544,2.789,2545,4.095,2546,4.095,2547,4.095,2548,4.095,2549,5.032,2550,4.095,2551,6.249,2552,6.249,2553,6.249,2554,6.249,2555,3.736,2556,4.641,2557,4.641]],["title/interfaces/FindParams.html",[0,0.058,2558,2.645]],["body/interfaces/FindParams.html",[0,0.097,2,0.744,3,0.083,4,0.066,5,0.058,8,0.227,12,0.152,13,0.396,14,0.731,18,0.297,19,0.009,20,0.726,25,0.986,26,0.151,34,0.583,35,1.085,41,2.283,50,0.937,52,0.526,57,2.176,59,0.77,66,1.424,71,1.905,72,0.927,75,0.483,76,1.894,77,0.082,80,2.176,84,1.164,86,1.63,90,2.13,97,0.945,107,0.54,111,1.758,112,0.941,113,0.666,124,2.029,126,0.298,134,2.372,142,1.703,144,0.798,145,0.004,146,0.007,147,0.004,148,0.574,153,2.13,154,2.531,164,2.108,166,1.326,172,0.744,178,0.554,192,0.387,194,1.111,198,0.552,200,1.196,201,2.786,213,0.715,215,0.588,240,2.295,241,0.798,245,0.991,246,1.358,270,0.395,271,0.387,278,0.605,284,0.865,314,1.996,321,2.085,347,0.877,367,1.857,391,2.843,392,2.681,396,0.744,411,2.295,425,1.722,447,1.514,451,1.37,457,1.712,473,2.019,502,1.085,503,0.613,547,2.689,548,2.89,549,1.734,550,2.749,551,2.89,552,2.108,553,2.019,556,2.019,563,2.019,565,3.316,566,2.156,567,2.019,568,1.196,569,3.376,570,2.689,571,2.019,572,2.019,573,3.327,574,4.668,576,1.946,577,2.89,578,1.591,579,2.89,580,2.108,581,4.35,582,3.43,583,3.254,584,2.271,585,2.019,586,2.669,587,4.058,589,2.019,591,3.11,592,2.893,593,2.439,594,4.389,595,2.019,597,2.365,598,1.879,599,2.019,602,2.019,604,2.73,605,1.257,606,2.019,607,2.019,609,2.019,610,2.019,612,2.019,613,2.786,614,1.946,615,2.019,616,1.816,617,1.879,618,2.019,619,1.196,620,2.89,621,2.019,623,1.034,624,2.019,642,2.098,649,1.394,708,2.185,716,1.226,733,0.676,753,1.557,871,1.034,877,2,880,1.879,887,1.358,889,2.429,897,1.652,913,2.23,917,1.557,920,1.652,926,1.652,1031,3.129,1061,1.472,1066,4.167,1077,2.416,1259,1.603,1295,1.758,1303,1.758,1307,1.703,1327,2.925,1396,1.8,1458,3.291,1499,1.758,1544,3.11,1695,2.098,1767,3.141,1820,3.424,1872,2.392,2010,2.019,2035,3.603,2095,1.879,2128,1.758,2516,3.424,2517,4.41,2526,2.517,2527,2.283,2544,3.817,2558,4.588,2559,2.392,2560,2.283,2561,5.352,2562,5.064,2563,5.352,2564,3.812,2565,5.155,2566,4,2567,2.517,2568,2.283,2569,2.663,2570,2.663,2571,2.663,2572,5.352,2573,2.663,2574,2.663,2575,3.812,2576,2.663,2577,2.663,2578,2.663,2579,4.453,2580,2.663,2581,4.453,2582,2.517,2583,2.663,2584,2.663,2585,4.453,2586,2.663,2587,2.517,2588,2.663,2589,2.517,2590,2.663,2591,2.663,2592,2.663,2593,2.663,2594,2.663,2595,3.812,2596,2.663,2597,2.517,2598,2.663,2599,2.663,2600,2.663,2601,2.663,2602,2.663,2603,2.517,2604,2.663,2605,2.663,2606,2.663,2607,2.517,2608,2.663,2609,2.663,2610,2.517,2611,2.663,2612,2.663,2613,3.268,2614,3.812,2615,3.812,2616,2.663,2617,2.663,2618,4.453,2619,3.812,2620,4.453,2621,2.663,2622,4.453,2623,4.453,2624,2.663,2625,2.663,2626,2.663,2627,2.663,2628,2.663,2629,2.663,2630,2.663,2631,2.517,2632,2.663,2633,2.663,2634,2.663,2635,2.663,2636,2.663,2637,2.663,2638,2.663,2639,3.812,2640,2.185,2641,2.517,2642,2.663,2643,2.663,2644,2.663,2645,2.663,2646,4,2647,2.283,2648,2.663,2649,2.663,2650,2.663,2651,2.663,2652,2.663,2653,3.812,2654,2.663,2655,2.663,2656,2.663,2657,2.663,2658,2.663,2659,2.663,2660,2.663,2661,2.663,2662,2.663,2663,2.663,2664,2.663,2665,2.392,2666,2.663,2667,2.663,2668,4.861,2669,2.663,2670,4.209,2671,2.663,2672,2.663,2673,2.663,2674,2.663,2675,2.663,2676,2.663,2677,2.663,2678,2.663,2679,2.663,2680,2.663,2681,2.663,2682,2.663,2683,4.453,2684,2.663,2685,2.663,2686,2.663,2687,2.663,2688,2.663,2689,2.663,2690,2.663,2691,2.663,2692,2.392]],["title/interfaces/FindableWidget.html",[0,0.058,2646,2.772]],["body/interfaces/FindableWidget.html",[0,0.105,2,0.751,3,0.084,4,0.067,5,0.059,8,0.229,12,0.153,13,0.399,14,0.367,18,0.294,19,0.009,20,0.734,25,1.422,26,0.152,34,0.589,35,1.096,41,2.306,50,0.94,52,0.532,57,2.097,59,0.773,66,1.43,71,1.913,72,0.932,75,0.484,76,1.337,77,0.076,80,2.144,84,1.166,86,1.642,90,1.962,97,0.951,107,0.546,111,1.776,112,0.951,113,0.575,124,2.038,126,0.301,134,2.344,142,1.721,144,0.807,145,0.004,146,0.007,147,0.004,148,0.576,153,2.14,154,2.183,164,1.487,166,1.332,172,0.751,178,0.56,192,0.391,194,1.123,198,0.555,200,1.208,201,2.806,213,0.72,215,0.415,240,1.62,241,0.807,245,0.999,246,1.372,270,0.397,271,0.391,278,0.606,284,0.866,314,2.011,321,2.088,347,0.886,367,1.821,391,2.857,392,2.697,396,0.751,411,2.312,425,1.662,447,1.529,451,1.376,457,1.725,473,2.039,502,1.096,503,0.884,547,3.159,548,3.915,549,1.741,550,2.755,551,2.911,552,2.123,553,2.039,556,2.039,563,2.039,565,3.663,566,2.169,567,2.039,568,1.208,569,3.395,570,2.709,571,2.039,572,2.039,573,3.332,574,4.595,576,1.966,577,2.911,578,1.603,579,2.911,580,2.123,581,4.361,582,3.446,583,3.272,584,2.284,585,2.039,586,2.677,587,4.071,589,2.039,591,3.124,592,2.859,593,2.456,594,4.359,595,2.039,597,2.382,598,1.898,599,2.039,602,2.039,604,2.739,605,1.27,606,2.039,607,2.039,609,2.039,610,2.039,612,2.039,613,2.806,614,1.966,615,2.039,616,1.835,617,1.898,618,2.039,619,1.208,620,2.911,621,2.039,623,1.045,624,2.039,642,2.12,649,1.409,708,2.208,716,1.239,733,0.683,753,1.573,871,1.491,877,2.011,880,1.898,887,1.372,889,2.306,897,1.669,913,2.619,917,1.573,920,2.382,926,1.669,1031,3.675,1061,1.487,1066,3.839,1077,2.427,1259,1.62,1295,1.776,1303,1.776,1307,1.721,1327,2.936,1396,1.813,1458,3.304,1499,1.776,1544,3.124,1695,2.12,1767,3.159,1820,2.417,1872,2.417,2010,2.039,2035,3.63,2095,1.898,2128,1.776,2516,3.45,2517,4.187,2526,2.543,2527,2.306,2544,3.839,2558,4.427,2559,2.417,2560,2.306,2561,4.478,2562,4.639,2563,4.478,2564,2.69,2565,5.077,2566,4.023,2567,2.543,2568,2.306,2569,2.69,2570,2.69,2571,2.69,2572,5.371,2573,2.69,2574,2.69,2575,3.84,2576,2.69,2577,2.69,2578,2.69,2579,4.884,2580,2.69,2581,4.884,2582,2.543,2583,2.69,2584,2.69,2585,4.478,2586,2.69,2587,2.543,2588,2.69,2589,2.543,2590,2.69,2591,2.69,2592,2.69,2593,2.69,2594,2.69,2595,3.84,2596,2.69,2597,2.543,2598,2.69,2599,2.69,2600,2.69,2601,2.69,2602,2.69,2603,2.543,2604,2.69,2605,2.69,2606,2.69,2607,2.543,2608,2.69,2609,2.69,2610,2.543,2611,2.69,2612,2.69,2613,3.292,2614,3.84,2615,3.84,2616,2.69,2617,2.69,2618,4.478,2619,3.84,2620,4.478,2621,2.69,2622,4.478,2623,4.478,2624,2.69,2625,2.69,2626,2.69,2627,2.69,2628,2.69,2629,2.69,2630,2.69,2631,2.543,2632,2.69,2633,2.69,2634,2.69,2635,2.69,2636,2.69,2637,2.69,2638,2.69,2639,3.84,2640,2.208,2641,2.543,2642,2.69,2643,2.69,2644,2.69,2645,2.69,2646,4.639,2647,3.292,2648,2.69,2649,3.84,2650,3.84,2651,2.69,2652,2.69,2653,3.84,2654,2.69,2655,2.69,2656,2.69,2657,2.69,2658,2.69,2659,2.69,2660,2.69,2661,2.69,2662,2.69,2663,2.69,2664,2.69,2665,2.417,2666,2.69,2667,2.69,2668,4.884,2669,2.69,2670,4.233,2671,2.69,2672,2.69,2673,2.69,2674,2.69,2675,2.69,2676,2.69,2677,2.69,2678,2.69,2679,2.69,2680,2.69,2681,2.69,2682,2.69,2683,4.478,2684,2.69,2685,2.69,2686,2.69,2687,2.69,2688,2.69,2689,2.69,2690,2.69,2691,2.69,2692,2.417,2693,3.837]],["title/components/FormCheckboxComponent.html",[148,0.309,350,1.706]],["body/components/FormCheckboxComponent.html",[3,0.095,4,0.076,5,0.067,8,0.476,12,0.175,13,0.437,14,0.783,18,0.32,19,0.009,26,0.131,27,1.31,34,0.921,50,0.687,52,1.022,59,0.838,60,0.816,62,2.637,63,1.376,71,1.558,72,1.248,75,0.466,77,0.052,82,1.755,94,1.124,96,2.655,97,0.759,98,1.522,99,2.317,107,1.246,113,0.811,117,2.145,126,0.578,129,1.046,130,6.111,132,3.855,145,0.004,146,0.006,147,0.004,148,0.517,149,1.792,150,1.322,151,1.31,153,1.342,154,1.741,165,1.741,166,1.743,167,1.854,170,1.755,178,0.875,185,1.889,188,2.609,192,0.922,198,0.743,213,0.969,214,1.587,215,0.924,270,0.426,271,0.445,278,0.318,319,1.446,320,1.663,321,1.743,322,2.037,323,3.413,324,2.022,325,2.022,326,1.342,327,1.41,328,1.673,329,2.777,330,1.31,331,1.845,332,2.022,333,1.694,334,2.022,335,1.162,336,2.022,337,1.604,338,2.008,339,1.648,340,3.413,341,1.522,342,1.648,343,1.694,344,1.108,345,1.522,346,1.792,347,1.582,348,2.022,349,1.845,350,2.858,351,2.709,352,2.022,353,1.694,354,2.777,355,1.648,356,2.022,357,1.792,358,1.376,359,2.022,360,1.604,361,1.91,362,1.845,363,1.342,364,1.41,365,1.792,366,1.562,367,1.009,368,1.278,369,1.218,370,2.022,371,1.648,372,1.96,373,2.022,374,1.604,375,1.9,376,2.022,396,1.175,436,2.325,451,0.816,457,1.889,503,0.968,524,1.19,526,3.635,550,1.986,639,5.687,642,3.314,646,2.239,650,4.601,655,4.483,656,2.45,657,4.483,658,5.119,659,4.483,660,4.483,661,4.483,662,4.483,663,4.483,664,4.483,665,4.206,666,4.483,667,2.533,671,5.598,675,3.265,677,2.089,678,3.063,679,3.784,680,3.265,681,1.446,683,1.9,684,4.483,686,3.265,687,3.265,688,4.206,689,3.452,691,3.265,693,3.265,694,3.063,696,3.063,697,3.265,699,2.239,700,4.483,702,5.966,703,1.741,704,3.265,705,2.089,707,2.626,708,2.514,709,2.514,711,2.089,713,1.057,715,3.265,716,2.495,725,1.446,797,2.089,829,4.269,851,3.073,871,1.633,1046,1.604,1049,3.073,1051,4.074,1831,4.829,1907,4.919,2212,3.976,2298,5.775,2694,5.419,2695,6.111,2696,3.518,2697,5.998,2698,6.85,2699,6.85,2700,6.85,2701,3.856,2702,4.369,2703,4.829,2704,4.369,2705,5.998,2706,4.369,2707,6.045,2708,6.85,2709,4.369,2710,4.369,2711,3.518,2712,3.518,2713,3.518,2714,3.518,2715,3.518,2716,3.518,2717,3.518,2718,3.518,2719,3.518,2720,3.518,2721,3.518,2722,3.518,2723,3.518,2724,3.518,2725,3.518,2726,4.369,2727,4.369,2728,3.265,2729,3.856,2730,4.369,2731,3.518,2732,3.518,2733,4.829]],["title/components/FormInputComponent.html",[148,0.309,353,1.706]],["body/components/FormInputComponent.html",[3,0.074,4,0.059,5,0.052,8,0.452,12,0.135,13,0.364,14,0.745,18,0.32,19,0.009,25,1.298,26,0.13,34,0.912,35,0.966,50,0.572,52,1.079,57,0.899,59,0.871,60,0.631,61,0.966,62,1.787,63,1.065,71,1.904,72,0.867,75,0.474,77,0.04,82,1.462,94,0.99,96,2.304,97,1.032,98,1.178,99,1.782,106,1.697,107,1.3,109,1.937,112,0.838,113,0.355,126,0.687,129,1.062,132,3.387,144,1.249,145,0.003,146,0.005,147,0.003,148,0.546,149,1.387,150,1.101,151,1.014,152,2.033,153,1.039,154,1.348,165,1.348,166,1.709,167,1.814,168,1.937,170,1.462,178,0.729,185,1.573,192,0.92,194,2.145,195,1.065,198,0.789,200,1.871,213,0.997,214,1.505,215,0.887,241,1.05,245,1.084,248,1.613,270,0.37,271,0.344,278,0.478,284,0.605,314,1.242,319,1.119,320,1.58,321,1.793,322,1.697,323,3.039,324,1.565,325,1.565,326,1.039,327,1.092,328,1.394,329,2.313,330,1.014,331,1.428,332,1.565,333,1.311,334,1.565,335,0.899,336,1.565,337,1.242,338,1.788,339,1.275,340,3.039,341,1.178,342,1.275,343,1.311,344,0.858,345,1.178,346,1.387,347,1.372,348,1.565,349,1.428,350,1.311,351,2.703,352,1.565,353,2.545,354,2.313,355,1.275,356,1.565,357,1.387,358,1.065,359,1.565,360,1.242,361,1.657,362,1.428,363,1.039,364,1.092,365,1.387,366,1.209,367,0.781,368,0.99,369,0.943,370,1.565,371,1.275,372,1.517,373,1.565,374,1.242,375,1.471,376,1.565,396,0.979,436,1.937,451,0.631,503,0.806,524,0.921,526,3.497,550,1.654,566,1.697,586,2.229,592,1.741,616,3.139,617,2.472,639,5.469,646,1.733,650,4.302,652,1.329,655,3.734,656,2.125,657,3.734,658,4.441,659,3.734,660,3.734,661,3.734,662,3.734,663,5.668,664,3.734,665,3.504,666,3.734,667,2.11,671,5.141,675,2.527,677,1.617,678,2.371,679,4.468,680,2.527,681,1.654,683,1.471,684,3.734,686,2.527,687,2.527,688,3.504,689,2.876,691,2.527,693,2.527,694,2.371,696,2.371,697,2.527,699,1.733,700,3.734,702,3.734,703,1.348,704,2.527,705,1.617,707,2.033,708,1.946,709,1.946,711,1.617,713,0.818,715,2.527,716,1.092,725,1.119,733,1.168,797,1.617,825,1.329,844,2.067,856,1.573,878,2.11,906,2.505,936,2.313,980,2.656,1006,2.049,1040,1.275,1044,2.666,1049,3.589,1053,3.003,1077,1.178,1136,3.312,1149,3.312,1227,4.023,1243,3.159,1245,2.751,1247,2.125,1249,2.437,1265,3.247,1266,3.039,1271,1.387,1307,1.517,1325,3.489,1327,1.992,1339,2.472,1340,2.56,1446,1.733,1509,2.94,1662,3.489,1763,4.41,1767,2.472,1791,4.023,1826,3.312,1864,1.617,1912,5.942,2068,3.003,2131,4.351,2212,3.312,2234,2.723,2282,5.285,2568,3.003,2587,4.351,2694,5.69,2701,2.984,2703,4.023,2711,2.723,2712,2.723,2713,2.723,2714,2.723,2715,2.723,2716,2.723,2717,2.723,2718,2.723,2719,2.723,2720,2.723,2721,2.723,2722,2.723,2723,2.723,2724,2.723,2725,2.723,2728,2.527,2731,2.723,2732,2.723,2734,6.416,2735,2.371,2736,4.997,2737,6.564,2738,6.564,2739,2.984,2740,5.245,2741,4.41,2742,7.004,2743,6.564,2744,5.245,2745,5.245,2746,4.785,2747,5.639,2748,5.943,2749,5.943,2750,4.997,2751,3.382,2752,5.245,2753,3.382,2754,4.41,2755,3.382,2756,5.793,2757,3.382,2758,4.41,2759,4.41,2760,4.41,2761,4.997,2762,3.382,2763,4.41,2764,2.984,2765,3.382,2766,3.382,2767,3.382,2768,6.564,2769,6.564,2770,4.997,2771,4.997,2772,3.382,2773,3.382,2774,4.41,2775,3.382,2776,4.41,2777,4.997,2778,3.312,2779,4.997,2780,4.997,2781,3.382,2782,4.41,2783,4.41,2784,5.245,2785,2.984,2786,3.382,2787,2.984,2788,4.41,2789,3.382,2790,3.382,2791,5.943,2792,4.41,2793,4.997,2794,3.382,2795,3.382,2796,3.382,2797,3.382,2798,4.997,2799,3.382,2800,3.382,2801,3.382,2802,3.382,2803,3.382,2804,3.382,2805,3.382,2806,3.382,2807,3.382,2808,3.382,2809,2.984,2810,2.984,2811,4.997,2812,2.984,2813,2.723,2814,2.984,2815,4.41,2816,2.984,2817,3.504,2818,5.943,2819,4.997,2820,5.245,2821,4.997,2822,2.984,2823,3.382,2824,3.382,2825,3.382]],["title/components/FormSelectComponent.html",[148,0.309,355,1.66]],["body/components/FormSelectComponent.html",[3,0.099,4,0.079,5,0.069,8,0.446,12,0.18,13,0.447,14,0.79,18,0.318,19,0.009,26,0.099,30,1.52,34,0.693,50,0.517,52,1.036,59,0.846,60,0.843,61,1.29,63,1.422,71,1.593,72,0.659,75,0.45,77,0.054,82,1.795,86,1.354,94,1.088,96,2.701,97,0.784,98,1.573,99,2.089,100,1.533,107,1.063,113,0.474,126,0.613,129,1.032,132,3.588,138,2.723,145,0.004,146,0.006,147,0.004,148,0.524,149,1.852,150,1.352,151,1.354,152,2.714,153,1.387,154,1.8,165,1.8,166,1.751,167,1.86,168,2.378,170,1.795,178,0.895,185,1.932,188,2.668,192,0.917,195,1.422,198,0.717,200,1.932,213,0.983,214,1.605,215,0.93,241,0.949,270,0.465,271,0.46,278,0.447,319,1.495,320,1.686,321,1.906,322,2.083,323,3.46,324,2.09,325,2.09,326,1.387,327,1.458,328,1.711,329,2.84,330,1.354,331,1.906,332,2.09,333,1.75,334,2.09,335,1.201,336,2.09,337,1.658,338,2.036,339,1.703,340,3.46,341,1.573,342,1.703,343,1.75,344,2.092,345,1.573,346,1.852,347,1.726,348,2.09,349,1.906,350,1.75,351,2.747,352,2.09,353,1.75,354,2.84,355,2.82,356,2.09,357,1.852,358,1.422,359,2.09,360,1.658,361,1.943,362,1.906,363,1.387,364,1.458,365,1.852,366,1.615,367,1.043,368,1.321,369,1.259,370,2.09,371,1.703,372,2.025,373,2.09,374,1.658,375,1.964,376,2.09,451,0.843,503,0.99,524,1.229,526,3.651,550,2.031,639,5.673,642,3.389,646,2.313,650,4.454,655,4.585,656,2.492,657,4.585,658,5.207,659,4.585,660,4.585,661,4.585,662,4.585,663,4.585,664,4.585,665,4.301,666,4.585,667,2.59,670,3.984,671,5.885,675,3.374,677,2.159,678,3.166,679,2.494,680,3.374,681,1.495,683,1.964,684,4.585,686,3.374,687,3.374,688,4.301,689,3.53,691,3.374,693,3.374,694,3.166,696,3.166,697,3.374,699,2.313,700,4.585,702,4.585,703,1.8,704,3.374,705,2.934,707,2.714,708,2.598,709,2.598,711,2.159,713,1.093,715,3.374,716,1.458,725,1.495,797,2.159,923,2.233,1049,3.143,1143,3.166,1283,2.159,1311,1.852,1831,4.939,2174,3.973,2175,2.844,2186,3.166,2210,4.939,2211,6.019,2212,5.344,2305,3.635,2694,4.954,2711,3.635,2712,3.635,2713,3.635,2714,3.635,2715,3.635,2716,3.635,2717,3.635,2718,3.635,2719,3.635,2720,3.635,2721,3.635,2722,3.635,2723,3.635,2724,3.635,2725,3.635,2728,3.374,2731,3.635,2733,5.61,2739,3.984,2782,5.414,2784,3.984,2812,3.984,2813,3.635,2814,3.984,2815,5.414,2816,3.984,2822,5.414,2826,5.586,2827,3.984,2828,6.968,2829,6.134,2830,6.968,2831,6.134,2832,4.515,2833,4.515,2834,4.515,2835,4.515,2836,4.515,2837,4.515,2838,6.134,2839,7.475,2840,4.515,2841,4.515,2842,4.515,2843,4.515]],["title/classes/FormValidators.html",[77,0.052,2844,3.289]],["body/classes/FormValidators.html",[3,0.134,4,0.107,5,0.094,8,0.446,12,0.245,14,0.716,18,0.264,19,0.009,25,2.272,26,0.134,34,1.148,52,1.192,59,0.644,71,1.941,75,0.44,77,0.073,80,1.987,84,0.806,113,0.784,126,0.701,145,0.006,146,0.007,147,0.006,178,1.091,192,0.891,194,1.794,198,0.76,213,0.982,214,1.535,215,0.808,270,0.382,278,0.611,284,0.821,342,2.819,347,1.726,351,2.296,378,1.839,505,4.707,642,4.129,650,4.454,667,3.155,688,5.24,689,3.529,713,1.809,725,2.03,886,2.353,999,3.065,1509,3.988,2058,4.492,2610,4.953,2746,6.017,2844,5.585,2845,5.412,2846,7.114,2847,7.474,2848,7.474,2849,7.474,2850,7.474,2851,6.132,2852,7.474,2853,8.391,2854,7.89,2855,6.596,2856,7.592,2857,7.474,2858,8.061,2859,6.132,2860,7.474,2861,6.017,2862,6.596,2863,7.474,2864,8.061,2865,6.132,2866,6.132,2867,6.132,2868,6.132,2869,6.132,2870,6.132,2871,7.474]],["title/interfaces/FunctionRenderer.html",[0,0.058,836,1.706]],["body/interfaces/FunctionRenderer.html",[0,0.11,2,0.782,3,0.087,4,0.07,5,0.061,8,0.238,9,2.164,12,0.16,13,0.545,15,2.675,18,0.305,19,0.009,20,1.078,21,3.633,22,2.981,26,0.187,27,2.126,30,1.976,34,1.002,35,1.141,36,1.373,38,1.975,39,2.962,40,2.629,43,1.848,47,2.056,50,0.948,52,1.187,55,2.775,57,1.498,58,1.963,59,0.591,60,0.746,61,1.141,64,1.227,65,2.184,66,1.341,67,2.125,72,1.091,73,2.926,75,0.475,76,1.391,77,0.078,78,1.638,79,1.592,82,1.649,84,1.02,89,2.991,90,1.227,94,0.957,97,0.694,98,1.391,100,2.408,110,1.848,112,1.853,113,0.785,116,1.114,117,2.536,118,3.092,122,1.289,123,3.334,124,1.649,125,2.122,126,0.512,127,2.852,128,2.184,129,0.721,131,1.791,132,2.451,133,2.122,134,1.865,135,1.592,136,2.122,137,2.125,139,2.046,141,2.995,143,2.122,145,0.004,146,0.006,147,0.004,148,0.581,150,0.88,161,2.298,192,0.665,194,1.168,195,1.257,196,1.835,198,0.616,200,1.257,208,3.283,213,0.525,219,3.242,222,2.275,225,1.592,234,3.23,240,1.686,246,2.335,270,0.441,278,0.411,284,0.574,320,1.687,330,1.197,367,0.922,369,1.114,386,1.289,396,1.279,408,1.062,425,1.687,439,2.126,451,0.746,454,1.428,502,1.141,503,1.054,515,2.298,524,1.778,566,1.356,619,1.257,643,1.975,648,1.819,681,1.322,703,1.592,713,0.966,752,1.638,754,2.336,755,2.827,756,1.168,758,2.108,759,2.026,760,2.311,761,2.812,765,1.975,768,1.428,770,2.476,792,1.356,803,2.122,804,2.122,805,2.4,806,2.006,807,2.379,808,2.531,809,3.386,810,2.677,811,3.113,812,3.757,813,2.046,814,1.686,815,3.47,816,1.686,817,1.686,818,3.345,819,1.592,820,1.227,821,1.548,822,1.466,823,1.963,824,1.638,825,1.498,826,1.963,827,2.161,828,2.311,829,3.918,830,3.924,831,3.757,832,2.887,833,2.069,834,2.471,835,2.674,836,2.749,837,3.924,838,3.508,839,4.262,840,3.113,841,2.4,842,2.246,843,2.311,844,2.233,845,2.4,846,2.602,847,2.4,848,2.4,849,1.686,850,1.686,851,2.046,852,1.592,853,1.686,854,2.298,855,2.887,856,1.774,857,2.4,858,2.206,859,2.311,860,2.749,861,1.322,862,2.463,863,1.391,864,1.686,865,2.4,866,2.069,867,3.924,868,3.386,869,3.386,870,3.386,871,1.778,872,2.4,873,2.4,874,2.161,875,2.4,876,3.113,877,1.774,878,1.686,879,1.356,880,1.975,881,1.848,882,2.4,883,2.206,884,2.4,885,2.206,886,1.257,887,1.428,888,2.4,889,1.322,890,2.4,891,2.122,892,1.592,893,2.298,894,2.4,895,2.4,896,1.548,897,1.737,898,2.298,899,2.206,900,2.4,901,1.548,902,2.298,903,2.4,904,3.113,905,1.141,906,1.428,907,2.046,908,2.122,909,3.386,910,2.4,911,1.91,912,1.848,913,1.638,914,2.298,915,1.638,916,2.046,917,1.638,918,1.686,919,1.638,920,1.737,921,1.975,922,2.046,923,1.975,924,2.046,925,2.046,926,1.737,927,2.298,2872,3.524,2873,3.215]],["title/pipes/FunctionRendererPipe.html",[2874,3.086,2875,2.917]],["body/pipes/FunctionRendererPipe.html",[3,0.146,4,0.117,5,0.103,8,0.4,13,0.574,14,0.641,18,0.236,19,0.009,26,0.146,52,0.928,59,0.703,64,2.421,75,0.43,77,0.08,97,1.369,113,0.827,145,0.007,146,0.008,147,0.007,165,2.67,178,0.978,192,0.682,194,1.96,213,0.88,214,1.375,215,0.905,270,0.417,271,0.682,278,0.574,425,1.777,457,2.481,549,1.863,652,1.781,699,4.037,754,2.046,761,2.934,833,2.893,836,3.054,866,2.893,1632,4.188,2081,4.353,2541,6.458,2874,5.525,2875,5.222,2876,4.439,2877,6.954,2878,5.911,2879,7.879,2880,6.954,2881,5.911,2882,6.954,2883,6.698,2884,6.954,2885,6.698]],["title/interfaces/GlobalButton.html",[0,0.058,840,2.432]],["body/interfaces/GlobalButton.html",[0,0.11,2,0.782,3,0.087,4,0.07,5,0.061,8,0.238,9,2.164,12,0.159,13,0.517,15,2.674,18,0.309,19,0.009,20,1.077,21,3.633,22,2.98,26,0.187,27,2.126,30,2.018,34,1.002,35,1.14,36,1.372,38,1.974,39,3.002,40,2.673,43,1.847,47,2.055,50,0.948,52,1.205,55,2.775,57,1.061,58,1.962,59,0.591,60,0.745,61,1.14,64,1.226,65,2.183,66,1.34,67,2.124,72,1.091,73,2.96,75,0.471,76,1.39,77,0.078,78,1.637,79,1.591,82,1.648,84,1.02,89,2.928,90,1.226,94,0.957,97,0.693,98,1.39,100,2.407,110,1.847,112,1.922,113,0.785,116,1.113,117,2.535,118,3.091,122,1.288,123,3.334,124,1.648,125,2.121,126,0.512,127,2.852,128,2.183,129,0.721,131,1.79,132,2.45,133,2.121,134,1.864,135,1.591,136,2.121,137,2.124,139,2.045,141,2.994,143,2.121,145,0.004,146,0.006,147,0.004,148,0.571,150,0.879,161,2.297,192,0.574,194,1.168,195,1.257,196,1.834,198,0.567,200,1.257,208,3.282,219,3.756,222,1.962,225,1.591,234,3.229,240,1.685,246,2.014,270,0.441,278,0.41,284,0.574,320,1.687,330,1.197,367,0.922,369,1.113,386,1.288,396,1.278,408,1.061,425,1.687,439,2.126,451,0.745,454,1.427,502,1.14,503,1.144,515,2.297,524,1.777,566,1.355,619,1.257,643,1.974,648,1.818,681,1.321,703,1.591,713,0.966,752,1.637,754,2.329,755,2.602,756,1.168,758,2.107,759,2.025,760,2.31,761,2.765,765,1.974,768,1.427,770,2.475,792,1.355,803,2.121,804,2.121,805,2.399,806,2.005,807,2.378,808,3.008,809,3.385,810,2.677,811,3.112,812,3.756,813,2.045,814,1.685,815,3.769,816,1.685,817,1.685,818,3.344,819,1.591,820,1.226,821,1.547,822,1.465,823,1.962,824,1.637,825,1.498,826,1.962,827,2.161,828,2.31,829,3.917,830,3.923,831,3.756,832,2.886,833,1.465,834,2.47,835,2.674,836,2.53,837,3.923,838,3.699,839,4.494,840,3.606,841,2.399,842,2.245,843,2.31,844,2.233,845,2.399,846,2.602,847,2.399,848,2.399,849,1.685,850,1.685,851,2.045,852,1.591,853,1.685,854,2.297,855,2.886,856,1.774,857,2.399,858,2.205,859,2.31,860,2.748,861,1.321,862,2.462,863,1.39,864,1.685,865,2.399,866,2.068,867,3.923,868,3.385,869,3.385,870,3.385,871,1.534,872,2.399,873,2.399,874,2.161,875,2.399,876,3.112,877,1.774,878,1.685,879,1.355,880,1.974,881,1.847,882,2.399,883,2.205,884,2.399,885,2.205,886,1.257,887,1.427,888,2.399,889,1.321,890,2.399,891,2.121,892,1.591,893,2.297,894,2.399,895,2.399,896,1.547,897,1.736,898,2.297,899,2.205,900,2.399,901,1.547,902,2.297,903,2.399,904,3.112,905,1.14,906,1.427,907,2.045,908,2.121,909,3.385,910,2.399,911,1.909,912,1.847,913,1.637,914,2.297,915,1.637,916,2.045,917,1.637,918,1.685,919,1.637,920,1.736,921,1.974,922,2.045,923,1.974,924,2.045,925,2.045,926,1.736,927,2.297]],["title/interfaces/GridColumn.html",[0,0.058,759,1.257]],["body/interfaces/GridColumn.html",[0,0.107,2,0.704,3,0.078,4,0.063,5,0.055,8,0.214,9,2.209,12,0.144,13,0.523,14,0.819,15,2.549,18,0.315,19,0.009,20,0.999,21,3.838,22,3.081,26,0.183,27,2.026,30,1.915,34,0.945,35,1.026,36,1.294,38,1.777,39,2.887,40,2.557,43,1.663,47,2.26,50,0.925,52,1.152,55,2.678,57,0.955,58,1.82,59,0.548,60,0.975,61,1.026,64,1.605,65,2.619,66,1.474,67,1.97,72,1.156,73,2.885,75,0.489,76,1.252,77,0.08,78,1.473,79,1.432,82,1.977,84,0.985,89,2.838,90,1.605,94,1.011,97,0.907,98,1.252,100,2.294,110,1.663,112,1.779,113,0.811,116,1.002,117,2.416,118,2.996,122,1.16,123,3.287,124,1.801,125,1.909,126,0.482,127,2.832,128,2.025,129,0.788,131,1.611,132,2.272,133,1.909,134,2.051,135,1.432,136,1.909,137,1.97,139,2.676,141,2.776,143,1.909,145,0.004,146,0.005,147,0.004,148,0.566,150,0.792,161,3.006,192,0.627,194,1.528,195,1.645,196,1.771,198,0.587,200,1.645,208,3.128,219,3.006,222,2.144,225,1.432,234,3.342,240,1.517,246,1.868,270,0.42,278,0.381,284,0.627,320,1.85,330,1.077,367,1.206,369,1.002,386,1.686,396,1.323,408,0.955,425,1.69,439,2.026,451,0.671,454,1.285,502,1.492,503,0.993,515,2.067,524,1.955,566,1.22,619,1.645,643,1.777,648,1.686,681,1.729,703,1.432,713,1.264,752,1.473,754,2.369,755,2.453,756,1.051,758,2.418,759,2.208,760,3.072,761,2.903,765,1.777,768,1.285,770,2.622,792,1.22,803,1.909,804,1.909,805,2.159,806,1.891,807,2.205,808,2.386,809,3.139,810,2.524,811,2.886,812,3.542,813,1.841,814,1.517,815,3.271,816,1.517,817,1.517,818,4.058,819,1.432,820,1.104,821,1.393,822,1.319,823,2.354,824,1.473,825,1.909,826,1.82,827,2.037,828,2.771,829,3.966,830,3.699,831,3.888,832,2.676,833,1.319,834,2.501,835,2.764,836,2.903,837,3.699,838,3.342,839,4.061,840,2.886,841,2.159,842,2.082,843,2.142,844,2.26,845,2.159,846,2.453,847,2.159,848,2.159,849,1.517,850,1.517,851,1.841,852,1.432,853,1.517,854,2.067,855,2.676,856,1.938,857,2.159,858,1.985,859,2.524,860,2.619,861,1.729,862,2.825,863,1.82,864,2.205,865,3.139,866,2.481,867,4.502,868,4.061,869,4.502,870,4.061,871,1.84,872,3.139,873,3.139,874,2.479,875,3.139,876,3.733,877,2.128,878,2.205,879,1.774,880,2.584,881,3.128,882,3.139,883,2.886,884,3.139,885,2.886,886,1.645,887,1.868,888,3.139,889,1.729,890,3.139,891,2.776,892,2.082,893,3.006,894,3.139,895,4.061,896,2.025,897,2.272,898,3.006,899,2.886,900,3.139,901,2.025,902,3.006,903,3.139,904,3.733,905,1.492,906,1.868,907,2.676,908,2.776,909,4.502,910,4.061,911,1.718,912,1.663,913,1.473,914,2.067,915,1.473,916,1.841,917,1.473,918,1.517,919,1.473,920,1.563,921,1.777,922,1.841,923,1.777,924,1.841,925,1.841,926,1.563,927,2.067]],["title/interfaces/GridDataFetchResult.html",[0,0.058,1285,2.177]],["body/interfaces/GridDataFetchResult.html",[0,0.094,2,0.415,3,0.046,4,0.037,5,0.033,8,0.126,9,1.566,12,0.29,13,0.371,14,0.421,15,1.66,18,0.243,19,0.009,20,0.663,22,0.844,25,0.55,26,0.164,27,1.039,30,1.704,31,0.921,34,1.113,36,1.648,39,0.757,40,1.812,42,1.012,47,0.666,50,0.875,52,0.61,55,2.949,59,0.776,60,1.189,61,1.898,62,0.757,63,0.666,64,1.852,66,0.712,67,1.307,71,0.9,72,0.506,73,2.672,75,0.417,76,1.208,77,0.052,79,0.844,80,0.922,82,0.619,83,2.061,84,0.669,85,3.289,86,1.808,87,0.921,89,2.807,90,0.65,92,3.475,94,1.046,96,1.344,97,0.884,98,0.737,99,2.121,100,0.719,106,1.906,107,1.173,109,2.176,112,0.524,113,0.722,116,1.228,117,1.239,118,2.337,122,0.683,123,2.594,124,1.014,126,0.688,127,1.239,128,0.82,129,0.814,134,1.453,135,0.844,137,1.66,138,2.218,140,2.117,144,1.446,145,0.003,146,0.003,147,0.002,148,0.508,150,0.764,151,1.32,164,1.344,166,0.405,167,0.712,168,0.82,170,0.619,172,1.581,175,1.125,176,1.125,177,1.125,178,0.642,185,1.091,192,0.216,195,2.228,196,1.425,198,0.382,205,1.012,213,0.738,215,0.476,220,1.125,221,1.508,222,0.737,227,0.798,229,2.705,241,1.446,242,1.842,245,1.413,246,0.757,248,1.119,252,0.921,261,1.125,268,1.084,270,0.46,271,0.216,278,0.641,284,0.85,287,2.705,314,1.273,320,0.993,321,0.819,326,0.65,327,0.683,328,1.228,335,0.563,338,0.576,344,0.537,347,0.8,358,0.666,363,0.65,364,0.683,368,1.014,385,1.604,386,0.683,392,0.894,396,0.679,402,0.949,403,3.408,408,0.922,425,1.148,431,1.604,435,1.658,439,1.683,440,2.517,451,0.395,455,1.604,457,1.386,502,0.99,503,0.342,511,1.915,513,1.658,524,1.642,525,2.282,537,0.701,543,1.084,549,1.041,552,1.344,568,1.091,573,1.307,578,1.764,580,1.344,584,0.757,586,1.495,604,2.376,605,1.996,619,0.666,623,0.944,633,1.012,648,1.119,649,0.777,652,0.563,656,0.757,677,1.012,681,0.701,683,0.921,705,1.012,711,1.012,713,0.512,716,1.119,733,1.29,753,2.087,754,1.838,756,0.619,758,2.388,759,1.964,767,0.949,768,0.757,770,1.457,771,1.776,772,1.776,792,2.335,806,2.534,807,1.463,810,1.421,814,0.894,816,0.894,817,0.894,819,0.844,820,0.65,821,0.82,824,0.868,825,0.563,826,1.533,827,1.457,828,1.805,833,2.214,834,2.732,835,1.239,836,1.706,842,1.382,843,1.805,844,1.386,846,0.844,849,0.894,850,2.37,852,2.238,853,0.894,856,0.666,861,1.457,862,2.506,863,1.533,864,0.894,866,1.273,871,0.944,874,0.701,877,1.386,879,1.495,886,1.091,892,0.844,896,1.972,901,0.82,905,2.37,906,2.53,915,1.421,919,1.421,931,1.555,936,2.355,977,1.604,985,2.355,990,1.805,999,1.421,1006,0.868,1015,0.98,1016,0.82,1040,1.307,1043,1.974,1044,1.555,1045,1.065,1046,1.273,1070,0.949,1073,1.047,1089,2.433,1128,0.98,1138,3.289,1201,0.798,1216,0.683,1232,0.844,1235,2.607,1236,1.047,1237,1.915,1238,1.508,1239,1.915,1240,1.169,1241,1.084,1242,1.169,1243,1.842,1244,2.34,1245,2.599,1246,1.169,1247,2.008,1248,1.915,1249,0.868,1250,1.842,1251,2.432,1252,1.915,1253,0.59,1254,1.508,1255,0.949,1256,0.757,1257,0.949,1258,1.147,1259,3.346,1260,2.876,1261,1.125,1262,2.255,1263,1.084,1264,1.047,1265,1.714,1266,0.98,1267,1.842,1268,2.255,1269,1.084,1270,1.125,1271,0.868,1272,1.125,1273,2.607,1274,1.125,1275,4.253,1276,1.776,1277,1.125,1278,2.34,1279,1.776,1280,2.517,1281,1.915,1282,1.169,1283,1.658,1284,1.915,1285,2.177,1286,1.915,1287,3.517,1288,1.776,1289,1.169,1290,1.169,1291,1.915,1292,1.125,1293,2.705,1294,1.169,1295,2.037,1296,1.776,1297,1.915,1298,1.915,1299,1.915,1300,2.607,1301,2.432,1302,1.012,1303,0.98,1304,1.125,1305,1.169,1306,1.169,1307,0.949,1308,3.101,1309,4.004,1310,2.432,1311,0.868,1312,1.169,1313,1.169,1314,4.159,1315,1.084,1316,2.087,1317,3.517,1318,1.084,1319,1.169,1320,2.255,1321,1.047,1322,0.777,1323,1.169,1324,1.169,1325,2.984,1326,1.169,1327,1.382,1328,2.255,1329,0.82,1330,0.894,1331,2.432,1332,1.555,1333,1.169,1334,1.084,1335,1.915,1336,1.915,1337,1.169,1338,1.169,1339,1.714,1340,1.084,1341,1.169,1342,1.169,1343,1.169,1344,1.842,1345,2.432,1346,1.169,1347,1.169,1348,1.169,1349,1.915,1350,1.169,1351,1.915,1352,1.169,1353,2.432,1354,1.169,1355,1.084,1356,1.084,1357,1.169,1358,1.915,1359,1.169,1360,1.169,1361,1.169,1362,1.169,1363,1.169,1364,1.169,1365,1.125,1366,1.169,1367,1.915,1368,1.169,1369,1.125,1370,1.169,1371,1.805,1372,1.169,1373,2.432,1374,1.842,1375,1.169,1376,1.169,1377,3.331,1378,1.169,1379,1.915,1380,1.169,1381,1.169,1382,1.915,1383,2.432,1384,2.432,1385,1.915,1386,2.432,1387,2.811,1388,1.169,1389,1.915,1390,2.705,1391,1.169,1392,1.915,1393,1.169,1394,1.169,1395,1.169,1396,0.701,1397,1.169,1398,1.169,1399,1.169,1400,1.169,1401,1.169,1402,1.169,1403,1.915,1404,1.915,1405,1.915,1406,1.915,1407,2.432,1408,1.169,1409,1.169,1410,1.169,1411,1.169,1412,1.915,1413,1.915,1414,2.811,1415,1.169,1416,1.169,1417,1.169,1418,1.169,1419,1.915,1420,2.811,1421,2.811,1422,0.894,1423,1.169,1424,2.432,1425,1.169,1426,1.125,1427,1.842,1428,1.169,1429,1.169,1430,1.169,1431,1.169,1432,1.169,1433,1.169,1434,1.169,1435,1.169,1436,1.169,1437,1.169,1438,1.169,1439,1.125,1440,1.169,1441,1.169,1442,1.915,1443,1.169,1444,1.169,1445,1.169,1446,1.084,1447,1.169,1448,1.169,1449,1.169,1450,1.169,1451,1.047,1452,1.169,1453,1.084,1454,1.169,1455,1.169,1456,1.169,1457,1.169,1458,0.949,1459,1.169,1460,1.169,1461,1.169,1462,1.169,1463,1.169,1464,1.169,1465,1.169,1466,1.169,1467,1.169,1468,1.169,1469,1.169,1470,1.169,1471,0.844,1472,1.169,1473,1.915,1474,1.915,1475,1.915,1476,1.169,1477,2.432,1478,2.811,1479,1.915,1480,1.169,1481,1.169,1482,1.169,1483,1.169,1484,1.169,1485,1.169,1486,1.169,1487,1.084,1488,1.169,1489,1.169,1490,1.169,1491,0.701,1492,1.169,1493,1.169,1494,1.169,1495,1.169,1496,1.169,1497,1.169,1498,2.432,1499,0.98,1500,1.169,1501,1.169,1502,1.169,1503,1.169,1504,1.169,1505,1.169,1506,1.169,1507,1.169,1508,1.169,1509,2.517,1510,1.169,1511,1.169,1512,1.125,1513,1.169,1514,1.169,1515,1.169,1516,1.915,1517,1.169,1518,1.169,1519,1.169,1520,1.169,1521,1.915,1522,1.169,1523,1.169,1524,1.169,1525,1.169,1526,1.169,1527,1.169,1528,1.169,1529,1.169,1530,1.169,1531,1.169,1532,1.169,1533,1.169,1534,1.169,1535,1.169,1536,1.169,1537,1.169,1538,1.125,1539,1.125,1540,1.169,1541,1.169,1542,1.915,1543,1.915,1544,1.555,1545,1.915,1546,1.842,1547,1.169,1548,1.169,1549,1.915,1550,1.169,1551,1.915,1552,1.169,1553,1.169,1554,1.169,1555,1.169,1556,1.169,1557,1.169,1558,1.125,1559,1.169,1560,1.125,1561,1.169,1562,1.169,1563,1.169,1564,1.915,1565,1.169,1566,1.169,1567,1.169,1568,1.169,1569,1.169,1570,1.169,1571,1.169,1572,1.169,1573,1.169,1574,1.915,1575,2.811,1576,2.432,1577,1.169,1578,1.169,1579,1.169,1580,1.169,1581,1.915,1582,1.169,1583,1.169,1584,1.169,1585,1.169,1586,1.169,1587,1.169,1588,1.169,1589,1.915,1590,1.169,1591,1.169,1592,1.169,1593,0.98,1594,1.169,1595,1.169,1596,1.169,1597,1.169,1598,1.169,1599,1.169,1600,1.169,1601,1.169,1602,1.169,1603,1.169,1604,1.169,1605,1.169,1606,1.169,1607,2.811,1608,1.169,1609,1.169,1610,1.169,1611,1.169,1612,1.169,1613,1.169,1614,1.125,1615,1.169,1616,1.169,1617,1.915,1618,1.169,1619,1.915,1620,1.169,1621,1.169,1622,1.915,1623,1.169,1624,1.169,1625,1.169,1626,1.169,1627,1.169,1628,2.432,1629,1.169,1630,1.169,1631,1.169,1632,1.842,1633,1.169,1634,1.169,1635,1.169,1636,1.169,1637,1.169,1638,1.169,1639,1.169,1640,1.169,1641,1.169,1642,1.169,1643,0.98,1644,1.169,1645,1.169,1646,1.169,1647,0.98,1648,1.169,1649,1.169,1650,1.915,1651,3.101,1652,1.012,1653,1.169,1654,1.169,1655,1.169,1656,1.169,1657,1.169,1658,1.169,1659,1.915,1660,1.169,1661,1.169,1662,1.842,1663,1.169,1664,1.084,1665,1.169,1666,1.169,1667,1.169,1668,1.169,1669,1.169,1670,1.169]],["title/interfaces/GridState.html",[0,0.058,1328,2.255]],["body/interfaces/GridState.html",[0,0.094,2,0.411,3,0.046,4,0.037,5,0.032,8,0.125,9,1.559,12,0.289,13,0.369,14,0.607,15,1.652,18,0.249,19,0.009,20,0.837,22,0.837,25,0.546,26,0.164,27,1.033,30,1.699,31,0.914,34,1.11,36,1.646,39,0.751,40,1.805,42,1.005,47,0.661,50,0.874,52,0.607,55,2.905,59,0.774,60,1.122,61,1.812,62,0.751,63,0.661,64,1.846,66,0.707,67,1.652,71,0.895,72,0.503,73,2.668,75,0.427,76,1.2,77,0.052,79,0.837,80,0.916,82,0.615,83,2.053,84,0.666,85,3.28,86,1.801,87,0.914,89,2.801,90,0.645,92,3.469,94,1.044,96,1.335,97,0.88,98,0.732,99,2.116,100,0.713,106,1.899,107,1.171,109,2.167,112,0.52,113,0.741,116,1.221,117,1.232,118,2.329,122,0.678,123,2.587,124,1.008,126,0.682,127,1.232,128,0.814,129,0.812,134,1.447,135,0.837,137,1.652,138,2.21,140,2.109,144,1.442,145,0.003,146,0.003,147,0.002,148,0.507,150,0.759,151,1.313,164,1.335,166,0.402,167,0.707,168,0.814,170,0.615,172,1.578,175,1.117,176,1.117,177,1.117,178,0.639,185,1.085,192,0.214,195,2.222,196,1.42,198,0.38,205,1.005,213,0.735,215,0.473,220,1.117,221,1.498,222,0.732,227,0.792,229,2.692,241,1.442,242,1.831,245,1.41,246,0.751,248,1.112,252,0.914,261,1.117,268,1.076,270,0.459,271,0.214,278,0.64,284,0.848,287,2.692,314,1.265,320,0.988,321,0.814,326,0.645,327,0.678,328,1.221,335,0.559,338,0.572,344,0.533,347,0.795,358,0.661,363,0.645,364,0.678,368,1.008,385,1.594,386,0.678,392,0.887,396,0.675,402,0.942,403,3.221,408,0.916,425,1.355,431,1.594,435,1.647,439,1.801,440,2.506,451,0.392,455,1.594,457,1.379,502,1.251,503,0.339,511,1.905,513,1.647,524,1.728,525,2.272,537,0.695,543,1.076,549,1.035,552,1.335,568,1.085,573,1.299,578,1.758,580,1.335,584,0.751,586,1.72,604,2.369,605,1.989,619,0.661,623,0.938,633,1.005,648,1.112,649,0.771,652,0.559,656,0.751,677,1.005,681,0.695,683,0.914,705,1.005,711,1.005,713,0.508,716,1.112,733,1.287,753,1.796,754,1.878,756,0.615,758,2.382,759,1.959,767,0.942,768,0.751,770,1.449,771,1.765,772,1.765,792,2.329,806,2.53,807,1.454,810,1.413,814,0.887,816,0.887,817,0.887,819,0.837,820,0.645,821,0.814,824,0.861,825,0.559,826,1.526,827,1.449,828,1.796,833,2.206,834,2.727,835,1.232,836,1.697,842,1.373,843,1.796,844,1.379,846,0.837,849,0.887,850,2.139,852,2.229,853,0.887,856,0.661,861,1.449,862,2.498,863,1.765,864,1.454,866,0.771,871,0.938,874,0.695,877,1.379,879,1.487,886,1.085,892,0.837,896,1.964,901,1.335,905,2.392,906,2.524,915,1.413,919,1.413,931,1.545,936,2.345,977,1.594,985,2.588,990,2.077,999,1.413,1006,0.861,1015,1.594,1016,0.814,1040,1.299,1043,1.964,1044,1.545,1045,1.058,1046,1.265,1070,0.942,1073,1.039,1089,2.094,1128,0.972,1138,3.28,1201,0.792,1216,0.678,1232,0.837,1235,2.595,1236,1.039,1237,1.903,1238,1.498,1239,1.903,1240,1.16,1241,1.076,1242,1.16,1243,1.831,1244,2.327,1245,2.588,1246,1.16,1247,2,1248,1.903,1249,0.861,1250,1.831,1251,2.419,1252,1.903,1253,0.586,1254,1.498,1255,0.942,1256,0.751,1257,0.942,1258,1.14,1259,3.34,1260,2.865,1261,1.117,1262,2.243,1263,1.076,1264,1.039,1265,1.704,1266,0.972,1267,1.831,1268,2.243,1269,1.076,1270,1.117,1271,0.861,1272,1.117,1273,2.595,1274,1.117,1275,4.378,1276,1.765,1277,1.117,1278,2.327,1279,1.765,1280,2.506,1281,1.905,1282,1.16,1283,1.647,1284,1.16,1285,1.704,1286,1.16,1287,2.798,1288,2.595,1289,1.16,1290,1.16,1291,1.903,1292,1.117,1293,2.692,1294,1.16,1295,2.027,1296,2.595,1297,1.903,1298,1.903,1299,1.903,1300,2.595,1301,2.419,1302,1.005,1303,0.972,1304,1.117,1305,1.16,1306,1.16,1307,0.942,1308,3.089,1309,3.994,1310,2.419,1311,0.861,1312,1.16,1313,1.16,1314,4.15,1315,1.076,1316,2.077,1317,3.505,1318,1.076,1319,1.16,1320,2.243,1321,1.039,1322,0.771,1323,1.903,1324,1.903,1325,3.193,1326,1.903,1327,1.745,1328,2.595,1329,1.335,1330,1.454,1331,2.798,1332,2.694,1333,2.798,1334,1.076,1335,1.903,1336,1.903,1337,1.16,1338,1.16,1339,1.704,1340,1.076,1341,1.16,1342,1.16,1343,1.16,1344,1.831,1345,2.419,1346,1.16,1347,1.16,1348,1.16,1349,1.903,1350,1.16,1351,1.903,1352,1.16,1353,2.419,1354,1.16,1355,1.076,1356,1.076,1357,1.16,1358,1.903,1359,1.16,1360,1.16,1361,1.16,1362,1.16,1363,1.16,1364,1.16,1365,1.117,1366,1.16,1367,1.903,1368,1.16,1369,1.117,1370,1.16,1371,1.796,1372,1.16,1373,2.419,1374,1.831,1375,1.16,1376,1.16,1377,3.319,1378,1.16,1379,1.903,1380,1.16,1381,1.16,1382,1.903,1383,2.419,1384,2.419,1385,1.903,1386,2.419,1387,2.798,1388,1.16,1389,1.903,1390,2.692,1391,1.16,1392,1.903,1393,1.16,1394,1.16,1395,1.16,1396,0.695,1397,1.16,1398,1.16,1399,1.16,1400,1.16,1401,1.16,1402,1.16,1403,1.903,1404,1.903,1405,1.903,1406,1.903,1407,2.419,1408,1.16,1409,1.16,1410,1.16,1411,1.16,1412,1.903,1413,1.903,1414,2.798,1415,1.16,1416,1.16,1417,1.16,1418,1.16,1419,1.903,1420,2.798,1421,2.798,1422,0.887,1423,1.16,1424,2.419,1425,1.16,1426,1.117,1427,1.831,1428,1.16,1429,1.16,1430,1.16,1431,1.16,1432,1.16,1433,1.16,1434,1.16,1435,1.16,1436,1.16,1437,1.16,1438,1.16,1439,1.117,1440,1.16,1441,1.16,1442,1.903,1443,1.16,1444,1.16,1445,1.16,1446,1.076,1447,1.16,1448,1.16,1449,1.16,1450,1.16,1451,1.039,1452,1.16,1453,1.076,1454,1.16,1455,1.16,1456,1.16,1457,1.16,1458,0.942,1459,1.16,1460,1.16,1461,1.16,1462,1.16,1463,1.16,1464,1.16,1465,1.16,1466,1.16,1467,1.16,1468,1.16,1469,1.16,1470,1.16,1471,0.837,1472,1.16,1473,1.903,1474,1.903,1475,1.903,1476,1.16,1477,2.419,1478,2.798,1479,1.903,1480,1.16,1481,1.16,1482,1.16,1483,1.16,1484,1.16,1485,1.16,1486,1.16,1487,1.076,1488,1.16,1489,1.16,1490,1.16,1491,0.695,1492,1.16,1493,1.16,1494,1.16,1495,1.16,1496,1.16,1497,1.16,1498,2.419,1499,0.972,1500,1.16,1501,1.16,1502,1.16,1503,1.16,1504,1.16,1505,1.16,1506,1.16,1507,1.16,1508,1.16,1509,2.506,1510,1.16,1511,1.16,1512,1.117,1513,1.16,1514,1.16,1515,1.16,1516,1.903,1517,1.16,1518,1.16,1519,1.16,1520,1.16,1521,1.903,1522,1.16,1523,1.16,1524,1.16,1525,1.16,1526,1.16,1527,1.16,1528,1.16,1529,1.16,1530,1.16,1531,1.16,1532,1.16,1533,1.16,1534,1.16,1535,1.16,1536,1.16,1537,1.16,1538,1.117,1539,1.117,1540,1.16,1541,1.16,1542,1.903,1543,1.903,1544,1.545,1545,1.903,1546,1.831,1547,1.16,1548,1.16,1549,1.903,1550,1.16,1551,1.903,1552,1.16,1553,1.16,1554,1.16,1555,1.16,1556,1.16,1557,1.16,1558,1.117,1559,1.16,1560,1.117,1561,1.16,1562,1.16,1563,1.16,1564,1.903,1565,1.16,1566,1.16,1567,1.16,1568,1.16,1569,1.16,1570,1.16,1571,1.16,1572,1.16,1573,1.16,1574,1.903,1575,2.798,1576,2.419,1577,1.16,1578,1.16,1579,1.16,1580,1.16,1581,1.903,1582,1.16,1583,1.16,1584,1.16,1585,1.16,1586,1.16,1587,1.16,1588,1.16,1589,1.903,1590,1.16,1591,1.16,1592,1.16,1593,0.972,1594,1.16,1595,1.16,1596,1.16,1597,1.16,1598,1.16,1599,1.16,1600,1.16,1601,1.16,1602,1.16,1603,1.16,1604,1.16,1605,1.16,1606,1.16,1607,2.798,1608,1.16,1609,1.16,1610,1.16,1611,1.16,1612,1.16,1613,1.16,1614,1.117,1615,1.16,1616,1.16,1617,1.903,1618,1.16,1619,1.903,1620,1.16,1621,1.16,1622,1.903,1623,1.16,1624,1.16,1625,1.16,1626,1.16,1627,1.16,1628,2.419,1629,1.16,1630,1.16,1631,1.16,1632,1.831,1633,1.16,1634,1.16,1635,1.16,1636,1.16,1637,1.16,1638,1.16,1639,1.16,1640,1.16,1641,1.16,1642,1.16,1643,0.972,1644,1.16,1645,1.16,1646,1.16,1647,0.972,1648,1.16,1649,1.16,1650,1.903,1651,3.089,1652,1.005,1653,1.16,1654,1.16,1655,1.16,1656,1.16,1657,1.16,1658,1.16,1659,1.903,1660,1.16,1661,1.16,1662,1.831,1663,1.16,1664,1.076,1665,1.16,1666,1.16,1667,1.16,1668,1.16,1669,1.16,1670,1.16]],["title/interfaces/HasFinder.html",[0,0.058,2692,2.772]],["body/interfaces/HasFinder.html",[0,0.098,2,0.756,3,0.084,4,0.068,5,0.059,8,0.23,12,0.154,13,0.401,14,0.37,18,0.29,19,0.009,20,0.738,25,1.003,26,0.152,34,0.593,35,1.103,41,2.321,50,0.941,52,0.535,57,2.1,59,0.775,66,1.434,71,1.918,72,0.935,75,0.48,76,1.345,77,0.076,80,2.147,84,1.167,86,1.649,90,1.969,97,0.956,107,0.549,111,1.787,112,0.957,113,0.673,124,2.044,126,0.303,134,2.347,142,1.732,144,0.812,145,0.004,146,0.007,147,0.004,148,0.577,153,2.146,154,2.193,164,1.497,166,1.336,172,0.756,178,0.563,192,0.393,194,1.13,198,0.557,200,1.216,201,2.819,213,0.723,215,0.417,240,1.63,241,0.812,245,1.003,246,1.381,270,0.399,271,0.393,278,0.607,284,0.867,314,2.02,321,2.09,347,0.892,367,1.824,391,2.865,392,2.706,396,0.756,411,2.323,425,1.666,447,1.539,451,1.305,457,2.018,473,2.052,502,1.103,503,0.623,547,2.722,548,2.924,549,1.746,550,2.759,551,2.924,552,2.133,553,2.052,556,2.052,563,2.052,565,3.341,566,2.176,567,2.052,568,1.216,569,3.407,570,2.722,571,2.052,572,2.052,573,3.334,574,4.599,576,1.978,577,2.924,578,1.61,579,2.924,580,2.133,581,4.368,582,3.456,583,3.284,584,2.292,585,2.052,586,2.682,587,4.08,589,2.052,591,3.133,592,2.863,593,2.468,594,4.364,595,2.052,597,2.393,598,1.91,599,2.052,602,2.052,604,2.641,605,1.278,606,2.052,607,2.052,609,2.052,610,2.052,612,2.052,613,2.819,614,1.978,615,2.052,616,1.847,617,1.91,618,2.052,619,1.216,620,2.924,621,2.052,623,1.051,624,2.052,642,2.133,649,1.418,708,3.166,716,1.246,733,0.687,753,1.583,871,1.051,877,2.018,880,1.91,887,1.381,889,2.313,897,1.68,913,2.256,917,1.583,920,1.68,926,1.68,1031,3.166,1061,1.497,1066,3.852,1077,2.434,1259,1.63,1295,1.787,1303,1.787,1307,1.732,1327,2.943,1396,1.821,1458,3.312,1499,1.787,1544,3.133,1695,2.133,1767,3.171,1820,2.432,1872,2.432,2010,2.052,2035,3.646,2095,1.91,2128,2.547,2516,4.835,2517,4.438,2526,2.559,2527,2.321,2544,3.852,2558,4.438,2559,2.432,2560,2.321,2561,4.494,2562,4.651,2563,4.494,2564,2.707,2565,5.086,2566,4.037,2567,2.559,2568,2.321,2569,2.707,2570,2.707,2571,2.707,2572,5.382,2573,2.707,2574,2.707,2575,3.858,2576,2.707,2577,2.707,2578,2.707,2579,4.494,2580,2.707,2581,4.494,2582,2.559,2583,2.707,2584,2.707,2585,4.494,2586,2.707,2587,2.559,2588,2.707,2589,2.559,2590,2.707,2591,2.707,2592,2.707,2593,2.707,2594,2.707,2595,3.858,2596,2.707,2597,2.559,2598,2.707,2599,2.707,2600,2.707,2601,2.707,2602,2.707,2603,2.559,2604,2.707,2605,2.707,2606,2.707,2607,2.559,2608,2.707,2609,2.707,2610,2.559,2611,2.707,2612,2.707,2613,3.307,2614,3.858,2615,3.858,2616,2.707,2617,2.707,2618,4.494,2619,3.858,2620,4.494,2621,2.707,2622,4.494,2623,4.494,2624,2.707,2625,2.707,2626,2.707,2627,2.707,2628,2.707,2629,2.707,2630,2.707,2631,2.559,2632,2.707,2633,2.707,2634,2.707,2635,2.707,2636,2.707,2637,2.707,2638,2.707,2639,3.858,2640,2.222,2641,2.559,2642,2.707,2643,2.707,2644,2.707,2645,2.707,2646,4.037,2647,2.321,2648,2.707,2649,2.707,2650,2.707,2651,2.707,2652,2.707,2653,3.858,2654,2.707,2655,2.707,2656,2.707,2657,2.707,2658,2.707,2659,2.707,2660,2.707,2661,2.707,2662,2.707,2663,2.707,2664,2.707,2665,2.432,2666,2.707,2667,2.707,2668,4.898,2669,2.707,2670,4.248,2671,2.707,2672,2.707,2673,2.707,2674,2.707,2675,2.707,2676,2.707,2677,2.707,2678,2.707,2679,2.707,2680,2.707,2681,2.707,2682,2.707,2683,4.494,2684,2.707,2685,2.707,2686,2.707,2687,2.707,2688,3.858,2689,3.858,2690,3.858,2691,3.858,2692,3.465]],["title/classes/Hertz.html",[77,0.052,2886,3.544]],["body/classes/Hertz.html",[3,0.085,4,0.068,5,0.06,8,0.472,12,0.155,13,0.403,14,0.758,18,0.315,19,0.009,20,1.231,25,2.277,26,0.121,34,1.076,62,2.751,71,1.998,75,0.481,77,0.066,83,3.065,84,1.082,107,0.997,113,0.849,126,0.71,129,1.053,145,0.004,146,0.005,147,0.004,172,1.654,178,0.807,192,0.93,198,0.81,213,1.195,214,1.625,215,0.874,222,2.242,227,2.793,241,0.817,245,1.35,278,0.511,284,0.563,361,2.619,378,1.166,436,2.716,447,3.541,480,1.355,503,0.892,526,3.656,549,2.107,591,1.744,646,4.277,709,2.237,733,1.318,755,2.793,797,3.351,838,3.662,879,2.379,929,2.577,930,5.548,931,2.886,934,5.394,936,2.559,937,4.879,938,4.879,939,5.191,940,5.191,941,6.194,942,5.853,943,5.853,944,5.394,945,4.914,946,5.55,947,4.644,948,5.246,954,1.929,967,3.431,968,3.431,969,2.906,970,2.906,974,5.191,975,5.7,976,3.431,977,2.559,978,5.417,979,3.224,980,4.437,981,4.469,982,4.055,983,3.877,984,3.877,985,2.559,986,3.877,987,5.191,988,3.431,989,3.431,990,2.639,991,4.511,992,3.431,993,3.431,994,4.511,995,5.455,996,3.431,997,3.431,998,3.431,999,3.246,1000,5.099,1001,5.099,1002,5.771,1003,5.394,1004,3.431,1005,4.264,1006,2.639,1007,2.906,1008,2.906,1009,2.906,1010,2.906,1011,2.906,1012,2.906,1013,2.906,1014,2.726,1015,1.8,1016,1.507,1017,3.877,1018,3.877,1019,3.877,1020,2.726,1021,2.726,1022,2.577,1023,2.726,1024,2.726,1025,2.726,1026,3.877,1027,3.877,1028,2.726,2886,6.372,2887,6.434,2888,6.434,2889,6.434,2890,3.888,2891,3.888,2892,3.888,2893,3.888,2894,3.888,2895,3.888,2896,3.888,2897,3.888,2898,3.888,2899,3.888,2900,3.888,2901,3.888,2902,3.888,2903,3.888,2904,3.888,2905,3.888,2906,3.888,2907,3.888,2908,3.888,2909,3.888,2910,3.888,2911,3.888]],["title/interfaces/ISubscriptionTracker.html",[0,0.058,2912,3.289]],["body/interfaces/ISubscriptionTracker.html",[0,0.103,2,1.108,3,0.123,4,0.099,5,0.087,8,0.338,12,0.226,14,0.681,18,0.274,19,0.009,26,0.155,50,0.891,52,0.985,57,2.068,59,0.945,77,0.067,84,1.176,111,3.6,112,1.402,144,1.495,145,0.006,146,0.007,147,0.006,148,0.397,150,1.247,172,1.108,178,1.038,192,0.792,198,0.618,213,1.022,214,1.597,215,0.769,216,3.189,245,1.564,270,0.484,271,0.576,278,0.518,284,0.792,347,2.066,438,5.314,457,1.782,652,1.505,733,1.007,1037,4.556,1045,2.185,1254,3.892,1255,2.538,1256,2.024,1396,1.873,1451,4.395,2912,5.811,2913,6.568,2914,4.556,2915,6.276,2916,7.571,2917,7.199,2918,6.276,2919,7.571,2920,4.994,2921,7.571,2922,7.418,2923,5.659,2924,6.276,2925,6.276,2926,5.725,2927,6.276,2928,8.146,2929,6.863,2930,5.659,2931,7.199,2932,5.659,2933,7.199,2934,6.276,2935,4.994,2936,4.994,2937,4.994,2938,4.556,2939,4.994,2940,4.994,2941,4.556,2942,4.994,2943,4.994,2944,4.994,2945,6.276,2946,4.994,2947,4.994,2948,4.994,2949,4.994,2950,6.276,2951,6.276,2952,4.994,2953,4.994,2954,4.994,2955,4.994,2956,4.994,2957,4.994]],["title/classes/IdGenerator.html",[77,0.052,726,2.432]],["body/classes/IdGenerator.html",[3,0.146,4,0.117,5,0.103,8,0.399,12,0.267,13,0.573,14,0.64,18,0.278,19,0.009,25,2.172,26,0.146,50,0.765,75,0.492,77,0.079,78,3.429,126,0.524,129,0.855,145,0.007,146,0.008,147,0.007,172,1.638,178,1.148,192,0.852,198,0.581,213,1.099,214,1.372,215,0.722,225,3.136,241,1.654,278,0.487,378,2.003,393,5.722,419,4.685,451,1.248,480,2.328,656,2.813,726,4.62,728,5.19,1821,6.334,2182,4.685,2958,7.62,2959,5.896,2960,8.362,2961,6.681,2962,6.681,2963,7.867,2964,6.681,2965,6.681,2966,7.867,2967,6.681,2968,6.681,2969,6.681]],["title/interfaces/InternalRegistrationData.html",[0,0.058,2970,3.086]],["body/interfaces/InternalRegistrationData.html",[0,0.112,2,1.111,3,0.124,4,0.099,5,0.087,8,0.338,12,0.343,13,0.519,14,0.682,18,0.251,19,0.009,20,1.489,26,0.155,43,4.078,50,0.649,64,2.188,75,0.481,77,0.067,78,2.326,80,1.508,84,1.073,94,0.765,97,0.985,113,0.747,126,0.64,131,3.194,144,1.869,145,0.006,146,0.007,147,0.008,213,0.745,215,0.882,225,2.26,227,2.139,241,1.497,270,0.443,271,0.578,278,0.595,284,0.793,366,2.546,367,1.982,503,1.149,549,1.84,604,2.028,648,1.831,656,3.201,733,1.267,815,3.014,851,2.906,886,1.786,889,1.877,1695,3.133,1747,4.098,1875,4.993,2180,4.485,2536,2.92,2647,3.409,2778,5.967,2817,4.993,2970,5.458,2971,3.133,2972,3.014,2973,3.976,2974,5.322,2975,5.411,2976,5.142,2977,4.566,2978,4.566,2979,5.322,2980,4.566,2981,4.566,2982,6.79,2983,4.993,2984,4.238,2985,3.264,2986,4.566,2987,3.976,2988,4.566,2989,5.733,2990,6.267,2991,4.566,2992,4.566,2993,4.566,2994,5.733,2995,5.733,2996,5.733,2997,5.733,2998,4.566,2999,4.566,3000,4.566,3001,4.566,3002,4.566,3003,4.566,3004,4.566,3005,4.566,3006,5.733,3007,4.566,3008,4.566,3009,4.566,3010,4.566,3011,4.566,3012,4.566,3013,4.566,3014,4.566]],["title/components/LoadingIndicatorComponent.html",[148,0.309,357,1.805]],["body/components/LoadingIndicatorComponent.html",[3,0.1,4,0.08,5,0.07,8,0.273,12,0.28,13,0.451,14,0.438,18,0.292,19,0.009,26,0.153,27,1.373,30,1.534,34,0.951,36,1.475,47,2.367,59,0.48,60,0.855,61,2.148,63,1.442,72,1.024,75,0.383,77,0.054,80,1.647,94,0.947,97,1.076,107,1.117,113,0.65,126,0.55,129,1.141,139,3.173,144,0.963,145,0.005,146,0.006,147,0.005,148,0.492,149,1.878,150,1.365,151,1.373,152,2.752,153,1.407,154,1.825,164,1.775,165,1.825,166,1.75,167,1.863,168,2.401,170,1.812,172,1.586,185,1.95,188,2.694,192,0.857,194,1.812,198,0.719,200,1.442,213,0.814,214,0.94,215,0.875,241,1.581,268,3.852,270,0.285,271,0.466,278,0.334,314,1.681,319,1.516,320,1.397,321,1.464,322,1.555,323,3.48,324,2.119,325,2.119,326,1.407,327,1.478,328,1.727,329,2.867,330,1.373,331,1.933,332,2.119,333,1.775,334,2.119,335,1.217,336,2.119,337,1.681,338,2.047,339,1.727,340,3.48,341,1.595,342,1.727,343,1.775,344,1.161,345,1.595,346,1.878,347,1.057,348,2.119,349,1.933,350,1.775,351,2.487,352,2.119,353,1.775,354,2.867,355,1.727,356,2.119,357,3.083,358,2.82,359,2.119,360,1.681,361,1.957,362,1.933,363,1.407,364,2.831,365,1.878,366,1.637,367,1.057,368,1.34,369,1.277,370,2.119,371,1.727,372,2.053,373,2.119,374,1.681,375,1.991,376,2.119,403,1.933,524,1.686,525,3.827,549,1.659,605,2.05,623,1.911,646,3.596,648,1.999,716,1.999,789,3.686,834,1.595,844,1.442,889,2.323,906,3.259,907,3.173,1049,2.346,1051,2.529,1053,2.752,1055,4.628,1057,5.619,1077,2.158,1097,3.034,1138,3.356,1149,3.034,1152,4.628,1184,5.244,1259,2.615,1268,3.852,1453,3.596,1538,2.434,1614,2.434,2089,4.218,2127,4.983,2131,4.651,2212,4.104,2813,6.518,2820,5.465,3015,5.983,3016,3.421,3017,6.193,3018,8.096,3019,7.518,3020,7.017,3021,6.193,3022,7.017,3023,7.017,3024,7.854,3025,7.017,3026,4.578,3027,4.578,3028,4.578,3029,8.419,3030,7.53,3031,6.193,3032,7.017,3033,7.017,3034,4.578,3035,8.419,3036,6.193,3037,6.635,3038,6.193,3039,6.193,3040,6.193,3041,6.193,3042,6.193,3043,7.518,3044,6.193,3045,6.193,3046,6.193,3047,6.193,3048,4.578,3049,4.578,3050,4.578,3051,4.578,3052,4.578,3053,4.578,3054,4.578,3055,7.017,3056,8.096,3057,4.578,3058,6.193,3059,5.465,3060,4.578,3061,6.193,3062,4.578,3063,4.578,3064,4.986,3065,6.193,3066,4.578,3067,4.578,3068,4.578,3069,4.578]],["title/directives/MinMaxValidator.html",[322,1.495,371,1.66]],["body/directives/MinMaxValidator.html",[3,0.086,4,0.069,5,0.061,8,0.236,12,0.158,14,0.622,18,0.229,19,0.009,20,1.425,25,1.027,26,0.142,34,0.859,36,1.737,40,1.276,50,0.809,59,0.782,61,1.129,62,1.413,65,1.532,66,0.812,75,0.354,77,0.067,83,2.384,84,0.52,86,1.185,87,1.719,92,1.773,94,0.534,97,1.128,99,1.947,106,1.342,107,1.274,113,0.415,126,0.708,140,1.491,144,1.484,145,0.004,146,0.006,147,0.004,148,0.543,165,1.576,166,1.425,167,1.333,168,1.532,170,1.157,172,1.618,178,0.816,185,2.223,192,0.661,194,2.418,195,1.761,198,0.783,200,1.245,213,0.52,214,0.812,215,0.427,245,0.721,270,0.521,271,0.403,272,3.488,278,0.643,284,0.884,314,2.054,322,2.397,344,1.003,351,2.685,355,2.11,360,2.384,361,2.554,368,1.157,371,2.663,372,2.509,383,2.772,391,1.621,396,0.774,440,1.955,451,0.738,457,1.245,473,2.973,503,0.638,508,1.89,511,2.824,524,1.076,537,1.308,549,0.934,582,1.955,616,1.89,639,3.523,650,3.587,652,1.727,671,3.922,679,3.09,694,2.772,696,3.922,716,2.096,724,3.488,725,1.308,733,0.996,749,4.181,793,5.227,797,1.89,844,1.245,906,2,978,2.49,980,3.752,1006,1.621,1022,2.62,1045,1.719,1046,2.054,1049,2.025,1149,2.62,1201,1.491,1216,1.276,1249,1.621,1256,1.413,1257,1.773,1265,2.767,1266,2.589,1281,2.433,1371,2.294,1390,3.451,1471,1.576,1509,4.019,1643,2.589,1767,1.955,1857,5.276,1858,3.341,1907,3.587,1912,4.852,1978,3.492,2131,3.707,2174,3.96,2215,4.504,2220,5.568,2247,3.523,2248,3.922,2252,4.504,2254,6.403,2255,3.182,2256,4.504,2289,2.954,2303,4.504,2536,2.294,2703,3.182,2728,4.181,2732,3.182,2733,4.504,2735,2.772,2740,3.488,2741,3.488,2744,3.488,2745,3.488,2746,6.541,2747,4.504,2752,3.488,2754,3.488,2756,4.937,2758,3.488,2759,3.488,2760,3.488,2763,3.488,2764,3.488,2774,3.488,2788,3.488,2826,2.954,2844,2.954,2846,7.018,2854,6.575,2856,4.937,2941,3.182,3070,5.276,3071,4.95,3072,5.594,3073,6.493,3074,5.594,3075,5.594,3076,5.594,3077,3.953,3078,3.953,3079,5.594,3080,6.493,3081,3.707,3082,3.488,3083,3.488,3084,3.953,3085,3.953,3086,3.953,3087,3.953,3088,6.493,3089,3.953,3090,3.953,3091,3.488,3092,6.652,3093,3.953,3094,3.953,3095,3.953,3096,3.953,3097,3.953,3098,3.953,3099,3.953,3100,3.953,3101,3.953,3102,3.953,3103,3.953,3104,3.953,3105,3.953,3106,3.953,3107,3.953,3108,3.953,3109,3.953,3110,3.953,3111,3.953,3112,3.953,3113,3.953,3114,3.953,3115,3.953,3116,3.953,3117,3.953,3118,5.594,3119,5.594,3120,3.953,3121,3.953,3122,5.594,3123,6.493,3124,7.06,3125,6.493,3126,5.594,3127,3.953,3128,3.953,3129,3.953,3130,3.953,3131,3.953,3132,3.953,3133,3.953,3134,6.493,3135,3.953,3136,3.953,3137,5.594,3138,5.594,3139,3.953,3140,3.953,3141,3.953,3142,3.953,3143,3.953,3144,3.953,3145,6.493,3146,3.953,3147,3.953,3148,5.594,3149,5.594,3150,3.953,3151,5.594,3152,3.953,3153,5.594,3154,4.937,3155,4.937,3156,5.594,3157,5.594,3158,5.594,3159,3.488,3160,3.953,3161,3.953,3162,3.953,3163,3.488,3164,3.953,3165,3.953,3166,4.937,3167,3.953,3168,6.493,3169,3.953,3170,3.953,3171,3.953,3172,3.953,3173,5.594,3174,3.953,3175,3.953,3176,3.953,3177,3.953,3178,3.953,3179,3.953,3180,3.953]],["title/interfaces/MockRecord.html",[0,0.058,762,2.772]],["body/interfaces/MockRecord.html",[0,0.088,2,1.305,3,0.145,4,0.117,5,0.102,12,0.266,13,0.572,17,5.508,18,0.318,19,0.009,26,0.171,75,0.5,126,0.655,144,1.401,145,0.007,146,0.008,147,0.007,163,6.254,215,0.964,284,0.679,502,2.548,762,5.261,954,1.998,2140,4.417,2142,4.417,2283,6.665,2284,4.98,2286,4.673,3181,5.365,3182,5.365,3183,7.871,3184,7.372,3185,5.365,3186,6.933,3187,5.881,3188,5.881,3189,5.881,3190,5.881,3191,5.881]],["title/interfaces/MultiSelectOption.html",[0,0.058,2179,2.917]],["body/interfaces/MultiSelectOption.html",[0,0.099,2,1.017,3,0.113,4,0.091,5,0.08,8,0.31,12,0.207,13,0.49,18,0.264,19,0.009,20,1.428,26,0.172,31,2.927,34,1.033,36,1.091,50,0.905,52,0.719,59,0.784,65,2.012,75,0.477,77,0.062,78,2.76,80,1.38,84,0.885,90,1.595,94,0.701,107,0.738,113,0.829,116,1.448,126,0.407,129,0.664,138,3.114,145,0.005,146,0.007,147,0.005,148,0.472,166,0.993,167,1.066,170,1.519,192,0.529,196,1.935,198,0.787,215,0.561,245,0.946,248,2.172,270,0.531,271,0.529,278,0.596,284,0.76,320,1.684,335,1.38,337,2.742,338,1.413,339,2.98,344,2.128,351,2.067,396,1.017,454,1.856,480,1.808,502,1.922,503,1.321,550,1.718,592,1.808,597,2.927,652,1.38,656,2.67,667,2.841,707,3.12,713,1.256,725,1.718,726,3.718,727,3.639,728,3.12,729,3.44,733,1.493,737,3.639,754,1.348,756,1.519,758,1.676,759,1.483,760,2.129,761,1.762,806,1.595,808,2.012,813,2.659,822,2.471,823,2.753,825,2.301,861,1.718,871,1.413,881,2.403,905,1.922,982,2.659,1016,2.609,1033,4.703,1045,2.067,1077,1.808,1216,1.676,1232,2.069,1253,1.448,1258,2.228,1281,2.927,1311,3.357,1316,2.129,1322,1.906,1371,2.129,1396,1.718,1491,1.718,1643,2.403,1722,3.639,1858,3.672,1907,4.126,1978,2.568,2038,3.639,2049,2.191,2059,2.568,2060,2.759,2061,2.568,2064,3.329,2066,2.759,2087,2.759,2138,2.403,2139,3.694,2140,3.44,2141,3.879,2142,4.46,2143,3.879,2144,3.879,2145,2.868,2153,4.46,2155,3.879,2156,3.44,2167,4.46,2169,3.879,2174,4.351,2175,3.269,2176,2.482,2177,2.868,2178,2.759,2179,5.425,2180,3.269,2181,3.879,2182,4.719,2183,3.879,2184,3.44,2185,2.868,2186,3.639,2187,3.879,2188,3.879,2189,3.879,2190,3.879,2191,3.879,2192,3.879,2193,3.879,2194,5.029,2195,3.879,2196,3.879,2197,3.879,2198,3.879,2199,3.879,2200,3.879,2201,3.879,2202,3.879,2203,3.879,2204,3.879,2205,3.879,2206,3.879,2207,3.879,2208,3.879,2209,3.44]],["title/interfaces/MultiSelectOptionInternal.html",[0,0.058,2167,2.917]],["body/interfaces/MultiSelectOptionInternal.html",[0,0.099,2,1.005,3,0.112,4,0.09,5,0.079,8,0.306,12,0.205,13,0.487,18,0.262,19,0.009,20,1.421,26,0.172,31,2.233,34,1.026,36,1.079,50,0.901,52,0.711,59,0.779,65,1.99,75,0.471,77,0.061,78,3.226,80,1.365,84,0.878,90,1.577,94,0.693,107,0.73,113,0.878,116,1.431,126,0.402,129,0.657,138,3.139,145,0.005,146,0.007,147,0.005,148,0.469,166,0.982,167,1.054,170,1.502,192,0.523,196,1.928,198,0.771,215,0.555,245,0.936,248,2.157,270,0.53,271,0.523,278,0.594,284,0.756,320,1.84,335,1.365,337,2.727,338,1.398,339,2.967,344,2.121,351,2.053,396,1.005,454,1.835,480,1.788,502,1.908,503,1.317,550,1.699,592,1.788,597,2.233,652,1.365,656,2.99,667,2.821,707,4.016,713,1.242,725,1.699,726,3.691,727,3.599,728,3.085,729,3.402,733,1.488,737,3.599,754,1.333,756,1.502,758,1.657,759,1.466,760,2.105,761,1.743,806,1.577,808,1.99,813,2.63,822,2.453,823,2.741,825,2.321,861,1.699,871,1.398,881,2.376,905,1.908,982,2.63,1016,2.879,1033,4.678,1045,2.053,1077,1.788,1216,1.657,1232,2.046,1253,1.431,1258,2.212,1281,2.906,1311,3.429,1316,2.105,1322,1.885,1371,2.74,1396,1.699,1491,2.212,1643,2.376,1722,4.684,1858,3.659,1907,4.506,1978,2.539,2038,3.599,2049,2.167,2059,2.539,2060,2.728,2061,2.539,2064,3.305,2066,2.728,2087,2.728,2138,2.376,2139,3.674,2140,3.402,2141,3.836,2142,4.428,2143,3.836,2144,3.836,2145,2.836,2153,4.428,2155,3.836,2156,3.402,2167,4.923,2169,3.836,2174,3.948,2175,3.233,2176,2.455,2177,2.836,2178,2.728,2179,5.406,2180,4.208,2181,4.993,2182,5.516,2183,4.993,2184,3.402,2185,2.836,2186,3.599,2187,3.836,2188,3.836,2189,3.836,2190,3.836,2191,3.836,2192,3.836,2193,3.836,2194,4.993,2195,3.836,2196,3.836,2197,3.836,2198,3.836,2199,3.836,2200,3.836,2201,3.836,2202,3.836,2203,3.836,2204,3.836,2205,3.836,2206,3.836,2207,3.836,2208,3.836,2209,3.402]],["title/pipes/NestedPropertyPipe.html",[2874,3.086,3192,2.917]],["body/pipes/NestedPropertyPipe.html",[3,0.129,4,0.104,5,0.091,8,0.353,14,0.567,18,0.258,19,0.009,26,0.129,52,0.82,57,1.574,64,2.438,75,0.473,77,0.07,94,0.799,97,1.271,113,0.767,126,0.464,144,1.244,145,0.006,146,0.007,147,0.006,151,2.193,165,2.359,172,1.159,178,0.864,192,0.603,194,2.573,195,2.303,198,0.778,213,0.778,214,1.502,215,0.858,270,0.455,271,0.603,278,0.632,284,0.883,314,2.174,396,1.432,408,1.574,425,1.79,491,7.656,536,4.766,549,1.729,652,1.574,689,3.407,733,1.302,860,3.363,871,2.362,885,4.04,911,2.831,931,3.28,1652,2.831,1826,4.847,2861,4.766,2874,5.128,2876,3.923,2880,6.454,2881,5.224,2882,6.454,2884,6.454,3192,4.847,3193,5.465,3194,4.424,3195,7.313,3196,8.289,3197,7.313,3198,8.289,3199,7.313,3200,7.313,3201,5.919,3202,5.919,3203,5.919,3204,3.27,3205,5.919,3206,4.766,3207,4.766,3208,5.919,3209,5.919,3210,7.313,3211,5.919,3212,5.919,3213,5.919,3214,6.454,3215,5.919,3216,5.919,3217,5.919,3218,5.919,3219,5.919,3220,5.919,3221,5.224,3222,5.224]],["title/classes/NumberWithUnitFormInputWidgetObject.html",[77,0.052,3223,3.544]],["body/classes/NumberWithUnitFormInputWidgetObject.html",[3,0.088,4,0.071,5,0.062,8,0.465,12,0.162,13,0.414,14,0.815,18,0.312,19,0.009,25,1.707,26,0.088,34,0.621,35,1.155,43,2.631,57,1.075,59,0.901,66,1.35,71,1.707,72,1.041,75,0.503,77,0.048,80,1.511,86,1.704,94,0.546,107,1.069,124,2.086,126,0.64,129,1.045,134,1.623,138,1.408,142,1.813,145,0.004,146,0.007,147,0.004,148,0.562,153,1.746,166,1.257,167,1.464,178,0.829,188,2.472,192,0.927,198,0.739,200,1.273,201,2.912,213,1.184,214,1.747,215,0.92,216,2.695,245,0.737,270,0.444,278,0.626,284,0.412,320,1.282,321,2.083,351,2.767,360,1.484,361,2.598,367,1.799,378,1.212,391,2.924,396,0.792,411,3.172,503,0.917,526,3.451,547,4.282,548,3.494,549,1.343,550,2.918,551,3.79,552,2.548,553,3.494,554,3.58,555,3.58,556,3.494,557,3.58,558,3.58,559,3.58,563,2.149,564,2.679,565,1.933,566,1.373,567,2.149,568,1.273,569,2.149,570,2,571,2.149,572,2.149,573,3.307,574,4.685,575,2.679,576,2.071,577,3.021,578,1.663,579,3.021,580,2.203,581,4.343,582,3.527,583,3.367,584,2.35,585,2.149,586,2.718,587,4.142,588,2.679,589,2.149,590,2.679,591,1.813,592,2.617,593,2.549,594,2.912,595,2.149,596,2.679,597,2.472,598,2,599,2.149,600,2.679,601,2.149,602,2.149,603,2.679,604,1.446,605,1.338,606,2.149,607,2.149,608,2.679,609,2.149,610,2.149,611,2.679,612,2.149,613,2.912,614,2.071,615,2.149,616,1.933,617,2,618,2.149,619,1.273,620,3.021,621,2.149,622,2.679,623,1.101,624,2.149,642,3.14,646,3.653,667,2.775,716,1.305,717,3.567,725,1.338,793,3.255,948,2.679,1067,3.767,1311,1.658,1857,5.615,2248,2.834,2544,3.416,2560,2.43,2613,3.416,2631,2.679,3070,6.617,3071,6.208,3154,3.567,3155,3.567,3159,5.8,3163,5.8,3223,4.576,3224,7.814,3225,5.683,3226,5.683,3227,5.683,3228,7.13,3229,7.13,3230,6.572,3231,6.572,3232,6.572,3233,6.572,3234,6.572,3235,6.572,3236,6.572,3237,4.042,3238,5.683,3239,4.042,3240,5.683,3241,4.042,3242,5.683,3243,4.042,3244,4.042,3245,4.042,3246,4.042,3247,4.042,3248,4.042,3249,4.042,3250,4.042,3251,5.683,3252,4.042,3253,4.042,3254,4.042,3255,4.042,3256,4.042,3257,4.042,3258,4.042,3259,4.042,3260,4.042,3261,4.042,3262,4.042,3263,4.042,3264,4.042,3265,4.042,3266,4.042,3267,3.021,3268,3.567,3269,4.042,3270,4.042,3271,4.042,3272,4.042,3273,4.042,3274,4.042,3275,4.042,3276,4.042,3277,5.683,3278,4.042,3279,6.572,3280,4.042,3281,4.042,3282,4.042,3283,4.042,3284,4.042,3285,4.042,3286,4.042,3287,4.042,3288,4.042,3289,4.042]],["title/interfaces/ObjectAndResponse.html",[0,0.058,394,3.086]],["body/interfaces/ObjectAndResponse.html",[0,0.095,2,1.114,3,0.124,4,0.1,5,0.087,8,0.339,12,0.227,13,0.52,14,0.683,18,0.297,19,0.009,26,0.17,34,0.873,50,0.817,57,2.173,58,3.167,60,1.332,66,1.465,75,0.446,77,0.085,81,4.728,84,1.106,122,2.303,145,0.008,146,0.007,147,0.006,195,2.246,208,2.633,225,3.355,245,1.301,278,0.653,328,2.524,347,1.944,377,4.288,379,3.419,380,3.419,381,4.25,382,4.579,383,3.988,384,4.579,385,4.282,386,2.717,387,3.023,388,4.25,389,3.529,390,3.988,391,2.332,392,2.401,393,5.166,394,5.465,395,5.744,397,4.579,400,5.693,402,3.2,403,2.401,404,5.744,405,5.331,406,4.728,407,5.49,408,1.897,409,5.744,410,6.275,411,3.012,412,4.728,413,6.275,414,5.744,415,4.579,417,5.166,418,5.166,419,5.002,420,5.744,421,5.744,422,5.731,423,4.579,424,5.744,425,2.02,426,5.744,427,5.744,428,5.744,429,4.579,430,4.579]],["title/interfaces/PaginationCallback.html",[0,0.058,1334,2.255]],["body/interfaces/PaginationCallback.html",[0,0.094,2,0.416,3,0.046,4,0.037,5,0.033,8,0.127,9,1.568,12,0.29,13,0.371,14,0.203,15,1.663,18,0.225,19,0.009,20,0.664,22,0.846,25,0.551,26,0.164,27,1.041,30,1.705,31,0.923,34,1.114,36,1.649,39,0.759,40,1.815,42,1.015,47,0.668,50,0.876,52,0.706,55,2.91,59,0.777,60,1.19,61,1.82,62,0.759,63,0.668,64,1.854,66,0.713,67,1.31,71,0.902,72,0.507,73,2.673,75,0.423,76,1.21,77,0.052,79,0.846,80,0.924,82,0.621,83,2.064,84,0.67,85,3.291,86,1.81,87,0.923,89,2.809,90,0.652,92,3.477,94,1.046,96,1.346,97,0.885,98,0.739,99,2.123,100,0.72,106,1.909,107,1.173,109,2.179,112,0.526,113,0.743,116,1.23,117,1.242,118,2.34,122,0.685,123,2.596,124,1.016,126,0.688,127,1.242,128,0.822,129,0.815,134,1.456,135,0.846,137,1.663,138,2.22,140,2.12,144,1.447,145,0.003,146,0.003,147,0.002,148,0.509,150,0.765,151,1.322,164,1.346,166,0.406,167,0.713,168,0.822,170,0.621,172,1.581,175,1.128,176,1.128,177,1.128,178,0.643,185,1.094,192,0.216,195,2.23,196,1.427,198,0.383,205,1.015,213,0.793,215,0.477,220,1.128,221,1.511,222,0.739,227,0.8,229,2.709,241,1.447,242,1.846,245,1.413,246,0.759,248,1.121,252,0.923,261,1.128,268,1.087,270,0.461,271,0.216,278,0.641,284,0.85,287,2.709,314,1.275,320,0.995,321,0.821,326,0.652,327,0.685,328,1.23,335,0.564,338,0.578,344,0.538,347,0.802,358,0.668,363,0.652,364,0.685,368,1.016,385,1.608,386,0.685,392,0.896,396,0.68,402,0.952,403,3.229,408,0.924,425,1.149,431,1.608,435,1.661,439,1.685,440,2.521,451,0.396,455,1.608,457,1.388,502,0.992,503,0.342,511,1.918,513,1.661,524,1.644,525,2.286,537,0.702,543,1.087,549,1.042,552,1.346,568,1.094,573,1.31,578,1.766,580,1.346,584,0.759,586,1.497,604,2.378,605,1.998,619,0.668,623,0.946,633,1.015,648,1.121,649,0.779,652,0.564,656,0.759,677,1.015,681,0.702,683,0.923,705,1.015,711,1.015,713,0.513,716,1.121,733,1.291,753,1.808,754,1.839,756,0.621,758,2.389,759,1.966,767,0.952,768,0.759,770,1.46,771,1.779,772,1.779,792,2.258,806,2.535,807,1.466,810,1.424,814,0.896,816,0.896,817,0.896,819,0.846,820,0.652,821,0.822,824,0.87,825,0.564,826,1.536,827,1.46,828,1.808,833,2.216,834,2.733,835,1.242,836,1.709,842,1.384,843,1.808,844,1.388,846,0.846,849,0.896,850,2.151,852,2.241,853,0.896,856,0.668,861,1.46,862,2.508,863,1.536,864,0.896,866,0.779,871,1.201,874,0.702,877,1.388,879,1.497,886,1.094,892,0.846,896,1.975,901,0.822,905,2.371,906,2.532,915,1.424,919,1.424,931,1.558,936,2.359,977,1.608,985,2.359,990,1.808,999,1.424,1006,0.87,1015,0.982,1016,0.822,1040,1.31,1043,1.977,1044,1.558,1045,1.067,1046,1.275,1070,0.952,1073,1.049,1089,2.109,1128,0.982,1138,3.291,1201,0.8,1216,0.685,1232,0.846,1235,2.611,1236,1.049,1237,1.919,1238,1.511,1239,1.919,1240,1.172,1241,1.087,1242,1.172,1243,1.846,1244,2.344,1245,2.602,1246,1.172,1247,2.01,1248,1.919,1249,0.87,1250,1.846,1251,2.436,1252,1.919,1253,0.592,1254,1.918,1255,0.952,1256,0.759,1257,0.952,1258,1.15,1259,3.348,1260,2.88,1261,1.128,1262,2.259,1263,1.087,1264,1.049,1265,1.718,1266,0.982,1267,1.846,1268,2.259,1269,1.087,1270,1.128,1271,0.87,1272,1.128,1273,2.611,1274,1.128,1275,4.255,1276,1.779,1277,1.128,1278,2.344,1279,1.779,1280,2.521,1281,1.918,1282,1.172,1283,1.661,1284,1.172,1285,1.718,1286,1.172,1287,3.105,1288,1.779,1289,1.172,1290,1.172,1291,1.919,1292,1.128,1293,2.709,1294,1.172,1295,2.041,1296,1.779,1297,1.919,1298,1.919,1299,1.919,1300,2.611,1301,2.436,1302,1.015,1303,0.982,1304,1.128,1305,1.172,1306,1.172,1307,0.952,1308,3.105,1309,4.007,1310,2.436,1311,0.87,1312,1.172,1313,1.172,1314,4.162,1315,1.087,1316,2.305,1317,3.52,1318,1.087,1319,1.172,1320,2.259,1321,1.049,1322,0.779,1323,1.172,1324,1.172,1325,2.988,1326,1.172,1327,1.384,1328,2.259,1329,0.822,1330,0.896,1331,2.436,1332,1.558,1333,1.172,1334,1.779,1335,2.436,1336,2.436,1337,1.172,1338,1.172,1339,1.718,1340,1.087,1341,1.172,1342,1.172,1343,1.172,1344,1.846,1345,2.436,1346,1.172,1347,1.172,1348,1.172,1349,1.919,1350,1.172,1351,1.919,1352,1.172,1353,2.436,1354,1.172,1355,1.087,1356,1.087,1357,1.172,1358,1.919,1359,1.172,1360,1.172,1361,1.172,1362,1.172,1363,1.172,1364,1.172,1365,1.128,1366,1.172,1367,1.919,1368,1.172,1369,1.128,1370,1.172,1371,1.808,1372,1.172,1373,2.436,1374,1.846,1375,1.172,1376,1.172,1377,3.335,1378,1.172,1379,1.919,1380,1.172,1381,1.172,1382,1.919,1383,2.436,1384,2.436,1385,1.919,1386,2.436,1387,2.815,1388,1.172,1389,1.919,1390,2.709,1391,1.172,1392,1.919,1393,1.172,1394,1.172,1395,1.172,1396,0.702,1397,1.172,1398,1.172,1399,1.172,1400,1.172,1401,1.172,1402,1.172,1403,1.919,1404,1.919,1405,1.919,1406,1.919,1407,2.436,1408,1.172,1409,1.172,1410,1.172,1411,1.172,1412,1.919,1413,1.919,1414,2.815,1415,1.172,1416,1.172,1417,1.172,1418,1.172,1419,1.919,1420,2.815,1421,2.815,1422,0.896,1423,1.172,1424,2.436,1425,1.172,1426,1.128,1427,1.846,1428,1.172,1429,1.172,1430,1.172,1431,1.172,1432,1.172,1433,1.172,1434,1.172,1435,1.172,1436,1.172,1437,1.172,1438,1.172,1439,1.128,1440,1.172,1441,1.172,1442,1.919,1443,1.172,1444,1.172,1445,1.172,1446,1.087,1447,1.172,1448,1.172,1449,1.172,1450,1.172,1451,1.049,1452,1.172,1453,1.087,1454,1.172,1455,1.172,1456,1.172,1457,1.172,1458,0.952,1459,1.172,1460,1.172,1461,1.172,1462,1.172,1463,1.172,1464,1.172,1465,1.172,1466,1.172,1467,1.172,1468,1.172,1469,1.172,1470,1.172,1471,0.846,1472,1.172,1473,1.919,1474,1.919,1475,1.919,1476,1.172,1477,2.436,1478,2.815,1479,1.919,1480,1.172,1481,1.172,1482,1.172,1483,1.172,1484,1.172,1485,1.172,1486,1.172,1487,1.087,1488,1.172,1489,1.172,1490,1.172,1491,0.702,1492,1.172,1493,1.172,1494,1.172,1495,1.172,1496,1.172,1497,1.172,1498,2.436,1499,0.982,1500,1.172,1501,1.172,1502,1.172,1503,1.172,1504,1.172,1505,1.172,1506,1.172,1507,1.172,1508,1.172,1509,2.521,1510,1.172,1511,1.172,1512,1.128,1513,1.172,1514,1.172,1515,1.172,1516,1.919,1517,1.172,1518,1.172,1519,1.172,1520,1.172,1521,1.919,1522,1.172,1523,1.172,1524,1.172,1525,1.172,1526,1.172,1527,1.172,1528,1.172,1529,1.172,1530,1.172,1531,1.172,1532,1.172,1533,1.172,1534,1.172,1535,1.172,1536,1.172,1537,1.172,1538,1.128,1539,1.128,1540,1.172,1541,1.172,1542,1.919,1543,1.919,1544,1.558,1545,1.919,1546,1.846,1547,1.172,1548,1.172,1549,1.919,1550,1.172,1551,1.919,1552,1.172,1553,1.172,1554,1.172,1555,1.172,1556,1.172,1557,1.172,1558,1.128,1559,1.172,1560,1.128,1561,1.172,1562,1.172,1563,1.172,1564,1.919,1565,1.172,1566,1.172,1567,1.172,1568,1.172,1569,1.172,1570,1.172,1571,1.172,1572,1.172,1573,1.172,1574,1.919,1575,2.815,1576,2.436,1577,1.172,1578,1.172,1579,1.172,1580,1.172,1581,1.919,1582,1.172,1583,1.172,1584,1.172,1585,1.172,1586,1.172,1587,1.172,1588,1.172,1589,1.919,1590,1.172,1591,1.172,1592,1.172,1593,0.982,1594,1.172,1595,1.172,1596,1.172,1597,1.172,1598,1.172,1599,1.172,1600,1.172,1601,1.172,1602,1.172,1603,1.172,1604,1.172,1605,1.172,1606,1.172,1607,2.815,1608,1.172,1609,1.172,1610,1.172,1611,1.172,1612,1.172,1613,1.172,1614,1.128,1615,1.172,1616,1.172,1617,1.919,1618,1.172,1619,1.919,1620,1.172,1621,1.172,1622,1.919,1623,1.172,1624,1.172,1625,1.172,1626,1.172,1627,1.172,1628,2.436,1629,1.172,1630,1.172,1631,1.172,1632,1.846,1633,1.172,1634,1.172,1635,1.172,1636,1.172,1637,1.172,1638,1.172,1639,1.172,1640,1.172,1641,1.172,1642,1.172,1643,0.982,1644,1.172,1645,1.172,1646,1.172,1647,0.982,1648,1.172,1649,1.172,1650,1.919,1651,3.105,1652,1.015,1653,1.172,1654,1.172,1655,1.172,1656,1.172,1657,1.172,1658,1.172,1659,1.919,1660,1.172,1661,1.172,1662,1.846,1663,1.172,1664,1.087,1665,1.172,1666,1.172,1667,1.172,1668,1.172,1669,1.172,1670,1.172,2872,1.872,2873,1.708]],["title/interfaces/PaginationConfiguration.html",[0,0.058,1300,2.255]],["body/interfaces/PaginationConfiguration.html",[0,0.093,2,0.405,3,0.045,4,0.036,5,0.032,8,0.123,9,1.547,12,0.288,13,0.366,14,0.653,15,1.635,18,0.259,19,0.009,20,0.651,22,0.825,25,0.537,26,0.163,27,1.02,30,1.74,31,0.9,34,1.105,36,1.674,39,0.74,40,1.791,42,0.99,47,0.652,50,0.87,52,0.601,55,2.896,59,0.771,60,1.114,61,1.801,62,0.74,63,0.652,64,1.833,66,0.699,67,1.283,71,0.884,72,0.497,73,2.66,75,0.415,76,1.186,77,0.052,79,0.825,80,0.905,82,0.606,83,2.315,84,0.66,85,3.262,86,1.788,87,1.48,89,2.79,90,0.636,92,3.456,94,1.084,96,1.319,97,0.872,98,0.721,99,2.203,100,0.703,106,2.025,107,1.175,109,2.15,112,0.513,113,0.716,116,1.209,117,1.217,118,2.312,122,0.668,123,2.573,124,0.996,126,0.695,127,1.795,128,0.802,129,0.843,134,1.704,135,0.825,137,1.635,138,2.376,140,2.378,144,1.434,145,0.004,146,0.003,147,0.002,148,0.505,150,0.75,151,1.299,164,1.68,166,0.396,167,0.699,168,0.802,170,0.606,172,1.574,175,1.1,176,1.1,177,1.1,178,0.632,185,1.071,192,0.347,195,2.211,196,1.41,198,0.377,205,0.99,213,0.729,215,0.468,220,1.1,221,1.885,222,0.721,227,0.781,229,2.668,241,1.434,242,1.809,245,1.405,246,0.74,248,1.098,252,0.9,261,1.1,268,1.06,270,0.457,271,0.211,278,0.64,284,0.846,287,2.668,314,1.249,320,0.977,321,0.804,326,0.636,327,0.668,328,1.209,335,0.55,338,0.564,344,0.525,347,0.786,358,0.652,363,0.636,364,0.668,368,0.996,385,1.575,386,0.668,392,0.874,396,0.666,402,0.928,403,3.293,408,0.905,425,1.132,431,1.575,435,1.627,439,1.663,440,2.744,451,0.386,455,1.575,457,1.581,502,0.972,503,0.334,511,1.885,513,1.627,524,1.717,525,2.251,537,0.685,543,1.06,549,1.024,552,1.319,568,1.071,573,1.283,578,1.745,580,1.319,584,0.74,586,1.471,604,2.355,605,2.087,619,1.071,623,0.927,633,0.99,648,1.098,649,0.76,652,0.55,656,0.74,677,1.627,681,0.685,683,0.9,705,0.99,711,0.99,713,0.501,716,1.098,733,1.281,753,1.777,754,1.824,756,0.606,758,2.372,759,1.948,767,0.928,768,0.74,770,1.435,771,1.743,772,1.743,792,2.316,806,2.507,807,1.437,810,1.395,814,0.874,816,0.874,817,0.874,819,0.825,820,0.636,821,0.802,824,0.849,825,0.55,826,1.51,827,1.435,828,1.777,833,2.19,834,2.747,835,1.217,836,1.68,842,1.356,843,1.777,844,1.365,846,0.825,849,0.874,850,2.119,852,2.211,853,0.874,856,0.652,861,1.435,862,2.484,863,1.749,864,0.874,866,0.76,871,0.927,874,0.685,877,1.365,879,1.471,886,1.071,892,0.825,896,1.946,901,0.802,905,2.374,906,2.755,915,1.395,919,1.395,931,1.526,936,2.324,977,2.006,985,2.324,990,1.777,999,1.395,1006,0.849,1015,0.958,1016,0.802,1040,1.283,1043,1.944,1044,1.526,1045,1.045,1046,1.249,1070,0.928,1073,1.683,1089,2.072,1128,0.958,1138,3.441,1201,0.781,1216,0.668,1232,0.825,1235,2.572,1236,1.024,1237,1.88,1238,1.48,1239,1.88,1240,1.143,1241,1.06,1242,1.143,1243,1.809,1244,2.303,1245,2.568,1246,1.143,1247,1.984,1248,1.88,1249,0.849,1250,1.809,1251,2.394,1252,1.88,1253,0.577,1254,1.48,1255,0.928,1256,0.74,1257,0.928,1258,1.126,1259,3.509,1260,2.842,1261,1.1,1262,2.22,1263,1.06,1264,1.024,1265,1.683,1266,0.958,1267,1.809,1268,2.22,1269,1.06,1270,1.1,1271,0.849,1272,1.1,1273,2.842,1274,1.1,1275,4.233,1276,1.743,1277,1.1,1278,2.303,1279,1.743,1280,2.483,1281,1.885,1282,1.143,1283,1.627,1284,1.143,1285,1.683,1286,1.143,1287,2.773,1288,1.743,1289,1.143,1290,1.143,1291,1.88,1292,1.1,1293,2.668,1294,1.143,1295,2.006,1296,1.743,1297,1.88,1298,1.88,1299,2.394,1300,2.842,1301,3.295,1302,1.627,1303,1.575,1304,1.809,1305,1.88,1306,1.88,1307,1.526,1308,3.638,1309,4.199,1310,3.295,1311,1.395,1312,2.773,1313,2.773,1314,4.133,1315,1.06,1316,2.059,1317,3.483,1318,1.06,1319,1.143,1320,2.22,1321,1.024,1322,0.76,1323,1.143,1324,1.143,1325,2.949,1326,1.143,1327,1.356,1328,2.22,1329,0.802,1330,0.874,1331,2.394,1332,1.526,1333,1.143,1334,1.06,1335,1.88,1336,1.88,1337,1.143,1338,1.143,1339,1.683,1340,1.06,1341,1.143,1342,1.143,1343,1.143,1344,1.809,1345,2.394,1346,1.143,1347,1.143,1348,1.143,1349,1.88,1350,1.143,1351,1.88,1352,1.143,1353,2.394,1354,1.143,1355,1.06,1356,1.06,1357,1.143,1358,1.88,1359,1.143,1360,1.143,1361,1.143,1362,1.143,1363,1.143,1364,1.143,1365,1.1,1366,1.143,1367,1.88,1368,1.143,1369,1.1,1370,1.143,1371,1.777,1372,1.143,1373,2.394,1374,1.809,1375,1.143,1376,1.143,1377,3.295,1378,1.143,1379,1.88,1380,1.143,1381,1.143,1382,1.88,1383,2.394,1384,2.394,1385,1.88,1386,2.394,1387,2.773,1388,1.143,1389,1.88,1390,2.668,1391,1.143,1392,1.88,1393,1.143,1394,1.143,1395,1.143,1396,0.685,1397,1.143,1398,1.143,1399,1.143,1400,1.143,1401,1.143,1402,1.143,1403,1.88,1404,1.88,1405,1.88,1406,1.88,1407,2.394,1408,1.143,1409,1.143,1410,1.143,1411,1.143,1412,1.88,1413,1.88,1414,2.773,1415,1.143,1416,1.143,1417,1.143,1418,1.143,1419,1.88,1420,2.773,1421,2.773,1422,0.874,1423,1.143,1424,2.394,1425,1.143,1426,1.1,1427,1.809,1428,1.143,1429,1.143,1430,1.143,1431,1.143,1432,1.143,1433,1.143,1434,1.143,1435,1.143,1436,1.143,1437,1.143,1438,1.143,1439,1.1,1440,1.143,1441,1.143,1442,1.88,1443,1.143,1444,1.143,1445,1.143,1446,1.06,1447,1.143,1448,1.143,1449,1.143,1450,1.143,1451,1.024,1452,1.143,1453,1.06,1454,1.143,1455,1.143,1456,1.143,1457,1.143,1458,0.928,1459,1.143,1460,1.143,1461,1.143,1462,1.143,1463,1.143,1464,1.143,1465,1.143,1466,1.143,1467,1.143,1468,1.143,1469,1.143,1470,1.143,1471,0.825,1472,1.143,1473,1.88,1474,1.88,1475,1.88,1476,1.143,1477,2.394,1478,2.773,1479,1.88,1480,1.143,1481,1.143,1482,1.143,1483,1.143,1484,1.143,1485,1.143,1486,1.143,1487,1.06,1488,1.143,1489,1.143,1490,1.143,1491,0.685,1492,1.143,1493,1.143,1494,1.143,1495,1.143,1496,1.143,1497,1.143,1498,2.394,1499,0.958,1500,1.143,1501,1.143,1502,1.143,1503,1.143,1504,1.143,1505,1.143,1506,1.143,1507,1.143,1508,1.143,1509,2.483,1510,1.143,1511,1.143,1512,1.1,1513,1.143,1514,1.143,1515,1.143,1516,1.88,1517,1.143,1518,1.143,1519,1.143,1520,1.143,1521,1.88,1522,1.143,1523,1.143,1524,1.143,1525,1.143,1526,1.143,1527,1.143,1528,1.143,1529,1.143,1530,1.143,1531,1.143,1532,1.143,1533,1.143,1534,1.143,1535,1.143,1536,1.143,1537,1.143,1538,1.1,1539,1.1,1540,1.143,1541,1.143,1542,1.88,1543,1.88,1544,1.526,1545,1.88,1546,1.809,1547,1.143,1548,1.143,1549,1.88,1550,1.143,1551,1.88,1552,1.143,1553,1.143,1554,1.143,1555,1.143,1556,1.143,1557,1.143,1558,1.1,1559,1.143,1560,1.1,1561,1.143,1562,1.143,1563,1.143,1564,1.88,1565,1.143,1566,1.143,1567,1.143,1568,1.143,1569,1.143,1570,1.143,1571,1.143,1572,1.143,1573,1.143,1574,1.88,1575,2.773,1576,2.394,1577,1.143,1578,1.143,1579,1.143,1580,1.143,1581,1.88,1582,1.143,1583,1.143,1584,1.143,1585,1.143,1586,1.143,1587,1.143,1588,1.143,1589,1.88,1590,1.143,1591,1.143,1592,1.143,1593,0.958,1594,1.143,1595,1.143,1596,1.143,1597,1.143,1598,1.143,1599,1.143,1600,1.143,1601,1.143,1602,1.143,1603,1.143,1604,1.143,1605,1.143,1606,1.143,1607,2.773,1608,1.143,1609,1.143,1610,1.143,1611,1.143,1612,1.143,1613,1.143,1614,1.1,1615,1.143,1616,1.143,1617,1.88,1618,1.143,1619,1.88,1620,1.143,1621,1.143,1622,1.88,1623,1.143,1624,1.143,1625,1.143,1626,1.143,1627,1.143,1628,2.394,1629,1.143,1630,1.143,1631,1.143,1632,1.809,1633,1.143,1634,1.143,1635,1.143,1636,1.143,1637,1.143,1638,1.143,1639,1.143,1640,1.143,1641,1.143,1642,1.143,1643,0.958,1644,1.143,1645,1.143,1646,1.143,1647,0.958,1648,1.143,1649,1.143,1650,1.88,1651,3.065,1652,0.99,1653,1.143,1654,1.143,1655,1.143,1656,1.143,1657,1.143,1658,1.143,1659,1.88,1660,1.143,1661,1.143,1662,1.809,1663,1.143,1664,1.06,1665,1.143,1666,1.143,1667,1.143,1668,1.143,1669,1.143,1670,1.143]],["title/interfaces/PagionationInformation.html",[0,0.058,1296,2.255]],["body/interfaces/PagionationInformation.html",[0,0.094,2,0.415,3,0.046,4,0.037,5,0.033,8,0.126,9,1.567,12,0.29,13,0.371,14,0.203,15,1.662,18,0.243,19,0.009,20,0.664,22,0.845,25,0.551,26,0.164,27,1.04,30,1.705,31,0.922,34,1.113,36,1.649,39,0.758,40,1.948,42,1.014,47,0.668,50,0.876,52,0.611,55,2.91,59,0.777,60,1.127,61,1.819,62,0.758,63,0.668,64,1.854,66,0.713,67,1.309,71,0.901,72,0.506,73,2.673,75,0.417,76,1.209,77,0.052,79,0.845,80,0.923,82,0.62,83,2.063,84,0.669,85,3.29,86,1.809,87,0.922,89,2.808,90,0.651,92,3.476,94,1.046,96,1.345,97,0.885,98,0.739,99,2.122,100,0.72,106,1.908,107,1.173,109,2.178,112,0.525,113,0.722,116,1.229,117,1.241,118,2.339,122,1.12,123,2.595,124,1.016,126,0.689,127,1.241,128,0.822,129,0.815,134,1.455,135,0.845,137,1.662,138,2.219,140,2.119,144,1.447,145,0.003,146,0.003,147,0.002,148,0.509,150,0.765,151,1.321,164,1.345,166,0.405,167,0.713,168,0.822,170,0.62,172,1.581,175,1.127,176,1.127,177,1.127,178,0.643,185,1.093,192,0.216,195,2.229,196,1.426,198,0.383,205,1.014,213,0.739,215,0.476,220,1.845,221,1.51,222,0.739,227,0.8,229,2.707,241,1.447,242,1.845,245,1.413,246,0.758,248,1.12,252,0.922,261,1.127,268,1.086,270,0.46,271,0.216,278,0.641,284,0.85,287,2.707,314,1.274,320,0.994,321,0.82,326,0.651,327,0.684,328,1.229,335,0.564,338,0.577,344,0.538,347,0.801,358,0.668,363,0.651,364,0.684,368,1.016,385,1.606,386,0.684,392,0.895,396,0.68,402,0.951,403,3.272,408,0.923,425,1.149,431,1.606,435,1.66,439,1.809,440,2.519,451,0.396,455,1.606,457,1.388,502,0.991,503,0.342,511,1.917,513,1.66,524,1.643,525,2.284,537,0.702,543,1.086,549,1.042,552,1.345,568,1.093,573,1.309,578,1.766,580,1.345,584,0.758,586,1.496,604,2.377,605,1.997,619,0.668,623,0.945,633,1.014,648,1.12,649,0.778,652,0.564,656,0.758,677,1.014,681,0.702,683,0.922,705,1.014,711,1.014,713,0.513,716,1.12,733,1.29,753,1.807,754,1.839,756,0.62,758,2.389,759,1.965,767,0.951,768,0.758,770,1.459,771,1.778,772,1.778,792,2.336,806,2.518,807,1.465,810,1.423,814,0.895,816,0.895,817,0.895,819,0.845,820,0.651,821,0.822,824,0.869,825,0.564,826,1.535,827,1.459,828,1.807,833,2.215,834,2.733,835,1.241,836,1.708,842,1.383,843,1.807,844,1.388,846,0.845,849,0.895,850,2.15,852,2.24,853,0.895,856,0.668,861,1.459,862,2.507,863,1.535,864,0.895,866,0.778,871,0.945,874,0.702,877,1.388,879,1.496,886,1.093,892,0.845,896,1.974,901,0.822,905,2.37,906,2.532,915,1.423,919,1.423,931,1.557,936,2.358,977,1.606,985,2.358,990,1.807,999,1.423,1006,0.869,1015,0.981,1016,0.822,1040,1.309,1043,1.976,1044,1.557,1045,1.066,1046,1.274,1070,0.951,1073,1.049,1089,2.107,1128,0.981,1138,3.29,1201,0.8,1216,0.684,1232,0.845,1235,2.61,1236,1.049,1237,1.917,1238,1.51,1239,1.917,1240,1.171,1241,1.086,1242,1.171,1243,1.845,1244,2.342,1245,2.601,1246,1.171,1247,2.009,1248,1.917,1249,0.869,1250,1.845,1251,2.434,1252,1.917,1253,0.591,1254,1.51,1255,0.951,1256,0.758,1257,0.951,1258,1.149,1259,3.409,1260,2.879,1261,1.127,1262,2.258,1263,1.086,1264,1.049,1265,1.717,1266,0.981,1267,1.845,1268,2.258,1269,1.086,1270,1.127,1271,0.869,1272,1.127,1273,2.61,1274,1.127,1275,4.214,1276,1.778,1277,1.127,1278,2.342,1279,1.778,1280,2.519,1281,1.917,1282,1.171,1283,1.66,1284,1.171,1285,1.717,1286,1.171,1287,2.814,1288,1.778,1289,1.171,1290,1.171,1291,1.917,1292,1.127,1293,2.707,1294,1.917,1295,2.358,1296,2.258,1297,3.104,1298,3.104,1299,1.917,1300,2.61,1301,2.434,1302,1.014,1303,0.981,1304,1.127,1305,1.171,1306,1.171,1307,0.951,1308,3.104,1309,4.006,1310,2.434,1311,0.869,1312,1.171,1313,1.171,1314,4.161,1315,1.086,1316,2.089,1317,3.519,1318,1.086,1319,1.171,1320,2.258,1321,1.049,1322,0.778,1323,1.171,1324,1.171,1325,2.987,1326,1.171,1327,1.383,1328,2.258,1329,0.822,1330,0.895,1331,2.434,1332,1.557,1333,1.171,1334,1.086,1335,1.917,1336,1.917,1337,1.171,1338,1.171,1339,1.717,1340,1.086,1341,1.171,1342,1.171,1343,1.171,1344,1.845,1345,2.434,1346,1.171,1347,1.171,1348,1.171,1349,1.917,1350,1.171,1351,1.917,1352,1.171,1353,2.434,1354,1.171,1355,1.086,1356,1.086,1357,1.171,1358,1.917,1359,1.171,1360,1.171,1361,1.171,1362,1.171,1363,1.171,1364,1.171,1365,1.127,1366,1.171,1367,1.917,1368,1.171,1369,1.127,1370,1.171,1371,1.807,1372,1.171,1373,2.434,1374,1.845,1375,1.171,1376,1.171,1377,3.333,1378,1.171,1379,1.917,1380,1.171,1381,1.171,1382,1.917,1383,2.434,1384,2.434,1385,1.917,1386,2.434,1387,2.814,1388,1.171,1389,1.917,1390,2.707,1391,1.171,1392,1.917,1393,1.171,1394,1.171,1395,1.171,1396,0.702,1397,1.171,1398,1.171,1399,1.171,1400,1.171,1401,1.171,1402,1.171,1403,1.917,1404,1.917,1405,1.917,1406,1.917,1407,2.434,1408,1.171,1409,1.171,1410,1.171,1411,1.171,1412,1.917,1413,1.917,1414,2.814,1415,1.171,1416,1.171,1417,1.171,1418,1.171,1419,1.917,1420,2.814,1421,2.814,1422,0.895,1423,1.171,1424,2.434,1425,1.171,1426,1.127,1427,1.845,1428,1.171,1429,1.171,1430,1.171,1431,1.171,1432,1.171,1433,1.171,1434,1.171,1435,1.171,1436,1.171,1437,1.171,1438,1.171,1439,1.127,1440,1.171,1441,1.171,1442,1.917,1443,1.171,1444,1.171,1445,1.171,1446,1.086,1447,1.171,1448,1.171,1449,1.171,1450,1.171,1451,1.049,1452,1.171,1453,1.086,1454,1.171,1455,1.171,1456,1.171,1457,1.171,1458,0.951,1459,1.171,1460,1.171,1461,1.171,1462,1.171,1463,1.171,1464,1.171,1465,1.171,1466,1.171,1467,1.171,1468,1.171,1469,1.171,1470,1.171,1471,0.845,1472,1.171,1473,1.917,1474,1.917,1475,1.917,1476,1.171,1477,2.434,1478,2.814,1479,1.917,1480,1.171,1481,1.171,1482,1.171,1483,1.171,1484,1.171,1485,1.171,1486,1.171,1487,1.086,1488,1.171,1489,1.171,1490,1.171,1491,0.702,1492,1.171,1493,1.171,1494,1.171,1495,1.171,1496,1.171,1497,1.171,1498,2.434,1499,0.981,1500,1.171,1501,1.171,1502,1.171,1503,1.171,1504,1.171,1505,1.171,1506,1.171,1507,1.171,1508,1.171,1509,2.519,1510,1.171,1511,1.171,1512,1.127,1513,1.171,1514,1.171,1515,1.171,1516,1.917,1517,1.171,1518,1.171,1519,1.171,1520,1.171,1521,1.917,1522,1.171,1523,1.171,1524,1.171,1525,1.171,1526,1.171,1527,1.171,1528,1.171,1529,1.171,1530,1.171,1531,1.171,1532,1.171,1533,1.171,1534,1.171,1535,1.171,1536,1.171,1537,1.171,1538,1.127,1539,1.127,1540,1.171,1541,1.171,1542,1.917,1543,1.917,1544,1.557,1545,1.917,1546,1.845,1547,1.171,1548,1.171,1549,1.917,1550,1.171,1551,1.917,1552,1.171,1553,1.171,1554,1.171,1555,1.171,1556,1.171,1557,1.171,1558,1.127,1559,1.171,1560,1.127,1561,1.171,1562,1.171,1563,1.171,1564,1.917,1565,1.171,1566,1.171,1567,1.171,1568,1.171,1569,1.171,1570,1.171,1571,1.171,1572,1.171,1573,1.171,1574,1.917,1575,2.814,1576,2.434,1577,1.171,1578,1.171,1579,1.171,1580,1.171,1581,1.917,1582,1.171,1583,1.171,1584,1.171,1585,1.171,1586,1.171,1587,1.171,1588,1.171,1589,1.917,1590,1.171,1591,1.171,1592,1.171,1593,0.981,1594,1.171,1595,1.171,1596,1.171,1597,1.171,1598,1.171,1599,1.171,1600,1.171,1601,1.171,1602,1.171,1603,1.171,1604,1.171,1605,1.171,1606,1.171,1607,2.814,1608,1.171,1609,1.171,1610,1.171,1611,1.171,1612,1.171,1613,1.171,1614,1.127,1615,1.171,1616,1.171,1617,1.917,1618,1.171,1619,1.917,1620,1.171,1621,1.171,1622,1.917,1623,1.171,1624,1.171,1625,1.171,1626,1.171,1627,1.171,1628,2.434,1629,1.171,1630,1.171,1631,1.171,1632,1.845,1633,1.171,1634,1.171,1635,1.171,1636,1.171,1637,1.171,1638,1.171,1639,1.171,1640,1.171,1641,1.171,1642,1.171,1643,0.981,1644,1.171,1645,1.171,1646,1.171,1647,0.981,1648,1.171,1649,1.171,1650,1.917,1651,3.104,1652,1.014,1653,1.171,1654,1.171,1655,1.171,1656,1.171,1657,1.171,1658,1.171,1659,1.917,1660,1.171,1661,1.171,1662,1.845,1663,1.171,1664,1.086,1665,1.171,1666,1.171,1667,1.171,1668,1.171,1669,1.171,1670,1.171]],["title/classes/Percent.html",[77,0.052,3267,3.289]],["body/classes/Percent.html",[3,0.098,4,0.079,5,0.069,8,0.446,12,0.18,13,0.446,14,0.748,18,0.309,19,0.009,20,1.172,25,2.179,26,0.134,31,2.665,34,1.069,62,2.671,71,1.94,75,0.48,77,0.073,83,2.959,84,1.118,86,1.351,107,0.871,113,0.865,126,0.71,129,0.956,133,2.396,145,0.004,146,0.006,147,0.004,172,1.615,178,0.894,192,0.914,198,0.807,213,1.18,214,1.604,215,0.871,222,2.135,227,2.626,241,0.948,245,1.269,278,0.544,284,0.624,361,2.617,378,1.351,436,2.375,447,3.46,451,0.842,480,1.57,501,3.978,503,0.989,526,3.488,549,2.068,591,2.022,646,4.129,709,2.594,733,1.091,755,2.442,797,3.329,833,1.655,838,3.444,879,2.081,929,2.987,930,3.859,931,2.748,934,5.238,939,4.881,940,4.881,942,5.781,943,5.781,944,5.238,945,4.296,946,5.238,947,4.061,948,4.951,954,1.837,969,3.368,970,3.368,974,5.238,975,5.56,977,2.086,978,5.357,979,3.114,980,4.382,981,4.316,982,4.003,983,3.16,984,3.16,985,2.086,986,3.16,987,5.478,990,2.513,991,4.296,994,4.296,995,5.341,999,3.204,1000,5.464,1001,5.464,1002,5.238,1003,4.296,1005,4.061,1006,2.513,1007,3.368,1008,3.368,1009,3.368,1010,3.368,1011,3.368,1012,3.368,1013,3.368,1014,3.16,1015,2.086,1016,1.747,1017,4.296,1018,4.296,1019,4.296,1020,3.16,1021,3.16,1022,2.987,1023,3.16,1024,3.16,1025,3.16,1026,4.296,1027,4.296,1028,3.16,1264,3.444,1864,2.93,2362,3.368,3059,3.978,3267,6.022,3290,3.978,3291,4.507,3292,4.507,3293,6.127,3294,6.127,3295,8.058,3296,6.961,3297,6.127,3298,6.127,3299,3.978,3300,6.127,3301,4.507,3302,4.507,3303,4.507,3304,4.507,3305,4.507,3306,4.507,3307,4.507,3308,6.127,3309,4.507,3310,4.507,3311,4.507]],["title/modules/PipesModule.html",[2531,1.533,3312,3.086]],["body/modules/PipesModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,77,0.079,145,0.007,146,0.008,147,0.007,270,0.489,271,0.679,284,0.679,319,2.208,350,3.412,353,3.412,355,3.32,360,3.232,371,3.32,508,3.19,885,3.685,954,2,979,2.659,1491,2.208,2379,3.417,2380,3.299,2381,3.417,2382,3.417,2383,3.417,2384,3.417,2385,3.417,2531,2.324,2535,4.074,2536,2.735,3192,5.912,3312,6.453,3313,3.087,3314,3.087,3315,3.417,3316,4.282,3317,5.886,3318,5.886,3319,5.886,3320,4.027,3321,5.37,3322,4.985,3323,4.178,3324,6.67]],["title/interfaces/RegisteredProviders.html",[0,0.058,2975,2.917]],["body/interfaces/RegisteredProviders.html",[0,0.111,2,1.104,3,0.123,4,0.099,5,0.087,8,0.336,12,0.342,13,0.517,18,0.25,19,0.009,20,1.484,26,0.155,43,4.185,50,0.645,64,2.179,75,0.48,77,0.067,78,2.311,80,1.886,84,1.071,94,0.761,97,0.979,113,0.591,126,0.556,131,3.481,144,1.866,145,0.006,146,0.007,147,0.008,213,0.741,215,0.926,225,2.246,227,2.125,241,1.491,270,0.441,271,0.574,278,0.594,284,0.79,366,2.536,367,2.009,503,0.909,549,1.835,604,2.015,648,1.819,656,3.111,733,1.262,815,2.995,851,2.887,886,1.774,889,1.865,1695,3.113,1747,4.081,1875,5.442,2180,3.549,2536,3.183,2647,3.387,2778,5.831,2817,5.442,2970,4.973,2971,3.113,2972,2.995,2973,3.951,2974,4.211,2975,5.398,2976,5.397,2977,4.536,2978,5.71,2979,5.8,2980,5.71,2981,5.71,2982,6.882,2983,4.973,2984,4.211,2985,3.243,2986,4.536,2987,3.951,2988,4.536,2989,5.71,2990,6.248,2991,4.536,2992,4.536,2993,4.536,2994,5.71,2995,5.71,2996,5.71,2997,5.71,2998,4.536,2999,4.536,3000,4.536,3001,4.536,3002,4.536,3003,4.536,3004,4.536,3005,4.536,3006,5.71,3007,4.536,3008,4.536,3009,4.536,3010,4.536,3011,4.536,3012,4.536,3013,4.536,3014,4.536]],["title/interfaces/SearchSection.html",[0,0.058,3325,3.544]],["body/interfaces/SearchSection.html",[0,0.08,2,0.867,3,0.097,4,0.077,5,0.068,12,0.177,13,0.441,18,0.214,19,0.009,20,0.846,25,1.149,26,0.097,30,1.837,33,3.307,35,1.97,36,1.272,40,1.954,43,3.922,50,0.918,58,2.108,59,0.877,60,1.45,64,2.462,75,0.424,77,0.053,83,2.532,84,0.582,86,1.814,87,1.925,90,1.36,92,2.714,94,1.128,97,1.198,99,2.223,106,1.503,107,1.054,129,0.566,131,2.714,144,0.93,145,0.007,146,0.006,147,0.009,148,0.586,151,1.327,166,0.846,167,1.416,168,1.716,170,1.295,172,1.659,194,1.295,198,0.385,221,2.632,228,3.906,241,1.45,270,0.461,271,0.451,278,0.617,284,0.702,344,1.969,351,1.36,358,2.524,365,2.828,366,3.14,367,2.115,383,3.103,396,0.867,403,1.869,408,1.177,411,2.555,439,1.327,440,3.411,451,0.826,457,1.394,473,4.126,484,3.563,502,1.729,503,0.977,505,2.788,511,3,524,1.648,537,1.465,549,1.753,583,2.268,614,2.268,716,1.429,731,2.788,733,1.227,811,3.343,832,2.268,856,1.394,871,1.648,879,2.055,889,2.003,891,2.352,897,1.925,899,2.445,918,1.869,990,2.828,1031,2.547,1035,3.906,1044,3.093,1070,1.985,1081,3.307,1141,3.307,1143,4.243,1231,2.933,1244,3.666,1245,2.801,1247,2.164,1249,1.815,1322,1.625,1355,3.101,1369,2.352,1374,3.217,1451,2.189,1453,3.977,1512,2.352,1593,2.049,1652,2.117,1822,3.563,1888,4.243,1927,5.801,1929,4.872,1931,3.563,1934,4.872,1984,3.563,2052,3.307,2134,2.933,2135,2.933,2325,4.835,2362,4.523,2405,3.906,2536,3.04,2641,4.011,2747,4.872,2778,5.145,2783,3.906,2787,3.906,2817,3.103,2926,4.872,2971,2.445,2972,2.352,2974,4.523,2975,4.57,2976,2.788,2979,4.523,2982,5.154,2985,4.266,2987,3.103,3064,3.563,3325,6.25,3326,3.906,3327,5.857,3328,4.523,3329,3.906,3330,4.426,3331,4.426,3332,4.426,3333,4.426,3334,4.426,3335,4.426,3336,4.426,3337,3.906,3338,4.426,3339,4.426,3340,3.906,3341,3.906,3342,4.426,3343,4.426,3344,4.426,3345,4.426,3346,4.426,3347,3.906,3348,4.426,3349,4.426,3350,8.205,3351,4.426,3352,4.426,3353,3.563,3354,3.563,3355,4.426,3356,4.426,3357,4.426,3358,6.052,3359,6.052,3360,4.426,3361,4.426,3362,4.426,3363,4.426,3364,6.052,3365,4.426,3366,6.052,3367,4.426,3368,4.426,3369,4.426,3370,6.896,3371,3.906,3372,4.426,3373,3.906,3374,4.426,3375,4.426,3376,4.426,3377,4.426,3378,4.426,3379,6.052,3380,6.896,3381,4.426,3382,4.426,3383,4.426,3384,4.426,3385,8.014,3386,4.426,3387,4.426,3388,4.426,3389,4.426,3390,6.052,3391,3.906,3392,4.426,3393,4.426,3394,4.426,3395,4.426,3396,6.896,3397,4.426,3398,4.426,3399,4.426,3400,3.906,3401,4.426,3402,4.426,3403,4.426,3404,6.052,3405,4.426,3406,4.426,3407,4.426,3408,4.426,3409,4.426,3410,4.426,3411,4.426,3412,4.426,3413,3.906,3414,4.426,3415,4.426,3416,4.426,3417,4.426,3418,4.426,3419,4.426,3420,4.426,3421,4.426,3422,4.426,3423,4.426,3424,4.426,3425,4.426,3426,6.052,3427,4.426,3428,3.906,3429,4.426,3430,4.426,3431,4.426,3432,4.426,3433,4.426,3434,4.426,3435,3.906,3436,4.426,3437,4.426]],["title/interfaces/SelectOption.html",[0,0.058,2174,2.34]],["body/interfaces/SelectOption.html",[0,0.09,2,1.328,3,0.148,4,0.119,5,0.104,8,0.404,12,0.271,13,0.578,14,0.76,18,0.297,19,0.009,20,1.297,26,0.148,30,1.68,34,1.332,50,0.776,72,1.266,75,0.488,94,1.136,107,0.964,113,0.833,126,0.659,127,2.838,138,2.362,145,0.007,146,0.008,147,0.007,198,0.778,344,1.72,999,3.254,1311,3.625,2174,4.218,3438,5.983,3439,5.983,3440,8.674,3441,7.935]],["title/directives/ShowClippedTextDirective.html",[322,1.495,374,1.616]],["body/directives/ShowClippedTextDirective.html",[0,0.05,3,0.081,4,0.065,5,0.057,8,0.223,9,1.041,12,0.149,13,0.391,14,0.514,18,0.292,19,0.009,25,1.634,26,0.15,27,1.61,30,1.705,36,0.785,38,1.847,50,0.428,52,0.872,59,0.934,72,0.918,77,0.044,80,0.993,82,1.093,84,0.706,86,1.12,94,0.929,96,2.826,97,0.933,99,2.063,100,2.136,106,1.268,107,0.531,113,0.392,116,1.498,126,0.595,129,1.001,144,1.129,145,0.004,146,0.005,147,0.004,152,2.245,153,1.147,164,1.448,165,1.488,166,1.027,167,0.767,172,1.597,178,0.784,185,1.691,188,2.337,192,0.882,194,2.385,195,1.176,196,1.794,198,0.68,200,2.166,213,0.998,214,1.103,215,0.581,221,1.624,227,1.409,241,1.644,252,3.873,270,0.232,271,0.38,278,0.603,284,0.796,320,1.212,321,1.849,322,2.656,368,1.093,374,2.31,375,2.993,439,1.12,451,0.697,457,1.176,480,1.301,524,1.463,549,1.487,584,1.921,586,1.268,598,2.657,601,1.985,605,1.236,648,1.206,652,1.428,713,0.904,749,5.448,755,1.488,792,1.268,818,3.223,820,2.735,832,1.913,844,2.295,859,2.203,866,1.371,874,1.778,886,1.176,887,1.335,904,3.476,905,1.067,906,2.25,907,1.913,908,3.875,954,2.185,982,1.913,1038,4.815,1039,2.352,1040,1.409,1041,2.968,1042,4.325,1043,3.508,1044,3.086,1045,1.933,1046,2.31,1047,4.17,1048,5.142,1049,3.889,1050,5.448,1051,4.027,1052,5.448,1053,4.135,1054,5.448,1055,2.791,1056,3.007,1057,2.791,1058,3.007,1059,3.007,1060,3.007,1061,2.082,1062,2.791,1063,2.791,1064,3.007,1065,3.007,1066,2.245,1067,5.304,1068,3.007,1069,3.007,1070,1.675,1071,4.325,1072,3.007,1073,3.112,1074,5.065,1075,3.007,1076,3.766,1077,2.725,1078,3.007,1079,3.007,1080,3.007,1081,2.791,1082,3.007,1083,2.791,1084,3.007,1085,5.448,1086,3.007,1087,5.065,1088,3.007,1089,3.009,1090,3.007,1091,5.065,1092,4.325,1093,3.007,1094,4.325,1095,3.007,1096,4.325,1097,2.475,1098,3.007,1099,5.065,1100,3.007,1101,3.007,1102,3.007,1103,4.325,1104,4.325,1105,3.007,1106,3.007,1107,4.411,1108,3.007,1109,3.007,1110,3.007,1111,3.007,1112,3.007,1113,5.539,1114,3.007,1115,3.007,1116,3.007,1117,5.539,1118,3.007,1119,5.065,1120,4.325,1121,3.007,1122,5.539,1123,3.007,1124,3.007,1125,3.007,1126,3.007,1127,3.007,1128,2.487,1129,3.007,1130,3.007,1131,4.325,1132,3.007,1133,4.325,1134,5.539,1135,4.325,1136,4.17,1137,4.325,1138,1.786,1139,4.325,1140,3.007,1141,2.791,1142,3.007,1143,2.618,1144,4.325,1145,3.007,1146,3.007,1147,3.007,1148,3.007,1149,2.475,1150,3.007,1151,2.618,1152,2.791,1153,3.007,1154,3.007,1155,3.007,1156,4.325,1157,5.065,1158,3.007,1159,3.007,1160,3.007,1161,3.007,1162,3.007,1163,4.325,1164,5.539,1165,2.618,1166,2.618,1167,2.618,1168,2.618,1169,5.869,1170,5.065,1171,5.552,1172,3.007,1173,5.539,1174,3.296,1175,3.296,1176,3.007,1177,3.296,1178,3.296,1179,3.007,1180,4.014,1181,3.007,1182,3.296,1183,4.325,1184,4.014,1185,4.741,1186,5.552,1187,3.296,1188,3.296,1189,4.741,1190,3.296,1191,4.741,1192,5.552,1193,3.296,1194,4.741,1195,4.741,1196,4.741,1197,5.552,1198,4.741,1199,5.552,1200,4.741,1201,2.595,1202,6.072,1203,5.552,1204,3.296,1205,3.296,1206,4.741,1207,4.741,1208,2.149,1209,4.741,1210,3.296,1211,3.296,1212,3.296,1213,3.296,1214,3.296,1215,3.296,1216,2.221,1217,5.142,1218,3.296,1219,3.296,1220,5.552,1221,4.741,1222,4.741,1223,6.072,1224,5.552,1225,6.072,1226,3.296,1227,3.007,1228,3.296,1229,3.296,1230,3.007,1231,2.475,1232,1.488,1233,3.007,1234,3.007,3442,3.734,3443,5.372,3444,5.372,3445,3.734,3446,3.734,3447,3.734,3448,3.734,3449,3.734,3450,3.734,3451,3.734,3452,3.734,3453,3.734,3454,3.734,3455,3.734,3456,3.734]],["title/modules/ShowClippedTextDirectiveModule.html",[2531,1.533,3457,2.917]],["body/modules/ShowClippedTextDirectiveModule.html",[3,0.149,4,0.12,5,0.105,19,0.009,26,0.149,77,0.081,145,0.007,146,0.008,147,0.007,270,0.496,271,0.696,319,2.262,374,3.399,508,3.268,524,1.861,820,2.449,821,2.649,954,2.048,979,2.723,1038,3.775,1491,2.262,1790,3.932,2379,3.501,2380,3.38,2381,3.501,2382,3.501,2383,3.501,2384,3.501,2385,3.501,2531,2.38,2535,3.907,2536,2.802,3313,3.163,3314,3.163,3315,3.501,3316,4.325,3320,4.084,3323,4.237,3457,5.997,3458,6.03,3459,6.03,3460,6.03,3461,6.833]],["title/classes/ShowClippedTextDirectiveTestHelper.html",[77,0.052,3462,3.289]],["body/classes/ShowClippedTextDirectiveTestHelper.html",[3,0.101,4,0.081,5,0.071,8,0.275,12,0.184,13,0.454,14,0.754,18,0.298,19,0.009,26,0.136,36,1.586,59,0.941,71,1.198,72,1.149,75,0.46,77,0.074,94,1.018,96,3.053,99,1.383,113,0.653,126,0.488,129,0.965,134,1.778,144,0.97,145,0.005,146,0.006,147,0.005,148,0.437,151,1.383,153,1.912,172,1.652,178,0.908,188,2.708,192,0.931,194,1.35,198,0.655,200,1.453,213,1.135,214,1.617,215,0.851,241,1.773,252,3.064,270,0.438,271,0.47,278,0.623,284,0.768,322,2.392,362,1.948,374,2.286,378,1.866,391,2.553,451,0.862,480,1.607,524,1.918,549,2.1,820,2.827,821,1.788,844,2.218,1038,5.059,1043,3.16,1044,3.16,1047,5.497,1049,3.61,1051,3.892,1053,4.234,1067,5.378,1077,2.454,1097,3.057,1107,5.288,1136,4.998,1151,5.522,1165,3.235,1166,3.235,1167,3.235,1168,3.235,1232,2.481,1249,1.892,1767,3.079,2010,3.309,2128,2.881,2527,2.773,2562,3.921,2565,3.921,2566,4.75,2613,3.741,2665,4.437,3462,4.652,3463,7.372,3464,3.714,3465,5.493,3466,6.217,3467,6.217,3468,6.217,3469,6.656,3470,6.656,3471,6.656,3472,6.656,3473,6.656,3474,6.225,3475,6.225,3476,6.217,3477,6.217,3478,6.217,3479,6.217,3480,6.217,3481,4.071,3482,4.613,3483,4.613,3484,6.217,3485,4.613,3486,5.493,3487,4.613,3488,5.493,3489,4.613,3490,4.613,3491,4.613,3492,4.613,3493,4.613,3494,4.613,3495,4.613,3496,4.613,3497,4.613,3498,4.613,3499,4.613,3500,4.613,3501,4.613,3502,4.613,3503,4.613,3504,4.613,3505,4.613,3506,4.613,3507,4.613,3508,4.613,3509,4.613,3510,4.613,3511,4.613,3512,4.613,3513,4.613,3514,4.613,3515,4.613,3516,4.613,3517,4.613,3518,4.613,3519,4.613,3520,4.071,3521,4.071,3522,4.071,3523,4.071,3524,6.656,3525,4.071,3526,4.071,3527,4.071,3528,4.071,3529,4.071,3530,4.071,3531,5.493,3532,6.217,3533,4.071,3534,5.493,3535,5.493,3536,4.071,3537,5.493,3538,4.071,3539,4.071,3540,4.071,3541,4.071,3542,5.493,3543,4.071,3544,4.071,3545,4.071,3546,4.071,3547,4.071,3548,4.071,3549,5.493,3550,4.071,3551,4.071,3552,4.071,3553,4.071,3554,4.071,3555,5.493]],["title/components/ShowClippedTextDirectiveTestHostComponent.html",[148,0.309,362,1.858]],["body/components/ShowClippedTextDirectiveTestHostComponent.html",[3,0.104,4,0.084,5,0.073,12,0.191,13,0.464,18,0.289,19,0.009,26,0.139,36,1.608,59,0.86,60,0.891,63,1.503,71,1.24,72,1.256,75,0.456,77,0.076,94,0.967,96,2.964,99,1.909,113,0.501,126,0.624,129,0.917,134,1.819,144,1.004,145,0.005,146,0.006,147,0.005,148,0.503,149,1.958,150,1.403,151,1.909,153,1.957,154,1.903,165,1.903,166,1.75,167,1.861,172,1.498,192,0.834,194,1.397,198,0.623,200,1.503,215,0.861,241,1.787,252,2.076,270,0.446,271,0.486,278,0.627,284,0.779,319,1.58,320,1.437,321,1.506,322,2.705,323,3.54,324,2.21,325,2.21,326,1.466,327,1.541,328,1.776,329,2.948,330,1.431,331,2.015,332,2.21,333,1.85,334,2.21,335,1.269,336,2.21,337,1.753,338,2.082,339,1.8,340,3.54,341,1.663,342,1.8,343,1.85,344,1.211,345,1.663,346,1.958,347,1.102,348,2.21,349,2.015,350,1.85,351,2.518,352,2.21,353,1.85,354,2.948,355,1.8,356,2.21,357,1.958,358,1.503,359,2.21,360,1.753,361,1.999,362,3.228,363,1.466,364,1.541,365,1.958,366,1.707,367,1.102,368,1.397,369,1.331,370,2.21,371,1.8,372,2.141,373,2.21,374,2.808,375,2.076,376,2.21,378,1.431,391,1.958,480,1.663,524,1.952,549,2.11,820,2.671,821,1.85,844,2.257,1038,4.622,1043,2.141,1044,3.573,1047,5.28,1049,3.672,1051,3.96,1053,4.308,1067,5.068,1077,1.663,1097,3.164,1107,3.347,1136,3.164,1151,5.362,1165,3.347,1166,3.347,1167,3.347,1168,3.347,1232,1.903,1249,1.958,1767,2.361,2010,2.537,2128,2.21,2234,5.771,2527,2.869,2562,4.011,2565,3.006,2566,4.011,2613,3.828,2665,3.006,3462,3.567,3463,6.736,3464,3.843,3465,4.213,3466,4.213,3467,4.213,3468,4.213,3469,4.213,3470,4.213,3471,4.213,3472,4.213,3473,4.213,3476,4.213,3477,4.213,3478,4.213,3479,4.213,3480,4.213,3484,4.213,3486,4.213,3488,4.213,3520,4.213,3521,4.213,3522,4.213,3523,4.213,3524,6.748,3525,4.213,3526,4.213,3527,4.213,3528,4.213,3529,4.213,3530,4.213,3531,5.62,3532,6.325,3533,4.213,3534,5.62,3535,5.62,3536,4.213,3537,5.62,3538,4.213,3539,4.213,3540,4.213,3541,4.213,3542,5.62,3543,4.213,3544,4.213,3545,4.213,3546,4.213,3547,4.213,3548,4.213,3549,7.232,3550,5.62,3551,5.62,3552,6.325,3553,5.62,3554,6.325,3555,6.748,3556,4.773,3557,4.773,3558,4.773,3559,4.773,3560,4.773,3561,4.773]],["title/interfaces/SortedColumn.html",[0,0.058,1288,2.255]],["body/interfaces/SortedColumn.html",[0,0.094,2,0.415,3,0.046,4,0.037,5,0.033,8,0.126,9,1.567,12,0.29,13,0.371,14,0.203,15,1.661,18,0.243,19,0.009,20,0.663,22,0.844,25,0.55,26,0.164,27,1.04,30,1.704,31,0.922,34,1.113,36,1.649,39,0.758,40,1.813,42,1.013,47,0.667,50,0.876,52,0.61,55,2.909,59,0.776,60,1.126,61,1.819,62,0.758,63,0.667,64,1.853,66,0.712,67,1.308,71,0.901,72,0.506,73,2.672,75,0.428,76,1.209,77,0.052,79,0.844,80,0.922,82,1.015,83,2.063,84,0.669,85,3.29,86,1.808,87,0.922,89,2.808,90,0.651,92,3.476,94,1.07,96,1.345,97,0.885,98,0.738,99,2.122,100,0.719,106,1.907,107,1.173,109,2.177,112,0.525,113,0.722,116,1.228,117,1.241,118,2.338,122,0.684,123,2.595,124,1.015,126,0.683,127,1.241,128,0.821,129,0.815,134,1.454,135,0.844,137,1.661,138,2.219,140,2.119,144,1.446,145,0.003,146,0.003,147,0.002,148,0.509,150,0.764,151,1.321,164,1.345,166,0.405,167,0.712,168,0.821,170,0.62,172,1.581,175,1.126,176,1.126,177,1.126,178,0.643,185,1.092,192,0.216,195,2.229,196,1.426,198,0.383,205,1.013,213,0.738,215,0.688,220,1.126,221,1.509,222,0.738,227,0.799,229,2.706,241,1.446,242,1.844,245,1.413,246,0.758,248,1.12,252,0.922,261,1.126,268,1.086,270,0.46,271,0.216,278,0.641,284,0.85,287,2.706,314,1.274,320,0.994,321,0.82,326,0.651,327,0.684,328,1.228,335,0.563,338,0.577,344,0.537,347,0.801,358,0.667,363,0.651,364,0.684,368,1.015,385,1.606,386,0.684,392,0.895,396,0.679,402,0.95,403,3.228,408,0.922,425,1.149,431,1.606,435,1.659,439,1.808,440,2.519,451,0.396,455,1.606,457,1.387,502,0.991,503,0.342,511,1.916,513,1.659,524,1.643,525,2.284,537,0.701,543,1.086,549,1.041,552,1.345,568,1.092,573,1.308,578,1.765,580,1.345,584,0.758,586,1.496,604,2.377,605,1.997,619,0.667,623,0.945,633,1.013,648,1.12,649,0.778,652,0.563,656,0.758,677,1.013,681,0.701,683,0.922,705,1.013,711,1.013,713,0.513,716,1.12,733,1.29,753,1.806,754,1.956,756,0.62,758,2.388,759,1.965,767,0.95,768,0.758,770,1.458,771,1.777,772,1.777,792,2.336,806,2.518,807,1.465,810,1.423,814,0.895,816,0.895,817,0.895,819,0.844,820,0.651,821,0.821,824,0.869,825,0.563,826,1.535,827,1.458,828,1.806,833,2.215,834,2.732,835,1.241,836,1.707,842,1.383,843,1.806,844,1.387,846,0.844,849,0.895,850,2.15,852,2.239,853,0.895,856,0.667,861,1.458,862,2.507,863,1.535,864,0.895,866,0.778,871,0.945,874,0.701,877,1.387,879,1.496,886,1.092,892,0.844,896,1.974,901,0.821,905,2.37,906,2.531,915,1.423,919,1.423,931,1.556,936,2.357,977,1.606,985,2.948,990,1.806,999,1.423,1006,0.869,1015,0.981,1016,0.821,1040,1.308,1043,1.976,1044,1.556,1045,1.066,1046,1.274,1070,0.95,1073,1.048,1089,2.107,1128,0.981,1138,3.29,1201,0.799,1216,0.684,1232,0.844,1235,2.609,1236,1.048,1237,1.917,1238,1.509,1239,1.917,1240,1.17,1241,1.086,1242,1.17,1243,1.844,1244,2.341,1245,2.6,1246,1.17,1247,2.009,1248,1.917,1249,0.869,1250,1.844,1251,2.434,1252,1.917,1253,0.591,1254,1.509,1255,0.95,1256,0.758,1257,0.95,1258,1.148,1259,3.347,1260,2.878,1261,1.126,1262,2.257,1263,1.086,1264,1.048,1265,1.716,1266,0.981,1267,1.844,1268,2.257,1269,1.086,1270,1.126,1271,0.869,1272,1.126,1273,2.609,1274,1.126,1275,4.214,1276,1.777,1277,1.126,1278,2.341,1279,1.777,1280,2.519,1281,1.916,1282,1.17,1283,1.659,1284,1.17,1285,1.716,1286,1.17,1287,2.813,1288,2.257,1289,1.917,1290,1.917,1291,3.103,1292,1.126,1293,2.706,1294,1.17,1295,2.039,1296,1.777,1297,1.917,1298,1.917,1299,1.917,1300,2.609,1301,2.434,1302,1.013,1303,0.981,1304,1.126,1305,1.17,1306,1.17,1307,0.95,1308,3.103,1309,4.005,1310,2.434,1311,0.869,1312,1.17,1313,1.17,1314,4.16,1315,1.086,1316,2.088,1317,3.518,1318,1.086,1319,1.17,1320,2.257,1321,1.048,1322,0.778,1323,1.17,1324,1.17,1325,2.986,1326,1.17,1327,1.383,1328,2.257,1329,0.821,1330,0.895,1331,2.434,1332,1.556,1333,1.17,1334,1.086,1335,1.917,1336,1.917,1337,1.17,1338,1.17,1339,1.716,1340,1.086,1341,1.17,1342,1.17,1343,1.17,1344,1.844,1345,2.434,1346,1.17,1347,1.17,1348,1.17,1349,1.917,1350,1.17,1351,1.917,1352,1.17,1353,2.434,1354,1.17,1355,1.086,1356,1.086,1357,1.17,1358,1.917,1359,1.17,1360,1.17,1361,1.17,1362,1.17,1363,1.17,1364,1.17,1365,1.126,1366,1.17,1367,1.917,1368,1.17,1369,1.126,1370,1.17,1371,1.806,1372,1.17,1373,2.434,1374,1.844,1375,1.17,1376,1.17,1377,3.333,1378,1.17,1379,1.917,1380,1.17,1381,1.17,1382,1.917,1383,2.434,1384,2.434,1385,1.917,1386,2.434,1387,2.813,1388,1.17,1389,1.917,1390,2.706,1391,1.17,1392,1.917,1393,1.17,1394,1.17,1395,1.17,1396,0.701,1397,1.17,1398,1.17,1399,1.17,1400,1.17,1401,1.17,1402,1.17,1403,1.917,1404,1.917,1405,1.917,1406,1.917,1407,2.434,1408,1.17,1409,1.17,1410,1.17,1411,1.17,1412,1.917,1413,1.917,1414,2.813,1415,1.17,1416,1.17,1417,1.17,1418,1.17,1419,1.917,1420,2.813,1421,2.813,1422,0.895,1423,1.17,1424,2.434,1425,1.17,1426,1.126,1427,1.844,1428,1.17,1429,1.17,1430,1.17,1431,1.17,1432,1.17,1433,1.17,1434,1.17,1435,1.17,1436,1.17,1437,1.17,1438,1.17,1439,1.126,1440,1.17,1441,1.17,1442,1.917,1443,1.17,1444,1.17,1445,1.17,1446,1.086,1447,1.17,1448,1.17,1449,1.17,1450,1.17,1451,1.048,1452,1.17,1453,1.086,1454,1.17,1455,1.17,1456,1.17,1457,1.17,1458,0.95,1459,1.17,1460,1.17,1461,1.17,1462,1.17,1463,1.17,1464,1.17,1465,1.17,1466,1.17,1467,1.17,1468,1.17,1469,1.17,1470,1.17,1471,0.844,1472,1.17,1473,1.917,1474,1.917,1475,1.917,1476,1.17,1477,2.434,1478,2.813,1479,1.917,1480,1.17,1481,1.17,1482,1.17,1483,1.17,1484,1.17,1485,1.17,1486,1.17,1487,1.086,1488,1.17,1489,1.17,1490,1.17,1491,0.701,1492,1.17,1493,1.17,1494,1.17,1495,1.17,1496,1.17,1497,1.17,1498,2.434,1499,0.981,1500,1.17,1501,1.17,1502,1.17,1503,1.17,1504,1.17,1505,1.17,1506,1.17,1507,1.17,1508,1.17,1509,2.519,1510,1.17,1511,1.17,1512,1.126,1513,1.17,1514,1.17,1515,1.17,1516,1.917,1517,1.17,1518,1.17,1519,1.17,1520,1.17,1521,1.917,1522,1.17,1523,1.17,1524,1.17,1525,1.17,1526,1.17,1527,1.17,1528,1.17,1529,1.17,1530,1.17,1531,1.17,1532,1.17,1533,1.17,1534,1.17,1535,1.17,1536,1.17,1537,1.17,1538,1.126,1539,1.126,1540,1.17,1541,1.17,1542,1.917,1543,1.917,1544,1.556,1545,1.917,1546,1.844,1547,1.17,1548,1.17,1549,1.917,1550,1.17,1551,1.917,1552,1.17,1553,1.17,1554,1.17,1555,1.17,1556,1.17,1557,1.17,1558,1.126,1559,1.17,1560,1.126,1561,1.17,1562,1.17,1563,1.17,1564,1.917,1565,1.17,1566,1.17,1567,1.17,1568,1.17,1569,1.17,1570,1.17,1571,1.17,1572,1.17,1573,1.17,1574,1.917,1575,2.813,1576,2.434,1577,1.17,1578,1.17,1579,1.17,1580,1.17,1581,1.917,1582,1.17,1583,1.17,1584,1.17,1585,1.17,1586,1.17,1587,1.17,1588,1.17,1589,1.917,1590,1.17,1591,1.17,1592,1.17,1593,0.981,1594,1.17,1595,1.17,1596,1.17,1597,1.17,1598,1.17,1599,1.17,1600,1.17,1601,1.17,1602,1.17,1603,1.17,1604,1.17,1605,1.17,1606,1.17,1607,2.813,1608,1.17,1609,1.17,1610,1.17,1611,1.17,1612,1.17,1613,1.17,1614,1.126,1615,1.17,1616,1.17,1617,1.917,1618,1.17,1619,1.917,1620,1.17,1621,1.17,1622,1.917,1623,1.17,1624,1.17,1625,1.17,1626,1.17,1627,1.17,1628,2.434,1629,1.17,1630,1.17,1631,1.17,1632,1.844,1633,1.17,1634,1.17,1635,1.17,1636,1.17,1637,1.17,1638,1.17,1639,1.17,1640,1.17,1641,1.17,1642,1.17,1643,0.981,1644,1.17,1645,1.17,1646,1.17,1647,0.981,1648,1.17,1649,1.17,1650,1.917,1651,3.103,1652,1.013,1653,1.17,1654,1.17,1655,1.17,1656,1.17,1657,1.17,1658,1.17,1659,1.917,1660,1.17,1661,1.17,1662,1.844,1663,1.17,1664,1.086,1665,1.17,1666,1.17,1667,1.17,1668,1.17,1669,1.17,1670,1.17]],["title/components/SpinnerActivityReporterComponent.html",[148,0.309,363,1.352]],["body/components/SpinnerActivityReporterComponent.html",[3,0.102,4,0.082,5,0.072,8,0.423,12,0.187,13,0.458,14,0.797,18,0.311,19,0.009,21,3.887,26,0.102,30,1.557,34,0.965,36,1.321,39,2.247,57,1.887,58,3.085,59,0.899,60,0.874,63,1.473,65,2.436,72,1.107,75,0.48,77,0.056,94,0.632,97,1.233,99,2.274,106,2.409,109,2.751,122,1.511,126,0.556,129,0.804,145,0.005,146,0.006,147,0.005,148,0.498,149,1.919,150,1.385,151,1.403,153,1.438,154,1.865,165,1.865,166,1.753,167,1.867,170,1.839,178,0.917,192,0.896,194,2.076,198,0.546,208,2.166,213,1.157,214,1.779,215,0.951,216,1.919,225,2.505,270,0.442,271,0.477,319,1.549,320,1.418,321,1.486,322,1.589,323,3.511,324,2.166,325,2.166,326,1.438,327,2.291,328,2.513,329,2.909,330,1.403,331,1.976,332,2.166,333,1.814,334,2.166,335,1.244,336,2.166,337,1.718,338,2.066,339,1.765,340,3.511,341,1.63,342,1.765,343,1.814,344,1.187,345,1.63,346,1.919,347,2.045,348,2.166,349,1.976,350,1.814,351,2.503,352,2.166,353,1.814,354,2.909,355,1.765,356,2.166,357,1.919,358,2.621,359,2.166,360,1.718,361,1.979,362,1.976,363,2.33,364,2.82,365,1.919,366,1.673,367,1.081,368,1.369,369,1.305,370,2.166,371,1.765,372,2.099,373,2.166,374,1.718,375,2.035,376,2.166,377,4.559,379,5.003,386,2.687,389,3.109,400,5.027,406,3.101,407,4.469,408,1.671,417,4.165,418,3.101,431,3.968,437,4.697,443,6.089,444,5.06,445,5.06,446,5.06,447,3.248,448,6.107,449,6.56,450,6.702,451,0.874,452,4.13,455,3.663,460,5.06,461,3.767,463,5.713,464,3.767,465,5.06,466,3.767,468,3.767,470,3.767,471,5.713,473,3.34,474,5.06,475,5.713,476,3.497,477,3.767,500,3.767,503,1.014,504,5.546,505,4.469,523,5.546,524,2.219,525,3.654,526,3.341,527,4.13,528,4.13,529,4.13,530,4.13,531,4.13,532,4.13,535,4.13,536,3.767,539,4.13,540,6.262,542,5.546,549,1.926,1593,2.909,3562,6.702,3563,6.284,3564,6.284,3565,4.679,3566,7.585,3567,4.679,3568,4.679,3569,4.679]],["title/classes/SpinnerActivityReporterWidgetObject.html",[77,0.052,3570,3.544]],["body/classes/SpinnerActivityReporterWidgetObject.html",[3,0.105,4,0.084,5,0.074,8,0.476,12,0.192,13,0.466,14,0.815,18,0.315,19,0.009,25,1.868,26,0.105,34,0.738,35,1.374,57,1.279,59,0.805,66,1.477,71,1.868,72,1.05,75,0.501,77,0.057,80,1.702,94,0.971,99,1.442,107,0.684,124,2.244,126,0.502,129,1.089,134,1.828,142,2.157,145,0.005,146,0.008,147,0.005,148,0.56,153,1.966,166,1.376,167,1.314,172,1.409,178,0.934,188,2.784,192,0.917,198,0.763,200,1.514,201,3.279,213,1.168,214,1.748,215,0.92,216,2.95,245,0.877,270,0.448,271,0.49,278,0.598,284,0.49,321,2.155,328,2.374,347,1.11,363,1.477,364,2.578,367,1.896,378,1.442,391,3.145,396,0.942,411,2.03,425,1.085,455,3.33,475,5.044,503,1.033,505,4.531,526,3.57,545,6.612,546,3.871,547,4.397,548,3.824,549,1.888,550,2.982,551,4.076,552,2.789,553,3.824,554,4.031,555,4.031,556,3.824,557,4.031,558,4.031,559,4.031,563,2.556,564,3.187,565,2.3,566,1.633,567,2.556,568,1.514,569,2.556,570,2.379,571,2.556,572,2.556,573,3.385,574,4.833,575,3.187,576,2.464,577,3.402,578,1.873,579,3.402,580,2.481,581,4.455,582,3.794,583,3.686,584,2.572,585,2.556,586,2.846,587,4.365,588,3.187,589,2.556,590,3.187,591,2.157,592,2.672,593,2.87,594,3.279,595,2.556,596,3.187,597,2.784,598,2.379,599,2.556,600,3.187,601,2.556,602,2.556,603,3.187,604,1.72,605,2.381,606,2.556,607,2.556,608,3.187,609,2.556,610,2.556,611,3.187,612,2.556,613,3.279,614,2.464,615,2.556,616,2.3,617,2.379,618,2.556,619,1.514,620,3.402,621,2.556,622,3.187,623,1.309,624,2.556,625,4.244,627,4.244,632,4.244,633,2.3,634,4.244,635,4.244,733,0.856,891,2.556,1396,1.592,1544,2.157,3562,6.612,3570,5.153,3571,7.669,3572,7.669,3573,4.808,3574,4.808,3575,4.808,3576,4.808,3577,4.808,3578,4.808,3579,4.808,3580,4.808]],["title/modules/SpotlightSearchModule.html",[2531,1.533,3581,3.086]],["body/modules/SpotlightSearchModule.html",[3,0.144,4,0.115,5,0.101,19,0.009,26,0.144,77,0.078,145,0.007,146,0.008,147,0.007,270,0.559,271,0.671,319,2.18,365,3.78,366,2.79,508,3.15,537,2.18,725,2.18,954,1.974,979,2.625,1253,1.837,1491,2.18,1790,3.79,2379,3.374,2380,3.258,2381,3.374,2382,3.374,2383,3.374,2384,3.374,2385,3.374,2531,2.294,2534,3.79,2535,3.848,2536,3.409,2971,3.638,2972,3.501,2985,5.119,3204,3.638,3313,3.049,3314,3.049,3315,3.374,3316,4.259,3320,3.997,3323,4.147,3329,5.812,3581,6.386,3582,5.812,3583,5.812,3584,5.812,3585,5.812,3586,6.586,3587,4.689,3588,6.281,3589,5.83,3590,4.689,3591,4.689,3592,6.586]],["title/interfaces/SpotlightSearchProvider.html",[0,0.058,2976,2.772]],["body/interfaces/SpotlightSearchProvider.html",[0,0.111,2,1.306,3,0.146,4,0.117,5,0.103,8,0.469,12,0.267,14,0.639,18,0.235,19,0.009,26,0.146,50,0.764,58,2.738,75,0.48,84,0.877,106,2.669,145,0.008,146,0.008,147,0.007,148,0.551,178,1.147,192,0.679,213,1.098,214,1.37,215,0.721,270,0.415,366,2.988,367,2.125,403,3.318,879,2.93,889,2.602,1031,4.523,2536,3.223,2778,5.209,2971,4.342,2972,4.178,2976,4.95,2985,4.523,2987,5.511,3328,6.245,3337,6.936,3593,5.886,3594,7.86,3595,6.67,3596,7.86,3597,8.629,3598,7.86]],["title/interfaces/SpotlightSearchResult.html",[0,0.058,3327,3.086]],["body/interfaces/SpotlightSearchResult.html",[0,0.103,2,1.28,3,0.143,4,0.114,5,0.1,8,0.39,12,0.261,13,0.566,14,0.744,18,0.309,19,0.009,26,0.169,30,1.924,52,1.188,58,2.706,59,0.686,64,2.756,67,3.349,71,2.017,72,1.133,75,0.485,106,2.637,111,3.595,112,1.924,113,0.815,145,0.008,146,0.008,147,0.006,148,0.545,366,3.066,367,2.022,576,3.979,613,3.979,616,3.714,899,4.291,1031,3.762,1439,4.128,2971,3.611,2972,3.474,3290,6.854,3327,5.81,3328,4.885,3391,6.854,3599,5.263,3600,8.573,3601,8.573,3602,7.766,3603,7.766]],["title/injectables/SpotlightSearchService.html",[1747,2.533,2985,2.533]],["body/injectables/SpotlightSearchService.html",[0,0.105,3,0.115,4,0.092,5,0.081,8,0.405,12,0.336,13,0.494,14,0.65,18,0.265,19,0.009,20,1.61,26,0.148,43,4.145,50,0.602,64,2.084,75,0.486,77,0.063,78,2.156,80,1.398,84,1.044,94,0.916,97,1.179,113,0.552,126,0.622,129,0.868,131,3.37,144,1.872,145,0.005,146,0.007,147,0.008,178,0.99,192,0.808,198,0.59,213,1.08,214,1.393,215,0.938,225,2.704,227,2.559,241,1.579,270,0.422,271,0.535,278,0.578,284,0.765,366,2.687,367,2.056,503,0.848,549,2.073,604,1.88,648,1.697,656,3.135,733,1.208,815,2.794,851,3.476,886,1.655,889,1.74,1695,3.748,1747,3.905,1749,3.928,1875,5.268,2180,3.311,2536,3.081,2647,4.078,2778,5.935,2817,5.268,2970,5.268,2971,4.54,2972,4.368,2973,3.686,2974,3.928,2975,5.262,2976,5.301,2977,4.232,2978,4.232,2979,5.615,2980,4.232,2981,4.232,2982,6.88,2983,4.757,2984,3.928,2985,3.905,2986,6.049,2987,4.757,2988,5.463,2989,6.392,2990,6.392,2991,5.463,2992,5.463,2993,5.463,2994,5.463,2995,5.463,2996,6.049,2997,5.463,2998,4.232,2999,4.232,3000,4.232,3001,4.232,3002,4.232,3003,4.232,3004,5.463,3005,5.463,3006,6.049,3007,5.463,3008,5.463,3009,4.232,3010,4.232,3011,6.392,3012,4.232,3013,4.232,3014,4.232,3604,6.785,3605,6.785,3606,5.257,3607,5.257,3608,5.257,3609,5.257]],["title/classes/SubscriptionTracker.html",[77,0.052,1256,1.574]],["body/classes/SubscriptionTracker.html",[0,0.094,3,0.122,4,0.098,5,0.086,8,0.334,12,0.224,13,0.515,14,0.741,18,0.296,19,0.009,26,0.154,50,0.886,52,0.979,57,2.058,59,0.943,77,0.067,84,1.101,111,3.582,112,1.75,129,0.716,144,1.485,145,0.006,146,0.007,147,0.006,148,0.496,150,1.556,172,1.516,178,1.031,192,0.853,198,0.672,213,1.017,214,1.669,215,0.836,216,3.173,245,1.411,270,0.482,271,0.57,278,0.515,284,0.788,347,2.048,378,1.678,438,4.184,451,1.045,457,2.224,652,1.878,733,0.996,1037,5.687,1045,2.497,1254,3.857,1255,2.511,1256,2.526,1396,1.853,1451,4.297,2912,5.783,2913,6.888,2914,4.507,2915,4.94,2916,7.394,2917,6.829,2918,4.94,2919,7.666,2920,4.94,2921,7.394,2922,7.394,2924,4.94,2925,4.94,2926,4.507,2927,4.94,2928,8.138,2929,6.829,2931,6.233,2933,7.55,2934,4.94,2935,4.94,2936,4.94,2937,4.94,2938,5.687,2939,6.233,2940,6.233,2941,5.687,2942,6.233,2943,6.233,2944,4.94,2945,6.233,2946,4.94,2947,4.94,2948,4.94,2949,4.94,2950,6.233,2951,6.233,2952,4.94,2953,4.94,2954,4.94,2955,4.94,2956,4.94,2957,4.94,3610,7.063,3611,5.598,3612,5.598,3613,5.598,3614,5.598]],["title/classes/ThousandsUnit.html",[77,0.052,930,2.772]],["body/classes/ThousandsUnit.html",[3,0.103,4,0.082,5,0.072,8,0.473,12,0.188,13,0.459,14,0.728,18,0.294,19,0.009,20,1.206,26,0.138,34,1.167,62,2.718,71,1.974,75,0.468,77,0.075,83,3.11,84,1.128,107,1.081,113,0.856,126,0.709,129,0.602,145,0.005,146,0.006,147,0.005,172,1.632,178,0.92,192,0.89,198,0.808,213,1.176,214,1.561,215,0.857,222,2.197,227,2.867,241,0.988,245,1.386,278,0.554,284,0.642,361,2.623,378,1.41,436,2.946,447,3.532,480,1.638,503,1.018,526,3.519,549,2.082,591,2.828,646,4.18,709,2.706,755,3.029,797,3.402,838,3.76,879,2.581,929,3.116,930,5.139,931,2.828,934,5.329,939,4.988,940,4.988,941,5.727,942,5.329,943,5.329,944,5.329,945,4.421,946,5.329,947,4.179,948,5.037,954,1.89,969,3.514,970,3.514,974,5.329,975,5.795,977,2.918,978,5.46,979,3.252,980,4.502,981,4.508,982,4.18,983,4.421,984,4.421,985,2.918,986,4.421,987,5.558,990,2.586,991,4.421,994,4.421,995,5.408,999,3.25,1000,5.253,1001,5.037,1002,5.329,1003,4.421,1005,4.179,1006,2.586,1007,3.514,1008,3.514,1009,3.514,1010,3.514,1011,3.514,1012,3.514,1013,3.514,1014,3.297,1015,2.176,1016,1.823,1017,4.421,1018,4.421,1019,4.421,1020,3.297,1021,3.297,1022,4.179,1023,4.421,1024,4.421,1025,4.421,1026,4.421,1027,4.421,1028,3.297,3615,4.702,3616,4.702]],["title/classes/Unit.html",[77,0.052,361,1.227]],["body/classes/Unit.html",[3,0.106,4,0.085,5,0.075,8,0.478,12,0.194,13,0.47,14,0.737,18,0.301,19,0.009,20,1.233,26,0.141,34,0.99,62,2.755,71,2.001,75,0.48,77,0.077,83,3.025,84,1.135,107,0.917,113,0.896,126,0.712,145,0.005,146,0.006,147,0.005,172,1.646,178,0.941,192,0.888,198,0.807,213,1.17,214,1.582,215,0.89,222,2.246,227,2.728,241,1.022,245,1.319,278,0.561,284,0.657,361,2.616,378,1.458,436,2.499,447,3.505,451,0.908,480,1.694,503,0.785,549,2.093,591,2.181,646,4.221,709,3.71,755,2.57,790,3.409,797,3.684,833,1.785,838,3.578,879,2.189,929,3.222,930,4.061,931,2.892,934,5.401,936,2.251,939,5.072,940,5.072,942,5.401,943,5.401,944,4.521,945,4.521,946,5.401,947,4.273,948,5.105,954,1.933,974,5.072,975,5.656,977,2.251,978,5.375,979,3.195,980,4.467,981,4.428,982,4.107,983,3.409,984,3.409,985,2.251,986,3.409,987,5.776,990,2.644,991,4.521,994,4.521,995,5.46,999,3.378,1000,5.656,1001,5.105,1002,5.401,1003,4.521,1005,4.273,1006,2.644,1014,4.521,1015,2.984,1016,2.499,1017,4.521,1018,4.521,1019,4.521,1020,3.409,1021,3.409,1022,3.222,1023,3.409,1024,3.409,1025,3.409,1026,4.521,1027,4.521,1028,3.409,1876,3.634,3299,4.291,3617,4.862,3618,4.862,3619,6.447,3620,4.862,3621,4.862,3622,4.862,3623,4.862,3624,4.862,3625,4.862,3626,4.862,3627,4.862]],["title/injectables/UnitFormatter.html",[1747,2.533,3081,2.917]],["body/injectables/UnitFormatter.html",[3,0.122,4,0.098,5,0.086,8,0.462,12,0.224,14,0.742,18,0.273,19,0.009,20,1.353,26,0.122,75,0.488,77,0.067,84,1.142,113,0.742,122,2.283,126,0.7,127,2.529,144,1.71,145,0.006,146,0.007,147,0.006,178,1.032,192,0.789,198,0.808,213,1.125,214,1.59,215,0.837,216,2.301,222,2.464,270,0.506,271,0.571,278,0.515,361,2.592,385,2.597,451,1.048,480,1.955,510,4.951,511,3.723,537,1.857,876,3.099,932,7.177,947,3.718,954,2.12,975,5.76,978,5.122,979,2.819,980,3.759,981,3.907,995,5.76,1000,4.687,1001,5.39,1330,2.369,1671,4.193,1676,6.242,1683,6.242,1719,4.517,1747,4.07,1749,4.193,1864,4.204,1876,6.078,3081,5.39,3166,8.106,3628,7.177,3629,4.951,3630,8.691,3631,7.072,3632,5.61,3633,7.072,3634,5.61,3635,8.132,3636,7.072,3637,8.132,3638,8.132,3639,8.132,3640,7.072,3641,8.384,3642,5.61,3643,7.072,3644,4.517,3645,5.61,3646,5.61,3647,5.61,3648,5.61,3649,5.61]],["title/modules/VcdActionMenuModule.html",[2531,1.533,3650,3.289]],["body/modules/VcdActionMenuModule.html",[3,0.147,4,0.118,5,0.103,19,0.009,26,0.147,63,2.115,77,0.08,145,0.007,146,0.008,147,0.007,149,3.789,155,5.407,156,5.407,270,0.549,271,0.684,319,2.223,508,3.212,537,2.223,954,2.013,979,2.677,1253,1.873,1491,2.223,1790,3.865,2379,3.441,2380,3.322,2381,3.441,2382,3.441,2383,3.441,2384,3.441,2385,3.441,2531,2.34,2534,3.865,2535,3.879,2536,3.236,3204,3.71,3313,3.109,3314,3.109,3315,3.441,3316,4.294,3320,4.043,3323,4.195,3587,4.743,3590,4.743,3591,4.743,3650,6.74,3651,5.927,3652,5.927,3653,5.927,3654,6.715,3655,6.715]],["title/modules/VcdActivityReporterModule.html",[2531,1.533,3656,2.917]],["body/modules/VcdActivityReporterModule.html",[3,0.14,4,0.112,5,0.098,19,0.009,26,0.14,77,0.076,145,0.006,146,0.008,147,0.006,270,0.561,271,0.652,319,2.118,326,2.838,327,2.065,328,2.138,363,2.838,364,2.065,379,3.845,380,3.845,508,3.06,537,2.118,954,1.918,979,2.55,1253,1.784,1491,2.118,1790,3.682,2379,3.278,2380,3.165,2381,3.278,2382,3.278,2383,3.278,2384,3.278,2385,3.278,2531,2.229,2534,4.412,2535,3.801,2536,2.624,3204,3.534,3313,2.961,3314,2.961,3315,3.278,3316,4.207,3320,3.929,3323,4.076,3587,4.609,3590,4.609,3591,4.609,3656,6.123,3657,5.646,3658,5.646,3659,5.646,3660,5.646,3661,5.857,3662,5.857,3663,6.398,3664,5.73,3665,6.398,3666,5.646,3667,6.398,3668,5.646,3669,7.667]],["title/modules/VcdComponentsModule.html",[2531,1.533,3670,3.289]],["body/modules/VcdComponentsModule.html",[3,0.138,4,0.111,5,0.098,19,0.009,26,0.138,60,1.185,77,0.075,145,0.006,146,0.008,147,0.006,270,0.564,271,0.646,319,2.101,366,2.269,380,3.814,508,3.035,633,3.035,819,2.529,820,1.95,954,1.903,979,2.529,1491,2.101,1843,3.997,2379,3.251,2380,3.139,2381,3.251,2382,3.251,2383,3.251,2384,3.251,2385,3.251,2529,5.911,2531,2.211,2535,2.937,2536,2.602,2972,3.373,3313,2.937,3314,2.937,3315,3.251,3316,4.192,3320,3.909,3322,4.742,3323,4.056,3457,5.911,3581,6.254,3656,5.911,3661,5.911,3662,5.911,3666,5.6,3668,5.6,3670,6.859,3671,5.6,3672,5.6,3673,6.254,3674,5.911,3675,6.346,3676,5.6,3677,6.346,3678,6.346,3679,6.346,3680,6.346,3681,5.6,3682,5.6,3683,6.346]],["title/modules/VcdDataExporterModule.html",[2531,1.533,3673,3.086]],["body/modules/VcdDataExporterModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,60,1.25,77,0.08,145,0.007,146,0.008,147,0.007,270,0.556,271,0.682,319,2.215,333,3.58,508,3.201,537,2.215,725,2.215,954,2.006,979,2.668,1253,1.866,1491,2.215,1750,3.851,1843,4.215,2039,5.906,2379,3.429,2380,3.311,2381,3.429,2382,3.429,2383,3.429,2384,3.429,2385,3.429,2531,2.332,2534,3.851,2535,3.874,2536,2.745,3204,3.697,3313,3.098,3314,3.098,3315,3.429,3316,4.288,3320,4.035,3322,5.002,3323,4.186,3587,4.734,3589,5.885,3590,4.734,3591,4.734,3673,6.32,3684,5.906,3685,5.906,3686,5.906,3687,6.693]],["title/modules/VcdDatagridModule.html",[2529,2.917,2531,1.533]],["body/modules/VcdDatagridModule.html",[3,0.125,4,0.1,5,0.088,19,0.009,26,0.125,72,0.837,75,0.313,77,0.068,145,0.006,146,0.007,147,0.006,270,0.574,271,0.584,284,0.835,319,1.898,330,2.704,335,2.41,337,3.16,339,2.163,341,2.999,342,2.163,343,3.336,344,1.454,345,2.999,368,2.098,369,2.4,380,3.446,508,2.742,537,1.898,633,2.742,725,1.898,761,1.947,788,5.06,819,2.285,820,1.761,824,3.361,954,1.719,979,2.285,1253,1.599,1332,3.676,1491,1.898,1647,3.906,2379,2.938,2380,2.836,2381,2.938,2382,2.938,2383,2.938,2384,2.938,2385,2.938,2529,6.192,2531,1.998,2534,4.126,2535,3.621,2536,2.94,2875,5.704,2876,4.752,3204,3.167,3312,5.027,3313,2.654,3314,2.654,3315,2.938,3316,4.008,3320,3.673,3322,4.285,3323,3.811,3457,5.704,3587,4.309,3588,5.772,3589,5.358,3590,4.309,3591,4.309,3656,5.704,3664,5.358,3674,5.704,3676,5.06,3681,5.06,3682,5.06,3688,5.06,3689,5.06,3690,5.06,3691,5.06,3692,4.616,3693,7.17,3694,5.06,3695,5.733,3696,5.733,3697,5.733,3698,5.733,3699,8.196,3700,5.733,3701,5.733,3702,5.733]],["title/classes/VcdDatagridWidgetObject.html",[77,0.052,784,3.289]],["body/classes/VcdDatagridWidgetObject.html",[3,0.107,4,0.086,5,0.076,8,0.493,12,0.196,13,0.473,14,0.819,18,0.316,19,0.009,25,1.888,26,0.107,34,0.754,35,1.404,47,2.044,57,1.307,59,0.812,66,1.493,71,1.888,72,1.061,75,0.503,77,0.058,80,1.727,107,0.699,124,2.263,126,0.509,129,1.095,134,1.855,142,2.204,145,0.005,146,0.008,147,0.005,148,0.564,153,1.995,166,1.391,167,1.588,178,0.948,188,2.824,192,0.912,198,0.765,200,1.547,201,3.327,213,1.172,214,1.756,215,0.925,216,2.982,245,0.896,270,0.453,278,0.53,284,0.5,321,2.118,335,1.307,367,1.908,378,1.473,391,3.172,396,0.962,411,2.075,425,1.814,503,1.048,526,3.584,547,4.411,548,3.865,549,1.535,550,2.99,551,4.112,552,2.819,553,3.865,554,4.089,555,4.089,556,3.865,557,4.089,558,4.089,559,4.089,563,2.612,564,3.257,565,2.35,566,1.669,567,2.612,568,1.547,569,2.612,570,2.431,571,2.612,572,2.612,573,3.394,574,4.801,575,3.257,576,2.518,577,3.451,578,1.9,579,3.451,580,2.517,581,4.479,582,3.826,583,3.726,584,2.6,585,2.612,586,2.861,587,4.392,588,3.257,589,2.612,590,3.257,591,2.204,592,2.98,593,2.912,594,3.327,595,2.612,596,3.257,597,2.824,598,2.431,599,2.612,600,3.257,601,2.612,602,2.612,603,3.257,604,1.757,605,2.663,606,2.612,607,2.612,608,3.257,609,2.612,610,2.612,611,3.257,612,2.612,613,3.327,614,2.518,615,2.612,616,2.35,617,2.431,618,2.612,619,1.547,620,3.451,621,2.612,622,3.257,623,1.338,624,2.612,733,0.875,784,4.852,786,3.956,791,5.099,806,1.995,862,2.449,905,2.36,1250,3.865,1271,2.663,3703,6.826,3704,4.337,3705,7.271,3706,4.914,3707,4.914,3708,4.914,3709,4.914,3710,4.914,3711,4.914,3712,4.914,3713,6.493,3714,4.914,3715,4.914,3716,4.914]],["title/modules/VcdErrorBannerModule.html",[2531,1.533,3661,2.917]],["body/modules/VcdErrorBannerModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,77,0.08,145,0.007,146,0.008,147,0.007,270,0.549,271,0.683,319,2.221,346,3.807,347,1.549,508,3.209,537,2.221,954,2.012,979,2.674,1253,1.871,1491,2.221,1790,3.861,2343,5.402,2379,3.438,2380,3.319,2381,3.438,2382,3.438,2383,3.438,2384,3.438,2385,3.438,2531,2.338,2534,3.861,2535,3.878,2536,2.752,3204,3.707,3313,3.106,3314,3.106,3315,3.438,3316,4.292,3320,4.041,3323,4.192,3587,4.741,3590,4.741,3591,4.741,3661,5.976,3664,5.894,3717,5.921,3718,5.921,3719,5.921,3720,6.71,3721,6.71]],["title/modules/VcdFormModule.html",[2531,1.533,3674,2.917]],["body/modules/VcdFormModule.html",[3,0.134,4,0.107,5,0.094,19,0.009,26,0.134,77,0.073,126,0.48,145,0.006,146,0.007,147,0.006,270,0.564,271,0.624,284,0.624,319,2.028,350,3.528,351,2.577,353,3.528,355,3.433,360,3.342,361,2.083,371,3.433,508,2.93,537,2.028,725,2.028,954,1.837,979,2.442,1253,1.709,1491,2.028,1790,3.526,2248,4.297,2379,3.14,2380,3.031,2381,3.14,2382,3.14,2383,3.14,2384,3.14,2385,3.14,2531,2.135,2534,3.526,2535,3.981,2536,3.305,2695,4.579,2734,4.579,2826,4.579,3071,4.297,3081,5.798,3082,5.408,3083,5.408,3204,3.385,3268,6.592,3313,2.836,3314,2.836,3315,3.14,3316,4.129,3320,3.827,3323,3.971,3587,4.49,3588,6.014,3589,5.583,3590,4.49,3591,4.49,3674,6.175,3722,5.408,3723,5.408,3724,6.128,3725,5.408,3726,4.934,3727,6.128]],["title/modules/VcdLoadingIndicatorModule.html",[2531,1.533,3662,2.917]],["body/modules/VcdLoadingIndicatorModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,77,0.08,145,0.007,146,0.008,147,0.007,270,0.549,271,0.683,319,2.221,357,3.807,358,2.113,508,3.209,537,2.221,954,2.012,979,2.674,1253,1.871,1491,2.221,1790,3.861,2379,3.438,2380,3.319,2381,3.438,2382,3.438,2383,3.438,2384,3.438,2385,3.438,2531,2.338,2534,3.861,2535,3.878,2536,2.752,3015,4.705,3204,3.707,3313,3.106,3314,3.106,3315,3.438,3316,4.292,3320,4.041,3323,4.192,3587,4.741,3590,4.741,3591,4.741,3662,5.976,3664,5.894,3728,5.921,3729,5.921,3730,5.921,3731,6.71,3732,6.71]],["title/classes/WidgetFinder.html",[77,0.052,2517,2.645]],["body/classes/WidgetFinder.html",[0,0.096,3,0.079,4,0.063,5,0.056,8,0.314,12,0.145,13,0.383,14,0.65,18,0.311,19,0.009,20,1.006,25,0.942,26,0.148,34,0.557,35,1.036,41,2.179,50,0.927,52,0.502,57,2.259,59,0.789,66,1.393,71,1.871,72,0.903,75,0.476,76,1.263,77,0.074,80,2.152,84,1.158,86,1.855,90,1.901,97,0.913,107,0.516,111,1.678,112,0.898,113,0.552,124,1.986,126,0.284,134,2.312,142,1.626,144,0.762,145,0.004,146,0.007,147,0.004,148,0.577,153,2.085,154,2.096,164,1.405,166,1.298,172,1.212,178,0.903,192,0.789,194,1.061,198,0.538,200,1.142,201,2.694,213,0.947,214,1.479,215,0.734,216,1.487,240,1.531,241,0.762,245,1.128,246,1.296,270,0.385,271,0.369,278,0.599,284,0.857,314,1.931,321,2.073,347,0.837,367,1.79,378,1.087,391,2.783,392,2.865,396,0.71,411,2.612,425,1.695,447,1.445,451,1.345,457,1.656,473,1.927,502,1.036,503,0.585,547,2.601,548,2.795,549,2.008,550,2.721,551,2.795,552,2.793,553,1.927,556,1.927,563,1.927,565,3.245,566,2.101,567,1.927,568,1.142,569,3.607,570,3.06,571,1.927,572,1.927,573,3.335,574,4.612,576,1.858,577,2.795,578,1.539,579,2.795,580,2.038,581,4.302,582,3.357,583,3.17,584,2.212,585,1.927,586,2.632,587,3.994,589,1.927,591,3.477,592,2.864,593,2.358,594,4.353,595,1.927,597,2.287,598,1.793,599,1.927,602,1.927,604,2.576,605,1.2,606,1.927,607,1.927,609,1.927,610,1.927,612,1.927,613,2.694,614,1.858,615,1.927,616,1.734,617,1.793,618,1.927,619,1.142,620,2.795,621,1.927,623,0.987,624,1.927,642,2.003,649,1.331,708,2.086,716,1.17,733,0.645,753,1.487,860,2.038,871,0.987,877,2.137,880,1.793,887,1.88,889,2.246,897,1.577,913,2.156,917,1.487,920,1.577,926,1.577,1031,3.56,1061,2.038,1066,4.079,1077,2.701,1259,1.531,1295,1.678,1303,1.678,1307,1.626,1327,2.872,1396,1.741,1458,3.477,1499,1.678,1544,3.37,1695,2.003,1767,3.06,1820,2.284,1872,3.312,2010,1.927,2035,3.485,2095,1.793,2128,1.678,2516,3.312,2517,4.079,2526,2.403,2527,2.179,2544,3.719,2558,4.864,2559,4.882,2560,2.179,2561,4.338,2562,4.538,2563,4.338,2564,2.542,2565,5.351,2566,4.274,2567,2.403,2568,2.179,2569,2.542,2570,2.542,2571,2.542,2572,5.567,2573,2.542,2574,2.542,2575,3.687,2576,2.542,2577,2.542,2578,2.542,2579,4.338,2580,2.542,2581,4.338,2582,2.403,2583,2.542,2584,2.542,2585,4.338,2586,2.542,2587,2.403,2588,2.542,2589,2.403,2590,2.542,2591,2.542,2592,2.542,2593,2.542,2594,2.542,2595,3.687,2596,2.542,2597,2.403,2598,2.542,2599,2.542,2600,2.542,2601,2.542,2602,2.542,2603,2.403,2604,2.542,2605,2.542,2606,2.542,2607,2.403,2608,2.542,2609,2.542,2610,2.403,2611,2.542,2612,2.542,2613,3.16,2614,3.687,2615,3.687,2616,2.542,2617,2.542,2618,4.338,2619,3.687,2620,4.338,2621,2.542,2622,4.338,2623,4.338,2624,2.542,2625,2.542,2626,2.542,2627,2.542,2628,2.542,2629,2.542,2630,2.542,2631,2.403,2632,2.542,2633,2.542,2634,2.542,2635,2.542,2636,2.542,2637,2.542,2638,2.542,2639,3.687,2640,2.086,2641,2.403,2642,2.542,2643,2.542,2644,2.542,2645,2.542,2646,4.274,2647,2.179,2648,2.542,2649,2.542,2650,2.542,2651,2.542,2652,2.542,2653,4.758,2654,3.687,2655,3.687,2656,3.687,2657,3.687,2658,4.338,2659,3.687,2660,3.687,2661,3.687,2662,2.542,2663,2.542,2664,2.542,2665,2.284,2666,3.687,2667,4.338,2668,5.269,2669,2.542,2670,4.1,2671,2.542,2672,2.542,2673,2.542,2674,2.542,2675,2.542,2676,2.542,2677,2.542,2678,2.542,2679,2.542,2680,2.542,2681,2.542,2682,2.542,2683,4.338,2684,2.542,2685,2.542,2686,2.542,2687,2.542,2688,2.542,2689,2.542,2690,2.542,2691,2.542,2692,2.284,3733,5.258,3734,3.625,3735,3.625,3736,3.625,3737,3.625,3738,3.625,3739,3.625]],["title/classes/WidgetObject.html",[77,0.052,547,2.177]],["body/classes/WidgetObject.html",[0,0.09,3,0.068,4,0.054,5,0.048,8,0.44,12,0.124,13,0.342,14,0.758,18,0.31,19,0.009,20,0.594,25,0.806,26,0.137,34,0.72,35,1.339,41,2.818,50,0.89,52,0.43,57,2.168,59,0.815,66,1.514,71,1.971,72,1.036,75,0.496,76,1.082,77,0.067,80,2.139,84,1.133,86,1.405,90,1.933,97,0.814,107,0.667,111,2.17,112,1.161,113,0.492,124,2.221,126,0.443,129,0.944,134,2.298,142,2.533,144,0.653,145,0.003,146,0.007,147,0.003,148,0.608,153,2.265,154,2.251,164,1.203,166,1.41,172,0.608,178,0.918,192,0.84,194,0.908,198,0.717,200,1.476,201,3.224,213,1.084,214,1.595,215,0.856,216,2.316,240,1.311,241,0.653,245,1.03,246,1.676,270,0.351,271,0.316,278,0.586,284,0.83,314,1.721,321,2.127,347,0.717,367,1.904,378,0.931,391,3.113,392,2.384,396,0.918,411,2.384,425,1.663,447,1.237,451,1.326,457,1.778,473,2.492,502,1.339,503,0.501,547,2.794,548,2.492,549,1.743,550,2.932,551,3.775,552,2.618,553,3.344,554,2.952,555,2.952,556,3.344,557,2.952,558,2.952,559,2.952,563,2.492,565,3.526,566,2.504,567,3.002,568,1.778,569,3.775,570,3.112,571,3.002,572,2.492,573,3.394,574,4.774,576,2.402,577,3.344,578,1.841,579,3.344,580,2.439,581,4.499,582,3.755,583,3.639,584,2.54,585,2.492,586,2.828,587,4.333,589,2.492,591,3.029,592,2.927,593,2.822,594,4.367,595,2.492,597,2.737,598,2.319,599,2.492,601,1.65,602,2.492,604,2.54,605,1.552,606,2.492,607,2.492,609,2.492,610,2.492,612,2.492,613,3.224,614,2.402,615,2.492,616,2.242,617,2.319,618,2.492,619,1.476,620,3.344,621,2.492,623,1.276,624,2.492,642,2.59,649,1.14,708,1.787,716,1.002,733,0.553,753,1.273,871,0.845,877,1.981,880,2.319,887,1.11,889,2.083,897,1.35,913,2.316,917,1.273,920,1.35,926,1.35,1031,2.698,1061,1.203,1066,3.395,1077,2.353,1259,1.979,1295,2.17,1303,2.17,1307,1.392,1327,2.831,1396,1.552,1458,3.029,1499,1.437,1544,3.185,1695,2.59,1767,3.513,1820,1.955,1872,1.955,2010,2.492,2035,3.107,2095,2.319,2128,1.437,2516,2.952,2517,3.395,2526,2.057,2527,1.866,2544,4.269,2558,4.06,2559,5.135,2560,1.866,2561,3.96,2562,4.254,2563,3.96,2564,2.177,2565,4.987,2566,4.254,2567,2.057,2568,1.866,2569,3.287,2570,3.287,2571,3.287,2572,5.17,2573,3.287,2574,3.287,2575,4.412,2576,3.287,2577,3.287,2578,3.287,2579,4.412,2580,3.287,2581,4.736,2582,3.107,2583,3.287,2584,3.287,2585,4.98,2586,3.287,2587,3.107,2588,3.287,2589,3.107,2590,3.287,2591,3.287,2592,3.287,2593,3.287,2594,3.287,2595,4.412,2596,3.287,2597,3.107,2598,3.287,2599,3.287,2600,3.287,2601,3.287,2602,3.287,2603,3.107,2604,3.287,2605,3.287,2606,3.287,2607,3.107,2608,2.177,2609,2.177,2610,2.057,2611,2.177,2612,2.177,2613,2.818,2614,3.287,2615,3.287,2616,2.177,2617,2.177,2618,3.96,2619,3.287,2620,3.96,2621,2.177,2622,3.96,2623,3.96,2624,2.177,2625,2.177,2626,2.177,2627,2.177,2628,2.177,2629,2.177,2630,2.177,2631,2.057,2632,2.177,2633,2.177,2634,2.177,2635,2.177,2636,2.177,2637,2.177,2638,2.177,2639,3.287,2640,1.787,2641,2.057,2642,2.177,2643,2.177,2644,2.177,2645,2.177,2646,3.557,2647,1.866,2648,2.177,2649,2.177,2650,2.177,2651,2.177,2652,2.177,2653,3.287,2654,2.177,2655,2.177,2656,2.177,2657,2.177,2658,2.177,2659,2.177,2660,2.177,2661,2.177,2662,2.177,2663,2.177,2664,2.177,2665,1.955,2666,2.177,2667,2.177,2668,4.412,2669,2.177,2670,3.743,2671,2.177,2672,2.177,2673,2.177,2674,2.177,2675,2.177,2676,2.177,2677,2.177,2678,2.177,2679,2.177,2680,2.177,2681,2.177,2682,2.177,2683,3.96,2684,2.177,2685,2.177,2686,2.177,2687,2.177,2688,2.177,2689,2.177,2690,2.177,2691,2.177,2692,1.955,3481,2.74,3740,3.104,3741,3.104,3742,3.104,3743,3.104,3744,3.104,3745,3.104,3746,3.104,3747,3.104,3748,3.104,3749,3.104,3750,3.104]],["title/contributing.html",[2080,2.109,3751,3.234,3752,3.234]],["body/contributing.html",[4,0.102,19,0.008,20,1.112,47,1.831,72,0.848,86,2.168,109,2.254,115,4.681,124,2.116,145,0.006,146,0.007,147,0.006,167,1.617,221,2.529,361,1.621,386,2.541,393,3.853,436,3.052,437,4.345,457,2.479,578,2.527,582,3.578,593,2.608,649,2.656,703,2.317,713,1.407,731,3.662,733,1.537,797,2.781,856,1.831,877,1.831,886,1.831,887,2.079,891,3.09,897,2.529,913,2.384,917,3.229,979,2.317,980,3.09,1051,3.212,1128,2.691,1180,4.345,1184,5.405,1208,3.346,1231,3.853,1259,2.455,1365,3.09,1371,3.229,1558,3.09,1719,4.681,1767,3.578,1845,4.681,1864,3.459,1869,4.681,1888,5.52,1927,4.345,1935,4.681,2010,3.09,2127,4.793,2128,3.348,2312,4.345,2338,4.681,2640,4.162,2862,5.131,2873,4.681,3064,5.823,3340,5.131,3371,5.131,3644,6.338,3752,5.131,3753,5.131,3754,5.814,3755,5.814,3756,7.232,3757,5.814,3758,5.814,3759,5.814,3760,8.237,3761,7.232,3762,5.814,3763,5.814,3764,5.814,3765,5.814,3766,7.232,3767,7.232,3768,5.814,3769,5.814,3770,5.814,3771,5.814,3772,5.814,3773,5.814,3774,6.383,3775,7.269,3776,8.472,3777,5.814,3778,8.011,3779,7.232,3780,7.477,3781,5.814,3782,5.814,3783,7.73,3784,5.814,3785,5.814,3786,5.814,3787,5.814,3788,5.814,3789,5.814,3790,5.814,3791,5.814,3792,7.872,3793,5.814,3794,5.814,3795,7.872,3796,5.131,3797,5.814,3798,5.814,3799,5.814,3800,5.814,3801,5.814,3802,8.237,3803,5.814,3804,6.383,3805,5.814,3806,7.232,3807,7.232,3808,5.814,3809,5.814,3810,7.232,3811,7.232,3812,5.814,3813,8.043,3814,5.814,3815,5.814,3816,7.232,3817,6.383,3818,7.872,3819,7.872,3820,5.814,3821,6.383,3822,5.814,3823,5.131,3824,7.232,3825,5.131,3826,7.232,3827,6.383,3828,5.814,3829,5.814,3830,7.232,3831,5.814,3832,5.814,3833,5.814,3834,5.814,3835,5.814,3836,5.814,3837,6.383,3838,5.814,3839,7.232,3840,7.232,3841,5.814,3842,5.814,3843,5.814,3844,5.814,3845,5.814,3846,6.383,3847,5.814,3848,5.814]],["title/coverage.html",[2640,3.469]],["body/coverage.html",[0,0.123,1,2.519,5,0.055,6,3.662,7,3.662,18,0.127,19,0.009,52,1.232,58,2.144,69,2.519,72,1.048,73,1.189,75,0.336,77,0.106,145,0.004,146,0.005,147,0.004,148,0.617,149,1.473,155,2.892,156,2.892,157,3.17,241,1.886,322,2.09,326,1.104,328,1.884,330,1.077,333,1.393,335,0.955,337,1.319,339,2.825,341,1.252,342,2.321,343,1.393,344,1.561,345,1.252,346,1.473,349,1.517,350,1.393,351,2.301,353,1.393,355,1.355,357,1.473,360,1.319,361,2.252,362,1.517,363,1.104,365,1.473,367,0.83,368,1.051,369,1.002,371,1.355,374,1.319,377,2.159,379,4.502,380,4.061,381,4.599,394,2.519,422,2.519,431,1.663,432,3.17,499,4.205,500,4.205,544,2.892,545,4.205,546,4.205,547,1.777,639,2.263,640,4.205,641,4.205,654,2.685,726,3.4,728,2.159,731,2.263,733,0.639,750,5.033,751,4.599,752,1.473,759,1.026,761,1.22,762,2.263,765,1.777,769,2.685,770,1.189,776,2.685,780,2.892,781,4.205,784,2.685,791,2.519,803,4.292,804,4.292,818,1.841,820,2.481,822,1.319,823,1.252,827,1.189,836,1.393,840,1.985,842,1.432,846,1.432,852,1.432,928,2.892,929,4.758,930,2.263,1005,3.462,1006,3.831,1029,3.17,1030,3.17,1038,4.461,1039,4.869,1062,2.685,1235,1.841,1236,4.286,1256,1.285,1258,1.189,1260,1.841,1262,1.841,1263,1.841,1264,4.111,1269,1.841,1273,1.841,1276,1.841,1285,1.777,1288,1.841,1296,1.841,1300,1.841,1315,1.841,1318,1.841,1320,1.841,1328,1.841,1332,1.611,1334,1.841,1491,1.189,1647,1.663,1671,2.685,1672,3.17,1673,3.17,1685,3.903,1686,3.903,1697,3.17,1698,3.17,1747,3.542,1748,2.519,1750,4.72,1751,5.598,1752,5.598,1755,2.892,1787,3.17,1804,2.892,1842,2.685,1843,4.256,1844,4.599,1854,2.685,2008,2.892,2009,3.17,2049,3.729,2050,4.758,2108,2.519,2138,3.986,2139,1.777,2153,2.381,2167,2.381,2174,1.909,2176,1.718,2179,2.381,2209,2.381,2228,2.519,2278,2.685,2286,2.519,2297,2.685,2313,2.685,2330,2.685,2342,2.685,2343,2.892,2344,3.17,2387,3.903,2388,3.903,2464,2.892,2509,5.44,2510,5.44,2517,2.159,2532,2.892,2535,2.418,2549,2.892,2555,2.892,2558,2.159,2559,4.718,2560,4.646,2640,2.067,2646,2.263,2692,2.263,2694,4.758,2695,2.685,2696,2.892,2734,4.599,2735,5.252,2785,7.969,2826,2.685,2827,3.17,2844,2.685,2845,3.17,2874,3.662,2875,2.381,2876,2.381,2877,3.17,2878,3.17,2886,2.892,2912,2.685,2913,4.205,2914,4.205,2958,3.17,2959,3.17,2970,2.519,2971,4.375,2972,4.21,2973,4.738,2975,2.381,2976,2.263,2983,2.519,2985,2.067,3015,2.519,3016,2.685,3070,5.05,3071,4.738,3081,2.381,3092,2.892,3181,4.205,3182,4.205,3185,2.892,3192,2.381,3193,5.05,3194,5.05,3206,2.892,3207,2.892,3223,2.892,3224,3.17,3267,2.685,3321,2.892,3325,2.892,3326,4.609,3327,2.519,3438,3.17,3439,3.17,3462,2.685,3463,4.205,3464,4.205,3562,4.205,3570,2.892,3593,3.17,3599,2.892,3628,3.17,3629,3.17,3692,5.44,3703,3.17,3704,3.17,3726,2.892,3849,3.17,3850,3.592,3851,3.592,3852,3.592,3853,8.55,3854,3.592,3855,3.592,3856,6.154,3857,3.592,3858,3.592,3859,3.592,3860,5.223,3861,3.592,3862,3.592,3863,8.202,3864,3.592,3865,9.063,3866,3.17,3867,8.894,3868,6.154,3869,3.592,3870,7.178,3871,6.154,3872,3.17,3873,3.17,3874,3.17,3875,6.154,3876,3.592,3877,3.592,3878,3.592,3879,3.592,3880,3.592,3881,5.223,3882,8.074,3883,8.074,3884,6.154,3885,3.592,3886,3.592,3887,3.592,3888,3.592,3889,3.592,3890,5.223,3891,3.592,3892,3.592,3893,3.592,3894,3.592,3895,3.592,3896,3.592,3897,5.223,3898,3.17,3899,5.223,3900,3.592,3901,3.592,3902,3.592,3903,3.17,3904,3.17,3905,3.592,3906,3.592,3907,3.592,3908,3.592,3909,3.592,3910,3.592,3911,3.592,3912,3.592,3913,3.592,3914,3.17,3915,3.17,3916,3.17,3917,3.17,3918,3.592,3919,3.592,3920,3.592,3921,3.592,3922,3.592,3923,3.592,3924,3.592,3925,3.592,3926,3.592,3927,6.61,3928,3.592,3929,3.592,3930,3.17,3931,3.17,3932,3.17,3933,3.17,3934,3.17,3935,3.592,3936,3.592,3937,3.592,3938,3.592,3939,3.592,3940,3.592,3941,3.17,3942,5.223,3943,5.223,3944,3.592,3945,3.592,3946,3.592,3947,3.592,3948,3.592,3949,3.592]],["title/dependencies.html",[3314,2.453,3950,3.665]],["body/dependencies.html",[13,0.469,19,0.009,48,5.773,145,0.006,146,0.008,147,0.006,271,0.784,320,1.453,725,2.548,1253,2.147,1255,2.888,1700,6.793,2567,5.654,2568,5.127,2640,3.706,3204,4.253,3314,3.563,3353,6.197,3354,6.197,3694,6.793,3951,7.697,3952,9.019,3953,7.697,3954,8.531,3955,6.44,3956,7.697,3957,7.697,3958,6.44,3959,6.44,3960,5.683,3961,6.44,3962,6.44,3963,6.44,3964,6.44,3965,6.44,3966,6.44,3967,6.44,3968,6.44,3969,6.44,3970,5.683,3971,5.683,3972,6.44,3973,6.44,3974,6.44,3975,6.44,3976,6.44,3977,6.44,3978,5.683,3979,6.44,3980,6.44,3981,6.44,3982,6.44,3983,6.44,3984,6.44,3985,6.44,3986,6.44,3987,6.44,3988,6.44,3989,6.44,3990,6.44,3991,6.44,3992,6.44,3993,6.44,3994,6.44,3995,6.44,3996,6.44,3997,6.44,3998,6.44,3999,5.683,4000,9.019]],["title/miscellaneous/enumerations.html",[4001,2.203,4002,4.677]],["body/miscellaneous/enumerations.html",[6,4.074,7,5.774,12,0.232,15,2.968,18,0.205,19,0.009,20,1.111,24,5.403,25,1.877,27,2.167,28,5.403,30,1.791,34,1.208,37,5.82,42,2.778,44,5.82,49,4.678,63,2.276,72,0.848,73,1.923,75,0.394,86,2.167,92,2.606,100,2.455,117,2.078,123,2.727,127,2.585,131,2.606,137,2.727,138,2.024,139,3.704,140,2.727,141,3.843,142,2.606,143,3.843,144,1.221,145,0.006,146,0.007,147,0.006,198,0.817,234,3.576,241,1.221,252,3.582,327,1.876,328,1.62,342,2.727,364,1.876,593,2.606,803,3.088,804,4.377,806,2.221,810,2.965,812,3.343,820,2.418,828,2.965,829,3.21,831,4.16,832,3.704,833,2.654,834,2.742,843,2.965,844,2.667,907,4.032,936,3.346,954,1.742,1038,3.21,1039,4.957,1043,3.242,1047,4.791,1048,4.342,1049,3.704,1050,4.342,1051,3.994,1052,4.342,1053,4.345,1054,4.342,1055,5.881,1056,4.678,1057,5.881,1058,4.678,1059,4.678,1236,2.874,1278,3.843,1281,3.145,1283,3.764,1292,3.088,1293,3.843,1750,3.343,1843,3.659,1844,5.403,1865,5.82,1866,5.82,1867,5.82,1868,5.82,1907,3.994,2049,3.052,2138,3.812,2249,5.82,2298,4.342,2318,5.069,2325,4.074,2326,4.342,2694,3.85,2695,4.342,2696,5.82,2707,6.38,2729,5.127,3015,4.074,3016,5.403,3037,6.38,4001,3.492,4002,5.127,4003,6.945,4004,6.38,4005,5.127,4006,6.33,4007,5.127,4008,5.403,4009,5.81,4010,5.81]],["title/miscellaneous/functions.html",[2541,3.96,4001,2.203]],["body/miscellaneous/functions.html",[8,0.486,9,1.206,12,0.173,14,0.866,17,3.033,18,0.316,19,0.009,20,1.303,35,1.702,36,0.909,40,1.396,47,2.146,52,1.103,58,1.507,59,0.771,60,0.808,72,1.161,75,0.474,82,1.266,86,1.786,89,1.588,94,1.121,97,0.751,107,1.095,110,2.758,113,0.771,126,0.534,129,0.94,138,2.683,140,1.632,142,1.94,144,1.252,145,0.004,146,0.006,147,0.004,148,0.515,150,1.313,178,0.631,194,1.994,195,1.876,196,2.081,198,0.79,213,1.197,214,1.857,215,0.978,216,3.499,225,1.724,234,2.14,240,2.515,245,1.451,248,1.396,284,0.607,320,0.976,321,1.023,330,1.786,331,1.826,339,2.247,341,1.507,342,2.57,344,2.068,345,1.507,349,2.515,361,2.048,396,1.438,408,1.584,425,1.344,451,1.113,454,2.916,481,3.483,565,2.069,597,1.882,601,3.622,623,1.178,643,2.947,650,3.291,681,1.432,703,2.375,731,2.724,750,4.177,751,4.452,752,2.443,753,1.774,754,2,755,2.375,756,1.743,759,1.702,761,2.314,765,2.14,769,4.452,770,2.431,776,4.452,777,3.483,781,4.796,789,3.483,790,3.033,791,3.033,792,1.469,797,2.069,803,2.299,804,3.167,820,2.256,823,3.002,825,2.291,827,1.972,834,2.374,855,2.216,856,1.362,860,2.846,866,1.588,871,1.178,877,1.362,883,2.39,911,3.259,912,2.758,913,2.443,914,2.489,915,1.774,916,3.052,917,2.443,918,2.515,919,1.774,920,2.591,921,2.947,922,3.052,923,2.947,924,3.052,925,3.052,926,2.591,927,2.489,954,1.297,1038,2.39,1039,4.625,1061,2.309,1077,2.076,1085,5.487,1172,3.483,1173,5.911,1176,3.483,1179,3.483,1180,4.452,1208,2.489,1247,1.547,1258,1.432,1281,1.882,1322,2.696,1329,1.677,1458,1.94,1750,2.489,1751,3.233,1752,5.755,1755,4.796,1757,5.487,1760,5.487,1764,6.796,1765,3.817,1766,3.817,1767,2.947,1768,6.48,1778,3.817,1782,3.817,1805,3.233,1806,3.817,1809,3.817,1810,3.817,1814,3.817,1815,6.48,1816,5.257,1817,3.817,1818,3.817,1819,3.817,1820,2.724,1821,3.483,1822,4.796,1823,3.817,1826,2.867,1837,3.817,1838,3.817,1839,3.817,1840,3.817,1864,2.069,2010,3.903,2049,3.251,2050,3.948,2128,2.758,2132,3.233,2133,3.233,2134,2.867,2135,2.867,2136,3.233,2137,3.233,2138,3.846,2139,2.947,2209,3.948,2220,4.452,2278,4.452,2301,4.796,2312,3.233,2313,4.452,2318,4.177,2328,3.233,2342,4.452,2509,3.483,2510,5.911,2516,2.724,2520,5.257,2531,2.076,2532,5.486,2540,3.817,2541,4.452,2543,3.817,2544,2.6,2545,3.817,2546,3.817,2547,3.817,2548,3.817,2549,5.486,2550,3.817,2555,4.796,2558,2.6,2559,2.724,2560,3.581,2670,2.867,2694,2.867,2734,3.233,2735,4.778,2792,3.817,2809,3.817,2810,3.817,2861,3.483,3193,3.233,3194,4.452,3214,3.817,3221,3.817,3222,3.817,3866,5.257,3872,5.257,3873,5.257,3874,5.257,3898,5.257,3903,5.257,3904,5.257,3914,5.257,3915,5.257,3916,5.257,3941,5.257,4001,2.6,4005,5.257,4006,5.948,4008,5.092,4011,5.957,4012,5.486,4013,6.48,4014,4.326,4015,3.817,4016,4.326,4017,4.326,4018,4.326,4019,4.326,4020,4.326,4021,4.326,4022,4.326,4023,4.326,4024,4.326]],["title/index.html",[12,0.146,2080,2.109,3751,3.234]],["body/index.html",[4,0.121,5,0.106,19,0.007,47,2.176,83,1.986,109,3.111,116,1.508,126,0.542,145,0.005,146,0.007,147,0.005,148,0.582,150,1.899,163,5.34,167,1.564,215,0.747,237,7.081,361,1.927,388,5.691,393,5.047,419,3.793,436,3.416,457,2.398,505,4.353,537,1.791,578,2.348,593,2.426,678,3.793,683,2.353,716,2.458,733,0.963,792,1.837,854,3.113,856,1.703,886,2.176,892,2.156,896,2.097,921,3.418,979,2.156,999,2.218,1061,2.097,1063,4.042,1083,4.042,1128,3.525,1208,4.618,1231,3.585,1302,2.587,1304,2.875,1322,1.986,1355,3.541,1371,2.218,1446,2.771,1560,2.875,1593,2.504,1767,3.767,1862,4.355,1888,4.845,2127,5.62,2128,3.714,2134,4.58,2135,5.318,2279,6.676,2325,5.626,2380,2.676,2597,3.585,2603,3.585,2607,3.585,2776,6.72,2855,7.778,2938,4.355,3313,2.504,3314,2.504,3341,6.099,3347,4.773,3353,4.355,3354,4.355,3373,4.773,3400,6.72,3413,4.773,3428,4.773,3435,4.773,3644,5.564,3753,6.099,3774,6.099,3775,6.099,3778,4.773,3780,7.317,3783,6.099,3796,7.081,3804,4.773,3813,7.317,3817,4.773,3821,6.72,3823,6.099,3825,4.773,3827,4.773,3837,4.773,3846,4.773,3849,4.773,3960,4.773,3970,7.483,3971,7.317,3978,4.773,3999,4.773,4025,8.48,4026,8.48,4027,7.615,4028,5.409,4029,5.409,4030,5.409,4031,5.409,4032,5.409,4033,6.91,4034,5.409,4035,6.91,4036,6.91,4037,8.024,4038,8.291,4039,5.409,4040,5.409,4041,5.409,4042,5.409,4043,8.727,4044,5.409,4045,5.409,4046,5.409,4047,5.409,4048,6.91,4049,8.024,4050,5.409,4051,5.409,4052,5.409,4053,5.409,4054,5.409,4055,5.409,4056,5.409,4057,5.409,4058,7.615,4059,8.48,4060,5.409,4061,5.409,4062,5.409,4063,5.409,4064,5.409,4065,5.409,4066,5.409,4067,5.409,4068,5.409,4069,6.91,4070,5.409,4071,5.409,4072,5.409,4073,5.409,4074,5.409,4075,5.409,4076,5.409,4077,8.48,4078,5.409,4079,5.409,4080,7.615,4081,6.91,4082,5.409,4083,5.409,4084,5.409,4085,5.409,4086,5.409,4087,5.409,4088,5.409,4089,5.409,4090,5.409,4091,6.91,4092,6.91,4093,8.024,4094,6.91,4095,6.91,4096,6.91,4097,6.91,4098,6.91,4099,6.91,4100,6.91,4101,8.024,4102,5.409,4103,5.409,4104,5.409,4105,5.409,4106,6.91,4107,8.024,4108,6.91,4109,5.409,4110,5.409,4111,5.409,4112,5.409,4113,5.409,4114,5.409,4115,5.409,4116,5.409]],["title/modules.html",[3313,2.791]],["body/modules.html",[19,0.008,145,0.007,146,0.008,147,0.007,878,3.905,2529,4.609,2568,5.56,3312,4.876,3313,3.219,3457,4.609,3581,4.876,3650,5.197,3656,4.609,3661,4.609,3662,4.609,3670,5.197,3673,4.876,3674,4.609,4117,9.25,4118,9.25]],["title/overview.html",[4119,5.32]],["body/overview.html",[2,1.04,19,0.009,48,4.788,145,0.005,146,0.007,147,0.005,149,3.52,150,1.17,319,1.758,326,2.637,330,2.573,333,3.327,335,2.282,337,2.772,341,2.63,343,2.926,345,2.63,346,3.52,350,3.405,353,3.405,355,3.313,357,3.52,360,3.225,363,2.637,365,3.52,368,1.554,369,2.105,371,3.313,374,3.152,378,1.592,508,2.539,954,1.592,979,2.117,1749,3.968,2529,6.175,2531,1.85,2535,2.458,2536,2.178,2875,5.003,2876,3.519,2985,4.344,3081,5.003,3192,5.003,3312,6.159,3313,2.458,3314,2.458,3315,2.721,3316,2.721,3317,4.686,3318,4.686,3319,4.686,3320,3.499,3457,5.87,3458,4.686,3459,4.686,3460,4.686,3581,6.252,3582,4.686,3583,4.686,3584,4.686,3585,4.686,3650,6.161,3651,4.686,3652,4.686,3653,4.686,3656,6.054,3657,4.686,3658,4.686,3659,4.686,3660,4.686,3661,5.87,3662,5.87,3670,6.618,3671,4.686,3672,4.686,3673,6.159,3674,6.135,3684,4.686,3685,4.686,3686,4.686,3688,4.686,3689,4.686,3690,4.686,3691,4.686,3717,4.686,3718,4.686,3719,4.686,3722,4.686,3723,4.686,3725,4.686,3728,4.686,3729,4.686,3730,4.686,4119,4.686,4120,5.31,4121,5.31,4122,5.31,4123,5.31]],["title/miscellaneous/typealiases.html",[4001,2.203,4124,5.299]],["body/miscellaneous/typealiases.html",[6,4.701,7,5.528,12,0.268,18,0.315,19,0.009,51,5.01,52,1.16,53,6.347,58,2.918,75,0.43,94,0.905,111,3.103,113,0.704,126,0.656,145,0.008,146,0.008,147,0.007,198,0.583,342,2.973,366,2.397,367,1.934,513,4.005,537,2.219,770,2.219,820,2.422,826,2.747,912,3.103,1038,3.704,1039,4.965,1169,6.347,1254,2.916,1321,3.316,1685,5.01,1686,5.891,2049,2.83,2138,3.649,2228,4.701,2230,6.347,2387,5.01,2388,5.891,2441,6.957,2589,4.443,2971,3.704,2972,3.563,3015,4.701,3016,5.891,3030,6.957,3327,4.701,3328,5.891,3599,6.347,4001,4.03,4003,5.916,4006,5.01,4007,5.916,4008,5.01,4012,5.398,4125,6.704,4126,6.704,4127,6.704,4128,5.916,4129,6.704,4130,6.704,4131,6.704]],["title/miscellaneous/variables.html",[4001,2.203,4132,4.677]],["body/miscellaneous/variables.html",[5,0.06,12,0.157,17,2.756,18,0.318,19,0.009,30,1.604,38,1.944,50,0.45,59,0.851,71,1.447,72,0.574,75,0.45,78,1.612,82,1.15,84,0.732,86,1.671,99,1.671,100,1.892,101,3.165,106,1.335,107,0.559,111,2.579,113,0.679,126,0.647,129,1.17,131,1.763,140,1.483,144,1.623,145,0.004,146,0.006,147,0.004,153,1.208,163,3.907,164,1.524,167,1.144,194,2.415,198,0.792,200,2.038,215,0.602,221,1.71,241,1.481,245,0.717,252,3.717,278,0.601,284,0.757,321,1.757,322,2.198,330,1.179,337,1.443,338,1.918,339,2.442,341,1.37,343,1.524,345,1.37,350,1.524,351,2.284,353,1.524,355,1.483,360,1.443,361,1.805,368,1.63,369,1.096,371,1.483,374,1.443,403,2.353,408,1.045,425,1.257,436,1.524,439,1.179,457,1.238,502,1.592,524,1.517,543,2.014,584,1.993,586,2.391,601,2.089,605,1.301,640,3.165,641,4.486,648,1.269,650,2.172,656,2.659,713,1.348,726,3.891,733,1.152,734,3.469,754,1.447,755,1.567,762,2.476,820,2.372,825,1.721,834,1.941,844,2.038,859,2.285,861,1.301,862,1.483,876,2.172,877,1.755,886,1.755,887,1.406,902,2.262,905,1.592,906,1.993,908,2.089,954,2.315,982,2.014,999,2.285,1006,1.612,1038,2.172,1039,4.077,1041,2.172,1042,3.165,1043,2.499,1047,3.693,1048,4.837,1049,3.608,1050,5.263,1051,3.576,1052,5.263,1053,3.349,1054,5.263,1060,3.165,1061,2.16,1062,4.164,1063,2.938,1064,3.165,1065,3.165,1066,2.363,1067,4.29,1068,3.165,1069,3.165,1070,1.763,1071,4.486,1072,3.165,1073,3.202,1074,5.212,1075,3.165,1076,3.907,1077,1.941,1078,3.165,1079,3.165,1080,3.165,1081,2.938,1082,3.165,1083,2.938,1084,3.165,1085,2.938,1086,3.165,1087,3.165,1088,3.165,1089,1.88,1090,3.165,1091,5.212,1092,4.486,1093,3.165,1094,4.486,1095,3.165,1096,4.486,1097,2.605,1098,3.165,1099,5.212,1100,3.165,1101,3.165,1102,3.165,1103,4.486,1104,4.486,1105,3.165,1106,5.212,1107,2.756,1108,3.165,1109,3.165,1110,3.165,1111,3.165,1112,3.165,1113,4.486,1114,3.165,1115,3.165,1116,3.165,1117,5.67,1118,3.165,1119,3.165,1120,4.486,1121,3.165,1122,4.486,1123,3.165,1124,3.165,1125,3.165,1126,3.165,1127,3.165,1128,2.579,1129,3.165,1130,3.165,1131,4.486,1132,3.165,1133,4.486,1134,5.67,1135,4.486,1136,3.693,1137,4.486,1138,1.88,1139,4.486,1140,3.165,1141,2.938,1142,3.165,1143,2.756,1144,3.165,1145,3.165,1146,3.165,1147,3.165,1148,3.165,1149,2.605,1150,3.165,1151,2.756,1152,2.938,1153,3.165,1154,3.165,1155,3.165,1156,4.486,1157,5.212,1158,4.486,1159,3.165,1160,3.165,1161,3.165,1162,3.165,1163,4.486,1164,5.67,1165,2.756,1166,2.756,1167,2.756,1168,2.756,1230,3.165,1231,2.605,1232,2.221,1233,3.165,1234,3.165,1236,1.944,1254,1.71,1259,2.353,1260,3.317,1261,2.089,1262,2.855,1263,2.014,1264,1.944,1265,1.944,1266,1.82,1267,2.962,1268,2.855,1269,2.855,1270,2.089,1271,3.049,1272,2.089,1273,2.855,1274,2.089,1275,2.089,1276,2.855,1277,2.089,1332,2.499,1647,2.579,1705,2.363,1750,2.262,1751,2.938,1752,4.164,1791,3.165,1804,4.486,1826,2.605,2049,2.353,2050,3.693,2095,1.944,2105,2.938,2106,2.938,2107,2.938,2108,3.907,2109,2.938,2128,1.82,2138,2.579,2140,2.605,2142,2.605,2176,1.88,2184,2.605,2283,4.164,2284,2.938,2286,2.756,2387,2.938,2388,4.164,2464,4.486,2465,4.917,2466,4.917,2467,4.917,2468,4.917,2469,3.469,2470,3.469,2535,3.26,2582,2.605,2735,3.907,2875,2.605,2876,3.693,2971,2.172,2972,2.089,2973,3.907,2983,3.907,2984,2.938,3070,2.938,3071,2.756,3091,3.469,3092,5.212,3181,3.165,3182,4.486,3183,4.917,3184,4.917,3185,4.486,3186,4.917,3187,3.469,3188,3.469,3189,3.469,3190,3.469,3191,3.469,3192,2.605,3193,2.938,3194,4.837,3206,4.486,3207,4.486,3321,3.165,3692,3.165,3726,3.165,3917,4.917,3927,3.469,3930,4.917,3931,4.917,3932,4.917,3933,4.917,3934,4.917,4001,2.363,4004,6.561,4006,4.164,4008,4.164,4012,3.165,4013,3.469,4015,4.917,4128,3.469,4132,3.469,4133,7.434,4134,3.931,4135,3.931,4136,7.042,4137,3.931,4138,3.931,4139,3.931,4140,3.931,4141,3.931,4142,3.931,4143,3.931,4144,3.931,4145,3.931,4146,3.931]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":241,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.2",{"_index":3964,"title":{},"body":{"dependencies.html":{}}}],["0.0.25",{"_index":3969,"title":{},"body":{"dependencies.html":{}}}],["0.0.6",{"_index":3961,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":3977,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":3998,"title":{},"body":{"dependencies.html":{}}}],["0.38.1",{"_index":3994,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3059,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"classes/Percent.html":{}}}],["0.6.2",{"_index":3973,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3867,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3896,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3911,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":144,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["1.0.2",{"_index":3983,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":3991,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":3981,"title":{},"body":{"dependencies.html":{}}}],["1.1.20150312",{"_index":3975,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":3996,"title":{},"body":{"dependencies.html":{}}}],["1.17.1",{"_index":3987,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":3988,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":3959,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":3985,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3865,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":3912,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3066,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["10/10",{"_index":3895,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":3886,"title":{},"body":{"coverage.html":{}}}],["10/22",{"_index":3894,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1006,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":982,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":1056,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["11",{"_index":4120,"title":{},"body":{"overview.html":{}}}],["11/11",{"_index":3862,"title":{},"body":{"coverage.html":{}}}],["11/13",{"_index":3859,"title":{},"body":{"coverage.html":{}}}],["11/23",{"_index":3892,"title":{},"body":{"coverage.html":{}}}],["11/30",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["11/32",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["115",{"_index":4146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/18",{"_index":3857,"title":{},"body":{"coverage.html":{}}}],["12/24",{"_index":3887,"title":{},"body":{"coverage.html":{}}}],["13/18",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["14/17",{"_index":3878,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1261,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["15/19",{"_index":3852,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":2824,"title":{},"body":{"components/FormInputComponent.html":{}}}],["16",{"_index":2760,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["16/21",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["17/24",{"_index":3923,"title":{},"body":{"coverage.html":{}}}],["18x18",{"_index":3041,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["19",{"_index":4121,"title":{},"body":{"overview.html":{}}}],["2",{"_index":954,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/Hertz.html":{},"interfaces/MockRecord.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":3966,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":3979,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":3869,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1263,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["200px",{"_index":1058,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["2019",{"_index":3322,"title":{},"body":{"modules/PipesModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{}}}],["2020",{"_index":1790,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/ErrorBannerComponent.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["23/39",{"_index":3876,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":4122,"title":{},"body":{"overview.html":{}}}],["24/31",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":2386,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["25",{"_index":1005,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["25/42",{"_index":3908,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":3058,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["255",{"_index":3061,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["27",{"_index":903,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["2d",{"_index":1761,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["3",{"_index":48,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/Bytes.html":{},"dependencies.html":{},"overview.html":{}}}],["3.1.3",{"_index":3954,"title":{},"body":{"dependencies.html":{}}}],["3/15",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3853,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3871,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3921,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2284,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":2109,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3868,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["36x36",{"_index":3045,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["37",{"_index":1274,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["37/41",{"_index":3929,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":956,"title":{},"body":{"classes/Bytes.html":{}}}],["4/4",{"_index":3863,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3936,"title":{},"body":{"coverage.html":{}}}],["4/8",{"_index":3885,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1270,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["400px",{"_index":1059,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["44",{"_index":3944,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":3893,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["48",{"_index":4123,"title":{},"body":{"overview.html":{}}}],["5/7",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1264,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":1196,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["52",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":3946,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":3875,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":3907,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":2816,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["6.5.5",{"_index":3992,"title":{},"body":{"dependencies.html":{}}}],["6/11",{"_index":3947,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2286,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["60/82",{"_index":3880,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":3067,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["64",{"_index":3925,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":3856,"title":{},"body":{"coverage.html":{}}}],["6px",{"_index":2819,"title":{},"body":{"components/FormInputComponent.html":{}}}],["7/12",{"_index":3899,"title":{},"body":{"coverage.html":{}}}],["7/22",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":3864,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3855,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3861,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":3922,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":3937,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":3905,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3870,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3860,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":3851,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1787,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{}}}],["8.3.20",{"_index":4113,"title":{},"body":{"index.html":{}}}],["8/12",{"_index":3924,"title":{},"body":{"coverage.html":{}}}],["8/18",{"_index":3945,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3935,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":3877,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":3858,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":3854,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":4000,"title":{},"body":{"dependencies.html":{}}}],["9.1.9",{"_index":3952,"title":{},"body":{"dependencies.html":{}}}],["9/12",{"_index":3897,"title":{},"body":{"coverage.html":{}}}],["9/14",{"_index":3926,"title":{},"body":{"coverage.html":{}}}],["9/17",{"_index":3910,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3928,"title":{},"body":{"coverage.html":{}}}],["999",{"_index":4108,"title":{},"body":{"index.html":{}}}],["999].[0",{"_index":4107,"title":{},"body":{"index.html":{}}}],["_actiondisplayconfig",{"_index":173,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["_actions",{"_index":174,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["_buttonconfig",{"_index":1447,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_columns",{"_index":1349,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_config",{"_index":2057,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["_errormessage",{"_index":2348,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["_height",{"_index":1452,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_isrequestpending",{"_index":1941,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_multiplier",{"_index":939,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_open",{"_index":1931,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["_pagination",{"_index":1450,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_progress",{"_index":1943,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_searchcriteria",{"_index":3367,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["_selectiontype",{"_index":1441,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_size",{"_index":3022,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["_unit",{"_index":2214,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["_unitname",{"_index":940,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_unitoptions",{"_index":2215,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["a.b.c",{"_index":3199,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["abort",{"_index":3412,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["above",{"_index":47,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["absolute",{"_index":1097,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["abstract",{"_index":447,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["abstractcontrol",{"_index":1857,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["abstraction",{"_index":2590,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["acc",{"_index":3424,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["accepts",{"_index":2058,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{}}}],["access",{"_index":569,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["accessors",{"_index":188,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["achieved",{"_index":3791,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"miscellaneous/enumerations.html":{}}}],["action.actiontype",{"_index":276,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.availability",{"_index":291,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.availability(selection",{"_index":292,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.children",{"_index":298,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.children.length",{"_index":299,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.disabled",{"_index":315,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.disabled(this.selectedentities",{"_index":316,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.handler(this.selectedentities",{"_index":312,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.handlerdata",{"_index":313,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionbar",{"_index":1627,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiondisplayconfig",{"_index":1,"title":{"interfaces/ActionDisplayConfig.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["actiondisplayconfig(config",{"_index":279,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionhandlertype",{"_index":53,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem",{"_index":69,"title":{"interfaces/ActionItem.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["actionitem.handler",{"_index":51,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem.handlerdata",{"_index":239,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionmenucomponent",{"_index":149,"title":{"components/ActionMenuComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{},"overview.html":{}}}],["actionreporter",{"_index":1465,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions",{"_index":10,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["actions(actions",{"_index":273,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.filter",{"_index":290,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.foreach(action",{"_index":297,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.map(action",{"_index":275,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionstyling",{"_index":24,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["actionstyling.dropdown",{"_index":202,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionstyling.inline",{"_index":209,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype",{"_index":28,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype.contextual",{"_index":277,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.contextual_featured",{"_index":304,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.static",{"_index":262,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.static_featured",{"_index":265,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["activate",{"_index":1202,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["activated",{"_index":2083,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["active",{"_index":1331,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activites",{"_index":1463,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activity",{"_index":328,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["activityindicatortype",{"_index":1293,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["activitypromiseresolver",{"_index":377,"title":{"classes/ActivityPromiseResolver.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activitypromiseresolver.monitoractivities",{"_index":470,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activitypromiseresolver.monitoractivity",{"_index":465,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter",{"_index":431,"title":{"classes/ActivityReporter.html":{}},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activityreporter:21",{"_index":532,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:27",{"_index":530,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:33",{"_index":531,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:38",{"_index":528,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:53",{"_index":529,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:73",{"_index":527,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromise",{"_index":417,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromises",{"_index":406,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresponse",{"_index":422,"title":{"interfaces/ActivityResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["acts",{"_index":1699,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["actual_component",{"_index":376,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["add",{"_index":1371,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{}}}],["addcolumn",{"_index":1425,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addcolumn(col",{"_index":1476,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["added",{"_index":79,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["adding",{"_index":1643,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addition",{"_index":2250,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["additional",{"_index":105,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["adds",{"_index":2519,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["addwildcard",{"_index":2315,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["addwildcard(input",{"_index":2317,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["after(date",{"_index":2417,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["afterviewinit",{"_index":1243,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["against",{"_index":1817,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["age",{"_index":2283,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["alert",{"_index":476,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["alert').nativeelement.textcontent",{"_index":638,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["alertclosable",{"_index":2351,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["alerttype",{"_index":2352,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["aliases",{"_index":4125,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":3069,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["all(...conditions",{"_index":2488,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["all(conditions",{"_index":2421,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["allow",{"_index":1035,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{}}}],["allowed",{"_index":1266,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":790,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{}}}],["allresults",{"_index":3422,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["allresults.indexof(this.selecteditem",{"_index":3427,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["along",{"_index":2926,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"interfaces/SearchSection.html":{},"classes/SubscriptionTracker.html":{}}}],["alongside",{"_index":3357,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["already",{"_index":3408,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["alternatives",{"_index":3798,"title":{},"body":{"contributing.html":{}}}],["alto",{"_index":3188,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":31,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{}}}],["amend",{"_index":3830,"title":{},"body":{"contributing.html":{}}}],["analyzer",{"_index":4049,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":4053,"title":{},"body":{"index.html":{}}}],["ancestor",{"_index":2561,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ancestor).queryall(by.css(query",{"_index":2673,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["and().or",{"_index":2395,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(...conditions",{"_index":2475,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(conditions",{"_index":2425,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["angular",{"_index":3970,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":3951,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":3204,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3953,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":271,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":2527,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["angular/forms",{"_index":725,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2567,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/router",{"_index":3694,"title":{},"body":{"modules/VcdDatagridModule.html":{},"dependencies.html":{}}}],["another",{"_index":1430,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any(...conditions",{"_index":2490,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any(conditions",{"_index":2428,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any).href",{"_index":1493,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any).organizer.resize",{"_index":1670,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["anychoice",{"_index":2288,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["anychoice.display",{"_index":2314,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["api",{"_index":571,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["app",{"_index":2776,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["appear",{"_index":1512,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["appears",{"_index":702,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["appends",{"_index":2991,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["application",{"_index":3373,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["application's",{"_index":4057,"title":{},"body":{"index.html":{}}}],["applied",{"_index":2571,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["approval",{"_index":4096,"title":{},"body":{"index.html":{}}}],["args",{"_index":688,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{}}}],["argument",{"_index":110,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["arguments",{"_index":240,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["around",{"_index":1831,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{}}}],["array",{"_index":879,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["array.from(classes",{"_index":3540,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["arrow",{"_index":2023,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["arrowup",{"_index":618,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["artifacts",{"_index":4064,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":986,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["aside",{"_index":2818,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assert",{"_index":2593,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assertions",{"_index":2592,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assign",{"_index":2786,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assigned",{"_index":2068,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{}}}],["assigning",{"_index":2092,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["assignvalue",{"_index":1709,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["assignvalue(config",{"_index":1720,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["associated",{"_index":719,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["associating",{"_index":2183,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["assumed",{"_index":413,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["asterisk",{"_index":715,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["async",{"_index":443,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["attaches",{"_index":1704,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attaching",{"_index":1732,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attachrenderer",{"_index":1710,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attempt",{"_index":3413,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["attribute",{"_index":2756,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["auto",{"_index":677,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["automatically",{"_index":2938,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"index.html":{}}}],["autosquash",{"_index":3834,"title":{},"body":{"contributing.html":{}}}],["availability",{"_index":93,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["available",{"_index":83,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{}}}],["availablefeaturedactions",{"_index":305,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["availablefeaturedactions.slice(0",{"_index":308,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["availableheight",{"_index":1628,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["availableunits",{"_index":975,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["avoid",{"_index":892,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["avoiding",{"_index":2576,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["await",{"_index":484,"title":{},"body":{"classes/ActivityReporter.html":{},"components/FilterTestHostComponent.html":{},"interfaces/SearchSection.html":{}}}],["b",{"_index":931,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["back",{"_index":2992,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["background",{"_index":3056,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["backing",{"_index":651,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["banner",{"_index":327,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["banner'},{'name",{"_index":348,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["banner.component",{"_index":3721,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banner.component.html",{"_index":2347,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.scss",{"_index":2346,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts",{"_index":2344,"title":{},"body":{"components/ErrorBannerComponent.html":{},"coverage.html":{}}}],["banner.component.ts:17",{"_index":2370,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:19",{"_index":2371,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:24",{"_index":2366,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:29",{"_index":2361,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:36",{"_index":2360,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:41",{"_index":2355,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:46",{"_index":2373,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:54",{"_index":2367,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:59",{"_index":2369,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.module",{"_index":3666,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["banner.module.ts",{"_index":3720,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banneractivityreportercomponent",{"_index":326,"title":{"components/BannerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["banneractivityreporterwidgetobject",{"_index":544,"title":{"classes/BannerActivityReporterWidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["bar",{"_index":205,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["base",{"_index":797,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":221,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["baseformcontrol",{"_index":639,"title":{"classes/BaseFormControl.html":{}},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["baseformcontrol:105",{"_index":2716,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:109",{"_index":2717,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:113",{"_index":2718,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:117",{"_index":2719,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:21",{"_index":2722,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:26",{"_index":2724,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:31",{"_index":2725,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:36",{"_index":2720,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:41",{"_index":2715,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:46",{"_index":2714,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:52",{"_index":2711,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:57",{"_index":2713,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:62",{"_index":2712,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:67",{"_index":2721,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:72",{"_index":2723,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseunit",{"_index":3618,"title":{},"body":{"classes/Unit.html":{}}}],["basevalue",{"_index":1026,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["basically",{"_index":3343,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["batch",{"_index":91,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["become",{"_index":849,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["becomes",{"_index":2155,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["before",{"_index":713,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["before(date",{"_index":2430,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["before/aftereach",{"_index":2689,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["beforeeach",{"_index":2540,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beforeeach(function(this",{"_index":2546,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beginning",{"_index":2989,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["begins",{"_index":523,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["behavior",{"_index":474,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["being",{"_index":566,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["belong",{"_index":220,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["below",{"_index":703,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["benefit",{"_index":4116,"title":{},"body":{"index.html":{}}}],["best",{"_index":978,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["bestformat",{"_index":3631,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(1000000",{"_index":3636,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(value",{"_index":3633,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestunit",{"_index":1022,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["bestvalue",{"_index":3115,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["between",{"_index":435,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["betweennumbers",{"_index":2403,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["betweennumbers(values",{"_index":2432,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["binding",{"_index":3358,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["bl",{"_index":1054,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":1759,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["blob([csvfile",{"_index":1788,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["block",{"_index":3062,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["blocking",{"_index":3017,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["body",{"_index":1614,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["bold",{"_index":331,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer",{"_index":776,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer(textextractor",{"_index":4016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boldtextrenderercomponent",{"_index":330,"title":{"components/BoldTextRendererComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["boldtextrendererconfig",{"_index":765,"title":{"interfaces/BoldTextRendererConfig.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrendererwidgetobject",{"_index":780,"title":{"classes/BoldTextRendererWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":3315,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["boston",{"_index":3190,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":133,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Percent.html":{}}}],["bottom",{"_index":1053,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":2363,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["box",{"_index":830,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["br",{"_index":1052,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":3775,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["break",{"_index":1141,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":704,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["breaks",{"_index":1368,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["browse",{"_index":4118,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2568,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{},"modules.html":{}}}],["bsd",{"_index":2384,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["btntext",{"_index":186,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["bubbles",{"_index":2035,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["bucket",{"_index":269,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["buckets",{"_index":49,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["bug",{"_index":1365,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["bugs",{"_index":3847,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":3341,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["build:components",{"_index":4062,"title":{},"body":{"index.html":{}}}],["build:i18n",{"_index":4063,"title":{},"body":{"index.html":{}}}],["builder",{"_index":2178,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["builder.is(\"created\").before(userinputdate",{"_index":2396,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.is(\"uptime\").greaterthan(user",{"_index":2397,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts",{"_index":2388,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:106",{"_index":2422,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:126",{"_index":2461,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:160",{"_index":2429,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:180",{"_index":2463,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:190",{"_index":2445,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:198",{"_index":2459,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:206",{"_index":2455,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:214",{"_index":2457,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:222",{"_index":2449,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:230",{"_index":2451,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:238",{"_index":2431,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:246",{"_index":2418,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:256",{"_index":2433,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:270",{"_index":2443,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:282",{"_index":2439,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:291",{"_index":2438,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:39",{"_index":2416,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:40",{"_index":2415,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:41",{"_index":2414,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:52",{"_index":2453,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:62",{"_index":2446,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:72",{"_index":2426,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders",{"_index":2500,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders.push(new",{"_index":2501,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["buildpartial",{"_index":2404,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builds",{"_index":4088,"title":{},"body":{"index.html":{}}}],["button",{"_index":73,"title":{"interfaces/Button.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["button.class",{"_index":1394,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.handler(selection",{"_index":1529,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.inactivedisplaymode",{"_index":1519,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.isactive(selection",{"_index":1515,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttonconfig",{"_index":852,"title":{"interfaces/ButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["buttonconfig(config",{"_index":1381,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttonconfig.inactivedisplaymode",{"_index":814,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttoncontents",{"_index":136,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["buttons",{"_index":123,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["by.css(selector",{"_index":2614,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["by.directive(selector",{"_index":2615,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["bytes",{"_index":928,"title":{"classes/Bytes.html":{}},"body":{"classes/Bytes.html":{},"coverage.html":{}}}],["bytes(1",{"_index":949,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes(1024",{"_index":951,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.b",{"_index":958,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.gb",{"_index":961,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.kb",{"_index":959,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.mb",{"_index":960,"title":{},"body":{"classes/Bytes.html":{}}}],["c",{"_index":860,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"classes/WidgetFinder.html":{},"miscellaneous/functions.html":{}}}],["ca",{"_index":2140,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":1427,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculate",{"_index":1632,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculated",{"_index":222,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["calculatepagesize",{"_index":1615,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculateposition(rect",{"_index":1154,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["calculates",{"_index":977,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["california",{"_index":2141,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["call",{"_index":111,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["callback",{"_index":684,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["called",{"_index":112,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["caller",{"_index":861,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["callers",{"_index":2587,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["calling",{"_index":246,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["canbereadonly",{"_index":654,"title":{"interfaces/CanBeReadOnly.html":{}},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["cancel",{"_index":1893,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["canceltext",{"_index":1894,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["cards",{"_index":162,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["care",{"_index":2654,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["case",{"_index":87,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["catch",{"_index":3580,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["catch(error",{"_index":428,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["caused",{"_index":1074,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["causes",{"_index":1665,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["causing",{"_index":3801,"title":{},"body":{"contributing.html":{}}}],["cd",{"_index":4097,"title":{},"body":{"index.html":{}}}],["cell",{"_index":755,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cell's",{"_index":1814,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cell_tag",{"_index":3930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cellelement",{"_index":799,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["cells",{"_index":866,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["cellvalue",{"_index":1815,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cellvalue.tolocalestring",{"_index":1827,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cellvalue.tostring",{"_index":1825,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["center",{"_index":1152,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["certificate",{"_index":3759,"title":{},"body":{"contributing.html":{}}}],["certifies",{"_index":3764,"title":{},"body":{"contributing.html":{}}}],["cfr",{"_index":1714,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["chance",{"_index":1086,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":683,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["changed",{"_index":1705,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["changedetectorref",{"_index":1244,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["changes",{"_index":578,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["changing",{"_index":1667,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["character",{"_index":1764,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["characters",{"_index":2758,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["check",{"_index":2607,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["checkbox",{"_index":1907,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox'},{'name",{"_index":352,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["checkbox.component",{"_index":3727,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["checkbox.component.html",{"_index":2697,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts",{"_index":2696,"title":{},"body":{"components/FormCheckboxComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox.component.ts:34",{"_index":2710,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:39",{"_index":2709,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:44",{"_index":2706,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:49",{"_index":2704,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:51",{"_index":2727,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:53",{"_index":2702,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox/form",{"_index":2695,"title":{},"body":{"components/FormCheckboxComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox:nth",{"_index":2045,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["checkboxes",{"_index":2038,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["checkboxstyling",{"_index":2707,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["checkboxstyling.checkbox",{"_index":2708,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkout",{"_index":3814,"title":{},"body":{"contributing.html":{}}}],["checkposition",{"_index":2340,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["checks",{"_index":2861,"title":{},"body":{"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["child",{"_index":2784,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["children",{"_index":121,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["chrome",{"_index":1791,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"miscellaneous/variables.html":{}}}],["ci",{"_index":3823,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ci/cd",{"_index":4079,"title":{},"body":{"index.html":{}}}],["city",{"_index":3183,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["clarity",{"_index":116,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["claritymodule",{"_index":3590,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["class",{"_index":77,"title":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["classes",{"_index":378,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"overview.html":{}}}],["classlist.js",{"_index":3974,"title":{},"body":{"dependencies.html":{}}}],["classname",{"_index":2562,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clause",{"_index":2385,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["clear",{"_index":2405,"title":{},"body":{"classes/FilterBuilder.html":{},"interfaces/SearchSection.html":{}}}],["cleared",{"_index":2364,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["clearhidetimeout",{"_index":1123,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clears",{"_index":1546,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clearselectioninformation",{"_index":1573,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["cleartimeout(tip.hidetimeout",{"_index":1124,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":3971,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["click",{"_index":551,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["click(cssselector",{"_index":572,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clickcancel",{"_index":2011,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox",{"_index":2012,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox(index",{"_index":2020,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumndropdown",{"_index":2013,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicked",{"_index":103,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["clickexport",{"_index":2014,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicks",{"_index":576,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["client",{"_index":387,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{}}}],["clientheight",{"_index":1267,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["clientrect",{"_index":1155,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clipped",{"_index":820,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cliptext",{"_index":904,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{}}}],["cliptextconfig",{"_index":818,"title":{"interfaces/CliptextConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{}}}],["clone",{"_index":4073,"title":{},"body":{"index.html":{}}}],["cloning",{"_index":4072,"title":{},"body":{"index.html":{}}}],["closable",{"_index":2357,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["close",{"_index":2219,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["closed",{"_index":2349,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["closer",{"_index":2988,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["closes",{"_index":517,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["closing",{"_index":2770,"title":{},"body":{"components/FormInputComponent.html":{}}}],["closure",{"_index":3397,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["closures",{"_index":2691,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cloud",{"_index":4025,"title":{},"body":{"index.html":{}}}],["clr",{"_index":1271,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["clr/angular",{"_index":1253,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["clr/angular/data/datagrid/interfaces/filter.interface",{"_index":2102,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clr/core",{"_index":3955,"title":{},"body":{"dependencies.html":{}}}],["clr/icons",{"_index":3956,"title":{},"body":{"dependencies.html":{}}}],["clr/ui",{"_index":3957,"title":{},"body":{"dependencies.html":{}}}],["clrdatagrid",{"_index":1250,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatagridcssclass",{"_index":1443,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridfilter",{"_index":2064,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["clrdatagridfilterinterface",{"_index":2056,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clrdatagridpagination",{"_index":1251,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridstateinterface",{"_index":1252,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridwidgetobject",{"_index":791,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["clrdatagridwidgetobject(this.fixture",{"_index":3715,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatarowcssclassgetter(row",{"_index":1540,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdgcolumnclassname",{"_index":910,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["clrdropdown",{"_index":1859,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["cluster_pipesmodule",{"_index":3317,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_declarations",{"_index":3318,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_exports",{"_index":3319,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule",{"_index":3458,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_declarations",{"_index":3459,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_exports",{"_index":3460,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule",{"_index":3582,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_declarations",{"_index":3583,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_exports",{"_index":3584,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_providers",{"_index":3585,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule",{"_index":3651,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_declarations",{"_index":3652,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_exports",{"_index":3653,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule",{"_index":3657,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_declarations",{"_index":3658,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_exports",{"_index":3660,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_imports",{"_index":3659,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule",{"_index":3671,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule_exports",{"_index":3672,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule",{"_index":3684,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_declarations",{"_index":3685,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_exports",{"_index":3686,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule",{"_index":3688,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_declarations",{"_index":3689,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_exports",{"_index":3691,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_imports",{"_index":3690,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule",{"_index":3717,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_declarations",{"_index":3718,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_exports",{"_index":3719,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule",{"_index":3722,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_declarations",{"_index":3723,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_exports",{"_index":3724,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["cluster_vcdformmodule_providers",{"_index":3725,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule",{"_index":3728,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_declarations",{"_index":3729,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_exports",{"_index":3730,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cmd+space",{"_index":3333,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["co",{"_index":3156,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["co.value",{"_index":3157,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["code",{"_index":1767,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["codecov.io",{"_index":3976,"title":{},"body":{"dependencies.html":{}}}],["col",{"_index":1477,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["col.displayname",{"_index":1486,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["colindex",{"_index":1478,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["collect",{"_index":108,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["color",{"_index":2813,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["cols",{"_index":1352,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column",{"_index":754,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["column.displayname",{"_index":1487,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.fieldname",{"_index":2007,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["column.filter",{"_index":1660,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.filter.config.queryfield",{"_index":1661,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.hideable",{"_index":1595,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface",{"_index":772,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface.ts",{"_index":804,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["column.queryfieldname",{"_index":1659,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.renderer",{"_index":1651,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column_css_selector",{"_index":3931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["column_selector",{"_index":3932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columnbubbles",{"_index":2016,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncheckboxes",{"_index":2017,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncomponentrendererspec",{"_index":769,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec(componentrendererspec",{"_index":927,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec({type",{"_index":914,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columnconfig",{"_index":1650,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldcolumnrendererspec",{"_index":1655,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldname",{"_index":1656,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldrenderer",{"_index":1653,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfiginternal",{"_index":1235,"title":{"interfaces/ColumnConfigInternal.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["columndropdown",{"_index":1882,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columndropdown(columndropdown",{"_index":1881,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columnrendererspec",{"_index":770,"title":{"interfaces/ColumnRendererSpec.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["columnrendererspec#type",{"_index":1689,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["columnrendererspec).config",{"_index":1654,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnrendererspec.config",{"_index":1703,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["columns",{"_index":758,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns(cols",{"_index":1350,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns.map(column",{"_index":1649,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsconfig",{"_index":1345,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsupdated",{"_index":1424,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["combination",{"_index":424,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["combooption",{"_index":3101,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptions",{"_index":3112,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptionunitmap",{"_index":3114,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions",{"_index":3125,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.disable",{"_index":3131,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.enable",{"_index":3133,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["commands",{"_index":4102,"title":{},"body":{"index.html":{}}}],["commas",{"_index":1810,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["comment",{"_index":3836,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":3778,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commits",{"_index":3776,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":3644,"title":{},"body":{"injectables/UnitFormatter.html":{},"contributing.html":{},"index.html":{}}}],["common/activity",{"_index":633,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["common/error/error",{"_index":3677,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/interfaces",{"_index":272,"title":{},"body":{"components/ActionMenuComponent.html":{},"directives/MinMaxValidator.html":{}}}],["common/interfaces/action",{"_index":816,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["common/interfaces/select",{"_index":2175,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["common/loading/loading",{"_index":3678,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/pipes/pipes.module",{"_index":3695,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["common/subscription",{"_index":1257,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["commonmodule",{"_index":3587,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["commonutil",{"_index":1671,"title":{"classes/CommonUtil.html":{}},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["commonutil.roundto(inputunit.getoutputvalue(value",{"_index":3647,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["community",{"_index":3757,"title":{},"body":{"contributing.html":{}}}],["compared",{"_index":3292,"title":{},"body":{"classes/Percent.html":{}}}],["compatibility",{"_index":2937,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["compilecomponents",{"_index":2539,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["complete",{"_index":1451,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["completed",{"_index":3411,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["complex",{"_index":2391,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["comply",{"_index":3596,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["compodoc",{"_index":3990,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":148,"title":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["component's",{"_index":570,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["component(filtertesthostcomponent",{"_index":4018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component({@link",{"_index":2542,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["component_template",{"_index":324,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["componentconstructor",{"_index":2659,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfactory",{"_index":1738,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfactoryresolver",{"_index":1715,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfixture",{"_index":2566,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture#detectchanges",{"_index":2608,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentinstance",{"_index":3466,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["componentref",{"_index":1707,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentrenderer",{"_index":752,"title":{"interfaces/ComponentRenderer.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentrenderer#config",{"_index":858,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["componentrenderer.config",{"_index":773,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["componentrendererconstructor",{"_index":826,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["componentrendereroutletdirective",{"_index":369,"title":{"directives/ComponentRendererOutletDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["componentrendereroutletdirective#assignvalue",{"_index":2113,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["componentrendererspec",{"_index":827,"title":{"interfaces/ComponentRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentroots",{"_index":2672,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentroots.map",{"_index":2674,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["components",{"_index":150,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["components.git",{"_index":4111,"title":{},"body":{"index.html":{}}}],["components/master",{"_index":4095,"title":{},"body":{"index.html":{}}}],["componenttype",{"_index":1708,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["compound",{"_index":3403,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["computebestunitandvalue(value",{"_index":3144,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["concurrent",{"_index":441,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["condition",{"_index":81,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["condition(operator",{"_index":2440,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.buildpartial",{"_index":2487,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.clear",{"_index":2492,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions",{"_index":2424,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.foreach(condition",{"_index":2486,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.length",{"_index":2476,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.shift",{"_index":2484,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["config",{"_index":196,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["config(config",{"_index":1188,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config(context",{"_index":1743,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["config(record",{"_index":778,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config(val",{"_index":2114,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["config.disabled",{"_index":1193,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.mouseoutdelay",{"_index":1189,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.options.foreach(option",{"_index":2190,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.options.map(option",{"_index":2187,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.size",{"_index":1191,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.text",{"_index":764,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config.unit",{"_index":2263,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config.unitoptions",{"_index":2262,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config[key",{"_index":283,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["configuration",{"_index":9,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["configurationcomponentrenderer",{"_index":1745,"title":{},"body":{"interfaces/ComponentRendererSpec.html":{}}}],["configuration{@link",{"_index":1693,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["configured",{"_index":228,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/SearchSection.html":{}}}],["configures",{"_index":2329,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["configuretestingmodule",{"_index":2532,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["conjunct",{"_index":2427,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["considered",{"_index":3799,"title":{},"body":{"contributing.html":{}}}],["consists",{"_index":614,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["const",{"_index":284,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["constelement",{"_index":3713,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["constelement.componentinstance",{"_index":3716,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["construct",{"_index":1015,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["constructed",{"_index":3111,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["constructor",{"_index":451,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["constructor(@inject(activitypromiseresolver",{"_index":3569,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(@inject(locale_id",{"_index":3208,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["constructor(@self",{"_index":2731,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["constructor(componentconstructor",{"_index":2661,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["constructor(controldirective",{"_index":2701,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{}}}],["constructor(destroyable",{"_index":2943,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["constructor(filtercontainer",{"_index":2063,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["constructor(fixture",{"_index":3481,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/WidgetObject.html":{}}}],["constructor(host",{"_index":3442,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["constructor(multiplier",{"_index":3299,"title":{},"body":{"classes/Percent.html":{},"classes/Unit.html":{}}}],["constructor(ngcontrol",{"_index":670,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormSelectComponent.html":{}}}],["constructor(parent",{"_index":2413,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["constructor(prefix",{"_index":2961,"title":{},"body":{"classes/IdGenerator.html":{}}}],["constructor(private",{"_index":480,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(promiseresolver",{"_index":452,"title":{},"body":{"classes/ActivityReporter.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(translationservice",{"_index":510,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(viewcontainerref",{"_index":1712,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructors",{"_index":1701,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructs",{"_index":2940,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["contain",{"_index":3789,"title":{},"body":{"contributing.html":{}}}],["contained",{"_index":429,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["container",{"_index":164,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["containing",{"_index":160,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["contains",{"_index":856,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["content",{"_index":200,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["content/dimensions",{"_index":1129,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":1089,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":33,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/SearchSection.html":{}}}],["context(.modal",{"_index":3063,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["context(.modal):not(.adjust",{"_index":2823,"title":{},"body":{"components/FormInputComponent.html":{}}}],["contextual",{"_index":15,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextual_featured",{"_index":44,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactions",{"_index":309,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["contextualbutton",{"_index":842,"title":{"interfaces/ContextualButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["contextualbutton.ids",{"_index":1746,"title":{},"body":{"interfaces/ContextualButtonConfig.html":{}}}],["contextualbutton.id}s",{"_index":848,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["contextualbuttonconfig",{"_index":846,"title":{"interfaces/ContextualButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["contextualbuttonposition",{"_index":843,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextualbuttonposition.row",{"_index":1524,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualbuttonposition.top",{"_index":1384,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["continue",{"_index":3417,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["contract",{"_index":434,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["contributing",{"_index":3752,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":3767,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":3756,"title":{},"body":{"contributing.html":{}}}],["contributor's",{"_index":3771,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":650,"title":{},"body":{"classes/BaseFormControl.html":{},"injectables/CsvExporterService.html":{},"components/DatagridNumericFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["control's",{"_index":2853,"title":{},"body":{"classes/FormValidators.html":{}}}],["control.ts",{"_index":641,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control.ts:105",{"_index":690,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:109",{"_index":692,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:113",{"_index":695,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:117",{"_index":698,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:21",{"_index":676,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:26",{"_index":682,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:31",{"_index":685,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:36",{"_index":673,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:41",{"_index":714,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:46",{"_index":712,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:52",{"_index":701,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:57",{"_index":710,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:62",{"_index":706,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:67",{"_index":674,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:72",{"_index":672,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:85",{"_index":718,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:91",{"_index":721,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:98",{"_index":723,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.value",{"_index":2871,"title":{},"body":{"classes/FormValidators.html":{}}}],["controldirective",{"_index":2703,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["controlling",{"_index":3359,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["controls",{"_index":1033,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["controlvalueaccessor",{"_index":653,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["conventions",{"_index":3840,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2299,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["convert",{"_index":1014,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["converted",{"_index":981,"title":{},"body":{"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["converts",{"_index":1876,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["copy/paste",{"_index":1088,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["copyright",{"_index":2379,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["correct",{"_index":1600,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["correctly",{"_index":2676,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["corresponding",{"_index":872,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["correspondingformctrl",{"_index":2194,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["correspondingformctrl.setvalue(true",{"_index":2199,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["count",{"_index":229,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["coverage",{"_index":2640,"title":{"coverage.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{}}}],["covering",{"_index":3221,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["create",{"_index":886,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createcsv",{"_index":1753,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["createcsv(rows",{"_index":1756,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["created",{"_index":1061,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createdatagridfiltertesthelper",{"_index":2549,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelper(filtertype",{"_index":4017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder",{"_index":2555,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder(filtertype",{"_index":4019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createformgroup",{"_index":2059,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["createid",{"_index":2983,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createnullsafevalidator",{"_index":2848,"title":{},"body":{"classes/FormValidators.html":{}}}],["createnullsafevalidator(validator",{"_index":2850,"title":{},"body":{"classes/FormValidators.html":{}}}],["creates",{"_index":454,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":913,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["creation",{"_index":1851,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["criteria",{"_index":3597,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["css",{"_index":76,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cssselector",{"_index":581,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["csv",{"_index":1760,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["csvexporterservice",{"_index":1748,"title":{"injectables/CsvExporterService.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["csvfile",{"_index":1774,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["current",{"_index":990,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["currentdirective",{"_index":1075,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currenthost",{"_index":1079,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":439,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["currentoperator",{"_index":2402,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["currentselection.map((selected",{"_index":1567,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentvalue",{"_index":1975,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["customfiql",{"_index":2301,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"miscellaneous/functions.html":{}}}],["cycle",{"_index":2795,"title":{},"body":{"components/FormInputComponent.html":{}}}],["danger",{"_index":2358,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["data",{"_index":60,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"miscellaneous/functions.html":{}}}],["data.id",{"_index":3009,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.order",{"_index":3000,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.provider",{"_index":3013,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.section",{"_index":3014,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.ts",{"_index":3182,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataexportercomponent",{"_index":333,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["dataexporterwidgetobject",{"_index":2008,"title":{"classes/DataExporterWidgetObject.html":{}},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["dataexportrequest",{"_index":1936,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dataexportrequestevent",{"_index":1842,"title":{"interfaces/DataExportRequestEvent.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["dataexportrequestevent.exportdata",{"_index":1937,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["datagrid",{"_index":905,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["datagrid'},{'name",{"_index":336,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["datagrid.component",{"_index":3696,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["datagrid.component.html",{"_index":1342,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.component.scss",{"_index":1343,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.wo",{"_index":786,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts",{"_index":3704,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["datagrid.wo.ts:14",{"_index":3706,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:19",{"_index":3708,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:26",{"_index":3710,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.component",{"_index":3711,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.module",{"_index":3680,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["datagrid/mock",{"_index":2530,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["datagridcomponent",{"_index":335,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"overview.html":{}}}],["datagridcomponent.gridrefresh",{"_index":1326,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter",{"_index":1258,"title":{"classes/DatagridFilter.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridfilter#config",{"_index":2125,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["datagridfilter.queryfield",{"_index":1658,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter:107",{"_index":2165,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:112",{"_index":2159,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:117",{"_index":2166,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:122",{"_index":2161,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:127",{"_index":2162,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:132",{"_index":2163,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:137",{"_index":2158,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:59",{"_index":2172,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:60",{"_index":2173,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:71",{"_index":2170,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:72",{"_index":2147,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:87",{"_index":2171,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:89",{"_index":2164,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:99",{"_index":2160,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridmultiselectfilter",{"_index":2209,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridmultiselectfilter(options",{"_index":4020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridmultiselectfiltercomponent",{"_index":337,"title":{"components/DatagridMultiSelectFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridmultiselectfiltercomponent.options",{"_index":2181,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridmultiselectfilterconfig",{"_index":2153,"title":{"interfaces/DatagridMultiSelectFilterConfig.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["datagridnumericfilter",{"_index":2278,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridnumericfilter(value",{"_index":4021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridnumericfiltercomponent",{"_index":341,"title":{"components/DatagridNumericFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridnumericfiltercomponent.close",{"_index":2771,"title":{},"body":{"components/FormInputComponent.html":{}}}],["datagridnumericfilterconfig",{"_index":2228,"title":{"interfaces/DatagridNumericFilterConfig.html":{}},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datagridnumericfiltervalue",{"_index":2230,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/typealiases.html":{}}}],["datagridselectfilter",{"_index":2313,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridselectfilter(options",{"_index":4022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridselectfiltercomponent",{"_index":343,"title":{"components/DatagridSelectFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridselectfiltercomponent#getvalue",{"_index":2300,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselectfilterconfig",{"_index":2297,"title":{"interfaces/DatagridSelectFilterConfig.html":{}},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{}}}],["datagridselection",{"_index":1419,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridstringfilter",{"_index":2342,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridstringfilter(wildcardposition",{"_index":4023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridstringfiltercomponent",{"_index":345,"title":{"components/DatagridStringFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridstringfilterconfig",{"_index":2330,"title":{"interfaces/DatagridStringFilterConfig.html":{}},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{}}}],["datarow",{"_index":1537,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["date",{"_index":1826,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":2984,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["date(getformatteddatevalue(value)).toisostring",{"_index":2801,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date(value",{"_index":2803,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.getfullyear",{"_index":2804,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.toisostring",{"_index":2499,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["date_object_class",{"_index":3207,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datepipe",{"_index":3202,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datepipe(this.localeid).transform(returnvalue",{"_index":3220,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datetime",{"_index":2737,"title":{},"body":{"components/FormInputComponent.html":{}}}],["deactivate",{"_index":1217,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["debounce_time_for_grid_filter_changes",{"_index":2108,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["debouncetime",{"_index":2103,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["debugelement",{"_index":574,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["debugelements",{"_index":2584,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["decimal",{"_index":1683,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["decimalpipe",{"_index":3203,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decimalpipe(this.localeid).transform(returnvalue",{"_index":3219,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decisions",{"_index":645,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["declarations",{"_index":2535,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":2234,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/FormInputComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["deep",{"_index":2280,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{}}}],["default",{"_index":129,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_pagination_translation_key",{"_index":1276,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size",{"_index":1260,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size_options",{"_index":1262,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":134,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defaultspinnersize",{"_index":3023,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["define",{"_index":3617,"title":{},"body":{"classes/Unit.html":{}}}],["defined",{"_index":192,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defines",{"_index":1642,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["definition",{"_index":1539,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["defualts",{"_index":1380,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["delay",{"_index":1041,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":2106,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["depend",{"_index":219,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependencies",{"_index":3314,"title":{"dependencies.html":{}},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependends",{"_index":841,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependent",{"_index":46,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["depends",{"_index":854,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"index.html":{}}}],["derived",{"_index":2090,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["descibes",{"_index":845,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["described",{"_index":3763,"title":{},"body":{"contributing.html":{}}}],["describes",{"_index":141,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["describing",{"_index":2978,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":3794,"title":{},"body":{"contributing.html":{}}}],["deselect",{"_index":1886,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["desired",{"_index":1408,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["destroy",{"_index":1107,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["destroyable",{"_index":3611,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["destroyable.ngondestroy",{"_index":2945,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["destroyed",{"_index":2939,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["detaching",{"_index":1731,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detachrenderer",{"_index":1711,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detail",{"_index":1314,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailcomponent",{"_index":1435,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailpane",{"_index":1320,"title":{"interfaces/DetailPane.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailpaneconfig",{"_index":1318,"title":{"interfaces/DetailPaneConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailrowconfig",{"_index":1315,"title":{"interfaces/DetailRowConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["details",{"_index":163,"title":{},"body":{"components/ActionMenuComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["detectchanges",{"_index":552,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["detects",{"_index":577,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["determine",{"_index":815,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["determining",{"_index":114,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["dev",{"_index":4044,"title":{},"body":{"index.html":{}}}],["developer",{"_index":3340,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["developers",{"_index":4036,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1338,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["development",{"_index":4086,"title":{},"body":{"index.html":{}}}],["dg",{"_index":338,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["dialog",{"_index":1874,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogheader",{"_index":1890,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogs",{"_index":3019,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["didn't",{"_index":2000,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["different",{"_index":833,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"miscellaneous/enumerations.html":{}}}],["differentiate",{"_index":1239,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differentiating",{"_index":1645,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differently",{"_index":3291,"title":{},"body":{"classes/Percent.html":{}}}],["digits",{"_index":1676,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["dimensions",{"_index":1153,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":2656,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["direction",{"_index":1149,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":322,"title":{"directives/ComponentRendererOutletDirective.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directives",{"_index":368,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["directives/component",{"_index":3697,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":4061,"title":{},"body":{"index.html":{}}}],["directly",{"_index":2585,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["director",{"_index":4026,"title":{},"body":{"index.html":{}}}],["directory",{"_index":4066,"title":{},"body":{"index.html":{}}}],["disable",{"_index":234,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["disabled",{"_index":96,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["disabled(disabled",{"_index":3526,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["disables",{"_index":1282,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["disabling",{"_index":204,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["disjunct",{"_index":2462,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["dismissed",{"_index":2353,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["dismisses",{"_index":2365,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["display",{"_index":34,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["displayability",{"_index":839,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["displaycombounit",{"_index":3172,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayed",{"_index":30,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["displaying",{"_index":62,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["displayname",{"_index":760,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["displays",{"_index":1183,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["displaytext",{"_index":3600,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["displayunit",{"_index":3173,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayvalue",{"_index":3163,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["dist",{"_index":4065,"title":{},"body":{"index.html":{}}}],["div",{"_index":3552,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["div2",{"_index":3554,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["dividing",{"_index":1633,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["docs",{"_index":3354,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["document",{"_index":2637,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["document.body.appendchild(link",{"_index":1801,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.appendchild(tip.container",{"_index":1101,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.body.removechild(link",{"_index":1803,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.removechild(tip.container",{"_index":1108,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.createelement('a",{"_index":1795,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.createelement('div",{"_index":1092,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.queryselector('.tooltip.vcd",{"_index":3548,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["document.queryselectorall('.tooltip.vcd",{"_index":3543,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["documentation",{"_index":3849,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":3787,"title":{},"body":{"contributing.html":{}}}],["doesn't",{"_index":3094,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["dom",{"_index":153,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":887,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":2647,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["dosearch",{"_index":3387,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["dot",{"_index":882,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["double",{"_index":1828,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["doubled",{"_index":1829,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["down",{"_index":3110,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["download",{"_index":1773,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadcsvfile",{"_index":1754,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloadcsvfile(csvfile",{"_index":1769,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloaddata(data",{"_index":1993,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloaded",{"_index":1775,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloading",{"_index":1921,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadingmessage",{"_index":1922,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dr",{"_index":1272,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["drop",{"_index":3109,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["dropdown",{"_index":140,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["due",{"_index":1363,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["duplicate",{"_index":2589,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["duplication",{"_index":2577,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["during",{"_index":1456,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dynamic",{"_index":1700,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1688,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e",{"_index":1170,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"directives/ShowClippedTextDirective.html":{}}}],["e.g",{"_index":2084,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e2e",{"_index":4070,"title":{},"body":{"index.html":{}}}],["each",{"_index":1016,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["earlier",{"_index":3832,"title":{},"body":{"contributing.html":{}}}],["edit",{"_index":1034,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["edited",{"_index":1765,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["editing",{"_index":1036,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["el",{"_index":601,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["el.addeventlistener('mouseenter",{"_index":1174,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.addeventlistener('mouseleave",{"_index":1175,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.getboundingclientrect",{"_index":1132,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.innerhtml",{"_index":1148,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.nativeelement.textcontent.trim",{"_index":2644,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["el.removeeventlistener('mouseenter",{"_index":1177,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.removeeventlistener('mouseleave",{"_index":1178,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element",{"_index":321,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":1227,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element.innerhtml",{"_index":3289,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["elementref",{"_index":1044,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["elements",{"_index":598,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ellipsis",{"_index":1209,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["emission",{"_index":2078,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["emits",{"_index":1422,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitted",{"_index":1325,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitting",{"_index":2107,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":411,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["emptycolumnplaceholder",{"_index":895,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["emptygridplaceholder",{"_index":1449,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["encoded",{"_index":1816,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encodes",{"_index":1780,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue",{"_index":3872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodevalue(cell",{"_index":1812,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue(cellvalue",{"_index":1823,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encourage",{"_index":2586,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["end",{"_index":2325,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/SearchSection.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enforce",{"_index":643,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["ensure",{"_index":3410,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ensurefirstsectionisloaded",{"_index":3404,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["enter",{"_index":616,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["enterclicked",{"_index":2748,"title":{},"body":{"components/FormInputComponent.html":{}}}],["entire",{"_index":583,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["entities",{"_index":208,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entity",{"_index":39,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entityurn",{"_index":187,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["entrycomponents",{"_index":3664,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["enum",{"_index":27,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4002,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":4143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eq",{"_index":2469,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":2307,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["equals",{"_index":3155,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["equalto",{"_index":2406,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equalto(value",{"_index":2444,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equivalent",{"_index":3222,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":347,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"modules/VcdErrorBannerModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error('could",{"_index":3578,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["error('featured",{"_index":1397,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["error('query",{"_index":2130,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["error('the",{"_index":2306,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["error('unsubscribing",{"_index":2953,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["error(`a",{"_index":2196,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["error(`did",{"_index":2684,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error(`expected",{"_index":2685,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error/error",{"_index":3665,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["errorbannercomponent",{"_index":346,"title":{"components/ErrorBannerComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{},"overview.html":{}}}],["errorkeys",{"_index":669,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["errorlabels",{"_index":664,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["errormessage",{"_index":2345,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessage(val",{"_index":2375,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessagechange",{"_index":2354,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errors",{"_index":438,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["errortext",{"_index":475,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["escape",{"_index":617,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["escapeclicked",{"_index":2749,"title":{},"body":{"components/FormInputComponent.html":{}}}],["etc",{"_index":619,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["evaluator",{"_index":3968,"title":{},"body":{"dependencies.html":{}}}],["event",{"_index":586,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["event('input",{"_index":2630,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["event.preventdefault",{"_index":3380,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["eventemitter",{"_index":1245,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["eventemitter(false",{"_index":2783,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["eventhandler",{"_index":1169,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/typealiases.html":{}}}],["events",{"_index":459,"title":{},"body":{"classes/ActivityReporter.html":{},"components/ErrorBannerComponent.html":{}}}],["everywhere",{"_index":3334,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ex",{"_index":1001,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["examine",{"_index":3415,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["example",{"_index":396,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":2134,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["excluding",{"_index":1563,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["execute",{"_index":237,"title":{},"body":{"components/ActionMenuComponent.html":{},"index.html":{}}}],["executed",{"_index":102,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["executing",{"_index":2879,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["exist",{"_index":2198,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["existing",{"_index":1558,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["expand",{"_index":1440,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expanded",{"_index":1437,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["experience",{"_index":3342,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["explain",{"_index":3792,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["export.csv",{"_index":1889,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportalltext",{"_index":1896,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportcolumn",{"_index":1854,"title":{"interfaces/ExportColumn.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["exportdata",{"_index":1846,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportdata(records",{"_index":1983,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exported",{"_index":1805,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["exporter",{"_index":1877,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["exporter'},{'name",{"_index":334,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["exporter.component",{"_index":2039,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"modules/VcdDataExporterModule.html":{}}}],["exporter.component.html",{"_index":1878,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.scss",{"_index":1879,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.ts",{"_index":1844,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exporter.module",{"_index":3679,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["exporter.module.ts",{"_index":3687,"title":{},"body":{"modules/VcdDataExporterModule.html":{}}}],["exporter.service",{"_index":1860,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.service.ts",{"_index":1752,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter.service.ts:21",{"_index":1758,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:29",{"_index":1777,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:38",{"_index":1771,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.title",{"_index":1892,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.wo.ts",{"_index":2009,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["exporter.wo.ts:13",{"_index":2018,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:18",{"_index":2029,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:25",{"_index":2033,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:32",{"_index":2037,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:40",{"_index":2027,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:48",{"_index":2021,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:55",{"_index":2019,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:62",{"_index":2025,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:69",{"_index":2022,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter/csv",{"_index":1751,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter/data",{"_index":1843,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exports",{"_index":3316,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["exportstage",{"_index":1944,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporttext",{"_index":1900,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["expose",{"_index":2582,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["exposed",{"_index":1295,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["expresses",{"_index":433,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["expression",{"_index":2420,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["expressionchangedafterithasbeencheckederror",{"_index":1666,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expressions",{"_index":2392,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["extended",{"_index":2051,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["extends",{"_index":503,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extension",{"_index":2601,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extra",{"_index":1644,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["extract",{"_index":3113,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["extracting",{"_index":3195,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["extremely",{"_index":4075,"title":{},"body":{"index.html":{}}}],["fa",{"_index":4105,"title":{},"body":{"index.html":{}}}],["fails",{"_index":3822,"title":{},"body":{"contributing.html":{}}}],["failure",{"_index":421,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["false",{"_index":99,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":2296,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["fast",{"_index":3806,"title":{},"body":{"contributing.html":{}}}],["fb",{"_index":2289,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{},"directives/MinMaxValidator.html":{}}}],["fb.result",{"_index":2473,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["feature",{"_index":3815,"title":{},"body":{"contributing.html":{}}}],["featurebe",{"_index":3835,"title":{},"body":{"contributing.html":{}}}],["featured",{"_index":118,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredactions",{"_index":296,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredactions.concat(this.getflattenedactionlist(action.children",{"_index":300,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredactions.push(action",{"_index":301,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredbutton",{"_index":1400,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbutton.class",{"_index":1399,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbuttonclass",{"_index":1392,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbuttons",{"_index":1448,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredcount",{"_index":128,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureif",{"_index":3831,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":1324,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureupdating",{"_index":3820,"title":{},"body":{"contributing.html":{}}}],["female",{"_index":3191,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1845,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["fetched",{"_index":1849,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fetching",{"_index":1356,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["field",{"_index":679,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["field:after",{"_index":2812,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["fieldcolumnrendererspec",{"_index":1240,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldname",{"_index":1241,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldrenderer",{"_index":1242,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fields",{"_index":1763,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filed",{"_index":1657,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filename",{"_index":1770,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["files",{"_index":2597,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["fills",{"_index":1410,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter",{"_index":825,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter'},{'name",{"_index":340,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["filter(button",{"_index":1502,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter(formcontrol",{"_index":2202,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component",{"_index":3699,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["filter.component.html",{"_index":2145,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component.scss",{"_index":2213,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filter.component.ts",{"_index":2138,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["filter.component.ts:101",{"_index":2149,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:102",{"_index":2293,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:105",{"_index":2157,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:115",{"_index":2150,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:120",{"_index":2226,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:122",{"_index":2151,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:128",{"_index":2224,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:129",{"_index":2152,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:132",{"_index":2227,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2323,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:36",{"_index":2316,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2238,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:42",{"_index":2236,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:43",{"_index":2240,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:48",{"_index":2233,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:49",{"_index":2223,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:55",{"_index":2242,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:57",{"_index":2324,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:58",{"_index":2295,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:62",{"_index":2232,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:63",{"_index":2222,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:64",{"_index":2320,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:67",{"_index":2290,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:69",{"_index":2146,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:70",{"_index":2245,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:73",{"_index":2225,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:76",{"_index":2291,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:77",{"_index":2168,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:78",{"_index":2221,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:79",{"_index":2148,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:80",{"_index":2294,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:84",{"_index":2229,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:87",{"_index":2154,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:89",{"_index":2231,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:98",{"_index":2292,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.getvalue",{"_index":1587,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter.ts",{"_index":2050,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter.ts:107",{"_index":2088,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:112",{"_index":2075,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:117",{"_index":2094,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:122",{"_index":2079,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:127",{"_index":2082,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:132",{"_index":2085,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:137",{"_index":2073,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:147",{"_index":2101,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:59",{"_index":2072,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:60",{"_index":2065,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:71",{"_index":2067,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:72",{"_index":2096,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:80",{"_index":2098,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:87",{"_index":2070,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:89",{"_index":2086,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:99",{"_index":2077,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter_selector",{"_index":3933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterable/sortable",{"_index":875,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["filterbuilder",{"_index":2176,"title":{"classes/FilterBuilder.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbuilder().any(...selectedfilters).getstring",{"_index":2206,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is('').and(...builders",{"_index":2504,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.queryfield",{"_index":2270,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder().is(this.queryfield).equalto(selectedoption",{"_index":2205,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is(this.result).condition(operators.ge",{"_index":2502,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.result).condition(operators.le",{"_index":2503,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder(this",{"_index":2472,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder.betweennumbers([from",{"_index":2275,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.equalto(value).getstring",{"_index":2311,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder.greaterthan(from).getstring",{"_index":2273,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.lessthan(to).getstring",{"_index":2274,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filtercolumn",{"_index":2512,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtercomponentrendererspec",{"_index":2139,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec(componentrendererspec",{"_index":2137,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec({type",{"_index":2133,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filterconfig",{"_index":822,"title":{"interfaces/FilterConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["filtercontainer",{"_index":2066,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercontainer.setfilter(this",{"_index":2112,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtered",{"_index":2110,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtering",{"_index":863,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filtering/sorting/paging",{"_index":1457,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filterrendererspec",{"_index":823,"title":{"interfaces/FilterRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filters",{"_index":1332,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filters/datagrid",{"_index":824,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{}}}],["filterselect",{"_index":2302,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["filtertesthostcomponent",{"_index":349,"title":{"components/FilterTestHostComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtertesthostcomponent.filtercolumn",{"_index":2521,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtertext",{"_index":2331,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filtertype",{"_index":2520,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["find",{"_index":1544,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["find(item",{"_index":3280,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["find(params",{"_index":3736,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["find>(params",{"_index":2679,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findablewidget",{"_index":2646,"title":{"interfaces/FindableWidget.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["findbestunit",{"_index":944,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findbestunit(value",{"_index":974,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findcolumnindex(col",{"_index":1484,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["findelement",{"_index":553,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelement(selector",{"_index":589,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelements",{"_index":554,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["findelements(selector",{"_index":595,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finder",{"_index":2516,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["finder.detectchanges",{"_index":2557,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.find(clrdatagridwidgetobject",{"_index":2552,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.hostcomponent.setfilter(filtertype",{"_index":2553,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["findparams",{"_index":2558,"title":{"interfaces/FindParams.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["findparams).woconstructor",{"_index":2687,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finds",{"_index":591,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets",{"_index":2667,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets(params",{"_index":3738,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["finished",{"_index":1853,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fiql",{"_index":1329,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["fired",{"_index":101,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/variables.html":{}}}],["fires",{"_index":1933,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["firetiptransitionendfortests",{"_index":3917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["first",{"_index":35,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["first.buildpartial",{"_index":2485,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["first.clear",{"_index":2491,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["firstitem",{"_index":1335,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fix",{"_index":2779,"title":{},"body":{"components/FormInputComponent.html":{}}}],["fixes",{"_index":3800,"title":{},"body":{"contributing.html":{}}}],["fixture",{"_index":2565,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture's",{"_index":2564,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.componentinstance",{"_index":563,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.debugelement",{"_index":2612,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixup",{"_index":3833,"title":{},"body":{"contributing.html":{}}}],["flat",{"_index":3421,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["flattenedfeaturedactionlist",{"_index":302,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["flex",{"_index":2820,"title":{},"body":{"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["float",{"_index":1681,"title":{},"body":{"classes/CommonUtil.html":{}}}],["floating",{"_index":1679,"title":{},"body":{"classes/CommonUtil.html":{}}}],["flow",{"_index":3768,"title":{},"body":{"contributing.html":{}}}],["focused",{"_index":4141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":4076,"title":{},"body":{"index.html":{}}}],["follow",{"_index":3839,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":1208,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["font",{"_index":775,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["footer",{"_index":1299,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footer').offsetheight",{"_index":1624,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footerheight",{"_index":1622,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["force",{"_index":3818,"title":{},"body":{"contributing.html":{}}}],["forcedropdownopen",{"_index":1932,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fork",{"_index":3781,"title":{},"body":{"contributing.html":{}}}],["form",{"_index":351,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["form.scss",{"_index":2782,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form.scss,./form",{"_index":2739,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form/form.module",{"_index":3681,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["format",{"_index":1864,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"classes/Percent.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["format(1000",{"_index":3643,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["format(value",{"_index":3640,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formats",{"_index":3294,"title":{},"body":{"classes/Percent.html":{}}}],["formatted",{"_index":1330,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["formatter",{"_index":3082,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{}}}],["formatter.ts",{"_index":3629,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["formatter.ts:15",{"_index":3632,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:29",{"_index":3642,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:46",{"_index":3634,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatting",{"_index":2312,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["formbuilder",{"_index":2247,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["formcheckboxcomponent",{"_index":350,"title":{"components/FormCheckboxComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":667,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["formcontrol(false",{"_index":2192,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formcontrol(null",{"_index":2260,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formcontrol(true",{"_index":1947,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["formcontrol.value",{"_index":2733,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["formcontrol.value:min.tostring():max",{"_index":2811,"title":{},"body":{"components/FormInputComponent.html":{}}}],["formcontrolname",{"_index":675,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formcontrolnamedirective",{"_index":655,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formfields",{"_index":2249,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/enumerations.html":{}}}],["formfields.from",{"_index":2259,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formfields.to",{"_index":2261,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formgroup",{"_index":1858,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formgroup(controls",{"_index":1979,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["forminputcomponent",{"_index":353,"title":{"components/FormInputComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formselectcomponent",{"_index":355,"title":{"components/FormSelectComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formsmodule",{"_index":3588,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["formvalidators",{"_index":2844,"title":{"classes/FormValidators.html":{}},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["formvalidators.createnullsafevalidator((control",{"_index":2867,"title":{},"body":{"classes/FormValidators.html":{}}}],["formvalidators.isnumberinrange",{"_index":3120,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["formvalidators.isnumberinrange(this.min",{"_index":3117,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["forward",{"_index":3807,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":604,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["four",{"_index":4029,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":1906,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlyfieldscontrol",{"_index":1962,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynames",{"_index":1867,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["friendlynamescheckboxlabel",{"_index":1908,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynameshint",{"_index":1913,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynamesinfomessage",{"_index":1910,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["frmctrl",{"_index":2197,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["frominput",{"_index":2216,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["full",{"_index":1184,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{}}}],["function",{"_index":52,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1369,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["functionrenderer",{"_index":836,"title":{"interfaces/FunctionRenderer.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["functionrendererpipe",{"_index":2875,"title":{"pipes/FunctionRendererPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2541,"title":{"miscellaneous/functions.html":{}},"body":{"components/FilterTestHostComponent.html":{},"pipes/FunctionRendererPipe.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":4038,"title":{},"body":{"index.html":{}}}],["gave",{"_index":426,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["gb",{"_index":932,"title":{},"body":{"classes/Bytes.html":{},"injectables/UnitFormatter.html":{}}}],["ge",{"_index":2466,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["gender",{"_index":3184,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":393,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"contributing.html":{},"index.html":{}}}],["generated",{"_index":678,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"index.html":{}}}],["generates",{"_index":419,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["generator",{"_index":729,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["generator.ts",{"_index":2959,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["generator.ts:10",{"_index":2964,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:15",{"_index":2965,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:17",{"_index":2962,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator/id",{"_index":728,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["generic",{"_index":805,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["generics",{"_index":925,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["getactiondisplayconfig",{"_index":256,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getactions",{"_index":253,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getallunittypes",{"_index":941,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/ThousandsUnit.html":{}}}],["getavailableactions",{"_index":179,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getavailableactions(actions",{"_index":211,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getbasevalue",{"_index":945,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getbasevalue(value",{"_index":991,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getboldtext(row",{"_index":798,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["getclrdatagrid",{"_index":3709,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getcolumnbubbles",{"_index":2032,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckboxes",{"_index":2036,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumnsconfig(columns",{"_index":1648,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getconfig",{"_index":2097,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getcontextualactions",{"_index":180,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualactions(selection",{"_index":217,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualfeaturedactions",{"_index":181,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualfeaturedactions(selection",{"_index":223,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getdebouncetimems",{"_index":2060,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getdetailpanerenderspec(record",{"_index":1535,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdetailrowrenderspec(record",{"_index":1533,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaymode(button",{"_index":1518,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaynameforfield(fieldname",{"_index":2006,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["getdisplayvalue",{"_index":3247,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["geterrorkeys",{"_index":722,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["geterrortext",{"_index":627,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getfeaturedbuttons(records",{"_index":1500,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getflattenedactionlist",{"_index":182,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getflattenedactionlist(actions",{"_index":230,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getformatteddatevalue",{"_index":3903,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getformatteddatevalue(value",{"_index":2792,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["getformcontrol",{"_index":717,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getgridheader",{"_index":3707,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getischeckbox",{"_index":2726,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["getisloopingprogressbar",{"_index":2028,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getistooltipvisible",{"_index":3506,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getisunitdropdowndisplayed",{"_index":3262,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getloadingtext",{"_index":631,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getmaxfeaturedbuttonsonrow",{"_index":1508,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getmultiplier",{"_index":946,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getnativeelement",{"_index":3225,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnativeelement(cssselector",{"_index":3238,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnodetext",{"_index":555,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["getnodetext(el",{"_index":599,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getoutputvalue",{"_index":947,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["getoutputvalue(value",{"_index":994,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getpagesize",{"_index":1606,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpagesizeoptions",{"_index":1609,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpaginationtranslation(paginationdata",{"_index":1601,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getqueryfield",{"_index":2100,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getreadonlytext",{"_index":3249,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getregisteredproviders",{"_index":3011,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["getrunning",{"_index":625,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["gets",{"_index":115,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"contributing.html":{}}}],["getselectedoption",{"_index":2832,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["getselectedunit",{"_index":3258,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getselectedunitdisplayvalue",{"_index":3260,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getshouldshowcontextualactions",{"_index":266,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getshowerrors",{"_index":720,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["getsingleunitdisplaytext",{"_index":3264,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getsize",{"_index":3049,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["getspinner",{"_index":3571,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getstaticactions",{"_index":259,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getstaticfeaturedactions",{"_index":263,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getstring",{"_index":2407,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["getsucesstext",{"_index":629,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getter",{"_index":2966,"title":{},"body":{"classes/IdGenerator.html":{}}}],["gettext",{"_index":556,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettext(cssselector",{"_index":602,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettexts",{"_index":557,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["gettexts(cssselector",{"_index":607,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getting",{"_index":2080,"title":{"contributing.html":{},"index.html":{}},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gettooltip",{"_index":3518,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcontent",{"_index":3516,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcount",{"_index":3512,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipposition",{"_index":3510,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipsize",{"_index":3504,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltiptext",{"_index":3508,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipvisibility",{"_index":3514,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getunit",{"_index":2244,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunitformcontrol",{"_index":3256,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunitname",{"_index":948,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitnametranslationkey",{"_index":942,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitoptions",{"_index":2241,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunlimitedformcontrol",{"_index":3252,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvalue",{"_index":2061,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getvalueformcontrol",{"_index":3254,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvaluewithunittranslationkey",{"_index":943,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getwrapcharacter(inputposition",{"_index":2339,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["getwrapcharacter(position",{"_index":2336,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["gfm",{"_index":3843,"title":{},"body":{"contributing.html":{}}}],["ghpages",{"_index":3972,"title":{},"body":{"dependencies.html":{}}}],["ghz",{"_index":1002,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["git",{"_index":3813,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git@github.com:vmware/vmware",{"_index":4110,"title":{},"body":{"index.html":{}}}],["github",{"_index":3837,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":245,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":605,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":29,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["globalbutton",{"_index":840,"title":{"interfaces/GlobalButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["globalbuttons",{"_index":853,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["go",{"_index":1322,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["goes",{"_index":1321,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["going",{"_index":899,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["greater",{"_index":2435,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan",{"_index":2408,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan(value",{"_index":2448,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto",{"_index":2409,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto(value",{"_index":2450,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["grid",{"_index":806,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["grid's",{"_index":2545,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["grid.getfilter(filtertype",{"_index":2554,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["grid.parentnode.clientheight",{"_index":1618,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.datagrid",{"_index":1620,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.vcd",{"_index":1629,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('clr",{"_index":1623,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumn",{"_index":759,"title":{"interfaces/GridColumn.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.filter",{"_index":2053,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gridcolumn.filterrendererspec",{"_index":2136,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.renderer",{"_index":919,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["gridcolumnhideable",{"_index":828,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridcolumnhideable.never",{"_index":1596,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddata",{"_index":2513,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["griddata(result",{"_index":1357,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddatafetchresult",{"_index":1285,"title":{"interfaces/GridDataFetchResult.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridheader",{"_index":3705,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gridheight",{"_index":1617,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridrefresh",{"_index":1459,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grids",{"_index":161,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["gridselectiontype",{"_index":1278,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridselectiontype.multi",{"_index":1551,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.none",{"_index":1442,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.single",{"_index":1542,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridstate",{"_index":1328,"title":{"interfaces/GridState.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridstatechanged(state",{"_index":1579,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gropued",{"_index":3349,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["group",{"_index":2817,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["group.hide",{"_index":2822,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["grouped",{"_index":119,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["groups",{"_index":1024,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["grow",{"_index":2821,"title":{},"body":{"components/FormInputComponent.html":{}}}],["gt",{"_index":2465,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":4115,"title":{},"body":{"index.html":{}}}],["h",{"_index":2653,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["handle",{"_index":2769,"title":{},"body":{"components/FormInputComponent.html":{}}}],["handled",{"_index":3290,"title":{},"body":{"classes/Percent.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handleitem(item",{"_index":3432,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["handler",{"_index":67,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handlerdata",{"_index":56,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["happen",{"_index":2927,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["happens",{"_index":4078,"title":{},"body":{"index.html":{}}}],["hascontextualbuttons",{"_index":1525,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hasdgstringfilter",{"_index":2547,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["hasfinder",{"_index":2692,"title":{"interfaces/HasFinder.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["haspotentialinjection",{"_index":1755,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(row",{"_index":1806,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(rows",{"_index":1776,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["head",{"_index":4103,"title":{},"body":{"index.html":{}}}],["header",{"_index":862,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["header').offsetheight",{"_index":1621,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["header.offsetheight",{"_index":1630,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["headerheight",{"_index":1619,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heading",{"_index":867,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["headless",{"_index":4142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":1138,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["height(height",{"_index":1411,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heightcssvalue",{"_index":1413,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["help",{"_index":2135,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["helper.ts",{"_index":3464,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["helper.ts:102",{"_index":3515,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:106",{"_index":3490,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:110",{"_index":3517,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:114",{"_index":3519,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:126",{"_index":3556,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:127",{"_index":3558,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:128",{"_index":3559,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:13",{"_index":3482,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:130",{"_index":3560,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:131",{"_index":3561,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:132",{"_index":3557,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:16",{"_index":3483,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:18",{"_index":3485,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:20",{"_index":3487,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:22",{"_index":3489,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:24",{"_index":3497,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:28",{"_index":3499,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:44",{"_index":3501,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:49",{"_index":3503,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:54",{"_index":3505,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:58",{"_index":3493,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:62",{"_index":3494,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:66",{"_index":3495,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:70",{"_index":3491,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:74",{"_index":3492,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:78",{"_index":3507,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:82",{"_index":3509,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:86",{"_index":3511,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:98",{"_index":3513,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helps",{"_index":915,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["hence",{"_index":3351,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["here",{"_index":1307,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["here;(created=lt=datetime,uptime=gt=3600000",{"_index":2401,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["hertz",{"_index":2886,"title":{"classes/Hertz.html":{}},"body":{"classes/Hertz.html":{},"coverage.html":{}}}],["hertz(1",{"_index":2892,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e12",{"_index":2898,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e3",{"_index":2894,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e6",{"_index":2896,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e9",{"_index":2890,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.ghz",{"_index":2903,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.hz",{"_index":2900,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.khz",{"_index":2901,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.mhz",{"_index":2902,"title":{},"body":{"classes/Hertz.html":{}}}],["hidden",{"_index":100,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["hide",{"_index":832,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["hideable",{"_index":869,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["hidedelay",{"_index":3467,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hides",{"_index":3566,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["hidetimeout",{"_index":1072,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hidetooltip(delay",{"_index":1116,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hiding",{"_index":1071,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hint",{"_index":1912,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["hintposition",{"_index":2744,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["hook",{"_index":2796,"title":{},"body":{"components/FormInputComponent.html":{}}}],["host",{"_index":1077,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["host(.site",{"_index":2843,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["hostbinding",{"_index":1246,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostbinding('class.fill",{"_index":1417,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostcomponent",{"_index":2658,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["hostelement",{"_index":1199,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["hostposition",{"_index":3474,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hostposition(quadrant",{"_index":3522,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hosttext",{"_index":3475,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hosttext(text",{"_index":3528,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hover",{"_index":1087,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["href",{"_index":1492,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["html",{"_index":320,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["htmlbaseelement",{"_index":2619,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlelement",{"_index":1067,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlelements",{"_index":2583,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlinputelement",{"_index":2626,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmltextareaelement",{"_index":2627,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["http://localhost:4200",{"_index":4046,"title":{},"body":{"index.html":{}}}],["https://github.com/vmware/clarity/issues/2265",{"_index":1366,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["https://github.com/vmware/vmware",{"_index":4074,"title":{},"body":{"index.html":{}}}],["https://jira.eng.vmware.com/browse/vducc",{"_index":902,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/59055154/typescript",{"_index":924,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["hz",{"_index":2887,"title":{},"body":{"classes/Hertz.html":{}}}],["i.e",{"_index":3391,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["i18n",{"_index":70,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["i18nmodule",{"_index":3591,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["icon",{"_index":117,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["icon_and_text",{"_index":4010,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["icons",{"_index":251,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["iconshape",{"_index":2698,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["id",{"_index":656,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["idcounter",{"_index":2960,"title":{},"body":{"classes/IdGenerator.html":{}}}],["identifier",{"_index":1491,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{}}}],["identifiers",{"_index":1861,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["identify",{"_index":884,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["idgenerator",{"_index":726,"title":{"classes/IdGenerator.html":{}},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idgenerator#id",{"_index":2969,"title":{},"body":{"classes/IdGenerator.html":{}}}],["idgenerator('base",{"_index":734,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["idgenerator('vcd",{"_index":2184,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["idgenerator.generate",{"_index":737,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["idgenerator.idcounter",{"_index":2968,"title":{},"body":{"classes/IdGenerator.html":{}}}],["ids",{"_index":2182,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ie",{"_index":1792,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["ignore",{"_index":2639,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ignored",{"_index":2074,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["ime",{"_index":2777,"title":{},"body":{"components/FormInputComponent.html":{}}}],["immediately",{"_index":579,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implement",{"_index":1031,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementation",{"_index":2569,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementations",{"_index":2598,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implemented",{"_index":1687,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["implements",{"_index":652,"title":{},"body":{"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["implies",{"_index":1032,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["import",{"_index":270,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["imports",{"_index":2534,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["inactive",{"_index":812,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivebuttondisplaymode",{"_index":810,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivebuttondisplaymode.disable",{"_index":1387,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["inactivedisplaymode",{"_index":807,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["inc",{"_index":2381,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["include",{"_index":3064,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["included",{"_index":2437,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["including",{"_index":4055,"title":{},"body":{"index.html":{}}}],["indefinite",{"_index":2030,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["indeterminate",{"_index":1870,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexofsubscription",{"_index":2951,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["indicate",{"_index":1855,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicates",{"_index":95,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicating",{"_index":1869,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["indicator",{"_index":525,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator'},{'name",{"_index":359,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator.component",{"_index":3732,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicator.component.html",{"_index":3021,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.scss",{"_index":3020,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts",{"_index":3016,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indicator.component.ts:27",{"_index":3048,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:38",{"_index":3034,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:43",{"_index":3026,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:49",{"_index":3028,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:55",{"_index":3027,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:62",{"_index":3031,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:73",{"_index":3050,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.module",{"_index":3668,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["indicator.module.ts",{"_index":3731,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicators",{"_index":1292,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["indicatortype",{"_index":1433,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["infer",{"_index":926,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["inference",{"_index":922,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["information",{"_index":792,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["inheritdoc",{"_index":2126,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["inherited",{"_index":526,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["initial",{"_index":681,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["initialize",{"_index":2076,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initializing",{"_index":1694,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["initially",{"_index":2111,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialvalue",{"_index":657,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["initiate",{"_index":1850,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["inject",{"_index":536,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"pipes/NestedPropertyPipe.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inject(activitypromiseresolver",{"_index":538,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["injectable",{"_index":1747,"title":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["injectables",{"_index":1749,"title":{},"body":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"overview.html":{}}}],["injection",{"_index":1768,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["inline",{"_index":139,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["inner",{"_index":1068,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innerheight",{"_index":1157,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innervalue",{"_index":1824,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innervalue.replace(/\"/g",{"_index":1830,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innerwidth",{"_index":1156,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":107,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input'},{'name",{"_index":354,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input('vcdshowclippedtext",{"_index":1187,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["input.component",{"_index":3268,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{}}}],["input.component.html",{"_index":2741,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.scss",{"_index":2740,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts",{"_index":2735,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input.component.ts:104",{"_index":2775,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:121",{"_index":2773,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:127",{"_index":2772,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:38",{"_index":3078,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.component.ts:39",{"_index":3077,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.component.ts:40",{"_index":2764,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts:46",{"_index":2762,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:52",{"_index":2755,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:57",{"_index":2766,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:62",{"_index":2765,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:67",{"_index":2757,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:72",{"_index":2753,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:77",{"_index":2751,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:82",{"_index":2781,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:88",{"_index":2767,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:93",{"_index":2750,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.disable",{"_index":3130,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.enable",{"_index":3132,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.widget",{"_index":3224,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["input/form",{"_index":2734,"title":{},"body":{"components/FormInputComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["input/number",{"_index":3071,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["input[max",{"_index":3075,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input[max]'},{'name",{"_index":373,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input[min],vcd",{"_index":372,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inputchanged",{"_index":2743,"title":{},"body":{"components/FormInputComponent.html":{}}}],["inputposition",{"_index":2341,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["inputs",{"_index":185,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["inputunit",{"_index":3166,"title":{},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{}}}],["inputunit.findbestunit(value",{"_index":3649,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["inputvalueunit",{"_index":3108,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["insert",{"_index":2999,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["insertindex",{"_index":2995,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["inside",{"_index":248,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["inspired",{"_index":3330,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["installed",{"_index":4056,"title":{},"body":{"index.html":{}}}],["instance",{"_index":565,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["instancecount",{"_index":1186,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["instanceof",{"_index":1652,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["instances",{"_index":1066,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["instancetype",{"_index":2668,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instantiate",{"_index":2169,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiated",{"_index":1722,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiating",{"_index":2602,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instead",{"_index":708,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["insures",{"_index":3372,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["intellij",{"_index":3335,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["interact",{"_index":2605,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"overview.html":{}}}],["interfaces/can",{"_index":730,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["interfaces/component",{"_index":767,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["interfaces/datagrid",{"_index":771,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["internalization",{"_index":4039,"title":{},"body":{"index.html":{}}}],["internally",{"_index":2180,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["internalregistrationdata",{"_index":2970,"title":{"interfaces/InternalRegistrationData.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["internals",{"_index":2575,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interrupt",{"_index":1996,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["invoking",{"_index":3197,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["irrespective",{"_index":32,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["is(\"isvapptemplate\").equalto(true",{"_index":2393,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(\"vcd\").equalto(vcdid",{"_index":2394,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(property",{"_index":2452,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["isactiondisabled",{"_index":183,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["isactiondisabled(action",{"_index":232,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["isactive",{"_index":808,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["isbuttondisabled(button",{"_index":1517,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isbuttonshown(button",{"_index":1513,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ischeckbox",{"_index":2700,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["iscolumnhideable(column",{"_index":1594,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isdisabled",{"_index":696,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["isdropdownopen",{"_index":1950,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isexportenabled",{"_index":1964,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isfindparamsobject",{"_index":3941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfindparamsobject(params",{"_index":2670,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["isfinite(control.value",{"_index":2870,"title":{},"body":{"classes/FormValidators.html":{}}}],["isloading",{"_index":1453,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["isloopingprogressbar",{"_index":2015,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["ismouseover",{"_index":1078,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["isn't",{"_index":1545,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isnan(parsefloat(control.value",{"_index":2869,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnullorundefined",{"_index":3866,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(item[property",{"_index":3217,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnullorundefined(value",{"_index":3214,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(value[nestedprop",{"_index":3215,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnumber",{"_index":2868,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange",{"_index":2849,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange(min",{"_index":2857,"title":{},"body":{"classes/FormValidators.html":{}}}],["isodatevalue",{"_index":2800,"title":{},"body":{"components/FormInputComponent.html":{}}}],["isoverflowing",{"_index":1225,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["isreadonly",{"_index":665,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["isrequestpending",{"_index":1939,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isrowexpanded",{"_index":1438,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isspinnerspinning",{"_index":3572,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["issue",{"_index":3802,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":3846,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["istanbul",{"_index":2645,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["istooltipvisible",{"_index":3476,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["istranslatable",{"_index":3440,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["isubscriptiontracker",{"_index":2912,"title":{"interfaces/ISubscriptionTracker.html":{}},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["isunitdropdowndisplayed",{"_index":3235,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["isvapptemplate==true;vcd==some",{"_index":2399,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["it's",{"_index":859,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":64,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{}}}],["item.getmultiplier",{"_index":3281,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["item.handler",{"_index":3433,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["item.interface",{"_index":817,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["item.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["item.object",{"_index":493,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item.response.error",{"_index":495,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item[property",{"_index":3218,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["itemclicked(item",{"_index":3376,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["itemindex",{"_index":1570,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["items",{"_index":403,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["itemsperpage",{"_index":1298,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["itself",{"_index":3337,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{}}}],["jan",{"_index":1789,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["jasmine",{"_index":3465,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["job",{"_index":4098,"title":{},"body":{"index.html":{}}}],["js",{"_index":3963,"title":{},"body":{"dependencies.html":{}}}],["js/ts",{"_index":2594,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["json",{"_index":1862,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"index.html":{}}}],["justify",{"_index":3068,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["karma",{"_index":3978,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["kb",{"_index":933,"title":{},"body":{"classes/Bytes.html":{}}}],["kbdshortcut",{"_index":3601,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["keep",{"_index":4114,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["keyboard",{"_index":613,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent",{"_index":3379,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["keyboardevent('keydown",{"_index":2624,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent('keyup",{"_index":2625,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keydow",{"_index":615,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyof",{"_index":3052,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["keys",{"_index":709,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["khz",{"_index":2888,"title":{},"body":{"classes/Hertz.html":{}}}],["kinds",{"_index":1646,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["know",{"_index":392,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["known",{"_index":1364,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["knows",{"_index":2915,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["label",{"_index":132,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["label:first",{"_index":2840,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["label:nth",{"_index":2043,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["labels",{"_index":707,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["last",{"_index":1073,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["lastitem",{"_index":1336,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["later",{"_index":2787,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["latest",{"_index":3400,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazy",{"_index":3347,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazystring",{"_index":513,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["le",{"_index":2468,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char",{"_index":1804,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char.test(encodevalue(cell",{"_index":1808,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leading_control_char.test(value",{"_index":1841,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leaks",{"_index":2591,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["leaky",{"_index":2690,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["lease",{"_index":3819,"title":{},"body":{"contributing.html":{}}}],["left",{"_index":1049,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":319,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["length",{"_index":226,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["lengthy",{"_index":1873,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["less",{"_index":227,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["lessthan",{"_index":2410,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthan(value",{"_index":2454,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto",{"_index":2411,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto(value",{"_index":2456,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["level",{"_index":898,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["lg",{"_index":907,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["lg(large",{"_index":3046,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["lib/directives/show",{"_index":819,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["library",{"_index":388,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["license",{"_index":2383,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["life",{"_index":2794,"title":{},"body":{"components/FormInputComponent.html":{}}}],["limit",{"_index":125,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["limited",{"_index":3123,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line",{"_index":2642,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["line:directive",{"_index":3084,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line:triple",{"_index":3154,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["line:typedef",{"_index":794,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["lines",{"_index":1834,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["link.click",{"_index":1802,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('download",{"_index":1799,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('href",{"_index":1798,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.style.visibility",{"_index":1800,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["list",{"_index":20,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["listed",{"_index":1286,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listen",{"_index":1474,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listeners",{"_index":1348,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["lit",{"_index":3980,"title":{},"body":{"dependencies.html":{}}}],["literal",{"_index":17,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["live",{"_index":3353,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["load",{"_index":894,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["loaded",{"_index":1560,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["loading",{"_index":358,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["loading/loading",{"_index":3667,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["loadingindicatorcomponent",{"_index":357,"title":{"components/LoadingIndicatorComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{}}}],["loadingmessage",{"_index":509,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["loadingtext",{"_index":561,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["loadingtextkey",{"_index":3024,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["local",{"_index":2738,"title":{},"body":{"components/FormInputComponent.html":{}}}],["locale_id",{"_index":3205,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localeid",{"_index":3209,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localized",{"_index":3630,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["logic",{"_index":1238,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["logical",{"_index":3777,"title":{},"body":{"contributing.html":{}}}],["long",{"_index":1083,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1185,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["look",{"_index":3352,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["looks",{"_index":3773,"title":{},"body":{"contributing.html":{}}}],["looping",{"_index":2031,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["lower",{"_index":2434,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lt",{"_index":2467,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":2142,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":3331,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["made",{"_index":896,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["magic",{"_index":1308,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["magically",{"_index":1663,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["main",{"_index":41,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["make",{"_index":649,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["makes",{"_index":921,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["making",{"_index":916,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["male",{"_index":3189,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":567,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manipulate",{"_index":2657,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manual",{"_index":3797,"title":{},"body":{"contributing.html":{}}}],["manually",{"_index":543,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":122,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["map",{"_index":1390,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["map(selectedoption",{"_index":2204,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["mapped",{"_index":1561,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["mapselectedrecords(currentselection",{"_index":1565,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["margin",{"_index":2282,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{}}}],["mark",{"_index":3395,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["marked",{"_index":261,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["marks",{"_index":2356,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["massachusetts",{"_index":2143,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["master",{"_index":3817,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["match",{"_index":2419,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["matching",{"_index":146,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.hostelement.getboundingclientrect().width",{"_index":1229,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["math.floor(availableheight",{"_index":1634,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(default_size",{"_index":1635,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(this.getfeaturedbuttons([item]).length",{"_index":1511,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["matter",{"_index":2523,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["max",{"_index":1509,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["max_header_height",{"_index":1269,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1265,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":2745,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["maxnumberlength",{"_index":2217,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["mb",{"_index":934,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["md",{"_index":1057,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["md(medium",{"_index":3042,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mean",{"_index":414,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["means",{"_index":2990,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["measure",{"_index":3044,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["measures",{"_index":3040,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["medium",{"_index":3043,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["members",{"_index":3786,"title":{},"body":{"contributing.html":{}}}],["menu",{"_index":42,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["menu'},{'name",{"_index":325,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["menu.component",{"_index":3655,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu.component.html",{"_index":171,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.scss",{"_index":169,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts",{"_index":157,"title":{},"body":{"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["menu.component.ts:103",{"_index":212,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:112",{"_index":260,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:120",{"_index":264,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:125",{"_index":231,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:142",{"_index":224,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:154",{"_index":218,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:165",{"_index":236,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:172",{"_index":233,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:179",{"_index":267,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:20",{"_index":206,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:26",{"_index":199,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:31",{"_index":203,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:36",{"_index":207,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:41",{"_index":210,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:46",{"_index":244,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:47",{"_index":197,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:55",{"_index":254,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:59",{"_index":243,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:71",{"_index":193,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:81",{"_index":257,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:88",{"_index":247,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:93",{"_index":249,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:98",{"_index":250,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.module.ts",{"_index":3654,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu/action",{"_index":156,"title":{},"body":{"components/ActionMenuComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{}}}],["merge",{"_index":3804,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["message",{"_index":386,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["messageformat",{"_index":3982,"title":{},"body":{"dependencies.html":{}}}],["messages",{"_index":3779,"title":{},"body":{"contributing.html":{}}}],["messaging",{"_index":2863,"title":{},"body":{"classes/FormValidators.html":{}}}],["metadata",{"_index":165,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["method",{"_index":408,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":178,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["mhz",{"_index":1003,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["milliseconds",{"_index":2105,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1785,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["min",{"_index":2746,"title":{},"body":{"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["minimum",{"_index":2763,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["minmaxvalidator",{"_index":371,"title":{"directives/MinMaxValidator.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":4140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4001,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":789,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/functions.html":{}}}],["mockdata",{"_index":3185,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrecord",{"_index":762,"title":{"interfaces/MockRecord.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocktranslationservice",{"_index":2528,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["modal",{"_index":3018,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mode",{"_index":711,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modifiers(eg",{"_index":1473,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modify",{"_index":1475,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["module",{"_index":2531,"title":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["modules",{"_index":3313,"title":{"modules.html":{}},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":458,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["monitoredit",{"_index":444,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitoredit(activityresolutionpromise",{"_index":461,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget",{"_index":445,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget(activityresolutionpromise",{"_index":466,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall",{"_index":446,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall(activityresolutionpromises",{"_index":468,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitors",{"_index":463,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monorepo",{"_index":4028,"title":{},"body":{"index.html":{}}}],["more",{"_index":3435,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["morevalues",{"_index":2442,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.foreach(val",{"_index":2506,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.length",{"_index":2505,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["mouse",{"_index":1042,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mouseevent",{"_index":1171,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["mouseevent('mouseenter",{"_index":3532,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mouseevent('mouseleave",{"_index":3535,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mousein",{"_index":1173,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["mouseout",{"_index":1085,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mouseoutdelay",{"_index":908,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mousetrap",{"_index":3984,"title":{},"body":{"dependencies.html":{}}}],["movemouseoffhost",{"_index":3469,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseofftooltip",{"_index":3470,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoverhost",{"_index":3471,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoversecondhost",{"_index":3472,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseovertooltip",{"_index":3473,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["multi",{"_index":1281,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["multiple",{"_index":90,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["multiplier",{"_index":987,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["multiselect",{"_index":339,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["multiselection",{"_index":1455,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["multiselectoption",{"_index":2179,"title":{"interfaces/MultiSelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["multiselectoptioninternal",{"_index":2167,"title":{"interfaces/MultiSelectOptionInternal.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["name",{"_index":215,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":2599,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["names",{"_index":1762,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["nativeelement",{"_index":2618,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.click",{"_index":2621,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.dispatchevent(new",{"_index":2623,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.value",{"_index":2628,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["navigate",{"_index":4045,"title":{},"body":{"index.html":{}}}],["navigator.mssaveblob",{"_index":1793,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["navigator.mssaveblob(blob",{"_index":1794,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["nbsp",{"_index":735,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nc",{"_index":2144,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["need",{"_index":877,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":874,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["needs",{"_index":1719,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["negative",{"_index":2998,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["neq",{"_index":2470,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ness",{"_index":647,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nested",{"_index":885,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{}}}],["nestedprop",{"_index":3213,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedproperty",{"_index":3198,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedpropertypipe",{"_index":3192,"title":{"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["never",{"_index":831,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":733,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":1562,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords",{"_index":1566,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords.find",{"_index":1569,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["next",{"_index":716,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["nextdisabled",{"_index":1192,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["nextselection",{"_index":1552,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ng",{"_index":2279,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"index.html":{}}}],["ng_validators",{"_index":3073,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["ngafterviewinit",{"_index":1662,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ngcontrol",{"_index":671,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["ngcontrol.valueaccessor",{"_index":738,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["ngmodule",{"_index":3323,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["ngondestroy",{"_index":1216,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["ngoninit",{"_index":1201,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["nightly",{"_index":4087,"title":{},"body":{"index.html":{}}}],["node",{"_index":584,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":609,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["non",{"_index":98,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["none",{"_index":1283,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["normal",{"_index":2842,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["normally",{"_index":1289,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["note",{"_index":920,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["notequalto",{"_index":2412,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notequalto(value",{"_index":2458,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notext",{"_index":1904,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["nothing",{"_index":3407,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["notification",{"_index":3838,"title":{},"body":{"contributing.html":{}}}],["notifications",{"_index":1347,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["nowrap",{"_index":1214,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["npm",{"_index":4043,"title":{},"body":{"index.html":{}}}],["npm's",{"_index":4085,"title":{},"body":{"index.html":{}}}],["null",{"_index":194,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":2810,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":126,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number(math.round(number(value",{"_index":1684,"title":{},"body":{"classes/CommonUtil.html":{}}}],["number.max_safe_integer",{"_index":2754,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["number.max_safe_integer.tostring().length",{"_index":2237,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["number.min_safe_integer",{"_index":2761,"title":{},"body":{"components/FormInputComponent.html":{}}}],["numbers",{"_index":1682,"title":{},"body":{"classes/CommonUtil.html":{},"classes/FilterBuilder.html":{}}}],["numberwithunitforminputcomponent",{"_index":360,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["numberwithunitforminputcomponent.formcontrol",{"_index":3072,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["numberwithunitforminputwidgetobject",{"_index":3223,"title":{"classes/NumberWithUnitFormInputWidgetObject.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["numeric",{"_index":342,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["numerical",{"_index":3093,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["obj",{"_index":3196,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["object",{"_index":425,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign(defaults",{"_index":3524,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.assign(el.style",{"_index":1182,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["object.assign(this.host.style",{"_index":3525,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.keys(config).foreach(key",{"_index":281,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["object.keys(rec).map(key",{"_index":1989,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(records[0]).map(fieldname",{"_index":1985,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(sizes).indexof(size",{"_index":3054,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["object.keys(this.formcontrol.errors",{"_index":746,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["object.keys(this.formgroup.controls).foreach(control",{"_index":2188,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue",{"_index":2201,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue()).filter(frmctrl",{"_index":2207,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(tooltipposition",{"_index":3541,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.ts",{"_index":2560,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["object.ts:101",{"_index":3750,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:115",{"_index":3747,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:123",{"_index":3748,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:127",{"_index":3746,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:15",{"_index":3237,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:17",{"_index":3246,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:173",{"_index":3734,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:178",{"_index":3733,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:192",{"_index":3739,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:21",{"_index":3248,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:217",{"_index":3737,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:229",{"_index":3735,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:27",{"_index":3740,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:28",{"_index":3250,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:32",{"_index":3253,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:36",{"_index":3255,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:40",{"_index":3257,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:42",{"_index":3741,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:44",{"_index":3241,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:45",{"_index":3743,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:48",{"_index":3243,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:52",{"_index":3259,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:54",{"_index":3744,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:56",{"_index":3261,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:62",{"_index":3745,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:65",{"_index":3245,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:72",{"_index":3244,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:73",{"_index":3742,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:77",{"_index":3239,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:81",{"_index":3263,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:87",{"_index":3749,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:88",{"_index":3265,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object_property_separator",{"_index":3206,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectandresponse",{"_index":394,"title":{"interfaces/ObjectAndResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["objects",{"_index":3338,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["objet",{"_index":1319,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["obs",{"_index":2119,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["observable",{"_index":1254,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable.subscribe(tosubscriber(observerornext",{"_index":2948,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observables",{"_index":2918,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observerornext",{"_index":2921,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["official",{"_index":4082,"title":{},"body":{"index.html":{}}}],["old",{"_index":3389,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onalertclosedchange",{"_index":2350,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onalertclosedchange(closed",{"_index":2368,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onarrowdown(event",{"_index":3378,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onarrowup(event",{"_index":3382,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onbeforesetconfig",{"_index":2062,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["onbeforesetconfig(config",{"_index":2087,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["once",{"_index":1852,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["onchange",{"_index":658,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["onclickexport",{"_index":1951,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["ondestroy",{"_index":1045,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["ondestroy.ngondestroy",{"_index":2942,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["one",{"_index":440,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["onenterkey(event",{"_index":3384,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onerrorclosed",{"_index":506,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ones",{"_index":3428,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["oninit",{"_index":1046,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["only.interface",{"_index":732,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["only.interface.ts",{"_index":1030,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["onmouseenter",{"_index":1112,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmousein",{"_index":1220,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onmouseleave",{"_index":1114,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmouseout",{"_index":1224,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onsuccessclosed",{"_index":507,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ontop",{"_index":1432,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ontouch",{"_index":659,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontouched",{"_index":693,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontransitionend",{"_index":1233,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["ontransitionend(e",{"_index":1125,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["opacity",{"_index":1099,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1927,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["open(open",{"_index":3360,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["open(value",{"_index":1928,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["open/close",{"_index":2024,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["openchange",{"_index":1934,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["opened",{"_index":1884,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["opening",{"_index":3371,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["opens",{"_index":2543,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["operation",{"_index":88,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["operator",{"_index":2423,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators",{"_index":2464,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["operators.and",{"_index":2483,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators.or",{"_index":2478,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["opposite",{"_index":1150,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1311,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{}}}],["option.display",{"_index":2211,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.istranslatable",{"_index":2210,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.ts",{"_index":3439,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["option.value",{"_index":2305,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{}}}],["option.value.tostring",{"_index":2836,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["optional",{"_index":14,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":138,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["options.indexof(this.pagesize",{"_index":1611,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.push(this.pagesize",{"_index":1612,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.sort((a",{"_index":1613,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["optionsformgroup",{"_index":1945,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["or(...conditions",{"_index":2489,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["or(conditions",{"_index":2460,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["order",{"_index":2778,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["ordered",{"_index":847,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["origin",{"_index":3760,"title":{},"body":{"contributing.html":{}}}],["originalondestroy",{"_index":2944,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["originalondestroy.call(destroyable",{"_index":2947,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["osx",{"_index":3332,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["otherwise",{"_index":2338,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"contributing.html":{}}}],["out",{"_index":979,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["outlet",{"_index":1718,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive",{"_index":3698,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["outlet.directive.ts",{"_index":1698,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["outlet.directive.ts:29",{"_index":1725,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:30",{"_index":1716,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:40",{"_index":1717,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:52",{"_index":1723,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:63",{"_index":1721,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:70",{"_index":1724,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outline",{"_index":3770,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":1247,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["outputnumber",{"_index":1027,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputs",{"_index":1339,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["outputunit",{"_index":995,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["outputunit.multiplier",{"_index":1020,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputunit.unitname",{"_index":3635,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["outside",{"_index":2095,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["over",{"_index":1076,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["overflow",{"_index":1212,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflowing",{"_index":1210,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflows",{"_index":1226,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overlay",{"_index":3029,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["override",{"_index":389,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["overrides",{"_index":813,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["overview",{"_index":4119,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwriting",{"_index":1429,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["p:first",{"_index":2825,"title":{},"body":{"components/FormInputComponent.html":{}}}],["package",{"_index":3950,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4058,"title":{},"body":{"index.html":{}}}],["pad",{"_index":3904,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["pad(date.getdate",{"_index":2806,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.gethours",{"_index":2807,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getminutes",{"_index":2808,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getmonth",{"_index":2805,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(num",{"_index":2809,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["padding",{"_index":2815,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["page",{"_index":1259,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["page(they",{"_index":1305,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagenumber",{"_index":1297,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pages",{"_index":1303,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pagesize",{"_index":1309,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagesizeoptions",{"_index":1301,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagination",{"_index":1275,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["pagination(pagination",{"_index":1402,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationcallback",{"_index":1334,"title":{"interfaces/PaginationCallback.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationcomponent",{"_index":1462,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationconfiguration",{"_index":1300,"title":{"interfaces/PaginationConfiguration.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationdata.firstitem",{"_index":1603,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.lastitem",{"_index":1604,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.totalitems",{"_index":1605,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdropdowntext",{"_index":1445,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationtranslationkey",{"_index":1469,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionation",{"_index":1294,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionationinformation",{"_index":1296,"title":{"interfaces/PagionationInformation.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["palo",{"_index":3187,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pane",{"_index":1317,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["param",{"_index":84,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":412,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["parameters",{"_index":214,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1458,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params.tagname",{"_index":2682,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params.woconstructor.tagname",{"_index":2681,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent",{"_index":573,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(by.css(cssselector)).nativeelement",{"_index":2620,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(query",{"_index":2616,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.queryall(query",{"_index":2617,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["part",{"_index":901,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["partial",{"_index":1181,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/FilterBuilder.html":{},"directives/ShowClippedTextDirective.html":{}}}],["partialobserver",{"_index":2922,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["pased",{"_index":2638,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pass",{"_index":582,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["passed",{"_index":66,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["passes",{"_index":2925,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["passing",{"_index":238,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["patch",{"_index":3766,"title":{},"body":{"contributing.html":{}}}],["pattern",{"_index":2570,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["peer",{"_index":3999,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["per",{"_index":1304,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["percent",{"_index":3267,"title":{"classes/Percent.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"coverage.html":{}}}],["percent(0.01",{"_index":3306,"title":{},"body":{"classes/Percent.html":{}}}],["percent(1",{"_index":3304,"title":{},"body":{"classes/Percent.html":{}}}],["percent.zero_to_1",{"_index":3284,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["percent.zero_to_100",{"_index":3283,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["perform",{"_index":2091,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["performed",{"_index":68,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["performer",{"_index":456,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivities(activityresolutionpromises",{"_index":490,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivity(activityresolutionpromise",{"_index":485,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["person",{"_index":3186,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pipe",{"_index":2874,"title":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"coverage.html":{}}}],["pipeline",{"_index":4080,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":2876,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["pipes/function",{"_index":3700,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["pipesmodule",{"_index":3312,"title":{"modules/PipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["pipetransform",{"_index":2884,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["pixels",{"_index":1268,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["placed",{"_index":1444,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["placeholder",{"_index":2747,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{}}}],["please",{"_index":1231,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plugin",{"_index":4035,"title":{},"body":{"index.html":{}}}],["point",{"_index":1680,"title":{},"body":{"classes/CommonUtil.html":{}}}],["popup",{"_index":1064,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":648,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":142,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["possibly",{"_index":2655,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["posts",{"_index":464,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["potential",{"_index":2588,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["potentially",{"_index":1872,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pr",{"_index":3821,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pre",{"_index":984,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["precision",{"_index":3641,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["predefined",{"_index":3169,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["prefer",{"_index":2604,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prefix",{"_index":2963,"title":{},"body":{"classes/IdGenerator.html":{}}}],["prefixed",{"_index":1821,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/IdGenerator.html":{},"miscellaneous/functions.html":{}}}],["prefixing",{"_index":1838,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["preid=dev",{"_index":4090,"title":{},"body":{"index.html":{}}}],["prerelease",{"_index":4089,"title":{},"body":{"index.html":{}}}],["present",{"_index":1564,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserving",{"_index":1428,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pressed",{"_index":809,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["presses",{"_index":3602,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["prevent",{"_index":1766,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["prevents",{"_index":1837,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["previousvalue",{"_index":1977,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["previousvalue[currentvalue.fieldname",{"_index":1976,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["primitives",{"_index":2441,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["prismjs",{"_index":3986,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":172,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["process",{"_index":390,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processes",{"_index":395,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processrow",{"_index":3873,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["processrow(row",{"_index":1782,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["produce",{"_index":2398,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["produces",{"_index":3200,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["programmatically",{"_index":3171,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["progress",{"_index":1856,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["project",{"_index":3753,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["projects",{"_index":4031,"title":{},"body":{"index.html":{}}}],["projects/.../action",{"_index":4003,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../base",{"_index":4137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../bold",{"_index":4011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../component",{"_index":4126,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../csv",{"_index":4013,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../data",{"_index":4009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../datagrid",{"_index":4006,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.component.ts",{"_index":4004,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.module.ts",{"_index":4136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../datagrid.wo.ts",{"_index":4133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../filter",{"_index":4012,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../form",{"_index":4005,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/.../form.module.ts",{"_index":4134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../loading",{"_index":4007,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../mock",{"_index":4138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../nested",{"_index":4015,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../number",{"_index":4139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../pipes.module.ts",{"_index":4135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../show",{"_index":4008,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../spotlight",{"_index":4128,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":4127,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../widget",{"_index":4014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects//package.json",{"_index":4092,"title":{},"body":{"index.html":{}}}],["projects/components",{"_index":4032,"title":{},"body":{"index.html":{}}}],["projects/components/src/action",{"_index":155,"title":{},"body":{"components/ActionMenuComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{}}}],["projects/components/src/common/activity",{"_index":379,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{}}}],["projects/components/src/common/error/error",{"_index":2343,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{}}}],["projects/components/src/common/interfaces/action",{"_index":6,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/interfaces/select",{"_index":3438,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["projects/components/src/common/loading/loading",{"_index":3015,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/pipes/nested",{"_index":3193,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/pipes/pipes.module.ts",{"_index":3321,"title":{},"body":{"modules/PipesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/subscription/subscription",{"_index":2913,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["projects/components/src/components.module.ts",{"_index":3675,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["projects/components/src/data",{"_index":1750,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.component.ts",{"_index":1236,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.module.ts",{"_index":3692,"title":{},"body":{"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/directives/component",{"_index":1697,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/filters/datagrid",{"_index":2049,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/interfaces/component",{"_index":1685,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/datagrid/interfaces/datagrid",{"_index":803,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/datagrid/mock",{"_index":3181,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/pipes/function",{"_index":2877,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/renderers/bold",{"_index":750,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/form/base",{"_index":640,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/form",{"_index":2694,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/form/form.module.ts",{"_index":3726,"title":{},"body":{"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/interfaces/can",{"_index":1029,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["projects/components/src/form/number",{"_index":3070,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/validators.ts",{"_index":2845,"title":{},"body":{"classes/FormValidators.html":{},"coverage.html":{}}}],["projects/components/src/form/validators.ts:17",{"_index":2851,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/form/validators.ts:32",{"_index":2859,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/lib/directives/show",{"_index":1038,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/spotlight",{"_index":2971,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/common",{"_index":1672,"title":{},"body":{"classes/CommonUtil.html":{},"coverage.html":{}}}],["projects/components/src/utils/filter",{"_index":2387,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/id",{"_index":2958,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/activity",{"_index":545,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/datagrid/datagrid.wo.ts",{"_index":3927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/test/datagrid/filter",{"_index":2509,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/test/datagrid/vcd",{"_index":3703,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/widget",{"_index":2559,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/types.ts",{"_index":4129,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/components/src/utils/unit/unit",{"_index":3628,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts",{"_index":929,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts:105",{"_index":3616,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:109",{"_index":2908,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:11",{"_index":3620,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:110",{"_index":2906,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:111",{"_index":2893,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:112",{"_index":2895,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:113",{"_index":2897,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:114",{"_index":2891,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:115",{"_index":2899,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:116",{"_index":2904,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:118",{"_index":2909,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:12",{"_index":3619,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:122",{"_index":2911,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:126",{"_index":2910,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:132",{"_index":966,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:133",{"_index":964,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:134",{"_index":950,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:135",{"_index":953,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:136",{"_index":955,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:137",{"_index":952,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:138",{"_index":957,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:139",{"_index":962,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:141",{"_index":971,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:145",{"_index":973,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:149",{"_index":972,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:162",{"_index":3303,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:163",{"_index":3300,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:171",{"_index":3305,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:172",{"_index":3307,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:174",{"_index":3311,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:178",{"_index":3310,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:188",{"_index":3309,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:24",{"_index":3623,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:28",{"_index":3625,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:37",{"_index":3624,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:45",{"_index":3622,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:54",{"_index":3627,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:61",{"_index":3626,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:71",{"_index":3621,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:89",{"_index":3615,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/examples",{"_index":4041,"title":{},"body":{"index.html":{}}}],["projects/i18n",{"_index":4040,"title":{},"body":{"index.html":{}}}],["projects/route",{"_index":4050,"title":{},"body":{"index.html":{}}}],["promise",{"_index":58,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["promise(resolve",{"_index":1995,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["promiseresolver",{"_index":460,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["proper",{"_index":2862,"title":{},"body":{"classes/FormValidators.html":{},"contributing.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["property",{"_index":871,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["property.pipe",{"_index":3324,"title":{},"body":{"modules/PipesModule.html":{}}}],["property.pipe.ts",{"_index":3194,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["property.pipe.ts:32",{"_index":3201,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["property.split(object_property_separator",{"_index":3211,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["protected",{"_index":550,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["protractor",{"_index":4071,"title":{},"body":{"index.html":{}}}],["provide",{"_index":473,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["provided",{"_index":889,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["providedin",{"_index":1779,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["provider",{"_index":2982,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["providers",{"_index":2536,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["provides",{"_index":1875,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["providing",{"_index":1695,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prs",{"_index":3808,"title":{},"body":{"contributing.html":{}}}],["public",{"_index":549,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["public/exported",{"_index":3785,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":4100,"title":{},"body":{"index.html":{}}}],["published",{"_index":4104,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":4077,"title":{},"body":{"index.html":{}}}],["pull",{"_index":3783,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pure",{"_index":2880,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["purpose",{"_index":2574,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["push",{"_index":3780,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pushes",{"_index":1346,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["put",{"_index":851,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["px",{"_index":1134,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quad",{"_index":1164,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quadrant",{"_index":1151,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":2578,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["query",{"_index":1327,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["queryfield",{"_index":2055,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["queryfieldname",{"_index":881,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["querying",{"_index":880,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["quotes",{"_index":1819,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["r",{"_index":55,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["range",{"_index":2860,"title":{},"body":{"classes/FormValidators.html":{}}}],["rbradford",{"_index":3989,"title":{},"body":{"dependencies.html":{}}}],["re",{"_index":2611,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reactiveformsmodule",{"_index":3589,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["read",{"_index":731,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["readme",{"_index":4037,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":646,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["readonlytext",{"_index":3230,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["reads",{"_index":3251,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["ready",{"_index":1935,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["really",{"_index":3399,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["rebase",{"_index":3816,"title":{},"body":{"contributing.html":{}}}],["rec",{"_index":837,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["rec[key",{"_index":1990,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["recalculating",{"_index":1636,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["receive",{"_index":585,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["receiving",{"_index":1198,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["recent",{"_index":3828,"title":{},"body":{"contributing.html":{}}}],["recommended",{"_index":2596,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["record",{"_index":89,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["record.name",{"_index":763,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["records",{"_index":85,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["records.map(rec",{"_index":1988,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["rect",{"_index":1131,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.height",{"_index":1139,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.left",{"_index":1135,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.top",{"_index":1133,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.width",{"_index":1137,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter",{"_index":1159,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.x",{"_index":1162,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.y",{"_index":1163,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["red",{"_index":2814,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["reduce",{"_index":2389,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["redundant",{"_index":1730,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["references",{"_index":3842,"title":{},"body":{"contributing.html":{}}}],["referencing",{"_index":3845,"title":{},"body":{"contributing.html":{}}}],["reflects",{"_index":890,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["refs/tags",{"_index":4112,"title":{},"body":{"index.html":{}}}],["register",{"_index":2987,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["registered",{"_index":2979,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeredproviders",{"_index":2975,"title":{"interfaces/RegisteredProviders.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["registering",{"_index":3007,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeronchange",{"_index":660,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registeronchange(onchange",{"_index":687,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched",{"_index":661,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched(ontouched",{"_index":691,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerprovider",{"_index":3604,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["registerprovider(provider",{"_index":2993,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registration",{"_index":2996,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata",{"_index":2994,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata.id",{"_index":3003,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationid",{"_index":3006,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrations",{"_index":2986,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["regular",{"_index":2649,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["related",{"_index":3827,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["relative",{"_index":1538,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["release",{"_index":4091,"title":{},"body":{"index.html":{}}}],["released",{"_index":2768,"title":{},"body":{"components/FormInputComponent.html":{}}}],["releases",{"_index":4083,"title":{},"body":{"index.html":{}}}],["reload",{"_index":4047,"title":{},"body":{"index.html":{}}}],["remember",{"_index":3388,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["remote",{"_index":4093,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1232,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["removecolumn",{"_index":1426,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(col",{"_index":1482,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(index",{"_index":2026,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["removed",{"_index":1037,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["render",{"_index":1316,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rendered",{"_index":835,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer",{"_index":761,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer'},{'name",{"_index":332,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["renderer(item",{"_index":2885,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.component",{"_index":788,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"modules/VcdDatagridModule.html":{}}}],["renderer.component.ts",{"_index":751,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.component.ts:41",{"_index":766,"title":{},"body":{"components/BoldTextRendererComponent.html":{}}}],["renderer.context",{"_index":1736,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.interface",{"_index":768,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer.interface.ts",{"_index":1686,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["renderer.pipe",{"_index":3701,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["renderer.pipe.ts",{"_index":2878,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["renderer.pipe.ts:17",{"_index":2883,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.rendererspec.type",{"_index":1729,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.wo.ts",{"_index":781,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.wo.ts:28",{"_index":782,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer.wo.ts:30",{"_index":783,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderers",{"_index":1647,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["renderers/bold",{"_index":3702,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["rendererspec",{"_index":757,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"directives/ComponentRendererOutletDirective.html":{}}}],["rendering",{"_index":753,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["renders",{"_index":158,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["repeat",{"_index":3803,"title":{},"body":{"contributing.html":{}}}],["replace",{"_index":1472,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["repo",{"_index":4027,"title":{},"body":{"index.html":{}}}],["repo(vmware/vmware",{"_index":4109,"title":{},"body":{"index.html":{}}}],["reporter",{"_index":455,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter'},{'name",{"_index":329,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component",{"_index":3669,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.component.html",{"_index":504,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts",{"_index":500,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["reporter.component.ts:20",{"_index":534,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:21",{"_index":533,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:22",{"_index":535,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:27",{"_index":3564,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:28",{"_index":512,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:36",{"_index":3568,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:40",{"_index":522,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:44",{"_index":3565,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:49",{"_index":519,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:52",{"_index":3567,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:57",{"_index":520,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:67",{"_index":516,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:74",{"_index":518,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:83",{"_index":521,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.module",{"_index":3676,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["reporter.module.ts",{"_index":3663,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.ts",{"_index":432,"title":{},"body":{"classes/ActivityReporter.html":{},"coverage.html":{}}}],["reporter.ts:13",{"_index":453,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:21",{"_index":479,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:27",{"_index":472,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:33",{"_index":478,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:38",{"_index":467,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:53",{"_index":469,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:73",{"_index":462,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.wo.ts",{"_index":546,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter.wo.ts:10",{"_index":562,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:11",{"_index":3573,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:12",{"_index":626,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:13",{"_index":3575,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:16",{"_index":628,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:17",{"_index":3576,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:20",{"_index":630,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:24",{"_index":632,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:33",{"_index":3574,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter/activity",{"_index":380,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{}}}],["reporter/banner",{"_index":499,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter/spinner",{"_index":3562,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporterror",{"_index":448,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporterror(errortext",{"_index":471,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporting",{"_index":437,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["reportsuccess",{"_index":449,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reportsuccess(successmessage",{"_index":477,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["repository",{"_index":3761,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":501,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/Percent.html":{}}}],["representation",{"_index":1284,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["represented",{"_index":3293,"title":{},"body":{"classes/Percent.html":{}}}],["representing",{"_index":2447,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["represents",{"_index":2650,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["request",{"_index":1888,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["requested",{"_index":1081,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":3795,"title":{},"body":{"contributing.html":{}}}],["require",{"_index":104,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["required",{"_index":61,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["requirements",{"_index":3784,"title":{},"body":{"contributing.html":{}}}],["requires",{"_index":2610,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["res",{"_index":2864,"title":{},"body":{"classes/FormValidators.html":{}}}],["reset",{"_index":508,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["resets",{"_index":1597,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resettopageone",{"_index":1598,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resolve(csvfile",{"_index":2004,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["resolveactivities",{"_index":397,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolveactivities(activityresolutionpromises",{"_index":399,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity",{"_index":398,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity(activityresolutionpromise",{"_index":415,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolver",{"_index":418,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["resolver.ts",{"_index":381,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["resolver.ts:51",{"_index":416,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolver.ts:71",{"_index":401,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resource",{"_index":498,"title":{},"body":{"interfaces/ActivityResponse.html":{}}}],["response",{"_index":385,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["response.length",{"_index":494,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.map(item",{"_index":492,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.object",{"_index":489,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.response.error",{"_index":486,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["responsible",{"_index":1691,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["rest",{"_index":1664,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["restitem",{"_index":1696,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["result",{"_index":145,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.items",{"_index":1360,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.search(/[\",\\n]/g",{"_index":1835,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["result.totalitems",{"_index":1362,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.ts",{"_index":3599,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["result[0",{"_index":430,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resulting",{"_index":1871,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["results",{"_index":147,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":606,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["return",{"_index":278,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":225,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/RegisteredProviders.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":213,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["returnvalue",{"_index":491,"title":{},"body":{"classes/ActivityReporter.html":{},"pipes/NestedPropertyPipe.html":{}}}],["reusable",{"_index":4034,"title":{},"body":{"index.html":{}}}],["reused",{"_index":2573,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reverse",{"_index":1291,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["reversed",{"_index":1290,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["review",{"_index":3824,"title":{},"body":{"contributing.html":{}}}],["rgba(250",{"_index":3057,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["rgba(255",{"_index":3060,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["right",{"_index":1051,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rightlabel",{"_index":2699,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["risk",{"_index":1778,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":594,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["root.componentinstance",{"_index":2678,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["rough",{"_index":3769,"title":{},"body":{"contributing.html":{}}}],["roughly",{"_index":3848,"title":{},"body":{"contributing.html":{}}}],["rounds",{"_index":1678,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto",{"_index":1674,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto(value",{"_index":1675,"title":{},"body":{"classes/CommonUtil.html":{}}}],["route",{"_index":4048,"title":{},"body":{"index.html":{}}}],["routermodule",{"_index":3693,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["routes",{"_index":4054,"title":{},"body":{"index.html":{}}}],["row",{"_index":834,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["row.map(cell",{"_index":1811,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row.some(cell",{"_index":1807,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row_height",{"_index":1273,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["row_tag",{"_index":3934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rowheight",{"_index":1310,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows",{"_index":1280,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows.map(row",{"_index":1781,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rows.some(haspotentialinjection",{"_index":1784,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rules",{"_index":2580,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["run",{"_index":2855,"title":{},"body":{"classes/FormValidators.html":{},"index.html":{}}}],["runactionhandler",{"_index":184,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["runactionhandler(action",{"_index":235,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["runbuttonhandler(button",{"_index":1528,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["running",{"_index":505,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/FormValidators.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"index.html":{}}}],["runs",{"_index":1527,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rxjs",{"_index":1255,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"dependencies.html":{}}}],["rxjs/internal",{"_index":2936,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["rxjs/operators",{"_index":2104,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["safety",{"_index":912,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["same",{"_index":597,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["sanitize",{"_index":1868,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["sanitizecheckboxhint",{"_index":1917,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecheckboxlabel",{"_index":1915,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecontrol",{"_index":1960,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizeinfomessage",{"_index":1919,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizestring",{"_index":3874,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizestring(result",{"_index":1836,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["sanitizestring(value",{"_index":1840,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["saving",{"_index":1337,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["scaffolding",{"_index":4060,"title":{},"body":{"index.html":{}}}],["screen",{"_index":23,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["screens",{"_index":159,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["scrollwidth",{"_index":1228,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["search",{"_index":367,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["search(criteria",{"_index":3594,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["search.component",{"_index":3592,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.component.html",{"_index":3355,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.scss",{"_index":3356,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.ts",{"_index":3326,"title":{},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["search.module",{"_index":3683,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["search.module.ts",{"_index":3586,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.provider",{"_index":2977,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["search.provider.ts",{"_index":3593,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{},"coverage.html":{}}}],["search.provider.ts:16",{"_index":3595,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["search.service",{"_index":3329,"title":{},"body":{"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{}}}],["search.service.ts",{"_index":2973,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.service.ts:42",{"_index":3609,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:51",{"_index":3607,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:85",{"_index":3608,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:96",{"_index":3606,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search/spotlight",{"_index":2972,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["searchcriteria",{"_index":3363,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchcriteria(value",{"_index":3365,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchid",{"_index":3370,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchinput",{"_index":3369,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection",{"_index":3325,"title":{"interfaces/SearchSection.html":{}},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["searchsection.isloading",{"_index":3396,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.provider.search(this.searchcriteria",{"_index":3394,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results",{"_index":3401,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results.length",{"_index":3437,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsections",{"_index":3374,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchservice",{"_index":3362,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["secondhost",{"_index":3468,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["section",{"_index":43,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["section.isloading",{"_index":3416,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["section.results[0",{"_index":3418,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["sections",{"_index":3350,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["see",{"_index":2127,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{},"contributing.html":{},"index.html":{}}}],["select",{"_index":344,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["select'},{'name",{"_index":356,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["select.component",{"_index":3083,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{}}}],["select.component.html",{"_index":2829,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.scss",{"_index":2828,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts",{"_index":2827,"title":{},"body":{"components/FormSelectComponent.html":{},"coverage.html":{}}}],["select.component.ts:23",{"_index":2831,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:29",{"_index":2833,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select/form",{"_index":2826,"title":{},"body":{"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{},"coverage.html":{}}}],["selectall",{"_index":1866,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectallcontrol",{"_index":1958,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumn(column",{"_index":1972,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumnstext",{"_index":1898,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selected",{"_index":40,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["selectedcolumns",{"_index":1847,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectedcombounit",{"_index":3152,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedentities",{"_index":54,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["selectedfilters",{"_index":2200,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["selectedindex",{"_index":1568,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selecteditem",{"_index":3375,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecteditemindex",{"_index":3426,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectedoption",{"_index":2830,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.display",{"_index":2839,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.istranslatable",{"_index":2838,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedunit",{"_index":3159,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectedunit(value",{"_index":3176,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunit.getoutputvalue(value",{"_index":3161,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunitdisplayvalue",{"_index":3234,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectfirst(ensurefirstsectionisloaded",{"_index":3406,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecting",{"_index":1279,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selection",{"_index":92,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectionchanged",{"_index":1423,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype",{"_index":1378,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype(selectiontype",{"_index":1376,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectnext(down",{"_index":3419,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectoption",{"_index":2174,"title":{"interfaces/SelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["selectoption.display",{"_index":3441,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["selector",{"_index":166,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["selects",{"_index":1439,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["selectunit",{"_index":3226,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectunit(unit",{"_index":3240,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["self",{"_index":2728,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["semantic",{"_index":4084,"title":{},"body":{"index.html":{}}}],["sending",{"_index":1887,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sendkeyboardevent",{"_index":558,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["sendkeyboardevent(key",{"_index":610,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sends",{"_index":612,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["separate",{"_index":4030,"title":{},"body":{"index.html":{}}}],["separated",{"_index":883,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["serve",{"_index":3095,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["server",{"_index":1302,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["serves",{"_index":1702,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["service",{"_index":2974,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["set",{"_index":36,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["setactiondisplayconfig(config",{"_index":258,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["setactions(actions",{"_index":255,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["setconfig(config",{"_index":3456,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["setconfig(val",{"_index":2099,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["setdisabled(disabled",{"_index":3500,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setdisabledstate",{"_index":662,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":694,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["seterrormessage(val",{"_index":2372,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["setfilter",{"_index":2514,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["setfilter(filtertype",{"_index":2515,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["sethostposition(quadrant",{"_index":3498,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["sethosttext(text",{"_index":3502,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setinputvalue",{"_index":559,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["setinputvalue(value",{"_index":621,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setinputvalueunit",{"_index":3227,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setinputvalueunit(unit",{"_index":3242,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sets",{"_index":623,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["setsize(size",{"_index":3051,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["setstyle",{"_index":3914,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setstyle(el",{"_index":1179,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["setstyle(this.hostelement",{"_index":1211,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["setstyle(tip.container",{"_index":1096,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setstyle(tip.content",{"_index":1142,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setter",{"_index":2089,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{}}}],["settimeout",{"_index":1070,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":1692,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setunit(val",{"_index":2246,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptions(val",{"_index":2243,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptionstonone",{"_index":3228,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setunitoptionstopercent",{"_index":3229,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setvalue",{"_index":2054,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(value",{"_index":2093,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(values",{"_index":2156,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["setvcdcomponentrendereroutlet(renderer",{"_index":1726,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["setwidth(width",{"_index":3496,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["shape",{"_index":2705,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["share",{"_index":2688,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["shared",{"_index":1065,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["shift+shift",{"_index":3336,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["shortcut",{"_index":3603,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["shoulddisplaybuttonsonrow",{"_index":1523,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shoulddisplaybuttonsontop",{"_index":1520,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldfillparent",{"_index":1418,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldsanitize",{"_index":1757,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["shouldsanitize)).join",{"_index":1813,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldsanitize)).join('\\n",{"_index":1783,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldshowactionbar",{"_index":1495,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowbubbles",{"_index":1968,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["shouldshowcontextualactions",{"_index":191,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["shouldshowicon",{"_index":175,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagenumberinput",{"_index":1313,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagesizeselector",{"_index":1312,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowtext",{"_index":176,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowtooltip",{"_index":177,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["show",{"_index":524,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["show/hide",{"_index":268,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["showasterisk",{"_index":666,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["showcases",{"_index":4042,"title":{},"body":{"index.html":{}}}],["showclippedtextdirective",{"_index":374,"title":{"directives/ShowClippedTextDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["showclippedtextdirective.instancecount",{"_index":1203,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["showclippedtextdirectivemodule",{"_index":3457,"title":{"modules/ShowClippedTextDirectiveModule.html":{}},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["showclippedtextdirectivetesthelper",{"_index":3462,"title":{"classes/ShowClippedTextDirectiveTestHelper.html":{}},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["showclippedtextdirectivetesthostcomponent",{"_index":362,"title":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["showerrors",{"_index":668,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["showing",{"_index":893,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["shown",{"_index":127,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/enumerations.html":{}}}],["shows",{"_index":21,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["showsectiontitle(searchsection",{"_index":3434,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["showspinner",{"_index":3025,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["showunlimitedoption",{"_index":3098,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["side",{"_index":1772,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["signature",{"_index":2873,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{},"contributing.html":{}}}],["signed",{"_index":3762,"title":{},"body":{"contributing.html":{}}}],["signpost",{"_index":2752,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["simplifying",{"_index":1237,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["simply",{"_index":3829,"title":{},"body":{"contributing.html":{}}}],["single",{"_index":86,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["singleselected",{"_index":1454,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["singleton",{"_index":1060,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["singleunitdisplaytext",{"_index":3236,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sit",{"_index":1431,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["site",{"_index":923,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["sixty",{"_index":2287,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["size",{"_index":906,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["size(size",{"_index":3053,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sized",{"_index":3032,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizes",{"_index":3037,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sizes.md",{"_index":3047,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizing",{"_index":3039,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["skip",{"_index":3414,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["slice(0",{"_index":1505,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sm",{"_index":1055,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["sm(small",{"_index":3038,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["smaller",{"_index":1306,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["somerecord.property",{"_index":868,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["something",{"_index":2609,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sortable",{"_index":909,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sortcolumn",{"_index":1333,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorted",{"_index":985,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["sortedcolumn",{"_index":1288,"title":{"interfaces/SortedColumn.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["sorting",{"_index":864,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorting/filtering",{"_index":873,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sound",{"_index":1434,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["space",{"_index":705,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["spaces",{"_index":1818,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["spdx",{"_index":2382,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["spec",{"_index":1532,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["special",{"_index":1839,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["specific",{"_index":391,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["specification",{"_index":855,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["specifications",{"_index":2132,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["specified",{"_index":2131,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{}}}],["specifies",{"_index":1436,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["specify",{"_index":3091,"title":{},"body":{"directives/MinMaxValidator.html":{},"miscellaneous/variables.html":{}}}],["specs",{"_index":2666,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["spinner",{"_index":364,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractivityreportercomponent",{"_index":363,"title":{"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["spinneractivityreporterwidgetobject",{"_index":3570,"title":{"classes/SpinnerActivityReporterWidgetObject.html":{}},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["spinners",{"_index":3035,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["spinnersize",{"_index":3030,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/typealiases.html":{}}}],["splitproperty",{"_index":3210,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["splitproperty.length",{"_index":3212,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["spotlight",{"_index":366,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchcomponent",{"_index":365,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"coverage.html":{},"overview.html":{}}}],["spotlightsearchmodule",{"_index":3581,"title":{"modules/SpotlightSearchModule.html":{}},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["spotlightsearchprovider",{"_index":2976,"title":{"interfaces/SpotlightSearchProvider.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["spotlightsearchprovider}spotlightsearchprovider",{"_index":3346,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["spotlightsearchresult",{"_index":3327,"title":{"interfaces/SpotlightSearchResult.html":{}},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchresulttype",{"_index":3328,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchservice",{"_index":2985,"title":{"injectables/SpotlightSearchService.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"overview.html":{}}}],["spotlightsearchservice}spotlightsearchservice",{"_index":3345,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["squash",{"_index":3826,"title":{},"body":{"contributing.html":{}}}],["stackblitz/sdk",{"_index":3958,"title":{},"body":{"dependencies.html":{}}}],["stale",{"_index":1559,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["start",{"_index":593,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["startactivity",{"_index":450,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["started",{"_index":3751,"title":{"contributing.html":{},"index.html":{}},"body":{}}],["starting",{"_index":481,"title":{},"body":{"classes/ActivityReporter.html":{},"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["starts",{"_index":1820,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["start}${input}${end",{"_index":2337,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["state",{"_index":502,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["state.filters",{"_index":1584,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.filters.map((filter",{"_index":1586,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page",{"_index":1581,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.current",{"_index":1582,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.size",{"_index":1583,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort",{"_index":1588,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.by",{"_index":1589,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.reverse",{"_index":1591,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["statements",{"_index":3850,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":25,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["static/featured",{"_index":11,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["static_featured",{"_index":37,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["staticactions",{"_index":189,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["staticactionstyling",{"_index":16,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["statically",{"_index":4052,"title":{},"body":{"index.html":{}}}],["staticfeaturedactions",{"_index":190,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["status",{"_index":405,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["staying",{"_index":3809,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":3796,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["still",{"_index":2641,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["store",{"_index":680,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["stored",{"_index":1446,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["strictnullchecks",{"_index":2643,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["string",{"_index":75,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(index",{"_index":1494,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["string(value",{"_index":2629,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["strings",{"_index":2034,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["striving",{"_index":3790,"title":{},"body":{"contributing.html":{}}}],["structure",{"_index":1063,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":1180,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":152,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["styleurls",{"_index":168,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["styling",{"_index":130,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/FormCheckboxComponent.html":{}}}],["sub",{"_index":45,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["subclass",{"_index":2579,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subclasses",{"_index":2581,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subject",{"_index":2069,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["submit",{"_index":3782,"title":{},"body":{"contributing.html":{}}}],["subscribable",{"_index":2934,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe",{"_index":2916,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe(observable",{"_index":2920,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribes",{"_index":2924,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription",{"_index":2928,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription.unsubscribe",{"_index":2950,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptions",{"_index":2933,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptiontracker",{"_index":1256,"title":{"classes/SubscriptionTracker.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["subscriptiontracker(this",{"_index":1471,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["substracting",{"_index":1626,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["subtext",{"_index":2281,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["subtracker",{"_index":1470,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["succeeded",{"_index":410,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["succeeds",{"_index":409,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["success",{"_index":407,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["successmessage",{"_index":400,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["sucesss",{"_index":420,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["sucesstext",{"_index":560,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["such",{"_index":4145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super(controldirective",{"_index":2732,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["super(filtercontainer",{"_index":2185,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["super(ngcontrol",{"_index":2834,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["super(promiseresolver",{"_index":539,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["supply",{"_index":1401,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["support",{"_index":878,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"modules.html":{}}}],["supported",{"_index":442,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["supports",{"_index":2736,"title":{},"body":{"components/FormInputComponent.html":{}}}],["sure",{"_index":917,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":4117,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2298,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sync",{"_index":3810,"title":{},"body":{"contributing.html":{}}}],["syntax",{"_index":3844,"title":{},"body":{"contributing.html":{}}}],["system",{"_index":2980,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["t",{"_index":57,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tab",{"_index":1822,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":3949,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3948,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4101,"title":{},"body":{"index.html":{}}}],["tag(npm",{"_index":4099,"title":{},"body":{"index.html":{}}}],["tagname",{"_index":548,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagname`on",{"_index":2648,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagnameon",{"_index":2693,"title":{},"body":{"interfaces/FindableWidget.html":{}}}],["take",{"_index":383,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"directives/MinMaxValidator.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{}}}],["takes",{"_index":402,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["task",{"_index":1997,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tb",{"_index":935,"title":{},"body":{"classes/Bytes.html":{}}}],["tbase",{"_index":796,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["team",{"_index":3754,"title":{},"body":{"contributing.html":{}}}],["technically",{"_index":2636,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["template",{"_index":151,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["templateref",{"_index":888,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["templateurl",{"_index":170,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["test",{"_index":2544,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["test:components",{"_index":4067,"title":{},"body":{"index.html":{}}}],["test:i18n",{"_index":4068,"title":{},"body":{"index.html":{}}}],["testbed",{"_index":2526,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testbed.configuretestingmodule",{"_index":2533,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testbed.createcomponent(componentconstructor",{"_index":2663,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testhostcomponent",{"_index":2511,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testing",{"_index":2010,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["testinput",{"_index":2550,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2128,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tests's",{"_index":2660,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["text",{"_index":72,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["text').length",{"_index":3544,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["text.directive",{"_index":821,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["text.directive.module",{"_index":3682,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["text.directive.module.ts",{"_index":3461,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{}}}],["text.directive.test",{"_index":3463,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["text.directive.ts",{"_index":1039,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["text.directive.ts:222",{"_index":3451,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:225",{"_index":3444,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:244",{"_index":3452,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:245",{"_index":3455,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:246",{"_index":3450,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:251",{"_index":3443,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:255",{"_index":3449,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:261",{"_index":3445,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:274",{"_index":3448,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:280",{"_index":3446,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:288",{"_index":3453,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:299",{"_index":3454,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:303",{"_index":3447,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text/csv;charset=utf",{"_index":1786,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["text2",{"_index":3549,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textarea",{"_index":624,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textcontent",{"_index":2635,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textextractor",{"_index":777,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"miscellaneous/functions.html":{}}}],["textextractor(record",{"_index":779,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["texticon",{"_index":137,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["texticon.icon",{"_index":287,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["texticon.text",{"_index":242,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["texting",{"_index":3555,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textinput",{"_index":2742,"title":{},"body":{"components/FormInputComponent.html":{}}}],["textkey",{"_index":74,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["textoverflow",{"_index":1215,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["then(result",{"_index":427,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["thing",{"_index":1833,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["thirty",{"_index":2285,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this._actiondisplayconfig",{"_index":280,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._actiondisplayconfig[key",{"_index":282,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._actions",{"_index":274,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._buttonconfig",{"_index":1382,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig",{"_index":1383,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttoncontents",{"_index":1385,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons",{"_index":1501,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.find",{"_index":1393,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.length",{"_index":1526,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.map(featuredbutton",{"_index":1398,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featured",{"_index":1388,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featured.map(featuredbuttonclass",{"_index":1391,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featuredcount",{"_index":1506,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.position",{"_index":1521,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.inactivedisplaymode",{"_index":1386,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns",{"_index":1351,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.push(col",{"_index":1481,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.splice(colindex",{"_index":1483,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns[colindex",{"_index":1480,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._config",{"_index":2116,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.queryfield",{"_index":2129,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.value",{"_index":2117,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._errormessage",{"_index":2374,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this._height",{"_index":1412,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._isrequestpending",{"_index":1940,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._multiplier",{"_index":1017,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._open",{"_index":1929,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this._pagination",{"_index":1403,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.pagesizeoptions",{"_index":1404,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagenumberinput",{"_index":1406,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagesizeselector",{"_index":1405,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._progress",{"_index":1942,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._searchcriteria",{"_index":3364,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this._selectiontype",{"_index":1377,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._size",{"_index":3055,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this._unit",{"_index":2258,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this._unitname",{"_index":1018,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._unitoptions",{"_index":2252,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.actiondisplayconfig.contextual.buttoncontents",{"_index":285,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actiondisplayconfig.contextual.featuredcount",{"_index":307,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actionreporter",{"_index":1530,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actionreporter.monitorget(response",{"_index":1531,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.filter",{"_index":310,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actions.filter(action",{"_index":294,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.activate",{"_index":1195,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.addwildcard(value",{"_index":2335,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.assignvalue(renderer.rendererspec.config",{"_index":1735,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.attachrenderer",{"_index":1734,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.bestunit",{"_index":3145,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestunit.getmultiplier",{"_index":3126,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestvalue",{"_index":3124,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.buildpartial",{"_index":2474,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.buttonconfig.contextualbuttonconfig.buttoncontents",{"_index":1498,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.buttonconfig.contextualbuttonconfig.buttons.length",{"_index":1497,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.buttonconfig.globalbuttons.length",{"_index":1496,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.calculatepagesize",{"_index":1608,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.cfr.resolvecomponentfactory(this.componenttype",{"_index":1739,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.changedetectorref.detectchanges",{"_index":1374,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["this.changes.next",{"_index":2124,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.clearselectioninformation",{"_index":1379,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.click('.cancel",{"_index":2046,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.dropdown",{"_index":2048,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.export",{"_index":2047,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click(`.column",{"_index":2042,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.closed",{"_index":2376,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.clrdatagrid.getcell(row",{"_index":800,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.column.filter",{"_index":2556,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["this.columns",{"_index":1966,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.filter(col",{"_index":1970,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.findindex(column",{"_index":1485,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columns.reduce((previousvalue",{"_index":1974,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columnsconfig",{"_index":1489,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columnsupdated.emit",{"_index":1354,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.combooptions.find",{"_index":3153,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptions.push(combooption",{"_index":3106,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(displaycombounit",{"_index":3174,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(selectedcombounit",{"_index":3160,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(this.unitdropdown.selectedoption",{"_index":3167,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.set(combooption",{"_index":3104,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.component.displayvalue",{"_index":3270,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.errortext",{"_index":635,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.formcontrol",{"_index":3269,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions",{"_index":3274,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions').value",{"_index":3278,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('limited",{"_index":3273,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('unlimited",{"_index":3272,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.inputvalueunit",{"_index":3277,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.running",{"_index":634,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.selectedunit",{"_index":3275,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.successmessage",{"_index":636,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.component.unitoptions",{"_index":3279,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.componentinstance.directive.mouseoutdelay",{"_index":3484,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.disabled",{"_index":3527,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div.nativeelement",{"_index":3486,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div2.nativeelement",{"_index":3488,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.text",{"_index":3529,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentref",{"_index":1733,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance",{"_index":1741,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance.config",{"_index":1742,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componenttype",{"_index":1728,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.computebestunitandvalue(this.initialvalue",{"_index":3121,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.computebestunitandvalue(value",{"_index":3141,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.condition(operators.eq",{"_index":2493,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.ge",{"_index":2498,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.gt",{"_index":2497,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.le",{"_index":2496,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.lt",{"_index":2495,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.neq",{"_index":2494,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.config",{"_index":2333,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.config.customfiql",{"_index":2309,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.options.find(option",{"_index":2304,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.wildcardposition",{"_index":2334,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.createformgroup",{"_index":2071,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.csvexporterservice.createcsv(data",{"_index":2001,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.csvexporterservice.downloadcsvfile(csvfile",{"_index":2002,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.currentoperator",{"_index":2477,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.dataexportrequest.emit",{"_index":1954,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.datagrid",{"_index":1574,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.change.subscribe",{"_index":1668,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.displayed.length",{"_index":1669,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows",{"_index":1556,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows.notifyonchanges",{"_index":1557,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selected",{"_index":1575,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.clearselection",{"_index":1549,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.current",{"_index":1421,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.currentsingle",{"_index":1420,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.setselected(found",{"_index":1550,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.updatecurrent(nextselection",{"_index":1555,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.singleselected",{"_index":1576,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection",{"_index":1514,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection.length",{"_index":1522,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.deactivate",{"_index":1194,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.defaultspinnersize",{"_index":3033,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this.detachrenderer",{"_index":1737,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.detailcomponent",{"_index":1534,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detailpane.component",{"_index":1536,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detectchanges",{"_index":2622,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.disabled",{"_index":749,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.dismissed.next",{"_index":2378,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.dosearch",{"_index":3366,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.downloaddata(rows",{"_index":1991,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.downloadingmessage",{"_index":1953,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.errorlabels",{"_index":745,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errorlabels.length",{"_index":744,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errormessagechange.emit",{"_index":2377,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.errortext",{"_index":542,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.exportdata.bind(this",{"_index":1955,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.exportstage",{"_index":1952,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fb.group",{"_index":2303,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.featuredbuttons",{"_index":1389,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.foreach(featured",{"_index":1395,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.get(button.class",{"_index":1504,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.size",{"_index":1507,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.filename",{"_index":2003,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.filter",{"_index":2548,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["this.filtercontainer.open",{"_index":2277,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.findcolumnindex(col",{"_index":1479,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.findelement('.progress.loop",{"_index":2040,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.findelement('.spinner",{"_index":3577,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.findelement('clr",{"_index":637,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.findelement('strong').nativeelement.textcontent",{"_index":802,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.findelement(clrdatagridwidgetobject.tagname",{"_index":3714,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.findelement(cssselector",{"_index":2631,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findelement(cssselector).nativeelement",{"_index":3286,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.findelements(cssselector).map(el",{"_index":2633,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findwidgets(params",{"_index":2680,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture",{"_index":2662,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.componentinstance",{"_index":2665,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.debugelement",{"_index":2669,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.destroy",{"_index":3546,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.fixture.detectchanges",{"_index":2613,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.forcedropdownopen",{"_index":1982,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.format(value",{"_index":3648,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.formcontrol.enabled",{"_index":741,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.pristine",{"_index":742,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.valid",{"_index":743,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.value.tostring",{"_index":2837,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.formcontrolnamedirective",{"_index":739,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrolnamedirective.control",{"_index":740,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formgroup",{"_index":1978,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.addcontrol(option.value",{"_index":2191,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.controls[col.fieldname].value",{"_index":1971,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(selected",{"_index":1973,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(true",{"_index":1981,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].value",{"_index":1967,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.get('combounitoptions",{"_index":3129,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').disable",{"_index":3137,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').enable",{"_index":3179,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(this.bestunit.getmultiplier",{"_index":3143,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(value",{"_index":3177,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').value",{"_index":3158,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('filterselect').value",{"_index":2310,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.formgroup.get('filtertext').value",{"_index":2332,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.get('limited",{"_index":3128,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').disable",{"_index":3138,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').enable",{"_index":3180,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').setvalue(null",{"_index":3140,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').setvalue(this.bestvalue",{"_index":3142,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').value",{"_index":3151,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited",{"_index":3148,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').setvalue(false",{"_index":3139,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').value",{"_index":3149,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get(formcontrol).value",{"_index":2203,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(formfields.from).setvalue(null",{"_index":2266,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).setvalue(values[0",{"_index":2265,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).value",{"_index":2271,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(null",{"_index":2269,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(values[1",{"_index":2268,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).value",{"_index":2272,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(frmctrl",{"_index":2195,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(frmctrl).value).length",{"_index":2208,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.removecontrol(control",{"_index":2189,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.setvalue",{"_index":2308,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.valuechanges",{"_index":2122,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.formgroup.valuechanges.pipe(debouncetime(this.getdebouncetimems",{"_index":2121,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.friendlyfieldscontrol.value",{"_index":1986,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getallunittypes",{"_index":983,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getavailableactions(contextualactions",{"_index":311,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getavailableactions(flattenedfeaturedactionlist",{"_index":306,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getavailableactions(staticactions",{"_index":295,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getbasevalue(value",{"_index":1019,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getcolumnsconfig(this.columns",{"_index":1490,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdebouncetimems",{"_index":2120,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.getdisplaymode(button",{"_index":1516,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdisplaynameforfield(fieldname",{"_index":1987,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getflattenedactionlist(this.actions",{"_index":303,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getnativeelement('.combo",{"_index":3287,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnativeelement('.single",{"_index":3288,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnodetext(el",{"_index":2634,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(element",{"_index":2632,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(this.findelement('strong",{"_index":801,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.getpagesize",{"_index":1639,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getpagesizeoptions",{"_index":1641,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getspinner",{"_index":3579,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.gettext('.readonly",{"_index":3271,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.gettext('h3",{"_index":3712,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.gettexts('.column",{"_index":2041,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.gridrefresh.emit(vcddgstate",{"_index":1592,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.handleitem(item",{"_index":3377,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleitem(this.selecteditem",{"_index":3386,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleopen(open",{"_index":3361,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.height",{"_index":1414,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height}px",{"_index":1415,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.host.dispatchevent(new",{"_index":3531,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.nativeelement",{"_index":1200,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.host.style.position",{"_index":3523,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.style.width",{"_index":3521,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.hostcomponent",{"_index":2664,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.id",{"_index":736,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.initialvalue",{"_index":2788,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit",{"_index":3162,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.findbestunit(value",{"_index":3146,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.getoutputvalue(value",{"_index":3147,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.isactiondisabled(action",{"_index":293,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.isbuttonshown(button",{"_index":1503,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isdropdownopen",{"_index":1885,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.isloading",{"_index":1358,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isoverflowing",{"_index":1221,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.isreadonly",{"_index":3170,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.isrequestpending",{"_index":1965,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.items",{"_index":1359,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items).filter(item",{"_index":1554,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items)[0",{"_index":1548,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items.foreach(item",{"_index":1510,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords([current",{"_index":1547,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords(current",{"_index":1553,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.max",{"_index":3088,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.min",{"_index":3086,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.mouseoutdelay",{"_index":1190,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.multiplier",{"_index":1021,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.multiselection",{"_index":1578,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement",{"_index":1616,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement.style.setproperty",{"_index":1416,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.onbeforesetconfig(val",{"_index":2115,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.onchange",{"_index":747,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.onchange(isodatevalue",{"_index":2802,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(parsefloat(value",{"_index":2799,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(this.value",{"_index":3134,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.onchange(value",{"_index":2798,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onmousein",{"_index":1206,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.onmouseout",{"_index":1207,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.ontouch",{"_index":748,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.ontransitionend",{"_index":1111,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.open",{"_index":1984,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this.openchange.emit(this._open",{"_index":3431,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.openchange.emit(value",{"_index":1930,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.options",{"_index":2186,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.options.find(option",{"_index":2835,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.optionsformgroup.get(useroptions.friendlynames",{"_index":1963,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.sanitize",{"_index":1961,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.selectall",{"_index":1959,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.pagesize",{"_index":1638,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagesizeoptions",{"_index":1640,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesize",{"_index":1607,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesizeoptions.map(size",{"_index":1610,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.rowheight",{"_index":1625,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.paginationcomponent.currentpage",{"_index":1599,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.parent",{"_index":2471,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.buildpartial()}${this.result",{"_index":2508,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.clear",{"_index":2507,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.currentoperator",{"_index":2479,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.result",{"_index":2480,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.prefix",{"_index":2967,"title":{},"body":{"classes/IdGenerator.html":{}}}],["this.promiseresolver",{"_index":483,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.registrations.findindex(data",{"_index":2997,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.map(data",{"_index":3012,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.push(registrationdata",{"_index":3002,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(index",{"_index":3010,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(insertindex",{"_index":3001,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.reporterror(item.response.error",{"_index":496,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reporterror(response.response.error",{"_index":487,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response.response.success",{"_index":488,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response[0].response.success",{"_index":497,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.result",{"_index":2481,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.root",{"_index":587,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.running",{"_index":540,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.sanitizecontrol.value",{"_index":1992,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.searchcriteria",{"_index":3393,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchid",{"_index":3390,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.focus",{"_index":3429,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.select",{"_index":3430,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections",{"_index":3409,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach(async",{"_index":3392,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.length",{"_index":3436,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.reduce((acc",{"_index":3423,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.secondhost.dispatchevent(new",{"_index":3533,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.selectallcontrol.value",{"_index":1969,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedcolumns",{"_index":1957,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedentities",{"_index":317,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.selectedentities.length",{"_index":318,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.selecteditem",{"_index":3385,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectedunit",{"_index":3282,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.selectfirst(false",{"_index":3420,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectfirst(true",{"_index":3402,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(false",{"_index":3383,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(true",{"_index":3381,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.setvalue(this._config.value",{"_index":2118,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.shouldshowactionbar",{"_index":1631,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldshowicon",{"_index":286,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.shouldshowtext",{"_index":288,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.shouldshowtooltip",{"_index":289,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.showunlimitedoption",{"_index":3122,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.singleselected",{"_index":1577,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.startactivity",{"_index":482,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.styling",{"_index":2730,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["this.subscriptions",{"_index":2957,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.foreach(subscription",{"_index":2956,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.indexof(subscription",{"_index":2952,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.push(subscription",{"_index":2949,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.splice(indexofsubscription",{"_index":2955,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptiontracker.subscribe(columndropdown.toggleservice.openchange",{"_index":1883,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.subscriptiontracker.subscribe(obs",{"_index":2123,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.subscriptiontracker.subscribe(this.selectallcontrol.valuechanges",{"_index":1980,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.successmessage",{"_index":541,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.textinput",{"_index":2789,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.textinput.nativeelement.value",{"_index":2793,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.tooltip",{"_index":3536,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.dispatchevent(new",{"_index":3534,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.queryselector('.tooltip",{"_index":3547,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.style.opacity",{"_index":3537,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.classlist",{"_index":3539,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.innertext",{"_index":3538,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.offsetwidth",{"_index":3530,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.style.visibility",{"_index":3545,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipsize",{"_index":1144,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.totalitems",{"_index":1361,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(itemindex",{"_index":1571,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(selectedindex",{"_index":1572,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.tracker.subscribe(this.formgroup.get('combounitoptions').valuechanges",{"_index":3135,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('limited').valuechanges",{"_index":3136,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('unlimited').valuechanges",{"_index":3127,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.unsubscribeall",{"_index":3178,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate('unlimited",{"_index":3164,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate(outputunit.getvaluewithunittranslationkey",{"_index":3646,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.translationservice.translateasync('vcd.cc.cancel",{"_index":1895,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.data",{"_index":1891,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export",{"_index":1901,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export.all",{"_index":1897,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.downloading",{"_index":1923,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.writing",{"_index":1926,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.hint",{"_index":1914,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.info",{"_index":1911,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.question",{"_index":1909,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.loading",{"_index":514,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.translationservice.translateasync('vcd.cc.no",{"_index":1905,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.hint",{"_index":1918,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.info",{"_index":1920,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.question",{"_index":1916,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.select.columns",{"_index":1899,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.yes",{"_index":1903,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync(this.paginationtranslationkey",{"_index":1602,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.type",{"_index":2791,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.unit",{"_index":2253,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.unitdropdown",{"_index":3165,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformattter.bestformat(value",{"_index":3168,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformcontrol.setvalue(this.component.unitoptions[0].getmultiplier",{"_index":3285,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.unitoptions",{"_index":2254,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions.foreach(unitoption",{"_index":3100,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitoptions.length",{"_index":2255,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions[0",{"_index":2256,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unlimitedvalue",{"_index":3150,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unsubscribeall",{"_index":2946,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.updatecolumnsconfig",{"_index":1353,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updatepagination",{"_index":1407,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateprogress.bind(this",{"_index":1956,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.updateselecteditems",{"_index":1375,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.viewcontainerref.createcomponent(componentfactory",{"_index":1740,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewcontainerref.remove",{"_index":1744,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewinitted",{"_index":1373,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.wrap",{"_index":2482,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.writevalue(this.initialvalue",{"_index":2797,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.writingmessage",{"_index":1994,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["those",{"_index":2052,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{}}}],["thousands",{"_index":1025,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["thousandsunit",{"_index":930,"title":{"classes/ThousandsUnit.html":{}},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["thousandsunit:105",{"_index":988,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:11",{"_index":967,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:12",{"_index":968,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:24",{"_index":993,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:28",{"_index":997,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:37",{"_index":996,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:45",{"_index":992,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:54",{"_index":1004,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:61",{"_index":998,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:71",{"_index":989,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:89",{"_index":976,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["three",{"_index":3036,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["through",{"_index":1593,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"index.html":{}}}],["throw",{"_index":1396,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thrown",{"_index":1938,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["throws",{"_index":1499,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thz",{"_index":2889,"title":{},"body":{"classes/Hertz.html":{}}}],["time",{"_index":1040,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["timer",{"_index":1069,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":2606,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tip",{"_index":1062,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tip.clearhidetimeout",{"_index":1113,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container",{"_index":1091,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.appendchild(tip.content",{"_index":1100,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.classlist.add('tooltip",{"_index":1093,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.opacity",{"_index":1120,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.visibility",{"_index":1126,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content",{"_index":1094,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.addeventlistener('transitionend",{"_index":1105,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add('tooltip",{"_index":1095,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add(tip.calculateposition(rect",{"_index":1146,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.remove(tl",{"_index":1145,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.innerhtml",{"_index":1147,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.removeeventlistener('transitionend",{"_index":1110,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.opacity",{"_index":1121,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.visibility",{"_index":1127,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.create",{"_index":1204,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.currentdirective",{"_index":1122,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.hostelement",{"_index":1080,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.mouseoutdelay",{"_index":1090,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.tooltipsize",{"_index":1082,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currenthost",{"_index":1130,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.destroy",{"_index":1219,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetimeout",{"_index":1117,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.hidetooltip(this.mouseoutdelay",{"_index":1223,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetooltip(tip.mouseoutdelay",{"_index":1115,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ismouseover",{"_index":1119,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseenter",{"_index":1103,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseleave",{"_index":1104,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend",{"_index":1106,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend(event",{"_index":1234,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.update",{"_index":1222,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["title",{"_index":131,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tl",{"_index":1048,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["to]).getstring",{"_index":2276,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["todo",{"_index":876,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/variables.html":{}}}],["together",{"_index":3339,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["toggle",{"_index":829,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["toggler",{"_index":870,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toggleswitch",{"_index":2729,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":865,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toinput",{"_index":2218,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["tooltip",{"_index":252,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipcontent",{"_index":3480,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipcount",{"_index":3478,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipposition",{"_index":1047,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.bl",{"_index":1166,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.br",{"_index":1168,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tl",{"_index":1165,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tr",{"_index":1167,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition[key",{"_index":3542,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipsize",{"_index":1043,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipsize.md",{"_index":1197,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tooltiptext",{"_index":3477,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipvisibility",{"_index":3479,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["top",{"_index":844,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":3774,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["topmost",{"_index":3405,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["tosubscriber",{"_index":2935,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["total",{"_index":850,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["totalitems",{"_index":1287,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["touch",{"_index":686,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["tr",{"_index":1050,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["trackby",{"_index":1367,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trackbyfunction",{"_index":1248,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["tracker",{"_index":2941,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"classes/SubscriptionTracker.html":{}}}],["tracker.ts",{"_index":2914,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["tracker.ts:18",{"_index":2923,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:28",{"_index":2930,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:33",{"_index":2932,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:40",{"_index":3610,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:53",{"_index":3612,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:64",{"_index":3613,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:74",{"_index":3614,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["transform",{"_index":2881,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transform(item",{"_index":2882,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transformed",{"_index":857,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["transitionend",{"_index":4144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":2212,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["translated",{"_index":515,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["translating",{"_index":1468,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["translation",{"_index":999,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["translationkey",{"_index":2858,"title":{},"body":{"classes/FormValidators.html":{}}}],["translationservice",{"_index":511,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["translationservice.translate",{"_index":4130,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["translationservice.translateasync",{"_index":4131,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tree",{"_index":154,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tried",{"_index":1998,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tries",{"_index":1543,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trigger",{"_index":201,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["triggered",{"_index":620,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["true",{"_index":97,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":891,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"contributing.html":{}}}],["trying",{"_index":1023,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["tsdoc",{"_index":3788,"title":{},"body":{"contributing.html":{}}}],["tsickle",{"_index":3993,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":3995,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":793,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["tslint:enable:directive",{"_index":3085,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["turn",{"_index":384,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["turned",{"_index":1809,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["turns",{"_index":404,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["two",{"_index":2362,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(${index",{"_index":2044,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["typealiases",{"_index":4124,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":314,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["types",{"_index":936,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":2675,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["typically",{"_index":2603,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["typing",{"_index":3598,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["u00a0",{"_index":700,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ui",{"_index":436,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unamed",{"_index":2872,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":120,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["understand",{"_index":774,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["understands",{"_index":382,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["unique",{"_index":78,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":361,"title":{"classes/Unit.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unit(val",{"_index":2257,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["unit.gb",{"_index":3639,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.getmultiplier",{"_index":3276,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unit.kb",{"_index":3637,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.mb",{"_index":3638,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit:11",{"_index":969,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:12",{"_index":970,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:24",{"_index":1009,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:28",{"_index":1011,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:37",{"_index":1010,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:45",{"_index":1008,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:54",{"_index":1013,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:61",{"_index":1012,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:71",{"_index":1007,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unitdropdown",{"_index":3097,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformatter",{"_index":3081,"title":{"injectables/UnitFormatter.html":{}},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{}}}],["unitformattter",{"_index":3116,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformcontrol",{"_index":3233,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unitlist",{"_index":3308,"title":{},"body":{"classes/Percent.html":{}}}],["unitname",{"_index":1000,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["unitnametranslationkeyprefix",{"_index":937,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["unitoption",{"_index":3105,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getmultiplier",{"_index":3103,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getunitname",{"_index":3102,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions",{"_index":2220,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/functions.html":{}}}],["unitoptions(unitoptions",{"_index":3099,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions(val",{"_index":2251,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["units",{"_index":980,"title":{},"body":{"classes/Bytes.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["unittranslationkey",{"_index":3297,"title":{},"body":{"classes/Percent.html":{}}}],["unittypes",{"_index":1028,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["unknown",{"_index":689,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{}}}],["unless",{"_index":1370,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unlimited",{"_index":3092,"title":{},"body":{"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unlimitedformcontrol",{"_index":3231,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unlimitedvalue",{"_index":3107,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unregister",{"_index":3004,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider",{"_index":3605,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider(registrationid",{"_index":3008,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregistration",{"_index":3005,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unset",{"_index":135,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unspecificed",{"_index":1409,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unsubscribe",{"_index":2917,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribe(subscription",{"_index":2929,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribeall",{"_index":2919,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribes",{"_index":2931,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["until",{"_index":3563,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["untracked",{"_index":2954,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unwatchevents",{"_index":3915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(el",{"_index":1176,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(this.hostelement",{"_index":1218,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["unwatchevents(tip.container",{"_index":1109,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":22,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["update",{"_index":1128,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["updatecolumnsconfig",{"_index":1488,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updated",{"_index":580,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["updatepagination",{"_index":1637,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateprogress",{"_index":1848,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updateprogress(progress",{"_index":2005,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updates",{"_index":1344,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateselecteditems",{"_index":1541,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updating",{"_index":1372,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["upon",{"_index":1355,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["upper",{"_index":2436,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["upstream",{"_index":3811,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1796,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["url.createobjecturl(blob",{"_index":1797,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["urn",{"_index":2400,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["usage",{"_index":756,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":457,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":2537,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["used",{"_index":113,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":3074,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["user",{"_index":106,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/variables.html":{}}}],["useroptions",{"_index":1865,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["useroptions.friendlynames",{"_index":1948,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.sanitize",{"_index":1949,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.selectall",{"_index":1946,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["uses",{"_index":1690,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["usevalue",{"_index":2538,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["using",{"_index":109,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{},"index.html":{}}}],["utf",{"_index":2759,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["util",{"_index":3645,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["util.ts",{"_index":1673,"title":{},"body":{"classes/CommonUtil.html":{},"coverage.html":{}}}],["util.ts:12",{"_index":1677,"title":{},"body":{"classes/CommonUtil.html":{}}}],["utility",{"_index":911,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["utils.ts",{"_index":2510,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["utils.ts:102",{"_index":2524,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:110",{"_index":2522,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:112",{"_index":2525,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:119",{"_index":2518,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils/filter",{"_index":2177,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/id",{"_index":727,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/test",{"_index":3266,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["utils/test/datagrid/vcd",{"_index":785,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["utils/test/widget",{"_index":787,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{}}}],["utils/unit/unit",{"_index":2248,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{}}}],["ux",{"_index":644,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["v",{"_index":918,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["v.results",{"_index":3425,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["v[0",{"_index":4106,"title":{},"body":{"index.html":{}}}],["val",{"_index":699,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{}}}],["validate",{"_index":3076,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validate(control",{"_index":3079,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validates",{"_index":2852,"title":{},"body":{"classes/FormValidators.html":{}}}],["validation",{"_index":724,"title":{},"body":{"classes/BaseFormControl.html":{},"directives/MinMaxValidator.html":{}}}],["validationerrors",{"_index":3080,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validations",{"_index":2847,"title":{},"body":{"classes/FormValidators.html":{}}}],["validator",{"_index":2854,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validator(control",{"_index":2866,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorfn",{"_index":2856,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators",{"_index":2846,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators.compose(validators)(control",{"_index":3090,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.max(this.max",{"_index":3089,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.min(this.min",{"_index":3087,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.required(control",{"_index":2865,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorunlimited",{"_index":3119,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value",{"_index":198,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":3175,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value.tostring(10",{"_index":2790,"title":{},"body":{"components/FormInputComponent.html":{}}}],["value[nestedprop",{"_index":3216,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["valueformcontrol",{"_index":3232,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["values",{"_index":2081,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"pipes/FunctionRendererPipe.html":{}}}],["values.foreach(frmctrl",{"_index":2193,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["values[0",{"_index":2264,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["values[1",{"_index":2267,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["valuewithunittranslationkey",{"_index":3298,"title":{},"body":{"classes/Percent.html":{}}}],["valuewithunittranslationkeyprefix",{"_index":938,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["var",{"_index":323,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["variable",{"_index":2785,"title":{},"body":{"components/FormInputComponent.html":{},"coverage.html":{}}}],["variables",{"_index":4132,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1323,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcd",{"_index":167,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.cpu.speed.unit",{"_index":2907,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.display.percent",{"_index":3302,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.filesize.unit",{"_index":965,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.grid.default.pagination",{"_index":1277,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.units.bytes",{"_index":963,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.units.hertz",{"_index":2905,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.units.percent",{"_index":3301,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.warning.numrange",{"_index":3118,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["vcd/i18n",{"_index":537,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["vcd/route",{"_index":4051,"title":{},"body":{"index.html":{}}}],["vcd/ui",{"_index":4033,"title":{},"body":{"index.html":{}}}],["vcdactionmenumodule",{"_index":3650,"title":{"modules/VcdActionMenuModule.html":{}},"body":{"modules/VcdActionMenuModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdactivityreportermodule",{"_index":3656,"title":{"modules/VcdActivityReporterModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdcomponentrendereroutlet",{"_index":1706,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet(renderer",{"_index":1727,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet]'},{'name",{"_index":370,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["vcdcomponentsmodule",{"_index":3670,"title":{"modules/VcdComponentsModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddataexportermodule",{"_index":3673,"title":{"modules/VcdDataExporterModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridmodule",{"_index":2529,"title":{"modules/VcdDatagridModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridwidgetobject",{"_index":784,"title":{"classes/VcdDatagridWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["vcddgstate",{"_index":1580,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.filters",{"_index":1585,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.sortcolumn",{"_index":1590,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcderrorbannermodule",{"_index":3661,"title":{"modules/VcdErrorBannerModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformmodule",{"_index":3674,"title":{"modules/VcdFormModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdloadingindicatormodule",{"_index":3662,"title":{"modules/VcdLoadingIndicatorModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdshowclippedtext",{"_index":375,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["verbosity",{"_index":2390,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["verify",{"_index":3398,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["version",{"_index":4059,"title":{},"body":{"index.html":{}}}],["versioning",{"_index":4081,"title":{},"body":{"index.html":{}}}],["very",{"_index":2981,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["via",{"_index":4069,"title":{},"body":{"index.html":{}}}],["view",{"_index":1340,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewable",{"_index":1863,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild",{"_index":1249,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('actionreporter",{"_index":1464,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('div",{"_index":3551,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('div2",{"_index":3553,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('from",{"_index":2235,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('searchinput",{"_index":3368,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["viewchild('textinput",{"_index":2780,"title":{},"body":{"components/FormInputComponent.html":{}}}],["viewchild('to",{"_index":2239,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('unitdropdown",{"_index":3096,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["viewchild(clrdatagrid",{"_index":1460,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdatagridpagination",{"_index":1461,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdropdown",{"_index":1880,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild(showclippedtextdirective",{"_index":3550,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewcontainerref",{"_index":1713,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["viewinitted",{"_index":1466,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["visibility",{"_index":1143,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":38,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visual",{"_index":3344,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["vmw/ng",{"_index":3960,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["vmw/plain",{"_index":3962,"title":{},"body":{"dependencies.html":{}}}],["vmware",{"_index":2380,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{}}}],["vmware/master",{"_index":3812,"title":{},"body":{"contributing.html":{}}}],["vmware/vmware",{"_index":4094,"title":{},"body":{"index.html":{}}}],["void",{"_index":59,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["vs",{"_index":3805,"title":{},"body":{"contributing.html":{}}}],["wait",{"_index":1084,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":124,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["warning",{"_index":2359,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["watchevents",{"_index":3916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["watchevents(el",{"_index":1172,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["watchevents(this.hostelement",{"_index":1205,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["watchevents(tip.container",{"_index":1102,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["way",{"_index":811,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{}}}],["ways",{"_index":143,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["we're",{"_index":1230,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["webcomponents/webcomponentsjs",{"_index":3965,"title":{},"body":{"dependencies.html":{}}}],["welcomes",{"_index":3755,"title":{},"body":{"contributing.html":{}}}],["wessberg/ts",{"_index":3967,"title":{},"body":{"dependencies.html":{}}}],["whenever",{"_index":568,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["whether",{"_index":82,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":2841,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["whitespace",{"_index":1213,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["whole",{"_index":1832,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["whose",{"_index":838,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["widget",{"_index":592,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder",{"_index":2517,"title":{"classes/WidgetFinder.html":{}},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetfinder#find",{"_index":2652,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder#findwidgets",{"_index":2651,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder(filtertesthostcomponent",{"_index":2551,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["widgetobject",{"_index":547,"title":{"classes/WidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetobject:101",{"_index":622,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:115",{"_index":603,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:123",{"_index":608,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:127",{"_index":600,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:42",{"_index":564,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:45",{"_index":588,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:54",{"_index":590,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:62",{"_index":596,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:73",{"_index":575,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:87",{"_index":611,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgets",{"_index":2572,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets.length",{"_index":2683,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets[0",{"_index":2686,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["width",{"_index":1136,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["width(width",{"_index":3520,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["widthsettimes",{"_index":1467,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["wildcardcharacter",{"_index":2319,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wildcardposition",{"_index":2318,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.end",{"_index":2328,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.start",{"_index":2327,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["window",{"_index":1158,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window.requestanimationframe",{"_index":1999,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["window.settimeout",{"_index":1118,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["wired",{"_index":1341,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["withgridboldrenderer",{"_index":3898,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["withgridboldrenderer(base",{"_index":4024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withgridboldrenderer>>(base",{"_index":795,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["within",{"_index":80,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["without",{"_index":423,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["wo.ts",{"_index":2600,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor",{"_index":2563,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor(this.fixture",{"_index":2677,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor.tagname",{"_index":2671,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wordbreak",{"_index":1140,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":897,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["worked",{"_index":900,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["workflow",{"_index":3772,"title":{},"body":{"contributing.html":{}}}],["working",{"_index":3758,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":3348,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["wrap",{"_index":2326,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["wrapcharacter",{"_index":2322,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wrapped",{"_index":2595,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wrapper",{"_index":642,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wraps",{"_index":2321,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["write",{"_index":3841,"title":{},"body":{"contributing.html":{}}}],["writevalue",{"_index":663,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(val",{"_index":697,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(value",{"_index":2774,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["writing",{"_index":1924,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["writingmessage",{"_index":1925,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["written",{"_index":3793,"title":{},"body":{"contributing.html":{}}}],["wrote",{"_index":3765,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":1160,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":1161,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":216,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["yestext",{"_index":1902,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["you'll",{"_index":3825,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["z",{"_index":3065,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["zero_to_1",{"_index":3296,"title":{},"body":{"classes/Percent.html":{}}}],["zero_to_100",{"_index":3295,"title":{},"body":{"classes/Percent.html":{}}}],["zindex",{"_index":1098,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["zone.js",{"_index":3997,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":3320,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionDisplayConfig.html":{"url":"interfaces/ActionDisplayConfig.html","title":"interface - ActionDisplayConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionDisplayConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of actions that are not static/featured\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextual\n                                \n                                \n                                            Optional\n                                        staticActionStyling\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextual\n                                    \n                                \n                                \n                                    \n                                        contextual:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the contextual actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        staticActionStyling\n                                    \n                                \n                                \n                                    \n                                        staticActionStyling:         ActionStyling\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionStyling\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the static actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key for the text of the button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[]) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: T;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount?: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling?: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents?: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActionItem.html":{"url":"interfaces/ActionItem.html","title":"interface - ActionItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Data required for displaying an action item in a menu.\nT is the type of custom data passed to action handler\nR is the type of selected entity on which the action will be performed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        action\n                                \n                                \n                                            Optional\n                                        actionType\n                                \n                                \n                                            Optional\n                                        availability\n                                \n                                \n                                            Optional\n                                        children\n                                \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        handler\n                                \n                                \n                                            Optional\n                                        handlerData\n                                \n                                \n                                            Optional\n                                        icon\n                                \n                                \n                                            Optional\n                                        textKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The key that will be fired with the action.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionType\n                                    \n                                \n                                \n                                    \n                                        actionType:         ActionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for determining where in the action menu this action gets displayed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        availability\n                                    \n                                \n                                \n                                    \n                                        availability:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Condition whether or not the action is available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:         ActionItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionItem[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of actions that will be grouped under this action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The css class the button should have.\nMust be unique among all added actions within an action list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if an action that is available should be disabled. If true, a non available action is disabled.\nIf false, a non-available action is hidden\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         ActionHandlerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionHandlerType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The function to be executed when the button is clicked.\nActions that require additional user input can collect it using handlerData which will be passed as an argument\nto the handler call\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlerData\n                                    \n                                \n                                \n                                    \n                                        handlerData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom data that will be passed when handler is called\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textKey\n                                    \n                                \n                                \n                                    \n                                        textKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The i18n key for the text of the button\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key for the text of the button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[]) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: T;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount?: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling?: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents?: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ActionMenuComponent.html":{"url":"components/ActionMenuComponent.html","title":"component - ActionMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ActionMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/action-menu/action-menu.component.ts\n\n\n    \n        Description\n    \n    \n        Renders actions in screens containing grids, cards and details container\nR is the type of selected entity on which the action will be performed\nT is the type of custom data passed to action handler\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-action-menu\n            \n\n            \n                styleUrls\n                ./action-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./action-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _actionDisplayConfig\n                            \n                            \n                                    Private\n                                _actions\n                            \n                            \n                                shouldShowIcon\n                            \n                            \n                                shouldShowText\n                            \n                            \n                                shouldShowTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAvailableActions\n                            \n                            \n                                getContextualActions\n                            \n                            \n                                getContextualFeaturedActions\n                            \n                            \n                                    Private\n                                getFlattenedActionList\n                            \n                            \n                                isActionDisabled\n                            \n                            \n                                runActionHandler\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                actionDisplayConfig\n                            \n                            \n                                actions\n                            \n                            \n                                btnText\n                            \n                            \n                                disabled\n                            \n                            \n                                entityUrn\n                            \n                            \n                                selectedEntities\n                            \n                            \n                                staticActionStyling\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                                \n                                    actionDisplayConfig\n                                \n                                \n                                    staticActions\n                                \n                                \n                                    staticFeaturedActions\n                                \n                                \n                                    shouldShowContextualActions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        actionDisplayConfig\n                    \n                \n                \n                    \n                        Type :         ActionDisplayConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:71\n                            \n                        \n                \n                    \n                        Display configuration of static and contextual actions\nIf null or undefined is passed, default config _actionDisplayConfig is used\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n                \n                    \n                        Type :         ActionItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:47\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        btnText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:26\n                            \n                        \n                \n                    \n                        Content of the action menu dropdown trigger button. Used when #actionDisplayConfig styling is\nActionStyling.DROPDOWN\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:31\n                            \n                        \n                \n                    \n                        Used for disabling the menu bar or menu dropdown\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        entityUrn\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedEntities\n                    \n                \n                \n                    \n                        Type :     R[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:36\n                            \n                        \n                \n                    \n                        List of selected entities required for contextual actions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        staticActionStyling\n                    \n                \n                \n                    \n                        Type :         ActionStyling\n\n                    \n                \n                \n                    \n                        Default value : ActionStyling.INLINE\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:41\n                            \n                        \n                \n                    \n                        How the static actions get displayed\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAvailableActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetAvailableActions(actions: ActionItem[], selection?: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:103\n                \n            \n\n\n            \n                \n                    Returns actions that are either available or disabled\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getContextualActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetContextualActions(selection?: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:154\n                \n            \n\n\n            \n                \n                    Actions that depend on selected entities but belong to sub menu\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The selected entities based on which the actions availability is calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getContextualFeaturedActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetContextualFeaturedActions(selection: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:142\n                \n            \n\n\n            \n                \n                    Actions that depend on selected entities and belong to main menu list. The returned list length is less than the\nconfigured featured count in actionDisplayConfig\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The selected entities based on which the actions availability is calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFlattenedActionList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlattenedActionList(actions: ActionItem[], actionType: ActionType)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    actionType\n                                    \n                                                ActionType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActionDisabled\n                        \n                        \n                    \n                \n            \n            \n                \nisActionDisabled(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:172\n                \n            \n\n\n            \n                \n                    To disable a displayed action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            runActionHandler\n                        \n                        \n                    \n                \n            \n            \n                \nrunActionHandler(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:165\n                \n            \n\n\n            \n                \n                    Execute the ActionItem.handler function by passing it #selectedEntities and\nActionItem.handlerData as arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actionDisplayConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionDisplayConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        contextual: {\n            featuredCount: 0,\n            styling: ActionStyling.INLINE,\n            buttonContents: TextIcon.TEXT,\n        },\n        staticActionStyling: ActionStyling.INLINE,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:46\n                            \n                        \n\n                \n                    \n                        List of actions that will be given by the calling component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowIcon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:88\n                            \n                        \n\n                \n                    \n                        If a icon should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:93\n                            \n                        \n\n                \n                    \n                        If a text should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowTooltip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:98\n                            \n                        \n\n                \n                    \n                        If the contextual buttons with icons should have a tooltip\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:55\n                                \n                            \n\n                \n                    \n                        setactions(actions: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:47\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            actions\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        actionDisplayConfig\n                    \n                \n\n                \n                    \n                        getactionDisplayConfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:81\n                                \n                            \n\n                \n                    \n                        setactionDisplayConfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:71\n                                \n                            \n                    \n                        \n                                Display configuration of static and contextual actions\nIf null or undefined is passed, default config _actionDisplayConfig is used\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        staticActions\n                    \n                \n\n                \n                    \n                        getstaticActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:112\n                                \n                            \n                    \n                        \n                                List of only the actions that are marked as ActionType.STATIC\n\n\n                                \n                                    Returns :         ActionItem[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        staticFeaturedActions\n                    \n                \n\n                \n                    \n                        getstaticFeaturedActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:120\n                                \n                            \n                    \n                        \n                                List of only the actions that are marked as ActionType.STATIC_FEATURED\n\n\n                                \n                                    Returns :         ActionItem[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        shouldShowContextualActions\n                    \n                \n\n                \n                    \n                        getshouldShowContextualActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:179\n                                \n                            \n                    \n                        \n                                To show/hide the contextual actions bucket\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ActionDisplayConfig, ActionItem, ActionStyling, ActionType, TextIcon } from '../common/interfaces';\n\n/**\n * Renders actions in screens containing grids, cards and details container\n * R is the type of selected entity on which the action will be performed\n * T is the type of custom data passed to action handler\n */\n@Component({\n    selector: 'vcd-action-menu',\n    templateUrl: './action-menu.component.html',\n    styleUrls: ['./action-menu.component.scss'],\n})\nexport class ActionMenuComponent {\n    @Input() entityUrn: string;\n\n    /**\n     * Content of the action menu dropdown trigger button. Used when {@link #actionDisplayConfig} styling is\n     * {@link ActionStyling.DROPDOWN}\n     */\n    @Input() btnText: string = null;\n\n    /**\n     * Used for disabling the menu bar or menu dropdown\n     */\n    @Input() disabled: boolean;\n\n    /**\n     * List of selected entities required for contextual actions\n     */\n    @Input() selectedEntities: R[];\n\n    /**\n     * How the static actions get displayed\n     */\n    @Input() staticActionStyling: ActionStyling = ActionStyling.INLINE;\n\n    /**\n     * List of actions that will be given by the calling component\n     */\n    private _actions: ActionItem[] = [];\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            if (!action.actionType) {\n                action.actionType = ActionType.CONTEXTUAL;\n            }\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    private _actionDisplayConfig: ActionDisplayConfig = {\n        contextual: {\n            featuredCount: 0,\n            styling: ActionStyling.INLINE,\n            buttonContents: TextIcon.TEXT,\n        },\n        staticActionStyling: ActionStyling.INLINE,\n    };\n    /**\n     * Display configuration of static and contextual actions\n     * If null or undefined is passed, default config {@link _actionDisplayConfig} is used\n     */\n    @Input() set actionDisplayConfig(config: ActionDisplayConfig) {\n        config = !config ? this._actionDisplayConfig : config;\n        Object.keys(config).forEach(key => {\n            this._actionDisplayConfig[key] = config[key] || this._actionDisplayConfig[key];\n        });\n        const buttonContents = this.actionDisplayConfig.contextual.buttonContents;\n        this.shouldShowIcon = (TextIcon.ICON & buttonContents) === TextIcon.ICON;\n        this.shouldShowText = (TextIcon.TEXT & buttonContents) === TextIcon.TEXT;\n        this.shouldShowTooltip = buttonContents === TextIcon.ICON;\n    }\n    get actionDisplayConfig(): ActionDisplayConfig {\n        return this._actionDisplayConfig;\n    }\n\n    /**\n     * If a icon should be displayed inside contextual buttons\n     */\n    shouldShowIcon: boolean;\n\n    /**\n     * If a text should be displayed inside contextual buttons\n     */\n    shouldShowText: boolean;\n\n    /**\n     * If the contextual buttons with icons should have a tooltip\n     */\n    shouldShowTooltip: boolean;\n\n    /**\n     * Returns actions that are either available or disabled\n     */\n    getAvailableActions(actions: ActionItem[], selection?: R[]): ActionItem[] {\n        return actions.filter(\n            action => !action.availability || action.availability(selection) || this.isActionDisabled(action)\n        );\n    }\n\n    /**\n     * List of only the actions that are marked as {@link ActionType.STATIC}\n     */\n    get staticActions(): ActionItem[] {\n        const staticActions = this.actions.filter(action => action.actionType === ActionType.STATIC);\n        return this.getAvailableActions(staticActions);\n    }\n\n    /**\n     * List of only the actions that are marked as {@link ActionType.STATIC_FEATURED}\n     */\n    get staticFeaturedActions(): ActionItem[] {\n        const staticActions = this.actions.filter(action => action.actionType === ActionType.STATIC_FEATURED);\n        return this.getAvailableActions(staticActions);\n    }\n\n    private getFlattenedActionList(actions: ActionItem[], actionType: ActionType): ActionItem[] {\n        let featuredActions: ActionItem[] = [];\n        actions.forEach(action => {\n            if (action.children && action.children.length) {\n                featuredActions = featuredActions.concat(this.getFlattenedActionList(action.children, actionType));\n            } else if (action.actionType === actionType) {\n                featuredActions.push(action);\n            }\n        });\n        return featuredActions;\n    }\n\n    /**\n     * Actions that depend on selected entities and belong to main menu list. The returned list length is less than the\n     * configured featured count in {@link actionDisplayConfig}\n     * @param selection The selected entities based on which the actions availability is calculated\n     */\n    getContextualFeaturedActions(selection: R[]): ActionItem[] {\n        const flattenedFeaturedActionList = this.getFlattenedActionList(this.actions, ActionType.CONTEXTUAL_FEATURED);\n        const availableFeaturedActions = this.getAvailableActions(flattenedFeaturedActionList, selection);\n        return this.actionDisplayConfig.contextual.featuredCount\n            ? availableFeaturedActions.slice(0, this.actionDisplayConfig.contextual.featuredCount)\n            : availableFeaturedActions;\n    }\n\n    /**\n     * Actions that depend on selected entities but belong to sub menu\n     * @param selection The selected entities based on which the actions availability is calculated\n     */\n    getContextualActions(selection?: R[]): ActionItem[] {\n        const contextualActions = this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n        return this.getAvailableActions(contextualActions, selection);\n    }\n\n    /**\n     * Execute the {@link ActionItem.handler} function by passing it {@link #selectedEntities} and\n     * {@link ActionItem.handlerData} as arguments\n     */\n    runActionHandler(action: ActionItem): void {\n        action.handler(this.selectedEntities, action.handlerData);\n    }\n\n    /**\n     * To disable a displayed action\n     */\n    isActionDisabled(action: ActionItem): boolean {\n        return typeof action.disabled === 'function' ? action.disabled(this.selectedEntities) : action.disabled;\n    }\n\n    /**\n     * To show/hide the contextual actions bucket\n     */\n    get shouldShowContextualActions(): boolean {\n        return !!(this.selectedEntities && this.selectedEntities.length);\n    }\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./action-menu.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ActionMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityPromiseResolver.html":{"url":"classes/ActivityPromiseResolver.html","title":"class - ActivityPromiseResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityPromiseResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A class that understands how to take a promise and turn it into some response message for display.\nA client of this library will override ActivityPromiseResolver to process their specific type of promise.\nThis override will know how to generate a ObjectAndResponse from the type of promise it processes.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolveActivities\n                            \n                            \n                                resolveActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivities\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivities(activityResolutionPromises: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:71\n                \n            \n\n\n            \n                \n                    Takes a Promise of many items and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivity\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivity(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:51\n                \n            \n\n\n            \n                \n                    Takes a Promise and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The activity that this resolver will generate a response from. It generates\neither a sucesss or a failure condition.\n\n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityReporter.html":{"url":"classes/ActivityReporter.html","title":"class - ActivityReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Expresses the contract between a activity status and the UI displaying a loading message, reporting\nsuccess or errors\nCurrently, only one concurrent activity is supported.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:13\n                            \n                        \n\n                \n                    \n                            Creates this reporter with the performer that it will use to monitor events.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:27\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:33\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ActivityPromiseResolver } from './activity-promise-resolver';\n\n/**\n * Expresses the contract between a activity status and the UI displaying a loading message, reporting\n * success or errors\n * Currently, only one concurrent activity is supported.\n */\nexport abstract class ActivityReporter {\n    /**\n     * Creates this reporter with the performer that it will use to monitor events.\n     */\n    constructor(private promiseResolver: ActivityPromiseResolver) {}\n    /*\n     * Override this method to provide custom error activity starting behavior.\n     */\n    abstract startActivity(): void;\n    /**\n     * Override this method to provide custom error reporting behavior.\n     *\n     *  @param errorText The text to display in the error alert.\n     */\n    abstract reportError(errorText: string): void;\n    /**\n     * Override this method to provide custom success reporting behavior.\n     *\n     * @param successMessage A message to display to the user.\n     */\n    abstract reportSuccess(successMessage: string): void;\n\n    /**\n     * Monitors a promise that returns an entity using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorGet(activityResolutionPromise: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n\n    /**\n     * Monitors a promise that returns many entities using {@link ActivityPromiseResolver.monitorActivities}.\n     */\n    async monitorGetAll(activityResolutionPromises: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivities(activityResolutionPromises);\n        const returnValue = response.map(item => item.object);\n        if (response.length) {\n            for (const item of response) {\n                if (item.response.error) {\n                    this.reportError(item.response.error);\n                    return returnValue;\n                }\n            }\n            this.reportSuccess(response[0].response.success);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Monitors a promise that returns an entity and posts a successMessage using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorEdit(activityResolutionPromise: Promise, successMessage?: string): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise, successMessage);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActivityResponse.html":{"url":"interfaces/ActivityResponse.html","title":"interface - ActivityResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActivityResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                The response that was given with some resource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The error message, if any, from the activity.\nA response without an error is assumed to have succeeded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The response message, if any, from the activity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BannerActivityReporterComponent.html":{"url":"components/BannerActivityReporterComponent.html","title":"component - BannerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BannerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Shows a banner to the user to represent the state of an activity.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-banner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./banner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorText\n                            \n                            \n                                running\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onErrorClosed\n                            \n                            \n                                onSuccessClosed\n                            \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                reset\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                loadingMessage\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService, promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        loadingMessage\n                    \n                \n                \n                    \n                        Type :         LazyString\n\n                    \n                \n                \n                    \n                        Default value : this.translationService.translateAsync('vcd.cc.loading')\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n                \n                    \n                        The translated message that is displayed to the user while loading.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onErrorClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonErrorClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:67\n                \n            \n\n\n            \n                \n                    Closes the error message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSuccessClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonSuccessClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:74\n                \n            \n\n\n            \n                \n                    Closes the success message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:49\n                \n            \n\n\n            \n                \n                    Shows the given {@param errorText} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:57\n                \n            \n\n\n            \n                \n                    Shows the given {@param successMessage} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:40\n                \n            \n\n\n            \n                \n                    Begins to show the banner with a loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            successMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject, Input } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { LazyString } from '@vcd/i18n';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Shows a banner to the user to represent the state of an activity.\n */\n@Component({\n    selector: 'vcd-banner-activity-reporter',\n    templateUrl: './banner-activity-reporter.component.html',\n})\nexport class BannerActivityReporterComponent extends ActivityReporter {\n    running = false;\n    errorText: string;\n    successMessage: string;\n\n    /**\n     * The translated message that is displayed to the user while loading.\n     */\n    @Input()\n    loadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.loading');\n\n    constructor(\n        private translationService: TranslationService,\n        @Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver\n    ) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the banner with a loading indicator.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.successMessage = null;\n        this.errorText = null;\n    }\n\n    /**\n     * Shows the given {@param errorText} to the user.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Shows the given {@param successMessage} to the user.\n     */\n    reportSuccess(successMessage: string): void {\n        if (successMessage) {\n            this.successMessage = successMessage;\n        }\n        this.running = false;\n    }\n\n    /**\n     * Closes the error message if displayed.\n     */\n    onErrorClosed(): void {\n        this.errorText = null;\n    }\n\n    /**\n     * Closes the success message if displayed.\n     */\n    onSuccessClosed(): void {\n        this.successMessage = null;\n    }\n\n    /*\n     * Reset the banner activity state manually.\n     *\n     * Call it when banner should be reset to its default state.\n     */\n    reset(): void {\n        this.running = false;\n        this.errorText = null;\n        this.successMessage = null;\n    }\n}\n\n    \n\n    \n        \n    {{ loadingMessage | lazyString }}\n\n\n\n    \n        \n            {{ errorText }}\n        \n    \n\n\n\n    \n        \n            {{ successMessage }}\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ loadingMessage | lazyString }}                        {{ errorText }}                                    {{ successMessage }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BannerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannerActivityReporterWidgetObject.html":{"url":"classes/BannerActivityReporterWidgetObject.html","title":"class - BannerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                                \n                                    sucessText\n                                \n                                \n                                    loadingText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-banner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sucessText\n                    \n                \n\n                \n                    \n                        getsucessText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadingText\n                    \n                \n\n                \n                    \n                        getloadingText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BannerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class BannerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-banner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    get sucessText(): string {\n        return this.component.successMessage;\n    }\n\n    get loadingText(): string {\n        return this.findElement('clr-alert').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormControl.html":{"url":"classes/BaseFormControl.html","title":"class - BaseFormControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/base-form-control.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\nthe form control backing a form control name directive available to sub classes.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ControlValueAccessor\n                            CanBeReadOnly\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    showErrors\n                                \n                                \n                                    errorKeys\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:67\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:21\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:26\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:31\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:52\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:62\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:57\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:46\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:41\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:85\n                                \n                            \n                    \n                        \n                                The FormControl associated with the FormControlName directive\n\n\n                                \n                                    Returns :         FormControl\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showErrors\n                    \n                \n\n                \n                    \n                        getshowErrors()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorKeys\n                    \n                \n\n                \n                    \n                        geterrorKeys()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:98\n                                \n                            \n                    \n                        \n                                Errors from the form control validation\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, Type } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { IdGenerator } from '../utils/id-generator/id-generator';\nimport { CanBeReadOnly } from './interfaces/can-be-read-only.interface';\n\nconst idGenerator = new IdGenerator('base-form-control-id');\n\n/**\n * Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\n * the form control backing a form control name directive available to sub classes.\n */\nexport class BaseFormControl implements ControlValueAccessor, CanBeReadOnly {\n    /**\n     * Auto generated ID for the input field.\n     */\n    id: string;\n\n    /**\n     * Change callback.\n     */\n    onChange: (...args: unknown[]) => unknown;\n\n    /**\n     * Touch callback.\n     */\n    onTouch: (...args: unknown[]) => unknown;\n\n    /**\n     * Whether the control is disabled.\n     */\n    disabled = false;\n\n    /**\n     * Show the asterisk next to the control when true\n     */\n    @Input() showAsterisk = false;\n\n    /**\n     * The label that appears before the control\n     */\n    @Input() label: string;\n\n    /**\n     * The description that appears below the control\n     * \\u00A0 is &nbsp; (non-breaking space)\n     */\n    @Input() description = '\\u00A0';\n\n    /**\n     * Whether this component is in readonly mode\n     */\n    @Input() isReadOnly = false;\n\n    /**\n     * Error labels to be used instead of NgControl error keys\n     */\n    @Input() errorLabels: string[] = [];\n\n    /**\n     * FormControlName directive\n     */\n    formControlNameDirective: NgControl;\n\n    /**\n     * To store the initial value of the input form control.\n     */\n    protected initialValue: number | string | boolean;\n\n    constructor(ngControl: NgControl) {\n        this.id = idGenerator.generate();\n        if (ngControl) {\n            ngControl.valueAccessor = this;\n            this.formControlNameDirective = ngControl;\n        }\n    }\n\n    /**\n     * The FormControl associated with the FormControlName directive\n     */\n    get formControl(): FormControl {\n        return this.formControlNameDirective\n            ? (this.formControlNameDirective.control as FormControl)\n            : new FormControl('');\n    }\n\n    get showErrors(): boolean {\n        return this.formControl.enabled && !this.formControl.pristine && !this.formControl.valid;\n    }\n\n    /**\n     * Errors from the form control validation\n     */\n    get errorKeys(): string[] {\n        if (this.errorLabels.length) {\n            return this.errorLabels;\n        }\n        return Object.keys(this.formControl.errors || {});\n    }\n\n    registerOnChange(onChange: (...args: unknown[]) => unknown): void {\n        this.onChange = onChange;\n    }\n\n    registerOnTouched(onTouched: (...args: unknown[]) => unknown): void {\n        this.onTouch = onTouched;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: any): void {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoldTextRendererComponent.html":{"url":"components/BoldTextRendererComponent.html","title":"component - BoldTextRendererComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoldTextRendererComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n\n\n    \n        Description\n    \n    \n        A ComponentRenderer component that is used for rendering a bold text inside a column cell template\n\n    \n\n\n    \n        Implements\n    \n    \n                    ComponentRenderer\n    \n\n    \n        Example\n    \n    \n                \n                    Example usage with RendererSpec:\ncolumns: GridColumn[] = [\n{\ndisplayName: 'Component Renderer',\nrenderer: RendererSpec(\n  BoldTextRendererComponent,\n  (record: MockRecord) => ({text: record.name})\n)\n}\n];\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-bold-text-renderer\n            \n\n\n\n            \n                template\n                {{ config.text }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :         BoldTextRendererConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ config.text }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BoldTextRendererComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoldTextRendererConfig.html":{"url":"interfaces/BoldTextRendererConfig.html","title":"interface - BoldTextRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoldTextRendererConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n        \n\n            \n                Description\n            \n            \n                ComponentRenderer.config type that the BoldTextRendererComponent can understand\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be displayed in bold font\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoldTextRendererWidgetObject.html":{"url":"classes/BoldTextRendererWidgetObject.html","title":"class - BoldTextRendererWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoldTextRendererWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for the bold text renderer.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    text\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-bold-text-renderer'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n\n                \n                    \n                        gettext()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { VcdDatagridWidgetObject } from '../../utils/test/datagrid/vcd-datagrid.wo';\nimport { WidgetObject } from '../../utils/test/widget-object';\nimport { BoldTextRendererComponent } from './bold-text-renderer.component';\n\n/**\n * Mixin that allows {@link ClrDatagridWidgetObject} to read information from {@link BoldTextRendererComponent}\n */\n// tslint:disable-next-line:typedef\nexport function WithGridBoldRenderer>>(Base: TBase) {\n    return class extends Base {\n        getBoldText(row: number, column: number): string {\n            const cellElement = this.clrDatagrid.getCell(row, column);\n            return this.getNodeText(this.findElement('strong', cellElement));\n        }\n    };\n}\n\n/**\n * Widget Object for the bold text renderer.\n */\nexport class BoldTextRendererWidgetObject extends WidgetObject {\n    static tagName = 'vcd-bold-text-renderer';\n\n    get text(): string {\n        return this.findElement('strong').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Button.html":{"url":"interfaces/Button.html","title":"interface - Button","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Button\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A generic interface for a button that can be displayed on the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        class\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                                \n                                        isActive\n                                \n                                \n                                        label\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The css class the button should have.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way this button should be shown when inactive.\nOverrides ButtonConfig.inactiveDisplayMode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translated text of the button.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonConfig.html":{"url":"interfaces/ButtonConfig.html","title":"interface - ButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that describes the type of buttons to put on the top of the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextualButtonConfig\n                                \n                                \n                                        globalButtons\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextualButtonConfig\n                                    \n                                \n                                \n                                    \n                                        contextualButtonConfig:     ContextualButtonConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButtonConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The buttons whose displayability depends on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        globalButtons\n                                    \n                                \n                                \n                                    \n                                        globalButtons:     GlobalButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GlobalButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The buttons whose displayability does not depend on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way buttons should be shown when inactive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bytes.html":{"url":"classes/Bytes.html","title":"class - Bytes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bytes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                B\n                            \n                            \n                                    Static\n                                GB\n                            \n                            \n                                    Static\n                                KB\n                            \n                            \n                                    Static\n                                MB\n                            \n                            \n                                    Static\n                                TB\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            B\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1, 'B')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 3, 'GB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:137\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            KB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024, 'KB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:135\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 2, 'MB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:136\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            TB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 4, 'TB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:138\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Bytes.B, Bytes.KB, Bytes.MB, Bytes.GB]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:139\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.bytes.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:133\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.filesize.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Bytes[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CanBeReadOnly.html":{"url":"interfaces/CanBeReadOnly.html","title":"interface - CanBeReadOnly","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CanBeReadOnly\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/interfaces/can-be-read-only.interface.ts\n        \n\n            \n                Description\n            \n            \n                Components that can be made readonly should implement this interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isReadOnly\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This being true implies that any controls that may edit data will not allow editing or be removed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CanBeReadOnly {\n    /**\n     * This being true implies that any controls that may edit data will not allow editing or be removed\n     */\n    isReadOnly: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CliptextConfig.html":{"url":"interfaces/CliptextConfig.html","title":"interface - CliptextConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CliptextConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                The configuration information for the cliptext within the cells of the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        mouseoutDelay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the cliptext should be disabled.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouseoutDelay\n                                    \n                                \n                                \n                                    \n                                        mouseoutDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The time delay from mouse off to hide the cliptext.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         TooltipSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TooltipSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The size of the tooltip to be displayed in the cell.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnConfigInternal.html":{"url":"interfaces/ColumnConfigInternal.html","title":"interface - ColumnConfigInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnConfigInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                For simplifying logic inside the HTML template to differentiate between different GridColumn.renderer\ntypes.\n\n            \n\n            \n                Extends\n            \n            \n                        GridColumn\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldColumnRendererSpec\n                                \n                                \n                                            Optional\n                                        fieldName\n                                \n                                \n                                            Optional\n                                        fieldRenderer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldColumnRendererSpec\n                                    \n                                \n                                \n                                    \n                                        fieldColumnRendererSpec:         ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnRendererSpec\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldRenderer\n                                    \n                                \n                                \n                                    \n                                        fieldRenderer:         FunctionRenderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FunctionRenderer\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnRendererSpec.html":{"url":"interfaces/ColumnRendererSpec.html","title":"interface - ColumnRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that creates a config object required for the configuration of component that will be rendered in the column\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonUtil.html":{"url":"classes/CommonUtil.html","title":"class - CommonUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/common-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                roundTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            roundTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    roundTo(value: number, digits: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:12\n                \n            \n\n\n            \n                \n                    Rounds number to given floating point, 2 by default.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        number from float data type\n\n                                    \n                                \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        how many numbers will be shown after decimal point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class CommonUtil {\n    /**\n     * Rounds number to given floating point, 2 by default.\n     * @param value number from float data type\n     * @param digits how many numbers will be shown after decimal point\n     */\n    static roundTo(value: number, digits: number = 2): number {\n        if (!value) {\n            value = 0;\n        }\n        return Number(Math.round(Number(value + 'e' + digits)) + 'e-' + digits);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRenderer.html":{"url":"interfaces/ComponentRenderer.html","title":"interface - ComponentRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                Implemented by all the component renderers. The components that have to be rendered dynamically.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object used by the component renderers inside their HTML template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ComponentRendererOutletDirective.html":{"url":"directives/ComponentRendererOutletDirective.html","title":"directive - ComponentRendererOutletDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ComponentRendererOutletDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n        \n\n            \n                Description\n            \n            \n                Component that acts as a host element for dynamic rendering of component constructors.\nIt takes ComponentRendererSpec and also 'context' as input in case of a ColumnRendererSpec that serves as argument for\nColumnRendererSpec.config method. Attaches the component to be rendered to the view container of host element\nand updates it's configuration whenever changed.\nExample usage:\n\n\n\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdComponentRendererOutlet]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                componentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assignValue\n                            \n                            \n                                    Private\n                                attachRenderer\n                            \n                            \n                                    Private\n                                detachRenderer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdComponentRendererOutlet\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    vcdComponentRendererOutlet\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                            \n                        \n                \n                    \n                        Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            assignValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assignValue(config:  | T, context: R)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:63\n                \n            \n\n\n            \n                \n                    Updates the configuration of instantiated component\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                             | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            R\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            attachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:52\n                \n            \n\n\n            \n                \n                    Attaches the passed component type to the view of this directive host\n\n\n                    \n                        Returns :         ComponentRef>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            detachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRef>\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRendererConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n\n\n                \n                    \n                        setvcdComponentRendererOutlet(renderer: literal type)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                                \n                            \n                    \n                        \n                                Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderer\n                                                    \n                                                            \n                                                                        literal type\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ComponentFactoryResolver, ComponentRef, Directive, Input, ViewContainerRef } from '@angular/core';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {@link ComponentRendererSpec} and also 'context' as input in case of a {@link ColumnRendererSpec} that serves as argument for\n * {@link ColumnRendererSpec.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * \n *\n */\n@Directive({\n    selector: '[vcdComponentRendererOutlet]',\n})\nexport class ComponentRendererOutletDirective {\n    private componentRef: ComponentRef>;\n    private componentType: ComponentRendererConstructor;\n\n    constructor(private viewContainerRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {}\n\n    /**\n     * Sets the component that this outlet should render. Where rendererSpec is the\n     * {@link ComponentRendererSpec} that details how to render the component and context\n     * is any information that the component needs to render.\n     */\n    @Input()\n    set vcdComponentRendererOutlet(renderer: { rendererSpec: ComponentRendererSpec; context?: R }) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n\n    /**\n     * Attaches the passed component type to the view of this directive host\n     */\n    private attachRenderer(): ComponentRef> {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    /**\n     * Updates the configuration of instantiated component\n     */\n    private assignValue(config: ((r: R) => T) | T, context: R): void {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n\n    private detachRenderer(): void {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRendererSpec.html":{"url":"interfaces/ComponentRendererSpec.html","title":"interface - ComponentRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                An object that contains the constructor of a component of ComponentRenderer type that has to be rendered dynamically.\nComponentRendererOutletDirective uses this object to render the component. It is responsible for setting the\ncomponent's configurationComponentRenderer after dynamically initializing it. But the caller is responsible\nfor providing a config\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ComponentRenderer.config. In the case of a ColumnRendererSpec it is a function that takes a rest\nitem as input and returns an object of ComponentRenderer.config\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ComponentRendererConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Constructor of a specific type of component to be rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButton.html":{"url":"interfaces/ContextualButton.html","title":"interface - ContextualButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability dependends on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handler\n                                \n                                \n                                        icon\n                                \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButtonConfig.html":{"url":"interfaces/ContextualButtonConfig.html","title":"interface - ContextualButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A configuration that descibes all the information about the contextual buttons.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        buttonContents\n                                \n                                \n                                        buttons\n                                \n                                \n                                            Optional\n                                        featured\n                                \n                                \n                                            Optional\n                                        featuredCount\n                                \n                                \n                                        position\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buttonContents\n                                    \n                                \n                                \n                                    \n                                        buttonContents:         TextIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the title should be the button label, icon, or both\nDefaults to ICON if unset.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttons\n                                    \n                                \n                                \n                                    \n                                        buttons:     ContextualButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of all the contextual buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featured\n                                    \n                                \n                                \n                                    \n                                        featured:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An ordered list of ContextualButton.ids of buttons that should be in a featured position.\nOnly non-hidden buttons will be shown.\nIf featured is not set, all buttons will become featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featuredCount\n                                    \n                                \n                                \n                                    \n                                        featuredCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How many buttons should display on the featured section.\nUsed when you want to set a limit on the number of featured buttons shown.\nIf featuredCount is not set, it will default to the total number of buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         ContextualButtonPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ContextualButtonPosition\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Where the buttons should display on the grid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CsvExporterService.html":{"url":"injectables/CsvExporterService.html","title":"injectable - CsvExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CsvExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/csv-exporter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCsv\n                            \n                            \n                                    Public\n                                downloadCsvFile\n                            \n                            \n                                    Public\n                                hasPotentialInjection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(rows: any[][], shouldSanitize)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a string that can be used to create a Blob for a CSV\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            downloadCsvFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadCsvFile(csvFile: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:38\n                \n            \n\n\n            \n                \n                    Does a client side download\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    csvFile\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string contents of a CSV file to be downloaded\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the file to be downloaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPotentialInjection(rows: any[][])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:29\n                \n            \n\n\n            \n                \n                    Whether the CSV that would result from the export is at risk of code injection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nexport class CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param rows 2D array of data. First row is the names for the fields\n     * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n     * possible code injection\n     */\n    public createCsv(rows: any[][], shouldSanitize = false): string {\n        return rows.map(row => processRow(row, shouldSanitize)).join('\\n');\n    }\n\n    /**\n     * Whether the CSV that would result from the export is at risk of code injection\n     * @param rows 2D array of data. First row is the names for the fields\n     */\n    public hasPotentialInjection(rows: any[][]): boolean {\n        return rows.some(hasPotentialInjection);\n    }\n\n    /**\n     * Does a client side download\n     * @param csvFile The string contents of a CSV file to be downloaded\n     * @param filename The name of the file to be downloaded\n     */\n    public downloadCsvFile(csvFile: string, filename: string): void {\n        const mimeType = 'text/csv;charset=utf-8;';\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst LEADING_CONTROL_CHAR = /^[-+=@]/;\n\n/**\n * Whether the given row data is at risk of code injection when exported to CSV.\n */\nfunction hasPotentialInjection(row: unknown[]): boolean {\n    return row.some(cell => LEADING_CONTROL_CHAR.test(encodeValue(cell, false)));\n}\n\n/**\n * Returns a string\n * @param row A list of cells to be turned into a CSV string, separated by commas\n * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n * possible code injection\n */\nfunction processRow(row: unknown[], shouldSanitize: boolean): string {\n    return row.map(cell => encodeValue(cell, shouldSanitize)).join(',');\n}\n\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param cellValue Cell cellValue to be encoded\n * @param shouldSanitize If this cellValue starts with a control should it be\n * prefixed with the tab character\n */\nfunction encodeValue(cellValue: unknown, shouldSanitize: boolean): string {\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    let result = innerValue.replace(/\"/g, '\"\"');\n\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    if (shouldSanitize) {\n        return sanitizeString(result);\n    }\n    return result;\n}\n\n/**\n * Prevents CSV injection by prefixing with a tab character if the string contains a\n * special character.\n */\nfunction sanitizeString(value: string): string {\n    if (LEADING_CONTROL_CHAR.test(value)) {\n        return '\\t' + value;\n    }\n    return value;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataExportRequestEvent.html":{"url":"interfaces/DataExportRequestEvent.html","title":"interface - DataExportRequestEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataExportRequestEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Information passed to the caller so they can fetch the data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exportData\n                                \n                                \n                                        selectedColumns\n                                \n                                \n                                        updateProgress\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exportData\n                                    \n                                \n                                \n                                    \n                                        exportData:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this when all records have been fetched to initiate the CSV creation.\nThis should only be called once after all data fetching is finished\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedColumns\n                                    \n                                \n                                \n                                    \n                                        selectedColumns:         ExportColumn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportColumn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Columns selected by the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateProgress\n                                    \n                                \n                                \n                                    \n                                        updateProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this to indicate a new value to be displayed in the progress indicator.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataExporterWidgetObject.html":{"url":"classes/DataExporterWidgetObject.html","title":"class - DataExporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataExporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.wo.ts\n        \n\n            \n                Description\n            \n            \n                Testing Object for DataExporterComponent\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clickCancel\n                            \n                            \n                                clickColumnCheckbox\n                            \n                            \n                                clickColumnDropdown\n                            \n                            \n                                clickExport\n                            \n                            \n                                removeColumn\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLoopingProgressBar\n                                \n                                \n                                    columnBubbles\n                                \n                                \n                                    columnCheckboxes\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-data-exporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickCancel\n                        \n                        \n                    \n                \n            \n            \n                \nclickCancel()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:55\n                \n            \n\n\n            \n                \n                    Clicks the cancel button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnCheckbox\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnCheckbox(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:48\n                \n            \n\n\n            \n                \n                    Clicks the checkbox next to a given column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnDropdown\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnDropdown()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:69\n                \n            \n\n\n            \n                \n                    Click the arrow to open/close the column dropdown.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickExport\n                        \n                        \n                    \n                \n            \n            \n                \nclickExport()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:62\n                \n            \n\n\n            \n                \n                    Clicks the export button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeColumn\n                        \n                        \n                    \n                \n            \n            \n                \nremoveColumn(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:40\n                \n            \n\n\n            \n                \n                    Clicks the remove button for a column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLoopingProgressBar\n                    \n                \n\n                \n                    \n                        getisLoopingProgressBar()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:18\n                                \n                            \n                    \n                        \n                                Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnBubbles\n                    \n                \n\n                \n                    \n                        getcolumnBubbles()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:25\n                                \n                            \n                    \n                        \n                                The strings for the available column bubbles.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnCheckboxes\n                    \n                \n\n                \n                    \n                        getcolumnCheckboxes()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:32\n                                \n                            \n                    \n                        \n                                The strings for the available column checkboxes.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../utils/test/widget-object';\nimport { DataExporterComponent } from './data-exporter.component';\n\n/**\n * Testing Object for {@link DataExporterComponent}\n */\nexport class DataExporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-data-exporter';\n\n    /**\n     * Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n     */\n    get isLoopingProgressBar(): boolean {\n        return !!this.findElement('.progress.loop');\n    }\n\n    /**\n     * The strings for the available column bubbles.\n     */\n    get columnBubbles(): string[] {\n        return this.getTexts('.column-label');\n    }\n\n    /**\n     * The strings for the available column checkboxes.\n     */\n    get columnCheckboxes(): string[] {\n        return this.getTexts('.column-checkbox');\n    }\n\n    /**\n     * Clicks the remove button for a column\n     * @param index Index of column, 0 based\n     */\n    removeColumn(index: number): void {\n        this.click(`.column-label:nth-of-type(${index + 1}) clr-icon`);\n    }\n\n    /**\n     * Clicks the checkbox next to a given column\n     * @param index Index of column, 0 based\n     */\n    clickColumnCheckbox(index: number): void {\n        this.click(`.column-checkbox:nth-of-type(${index + 1}) input`);\n    }\n\n    /**\n     * Clicks the cancel button.\n     */\n    clickCancel(): void {\n        this.click('.cancel');\n    }\n\n    /**\n     * Clicks the export button.\n     */\n    clickExport(): void {\n        this.click('.export');\n    }\n\n    /**\n     * Click the arrow to open/close the column dropdown.\n     */\n    clickColumnDropdown(): void {\n        this.click('.dropdown-button');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatagridFilter.html":{"url":"classes/DatagridFilter.html","title":"class - DatagridFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatagridFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Extended by filter components used in DatagridComponent. Those components can only be used inside a\nclr-dg-filter component and are dynamically rendered by ComponentRendererOutletDirective using\nGridColumn.filter\nV is the type of filter input value that is passed into setValue method\nC extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            ClrDatagridFilterInterface\n                            ComponentRenderer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                                \n                                    queryField\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:71\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:87\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:137\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:112\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:99\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:122\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:127\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:107\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:117\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n                \n                    \n                        getconfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:80\n                                \n                            \n\n                \n                    \n                        setconfig(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        queryField\n                    \n                \n\n                \n                    \n                        getqueryField()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:147\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridMultiSelectFilterComponent.html":{"url":"components/DatagridMultiSelectFilterComponent.html","title":"component - DatagridMultiSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridMultiSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with list of checkboxes to select\nmultiple options\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'state',\n      queryFieldName: 'state',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridMultiSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 'CA',\n                  display: 'California'\n              }, {\n                  value: 'MA',\n                  display: 'Massachusetts'\n              }],\n              value: ['MA', 'NC'],\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-multiselect-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./datagrid-multiselect-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \nonBeforeSetConfig(config: DatagridMultiSelectFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:87\n                \n            \n\n\n            \n                \n                    Overrides the config property because, the formGroup controls are defined by the config set by the caller.\nValue of each option becomes a formControl name inside the formGroup.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridMultiSelectFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MultiSelectOptionInternal[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:77\n                            \n                        \n\n                \n                    \n                        Used inside the HTML to instantiate checkbox options\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                \n                    {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            {{ option.isTranslatable ? (option.display | translate) : option.display }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridMultiSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridMultiSelectFilterConfig.html":{"url":"interfaces/DatagridMultiSelectFilterConfig.html","title":"interface - DatagridMultiSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridMultiSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     MultiSelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MultiSelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridNumericFilterComponent.html":{"url":"components/DatagridNumericFilterComponent.html","title":"component - DatagridNumericFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridNumericFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-numeric-filter\n            \n\n            \n                styleUrls\n                datagrid-numeric-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                datagrid-numeric-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _unit\n                            \n                            \n                                    Private\n                                _unitOptions\n                            \n                            \n                                fromInput\n                            \n                            \n                                maxNumberLength\n                            \n                            \n                                toInput\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                unit\n                            \n                            \n                                unitOptions\n                            \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    unitOptions\n                                \n                                \n                                    unit\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n                \n                    \n                        Type :         Unit\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n                \n                    \n                        Type :         Unit[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: DatagridNumericFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridNumericFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: DatagridNumericFilterValue)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                DatagridNumericFilterValue\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:62\n                            \n                        \n\n                \n                    \n                        Base unit to which selected units are converted\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unitOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:48\n                            \n                        \n\n                \n                    \n                        Options for the select input of units\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('from')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxNumberLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Number.MAX_SAFE_INTEGER.toString().length\n\n                        \n                    \n                    \n                        \n                            Default value : Number.MAX_SAFE_INTEGER.toString().length\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('to')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n\n                \n                    \n                        getunitOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:55\n                                \n                            \n\n                \n                    \n                        setunitOptions(val: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n\n                \n                    \n                        getunit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:70\n                                \n                            \n\n                \n                    \n                        setunit(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n        \n        \n    \n\n    \n        \n        \n        \n    \n\n\n    \n\n    \n                \n                    datagrid-numeric-filter.component.scss\n                \n                vcd-form-input {\n    & ::ng-deep .clr-form-control,\n    & ::ng-deep .clr-subtext {\n        margin-top: 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridNumericFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridNumericFilterConfig.html":{"url":"interfaces/DatagridNumericFilterConfig.html","title":"interface - DatagridNumericFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridNumericFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        unit\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridSelectFilterComponent.html":{"url":"components/DatagridSelectFilterComponent.html","title":"component - DatagridSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with select input\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'age',\n      queryFieldName: 'age',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 30,\n                  display: 'Thirty'\n              }, {\n                  value: 60,\n                  display: 'sixty'\n              }],\n              value: 60,\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-select-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-select-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anyChoice\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anyChoice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SelectOption\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        value: '',\n        display: '',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:58\n                            \n                        \n\n                \n                    \n                        Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    {{ anyChoice.display }}\n                    {{\n                        option.isTranslatable ? (option.display | translate) : option.display\n                    }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            {{ anyChoice.display }}                    {{                        option.isTranslatable ? (option.display | translate) : option.display                    }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridSelectFilterConfig.html":{"url":"interfaces/DatagridSelectFilterConfig.html","title":"interface - DatagridSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                List of select options and initial value for the filter are passed through this\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        customFiql\n                                \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFiql\n                                    \n                                \n                                \n                                    \n                                        customFiql:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Switch to disable conversion of filter value to FIQL. Used by DatagridSelectFilterComponent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridStringFilterComponent.html":{"url":"components/DatagridStringFilterComponent.html","title":"component - DatagridStringFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridStringFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-string-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-string-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addWildCard\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addWildCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addWildCard(input: string, position: WildCardPosition, wildcardCharacter: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:64\n                \n            \n\n\n            \n                \n                    Wraps a string with a wrapCharacter in given position;\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    position\n                                    \n                                                WildCardPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    wildcardCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridStringFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridStringFilterConfig.html":{"url":"interfaces/DatagridStringFilterConfig.html","title":"interface - DatagridStringFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridStringFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Configures the '*' position in the FIQL string output\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        wildCardPosition\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        wildCardPosition\n                                    \n                                \n                                \n                                    \n                                        wildCardPosition:         WildCardPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WildCardPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPane.html":{"url":"interfaces/DetailPane.html","title":"interface - DetailPane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration objet used to create the detail pane on the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        header\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:         ComponentRendererConstructor>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The contents that go within this detail pane.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header that goes on top of this detail pane.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPaneConfig.html":{"url":"interfaces/DetailPaneConfig.html","title":"interface - DetailPaneConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPaneConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail pane component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail pane should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailRowConfig.html":{"url":"interfaces/DetailRowConfig.html","title":"interface - DetailRowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailRowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail row component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        index\n                                \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The total number of rows in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index this detail row is in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail row should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorBannerComponent.html":{"url":"components/ErrorBannerComponent.html","title":"component - ErrorBannerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ErrorBannerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/error/error-banner.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the error message only if a non empty errorMessage is passed in\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-error-banner\n            \n\n            \n                styleUrls\n                ./error-banner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./error-banner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorMessage\n                            \n                            \n                                closed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onAlertClosedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertClosable\n                            \n                            \n                                alertType\n                            \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dismissed\n                            \n                            \n                                errorMessageChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertClosable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:41\n                            \n                        \n                \n                    \n                        Marks clr-alert as closable or not\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        alertType\n                    \n                \n                \n                    \n                        Type :     \"danger\" | \"warning\" | \"info\" | \"success\"\n\n                    \n                \n                \n                    \n                        Default value : 'danger'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:36\n                            \n                        \n                \n                    \n                        Sets clr-alert type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:29\n                            \n                        \n                \n                    \n                        Two way bound errorMessage, will be cleared when the user dismisses the alert\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        dismissed\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:24\n                            \n                        \n                \n                    \n                        Emits events when the error banner is dismissed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessageChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:54\n                            \n                        \n                \n                    \n                        Emits an event when the error message is changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAlertClosedChange\n                        \n                        \n                    \n                \n            \n            \n                \nonAlertClosedChange(closed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/error/error-banner.component.ts:59\n                \n            \n\n\n            \n                \n                    Clears the error message when the alert is closed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    closed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n\n                \n                    \n                        seterrorMessage(val: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:46\n                                \n                            \n                    \n                        \n                                Sets the error message displayed by this error banner.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Component that displays the error message only if a non empty errorMessage is passed in\n */\n@Component({\n    selector: 'vcd-error-banner',\n    templateUrl: './error-banner.component.html',\n    styleUrls: ['./error-banner.component.scss'],\n})\nexport class ErrorBannerComponent {\n    private _errorMessage = '';\n\n    closed = true;\n\n    /**\n     * Emits events when the error banner is dismissed.\n     */\n    @Output() dismissed = new EventEmitter();\n\n    /**\n     * Two way bound errorMessage, will be cleared when the user dismisses the alert\n     */\n    @Input() get errorMessage(): string {\n        return this._errorMessage;\n    }\n\n    /**\n     * Sets clr-alert type\n     */\n    @Input() alertType: 'danger' | 'warning' | 'info' | 'success' = 'danger';\n\n    /**\n     * Marks clr-alert as closable or not\n     */\n    @Input() alertClosable = true;\n\n    /**\n     * Sets the error message displayed by this error banner.\n     */\n    set errorMessage(val: string) {\n        this._errorMessage = val;\n        this.closed = !val;\n    }\n\n    /**\n     * Emits an event when the error message is changed.\n     */\n    @Output() errorMessageChange = new EventEmitter();\n\n    /**\n     * Clears the error message when the alert is closed.\n     */\n    onAlertClosedChange(closed: boolean): void {\n        this._errorMessage = '';\n        this.errorMessageChange.emit('');\n        this.dismissed.next();\n    }\n}\n\n    \n\n    \n        \n    \n        {{ errorMessage }}\n    \n\n\n    \n\n    \n                \n                    ./error-banner.component.scss\n                \n                /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nclr-alert ::ng-deep .alert {\n    margin-left: 24px;\n    margin-right: 24px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ errorMessage }}    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ErrorBannerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExportColumn.html":{"url":"interfaces/ExportColumn.html","title":"interface - ExportColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExportColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Identifiers for each column that user is allowed to select\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        fieldName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Displayed in the list of columns\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the field in the JSON that is returned and converted to a viewable format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterBuilder.html":{"url":"classes/FilterBuilder.html","title":"class - FilterBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/filter-builder.ts\n        \n\n            \n                Description\n            \n            \n                Utility to reduce the verbosity required when creating complex query filter expressions.\nUsage:\nconst builder = new FilterBuilder();\nconst filter = builder\n          .is(\"isVappTemplate\").equalTo(true)\n          .and()\n          .is(\"vcd\").equalTo(vcdId)\n          .and().or(\n              builder.is(\"created\").before(userInputDate),\n              builder.is(\"uptime\").greaterThan(user)\n          );\nWill produce:\nisVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentOperator\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                    Private\n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                after\n                            \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                and\n                            \n                            \n                                    Public\n                                any\n                            \n                            \n                                    Public\n                                before\n                            \n                            \n                                    Public\n                                betweenNumbers\n                            \n                            \n                                    Private\n                                buildPartial\n                            \n                            \n                                    Private\n                                clear\n                            \n                            \n                                    Private\n                                condition\n                            \n                            \n                                    Public\n                                equalTo\n                            \n                            \n                                    Public\n                                getString\n                            \n                            \n                                    Public\n                                greaterThan\n                            \n                            \n                                    Public\n                                greaterThanOrEqualTo\n                            \n                            \n                                    Public\n                                is\n                            \n                            \n                                    Public\n                                lessThan\n                            \n                            \n                                    Public\n                                lessThanOrEqualTo\n                            \n                            \n                                    Public\n                                notEqualTo\n                            \n                            \n                                    Public\n                                or\n                            \n                            \n                                    Public\n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parent: FilterBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        FilterBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentOperator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            after\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    after(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:246\n                \n            \n\n\n            \n                \n                    Match a filter expression to be after a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            all\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    all(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:106\n                \n            \n\n\n            \n                \n                    Top level AND operator\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:72\n                \n            \n\n\n            \n                \n                    Conjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            any\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    any(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:160\n                \n            \n\n\n            \n                \n                    Top level OR operator\nconditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            before\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    before(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:238\n                \n            \n\n\n            \n                \n                    Match a filter expression to be before a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            betweenNumbers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    betweenNumbers(values: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:256\n                \n            \n\n\n            \n                \n                    Match a filter expression to be between two numbers.\nLower limit is greater or equal and upper limit is less or equal.\nIf for either of the limit is not provided value, the limit is not included in the filter expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            buildPartial\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPartial()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            condition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    condition(operator: string, value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            equalTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    equalTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:190\n                \n            \n\n\n            \n                \n                    Match a filter expression to be equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getString()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:62\n                \n            \n\n\n            \n                \n                    Create a string representing the filter parameter to be used in a query\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the filter expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:222\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:230\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            is\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    is(property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:52\n                \n            \n\n\n            \n                \n                    Initialize a filter expression\n  property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The created FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:206\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:214\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            notEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    notEqualTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:198\n                \n            \n\n\n            \n                \n                    Match a filter expression to be different to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:126\n                \n            \n\n\n            \n                \n                    Disjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:180\n                \n            \n\n\n            \n                \n                    Wrap the current expression in ()\n\n\n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const Operators: { [key: string]: string } = {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n};\n\nexport type Primitives = boolean | string | number;\n\n/**\n * Utility to reduce the verbosity required when creating complex query filter expressions.\n *\n * Usage:\n * const builder = new FilterBuilder();\n * const filter = builder\n *          .is(\"isVappTemplate\").equalTo(true)\n *          .and()\n *          .is(\"vcd\").equalTo(vcdId)\n *          .and().or(\n *              builder.is(\"created\").before(userInputDate),\n *              builder.is(\"uptime\").greaterThan(user)\n *          );\n *\n * Will produce:\n * isVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n */\nexport class FilterBuilder {\n    private result = '';\n    private parent: FilterBuilder;\n    private currentOperator: string;\n\n    constructor(parent: FilterBuilder = null) {\n        this.parent = parent;\n    }\n\n    /**\n     * Initialize a filter expression\n     *  property\n     * @returns The created FilterBuilder instance\n     */\n    public is(property: string): FilterBuilder {\n        const fb = new FilterBuilder(this);\n        fb.result = property;\n        return fb;\n    }\n\n    /**\n     * Create a string representing the filter parameter to be used in a query\n     * @returns the filter expression\n     */\n    public getString(): string {\n        const query = this.buildPartial();\n        return query;\n    }\n\n    /**\n     * Conjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public and(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.OR ||\n                (this.parent && this.parent.currentOperator === Operators.OR)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.AND;\n            }\n            this.result += Operators.AND;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level AND operator\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public all(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public or(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.AND ||\n                (this.parent && this.parent.currentOperator === Operators.AND)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.OR;\n            }\n            this.result += Operators.OR;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level OR operator\n     * conditions\n     * @returns The FilterBuilder instance\n     */\n    public any(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n            first.clear();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n                condition.clear();\n            });\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Wrap the current expression in ()\n     * @returns The FilterBuilder instance\n     */\n    public wrap(): FilterBuilder {\n        this.result = '(' + this.result + ')';\n        this.currentOperator = null;\n        return this;\n    }\n\n    /**\n     * Match a filter expression to be equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public equalTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.EQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be different to a value\n     * @returns The FilterBuilder instance\n     */\n    public notEqualTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.NEQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be less than a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThan(value: number): FilterBuilder {\n        return this.condition(Operators.LT, value);\n    }\n\n    /**\n     * Match a filter expression to be less than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.LE, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThan(value: number): FilterBuilder {\n        return this.condition(Operators.GT, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.GE, value);\n    }\n\n    /**\n     * Match a filter expression to be before a date\n     * @returns The FilterBuilder instance\n     */\n    public before(date: Date): FilterBuilder {\n        return this.condition(Operators.LT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be after a date\n     * @returns The FilterBuilder instance\n     */\n    public after(date: Date): FilterBuilder {\n        return this.condition(Operators.GT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be between two numbers.\n     * Lower limit is greater or equal and upper limit is less or equal.\n     * If for either of the limit is not provided value, the limit is not included in the filter expression.\n     * @returns The FilterBuilder instance\n     */\n    public betweenNumbers(values: number[]): FilterBuilder {\n        const builders: FilterBuilder[] = [];\n\n        if (typeof values[0] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.GE, values[0]));\n        }\n\n        if (typeof values[1] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.LE, values[1]));\n        }\n\n        return new FilterBuilder().is('').and(...builders);\n    }\n\n    private condition(operator: string, value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        const name = this.result;\n        this.result += (operator + value) as string;\n        if (moreValues.length) {\n            moreValues.forEach(val => {\n                this.result += (',' + name + operator + val) as string;\n            });\n            this.currentOperator = Operators.OR;\n        }\n        return this;\n    }\n\n    private clear(): void {\n        this.result = '';\n        this.currentOperator = '';\n        if (this.parent) {\n            this.parent.clear();\n            this.parent = null;\n        }\n    }\n\n    private buildPartial(): string {\n        if (this.parent) {\n            return `${this.parent.buildPartial()}${this.result}`;\n        } else {\n            return this.result;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterConfig.html":{"url":"interfaces/FilterConfig.html","title":"interface - FilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Properties required by all the grid filters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        queryField\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queryField\n                                    \n                                \n                                \n                                    \n                                        queryField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used as a query field for server side filtering of the grid column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     V\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     V\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Value with which grid data can be filtered before initially being rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterRendererSpec.html":{"url":"interfaces/FilterRendererSpec.html","title":"interface - FilterRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Config object required for the configuration of component that will be rendered in the column filter widget\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterTestHostComponent.html":{"url":"components/FilterTestHostComponent.html","title":"component - FilterTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FilterTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/utils/test/datagrid/filter-utils.ts\n\n\n    \n        Description\n    \n    \n        TestHostComponent that has only single column for filter testing.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                    Static\n                                filterColumn\n                            \n                            \n                                gridData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFilter\n                        \n                        \n                    \n                \n            \n            \n                \nsetFilter(filterType: Type>, finder: WidgetFinder, config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        V\n                        C\n                    \n                \n            \n\n            \n                \n                    Creates the filterRendererSpec and adds it to the grid column above\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n                                    \n                                                Type>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    finder\n                                    \n                                                WidgetFinder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            column\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterTestHostComponent.filterColumn\n\n                        \n                    \n                    \n                        \n                            Default value : FilterTestHostComponent.filterColumn\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:110\n                            \n                        \n\n                \n                    \n                        Used inside the html template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            filterColumn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GridColumn\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:102\n                            \n                        \n\n                \n                    \n                        Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\nvalue given in the column definition below\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridDataFetchResult\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        items: [],\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:112\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Type } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { MockTranslationService, TranslationService } from '@vcd/i18n';\nimport {\n    DatagridFilter,\n    FilterComponentRendererSpec,\n    GridColumn,\n    GridDataFetchResult,\n    VcdDatagridModule,\n} from '../../../datagrid';\nimport { MockRecord } from '../../../datagrid/mock-data';\nimport { IdGenerator } from '../../id-generator/id-generator';\nimport { WidgetFinder } from '../widget-object';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n */\nasync function configureTestingModule(): Promise {\n    await TestBed.configureTestingModule({\n        imports: [VcdDatagridModule],\n        declarations: [FilterTestHostComponent],\n        providers: [\n            {\n                provide: TranslationService,\n                useClass: MockTranslationService,\n            },\n            {\n                provide: IdGenerator,\n                useValue: new IdGenerator('vcd-id'),\n            },\n        ],\n    }).compileComponents();\n}\n\n/**\n * Used inside beforeEach functions of filter tests and it does the following:\n * - Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n * - Sets the filter on the column of host component({@link FilterTestHostComponent})\n * - Opens the filter and returns a component instance of the filter created\n *\n * @param filterType to be created in the test host component grid's column\n * @param config The configuration for the filter\n *\n * Example:\n * beforeEach(function(this: HasDgStringFilter): void {\n *     this.filter = createDatagridFilterTestHelper(\n *         DatagridStringFilterComponent,\n *         { wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n *     );\n * });\n */\nexport function createDatagridFilterTestHelper(\n    filterType: Type>,\n    config?: C\n): DatagridFilter {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return grid.getFilter(filterType);\n}\n\n/**\n * Same as the above function but used for tests which need finder\n */\nexport function createDatagridFilterTestHelperWithFinder(\n    filterType: Type>,\n    config?: C\n): { finder: WidgetFinder; filter: DatagridFilter } {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return { finder, filter: grid.getFilter(filterType) };\n}\n\n/**\n * TestHostComponent that has only single column for filter testing.\n */\n@Component({\n    template: `\n        \n    `,\n})\nexport class FilterTestHostComponent {\n    /**\n     * Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\n     * value given in the column definition below\n     */\n    static filterColumn: GridColumn = {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    };\n    /**\n     * Used inside the html template\n     */\n    column = FilterTestHostComponent.filterColumn;\n\n    gridData: GridDataFetchResult = {\n        items: [],\n    };\n\n    /**\n     * Creates the filterRendererSpec and adds it to the grid column above\n     */\n    setFilter(\n        filterType: Type>,\n        finder: WidgetFinder,\n        config: C\n    ): void {\n        this.column.filter = FilterComponentRendererSpec({ type: filterType, config });\n        finder.detectChanges();\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FilterTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindParams.html":{"url":"interfaces/FindParams.html","title":"interface - FindParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Arguments for WidgetFinder and WidgetFinder\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ancestor\n                                \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                        woConstructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ancestor\n                                    \n                                \n                                \n                                    \n                                        ancestor:         DebugElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DebugElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If provided, search starts from this container. It defaults to the fixture's root debugElement\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional CSS class name that can be used when there could be multiple instances of the object within the\nfixture tree\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        woConstructor\n                                    \n                                \n                                \n                                    \n                                        woConstructor:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The constructor of the widget to be found\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindableWidget.html":{"url":"interfaces/FindableWidget.html","title":"interface - FindableWidget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindableWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Subclasses should implement the FindableWidget interface so they can be found with WidgetFinder\nNote\nThis is done by creating a static property tagNameon your subclass, not a regular instance, since this\ninterface represents a constructor for a WidgetObject, not an instance.\n\n            \n\n            \n                Extends\n            \n            \n                        Type\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        tagName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tagName\n                                    \n                                \n                                \n                                    \n                                        tagName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormCheckboxComponent.html":{"url":"components/FormCheckboxComponent.html","title":"component - FormCheckboxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormCheckboxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a input HTML element of checkbox type. The label input from\nBaseFormControl is used for displaying a label on the left of a form field and the text input is used for\ndisplaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\nto display a checkbox or toggle switch on the UI.\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-checkbox\n            \n\n\n\n\n            \n                templateUrl\n                ./form-checkbox.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                iconShape\n                            \n                            \n                                rightLabel\n                            \n                            \n                                styling\n                            \n                            \n                                text\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isCheckbox\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        iconShape\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:49\n                            \n                        \n                \n                    \n                        A shape for the icon that appears next to the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rightLabel\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:44\n                            \n                        \n                \n                    \n                        Put the label text on the right.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        styling\n                    \n                \n                \n                    \n                        Type :         CheckBoxStyling\n\n                    \n                \n                \n                    \n                        Default value : CheckBoxStyling.CHECKBOX\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:39\n                            \n                        \n                \n                    \n                        Styling for the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:34\n                            \n                        \n                \n                    \n                        The label that appears next to the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isCheckbox\n                    \n                \n\n                \n                    \n                        getisCheckbox()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:51\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\nexport enum CheckBoxStyling {\n    CHECKBOX = 'checkbox',\n    TOGGLESWITCH = 'toggle-switch',\n}\n\n/**\n * {@link FormControl} wrapper around a input HTML element of checkbox type. The label input from\n * {@link BaseFormControl} is used for displaying a label on the left of a form field and the text input is used for\n * displaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\n * to display a checkbox or toggle switch on the UI.\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-checkbox',\n    templateUrl: './form-checkbox.component.html',\n})\nexport class FormCheckboxComponent extends BaseFormControl {\n    /**\n     * The label that appears next to the control\n     */\n    @Input() text: string;\n\n    /**\n     * Styling for the checkbox.\n     */\n    @Input() styling: CheckBoxStyling = CheckBoxStyling.CHECKBOX;\n\n    /**\n     * Put the label text on the right.\n     */\n    @Input() rightLabel = false;\n\n    /**\n     * A shape for the icon that appears next to the checkbox.\n     */\n    @Input() iconShape: string;\n\n    get isCheckbox(): boolean {\n        return this.styling === CheckBoxStyling.CHECKBOX;\n    }\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n}\n\n    \n\n    \n        \n    \n        {{ label }}\n        \n            \n                \n                \n                    \n                    {{ text }}\n                \n            \n            \n                \n                    {{ key | translate: formControl.value }}\n                \n            \n            \n                {{ description }}\n            \n        \n    \n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ label }}                                                                                            {{ text }}                                                                            {{ key | translate: formControl.value }}                                                        {{ description }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormCheckboxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormInputComponent.html":{"url":"components/FormInputComponent.html","title":"component - FormInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-input/form-input.component.ts\n\n\n    \n        Description\n    \n    \n        A FormControl that contains an input that supports string, number and datetime-local input types\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-input\n            \n\n            \n                styleUrls\n                ../form.scss,./form-input.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./form-input.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                textInput\n                            \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inputChanged\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                writeValue\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hint\n                            \n                            \n                                hintPosition\n                            \n                            \n                                max\n                            \n                            \n                                maxlength\n                            \n                            \n                                min\n                            \n                            \n                                placeholder\n                            \n                            \n                                size\n                            \n                            \n                                type\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                enterClicked\n                            \n                            \n                                escapeClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        hint\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:77\n                            \n                        \n                \n                    \n                        Hint to display in the content of a signpost\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'top-left'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:72\n                            \n                        \n                \n                    \n                        The direction for displaying the hint\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:52\n                            \n                        \n                \n                    \n                        Maximum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        maxlength\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:67\n                            \n                        \n                \n                    \n                        Maximum number of characters (in UTF-16 code units) that the user can enter.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MIN_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:46\n                            \n                        \n                \n                    \n                        Minimum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        placeholder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:40\n                            \n                        \n                \n                    \n                        Input 'placeholder' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:62\n                            \n                        \n                \n                    \n                        Input 'size' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'text'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:57\n                            \n                        \n                \n                    \n                        Input 'type' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        enterClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:88\n                            \n                        \n                \n                    \n                        Emitted when enter key is released for callers to handle the event like... closing a filter widget\nDatagridNumericFilterComponent.close\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        escapeClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n                \n                    \n                        Emitted when escape key is released for callers to handle the event\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inputChanged\n                        \n                        \n                    \n                \n            \n            \n                \ninputChanged()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:104\n                \n            \n\n\n            \n                \n                    Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\nbeing assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\nselector inside writeValue function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('textInput', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:82\n                            \n                        \n\n                \n                    \n                        The input field element\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * A {@link FormControl} that contains an input that supports string, number and datetime-local input types\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-input',\n    templateUrl: './form-input.component.html',\n    styleUrls: ['../form.scss', './form-input.component.scss'],\n})\nexport class FormInputComponent extends BaseFormControl implements AfterViewInit {\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = Number.MIN_SAFE_INTEGER;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'type' field.\n     */\n    @Input() type = 'text';\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The input field element\n     */\n    @ViewChild('textInput', { static: true }) textInput: ElementRef;\n\n    /**\n     * Emitted when enter key is released for callers to handle the event like... closing a filter widget\n     * {@link DatagridNumericFilterComponent.close}\n     */\n    @Output() enterClicked = new EventEmitter(false);\n\n    /**\n     * Emitted when escape key is released for callers to handle the event\n     */\n    @Output() escapeClicked = new EventEmitter(false);\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n\n    /**\n     * Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\n     * being assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\n     * selector inside writeValue function.\n     */\n    writeValue(value: any): void {\n        // The textInput view child element is undefined the first time. So, the initial value is stored in a variable\n        // to assign it later to the input field value.\n        this.initialValue = value;\n        if (!this.textInput) {\n            return;\n        }\n\n        if (typeof value === 'number') {\n            value = value.toString(10);\n        }\n        if (this.type === 'datetime-local') {\n            value = getFormattedDateValue(value);\n        }\n        this.textInput.nativeElement.value = value;\n    }\n\n    ngAfterViewInit(): void {\n        // The textInput view child element is only defined after this life cycle hook. So, the writeValue is called\n        // here.\n        this.writeValue(this.initialValue);\n    }\n\n    inputChanged(): void {\n        const value = this.textInput.nativeElement.value;\n        this.initialValue = value;\n\n        if (this.type === 'number') {\n            if (!value) {\n                this.onChange(value);\n            } else {\n                this.onChange(parseFloat(value));\n            }\n            return;\n        }\n        if (this.type === 'datetime-local' && value !== '') {\n            const isoDateValue = new Date(getFormattedDateValue(value)).toISOString();\n            this.onChange(isoDateValue);\n            return;\n        }\n        this.onChange(value);\n    }\n}\n\n/**\n * To format a date string into a value which can be given to the input html element\n */\nexport function getFormattedDateValue(value: string): string {\n    const date = new Date(value);\n    return (\n        date.getFullYear() +\n        '-' +\n        pad(date.getMonth() + 1) +\n        '-' +\n        pad(date.getDate()) +\n        'T' +\n        pad(date.getHours()) +\n        ':' +\n        pad(date.getMinutes())\n    );\n}\n\nexport function pad(num: number): string | number {\n    if (num \n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            \n                \n                \n            \n            \n                \n                    {{ key | translate: formControl.value:min.toString():max }}\n                \n            \n            \n                {{ description }}\n            \n        \n        \n        \n            \n                {{ hint }}\n            \n        \n    \n\n\n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-input.component.scss\n                \n                .form-group >>> aside {\n    margin-top: 6px;\n    margin-bottom: 6px;\n    flex-grow: 1;\n}\n\n.form-group.hide-label {\n    padding-left: 0;\n}\n\n.input-aside {\n    display: flex;\n    width: 100%;\n}\n\n:host-context(.modal):not(.adjust-aside-left) {\n    .form-label {\n        flex-grow: 1;\n    }\n    .form-label > input {\n        width: 100%;\n    }\n}\n\n.form-group-description {\n    margin-bottom: 15px;\n}\n\nclr-signpost p:first-child {\n    margin-top: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                                                                                                                        {{ key | translate: formControl.value:min.toString():max }}                                                        {{ description }}                                                                {{ hint }}                            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormSelectComponent.html":{"url":"components/FormSelectComponent.html","title":"component - FormSelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormSelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-select/form-select.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a select HTML element\n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-select\n            \n\n            \n                styleUrls\n                ../form.scss,./form-select.component.scss\n            \n\n\n\n            \n                templateUrl\n                form-select.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedOption\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         SelectOption[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n                \n                    \n                        The displayed options for the select element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedOption\n                    \n                \n\n                \n                    \n                        getselectedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * {@link FormControl} wrapper around a select HTML element\n */\n@Component({\n    selector: 'vcd-form-select',\n    templateUrl: 'form-select.component.html',\n    styleUrls: ['../form.scss', './form-select.component.scss'],\n})\nexport class FormSelectComponent extends BaseFormControl {\n    /**\n     * The displayed options for the select element\n     */\n    @Input() options: SelectOption[] = [];\n\n    constructor(@Self() @Optional() ngControl: NgControl) {\n        super(ngControl);\n    }\n\n    get selectedOption(): SelectOption {\n        if (!this.options) {\n            return undefined;\n        }\n        // option.value and formControl.value can be of type number or string\n        return this.options.find(option => option.value.toString() === this.formControl.value.toString());\n    }\n}\n\n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}\n        \n        \n            \n                \n                    \n                        {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                    \n                \n            \n\n            \n\n            \n                \n                    {{ key | translate: [formControl.value] }}\n                \n            \n        \n    \n    \n        \n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-select.component.scss\n                \n                .form-group.hide-label {\n    padding-left: 0;\n}\n\n.form-group.hide-label label:first-child {\n    visibility: hidden;\n}\n\n.error-content {\n    white-space: normal;\n}\n\n:host(.site-selector-single-site) {\n    display: none;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}                                                                                        {{ option.isTranslatable ? (option.display | translate) : option.display }}                                                                                                            {{ key | translate: [formControl.value] }}                                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormSelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormValidators.html":{"url":"classes/FormValidators.html","title":"class - FormValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/validators.ts\n        \n\n            \n                Description\n            \n            \n                validators used for form control validations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createNullSafeValidator\n                            \n                            \n                                    Static\n                                isNumberInRange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createNullSafeValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNullSafeValidator(validator: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:17\n                \n            \n\n\n            \n                \n                    A wrapper that validates that a control's value is defined before running the validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The validator function to run if the control's value is defined.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNumberInRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumberInRange(min: number, max: number, translationKey: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:32\n                \n            \n\n\n            \n                \n                    Create a validator that requires a number to be within a range.\nAlso checks that the value is numeric\nAccepts a translation key to display proper error messaging\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    translationKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\n/**\n * validators used for form control validations.\n */\nexport class FormValidators {\n    /**\n     * A wrapper that validates that a control's value is defined before running the validator function.\n     *\n     * @param validator The validator function to run if the control's value is defined.\n     */\n    static createNullSafeValidator(validator: (...args: any[]) => unknown): ValidatorFn {\n        const res = (control: FormControl) => {\n            if (Validators.required(control)) {\n                return null;\n            }\n            return validator(control);\n        };\n        return res;\n    }\n\n    /**\n     * Create a validator that requires a number to be within a range.\n     * Also checks that the value is numeric\n     * Accepts a translation key to display proper error messaging\n     */\n    static isNumberInRange(min: number, max: number, translationKey: string): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const isNumber = !isNaN(parseFloat(control.value)) && isFinite(control.value);\n            return control.value >= min && control.value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FunctionRenderer.html":{"url":"interfaces/FunctionRenderer.html","title":"interface - FunctionRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FunctionRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Column renderer as a function. Defined in calling component when the cell value is calculated from different\nproperties.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [record: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         string\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FunctionRendererPipe.html":{"url":"pipes/FunctionRendererPipe.html","title":"pipe - FunctionRendererPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FunctionRendererPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for executing the functions of column cells which use functions to calculate their values from different\nproperties of an object\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        functionRenderer\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, renderer: (val: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/pipes/function-renderer.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderer\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\n@Pipe({\n    name: 'functionRenderer',\n    pure: true,\n})\nexport class FunctionRendererPipe implements PipeTransform {\n    public transform(item: any, renderer: (val: any) => any): string {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GlobalButton.html":{"url":"interfaces/GlobalButton.html","title":"interface - GlobalButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GlobalButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability does not depend on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridColumn.html":{"url":"interfaces/GridColumn.html","title":"interface - GridColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object defined in the caller. This contains properties for the column header (text, filtering,\nsorting, toggling etc.,) and content for row cells.\nExample:\nconst gridColumn: GridColumn = {\n   displayName: \"Column Heading\",\n   renderer: \"someRecord.property\",\n   hideable: \"NEVER\"\n}\nThe above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\nThe value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        cliptextConfig\n                                \n                                \n                                            Optional\n                                        clrDgColumnClassName\n                                \n                                \n                                        displayName\n                                \n                                \n                                            Optional\n                                        emptyColumnPlaceholder\n                                \n                                \n                                            Optional\n                                        filter\n                                \n                                \n                                            Optional\n                                        hideable\n                                \n                                \n                                            Optional\n                                        queryFieldName\n                                \n                                \n                                        renderer\n                                \n                                \n                                            Optional\n                                        sortable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cliptextConfig\n                                    \n                                \n                                \n                                    \n                                        cliptextConfig:         CliptextConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CliptextConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The configuration for the cliptext in the datagrid.\nDefaults to size: 'lg', mouseoutDelay: undefined.\nIf null, will disable cliptext\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clrDgColumnClassName\n                                    \n                                \n                                \n                                    \n                                        clrDgColumnClassName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class of the column header.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Header text for the column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emptyColumnPlaceholder\n                                    \n                                \n                                \n                                    \n                                        emptyColumnPlaceholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When there is no data, show this message.\nTry to avoid showing this before initial load.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:     FilterRendererSpec>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FilterRendererSpec>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    TODO: Should this be made to work with top level search on grids across all columns?\n  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideable\n                                    \n                                \n                                \n                                    \n                                        hideable:         GridColumnHideable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GridColumnHideable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryFieldName\n                                    \n                                \n                                \n                                    \n                                        queryFieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for sorting/filtering. Not needed for columns not filterable/sortable\nTODO: do we need to support array type for querying across multiple columns?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:     string | FunctionRenderer | ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | FunctionRenderer | ColumnRendererSpec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If the renderer passed in is a\n\nstring: Used as default renderer. Can be a dot separated string to identify a nested property of the item\nFunctionRenderer: When you want to create a calculated column, but don't need custom HTML\nTemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\nColumnRendererSpec: When HTML is needed and when the HTML is provided as a component\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortable\n                                    \n                                \n                                \n                                    \n                                        sortable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show the column as sortable. Defaults to true\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridDataFetchResult.html":{"url":"interfaces/GridDataFetchResult.html","title":"interface - GridDataFetchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridDataFetchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                Representation of data required for rendering contents of cells and pagination information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                            Optional\n                                        totalItems\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     R[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items to be listed in the grid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridState.html":{"url":"interfaces/GridState.html","title":"interface - GridState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\npart of the event DatagridComponent.gridRefresh. The handler then used this object to construct a query.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        filters\n                                \n                                \n                                            Optional\n                                        pagination\n                                \n                                \n                                            Optional\n                                        sortColumn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FIQL formatted list of active filters\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                    \n                                \n                                \n                                    \n                                        pagination:         PagionationInformation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PagionationInformation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The pagination information that the datagrid should show.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortColumn\n                                    \n                                \n                                \n                                    \n                                        sortColumn:         SortedColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortedColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The currently sorted column in the datagrid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFinder.html":{"url":"interfaces/HasFinder.html","title":"interface - HasFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Can be used in tests that use this to share a finder with before/AfterEach instead of leaky closures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        finder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finder\n                                    \n                                \n                                \n                                    \n                                        finder:         WidgetFinder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WidgetFinder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hertz.html":{"url":"classes/Hertz.html","title":"class - Hertz","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hertz\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Ghz\n                            \n                            \n                                    Static\n                                Hz\n                            \n                            \n                                    Static\n                                Khz\n                            \n                            \n                                    Static\n                                Mhz\n                            \n                            \n                                    Static\n                                Thz\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Ghz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e9, 'GHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:114\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Hz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1, 'Hz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:111\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Khz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e3, 'KHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Mhz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e6, 'MHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:113\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Thz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e12, 'THz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Hertz.Hz, Hertz.Khz, Hertz.Mhz, Hertz.Ghz]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.hertz.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.cpu.speed.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Hertz[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISubscriptionTracker.html":{"url":"interfaces/ISubscriptionTracker.html","title":"interface - ISubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                An interface that knows how to subscribe and unsubscribe from observables.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    subscribe\n                                \n                                \n                                    unsubscribe\n                                \n                                \n                                    unsubscribeAll\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\nWill call the {@param complete} when complete, and {@param error} when errors happen.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:28\n                \n            \n\n\n            \n                \n                    Unsubscribes from the given {@param subscription}.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:33\n                \n            \n\n\n            \n                \n                    Unsubscribes from all subscriptions on this Subscribable.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdGenerator.html":{"url":"classes/IdGenerator.html","title":"class - IdGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/id-generator/id-generator.ts\n        \n\n            \n                Description\n            \n            \n                Generates unique IDs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                idCounter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prefix: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/id-generator/id-generator.ts:17\n                            \n                        \n\n                \n                    \n                            The string to be prefixed for IdGenerator returned\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            idCounter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/id-generator/id-generator.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/id-generator/id-generator.ts:15\n                \n            \n\n\n            \n                \n                    Getter that returns the a unique ID\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class IdGenerator {\n    private static idCounter = 0;\n\n    /**\n     * Getter that returns the a unique ID\n     */\n    generate(): string {\n        return `${this.prefix}-${IdGenerator.idCounter++}`;\n    }\n\n    /**\n     * The string to be prefixed for {@link IdGenerator#id} returned\n     */\n    constructor(private prefix: string) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternalRegistrationData.html":{"url":"interfaces/InternalRegistrationData.html","title":"interface - InternalRegistrationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InternalRegistrationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                This interface is used internally by the service\n\n            \n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        order\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingIndicatorComponent.html":{"url":"components/LoadingIndicatorComponent.html","title":"component - LoadingIndicatorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoadingIndicatorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/loading/loading-indicator.component.ts\n\n\n    \n        Description\n    \n    \n        Loading indicator for blocking modal dialogs while loading.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-loading-indicator\n            \n\n            \n                styleUrls\n                loading-indicator.component.scss\n            \n\n\n\n            \n                templateUrl\n                loading-indicator.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _size\n                            \n                            \n                                    Private\n                                    Readonly\n                                defaultSpinnerSize\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                loadingTextKey\n                            \n                            \n                                showSpinner\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:43\n                            \n                        \n                \n                    \n                        Show/hide the loading indicator.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingTextKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:55\n                            \n                        \n                \n                    \n                        Text to show next to the spinner.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showSpinner\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:49\n                            \n                        \n                \n                    \n                        Show/hide the spinner if only an overlay is required.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         SpinnerSize\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                            \n                        \n                \n                    \n                        Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : this.defaultSpinnerSize\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:38\n                            \n                        \n\n                \n                    \n                        Spinner size.\nSpinners can be displayed in three sizes:\n\nsm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\nmd(Medium): Medium spinners measure 36x36 pixels. Default.\nlg(Large): This is the default size for page spinners (see above).\n\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            defaultSpinnerSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : SIZES.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:27\n                            \n                        \n\n                \n                    \n                        Default spinner size set to \"md\" - medium used within the modal dialogs\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:73\n                                \n                            \n                    \n                        \n                                Gives the size of this loading indicator.\n\n\n                                \n                                    Returns :         SpinnerSize\n\n                                \n                        \n                    \n\n                \n                    \n                        setsize(size)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                                \n                            \n                    \n                        \n                                Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            size\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\nexport enum SIZES {\n    sm = 'sm',\n    md = 'md',\n    lg = 'lg',\n}\nexport type SpinnerSize = keyof typeof SIZES;\n\n/**\n * Loading indicator for blocking modal dialogs while loading.\n */\n@Component({\n    selector: 'vcd-loading-indicator',\n    templateUrl: 'loading-indicator.component.html',\n    styleUrls: ['loading-indicator.component.scss'],\n})\nexport class LoadingIndicatorComponent {\n    /**\n     * Default spinner size set to \"md\" - medium used within the modal dialogs\n     */\n    private readonly defaultSpinnerSize: SpinnerSize = SIZES.md;\n    /**\n     * Spinner size.\n     *\n     * Spinners can be displayed in three sizes:\n     *\n     *  - sm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\n     *  - md(Medium): Medium spinners measure 36x36 pixels. Default.\n     *  - lg(Large): This is the default size for page spinners (see above).\n     *\n     */\n    private _size: SpinnerSize = this.defaultSpinnerSize;\n    /**\n     * Show/hide the loading indicator.\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * Show/hide the spinner if only an overlay is required.\n     */\n    @Input()\n    public showSpinner = true;\n\n    /**\n     * Text to show next to the spinner.\n     */\n    @Input()\n    public loadingTextKey: string = null;\n\n    /**\n     * Spinner size setter.\n     * Sets default size if provided value is not from specified sized.\n     */\n    @Input()\n    set size(size: SpinnerSize) {\n        if (!size || Object.keys(SIZES).indexOf(size) === -1) {\n            this._size = this.defaultSpinnerSize;\n        } else {\n            this._size = size;\n        }\n    }\n\n    /**\n     * Gives the size of this loading indicator.\n     */\n    get size(): SpinnerSize {\n        return this._size;\n    }\n}\n\n    \n\n    \n        \n    \n    \n        \n             \n            {{ loadingTextKey | translate }}\n        \n    \n\n\n\n    \n\n    \n                \n                    loading-indicator.component.scss\n                \n                $overlay-background-color-default: rgba(250, 250, 250, 0.5);\n$overlay-background-color-modal: rgba(255, 255, 255, 0.5);\n\n@mixin full-height {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host-context(.modal-body) .overlay {\n    background-color: $overlay-background-color-modal;\n}\n\n.overlay {\n    background-color: $overlay-background-color-default;\n    @include full-height();\n    z-index: 10;\n}\n\n.indicator-container {\n    z-index: 600;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    @include full-height();\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                         {{ loadingTextKey | translate }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoadingIndicatorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MinMaxValidator.html":{"url":"directives/MinMaxValidator.html","title":"directive - MinMaxValidator","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MinMaxValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n        \n\n            \n                Description\n            \n            \n                Directive for adding min, max inputs to NumberWithUnitFormInputComponent and also add min, max validators to\nthe list of NumberWithUnitFormInputComponent.formControl validators\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                max\n                            \n                            \n                                min\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:38\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Component, Directive, Input, OnDestroy, OnInit, Optional, Self, ViewChild } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    NG_VALIDATORS,\n    NgControl,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators,\n} from '@angular/forms';\nimport { TranslationService } from '@vcd/i18n';\nimport { SelectOption } from '../../common/interfaces';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport { Unit } from '../../utils/unit/unit';\nimport { UnitFormatter } from '../../utils/unit/unit-formatter';\nimport { BaseFormControl } from '../base-form-control';\nimport { FormSelectComponent } from '../form-select/form-select.component';\nimport { FormValidators } from '../validators';\n\n/**\n * Directive for adding min, max inputs to {@link NumberWithUnitFormInputComponent} and also add min, max validators to\n * the list of {@link NumberWithUnitFormInputComponent.formControl} validators\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]',\n    providers: [{ provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }],\n})\n/* tslint:enable:directive-selector */\nexport class MinMaxValidator implements Validator {\n    @Input() min: number;\n    @Input() max: number;\n    validate(control: AbstractControl): ValidationErrors | null {\n        const validators: ValidatorFn[] = [];\n        if (typeof this.min !== 'undefined') {\n            validators.push(Validators.min(this.min));\n        }\n        if (typeof this.max !== 'undefined') {\n            validators.push(Validators.max(this.max));\n        }\n        return Validators.compose(validators)(control);\n    }\n}\n\n/**\n * -1 is the number to specify a value of unlimited.\n */\nexport const UNLIMITED = -1;\n\n/**\n * A numerical form input component with unit selection and unlimited checkbox.\n * It doesn't take custom validation because it serve a specific use case.\n */\n@Component({\n    selector: 'vcd-number-with-unit-form-input',\n    templateUrl: './number-with-unit-form-input.component.html',\n    styleUrls: ['./number-with-unit-form-input.component.scss'],\n})\nexport class NumberWithUnitFormInputComponent extends BaseFormControl implements OnInit, OnDestroy {\n    @ViewChild('unitDropdown', { static: false }) unitDropdown: FormSelectComponent;\n\n    tracker = new SubscriptionTracker(this);\n\n    /**\n     * Show the Unlimited checkbox\n     */\n    @Input() showUnlimitedOption = true;\n\n    /**\n     * List of available units\n     */\n    @Input()\n    set unitOptions(unitOptions: Unit[]) {\n        this._unitOptions = unitOptions;\n\n        this.unitOptions.forEach(unitOption => {\n            const comboOption: SelectOption = {\n                display: unitOption.getUnitName(),\n                value: unitOption.getMultiplier(),\n            };\n            this.comboOptionUnitMap.set(comboOption, unitOption);\n            this.comboOptions.push(comboOption);\n        });\n    }\n\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * The value when the component is set to unlimited.\n     */\n    @Input() unlimitedValue: number = UNLIMITED;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = UNLIMITED;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The unit of FormControl.value. Not required when a single {@link unitOptions} is passed in\n     */\n    @Input() inputValueUnit: Unit;\n\n    public formGroup: FormGroup;\n\n    private _unitOptions: Unit[];\n\n    /**\n     * A drop down of available units\n     *\n     * This list is constructed from list of\n     * available units in _unitOptions\n     */\n    comboOptions: SelectOption[] = [];\n\n    /**\n     * Map of SelectOption and Unit which is used to\n     * extract Unit for a given SelectOption.\n     *\n     */\n    private comboOptionUnitMap: Map = new Map();\n\n    // value set to the formGroup\n    private bestValue: number = null;\n    // unit set to the formGroup\n    private bestUnit: Unit;\n\n    constructor(\n        @Self() @Optional() controlDirective: NgControl,\n        private fb: FormBuilder,\n        private translationService: TranslationService,\n        private unitFormattter: UnitFormatter\n    ) {\n        super(controlDirective);\n    }\n\n    ngOnInit(): void {\n        const validator = FormValidators.isNumberInRange(this.min, this.max, 'vcd.cc.warning.numRange');\n        const validatorUnlimited = FormValidators.isNumberInRange(-1, this.max, 'vcd.cc.warning.numRange');\n        this.computeBestUnitAndValue(this.initialValue as number);\n        if (!this.showUnlimitedOption) {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue, validator],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n            });\n        } else {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue, validatorUnlimited],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n                unlimited: false,\n            });\n            this.tracker.subscribe(this.formGroup.get('unlimited').valueChanges, value => {\n                const input = this.formGroup.get('limited');\n                const comboUnitOptions = this.formGroup.get('comboUnitOptions');\n                if (value) {\n                    input.disable();\n                    comboUnitOptions.disable();\n                } else {\n                    input.enable();\n                    comboUnitOptions.enable();\n                }\n                this.onChange(this.value());\n            });\n        }\n        this.tracker.subscribe(this.formGroup.get('comboUnitOptions').valueChanges, () => {\n            this.onChange(this.value());\n        });\n        this.tracker.subscribe(this.formGroup.get('limited').valueChanges, () => {\n            this.onChange(this.value());\n        });\n\n        if (this.disabled) {\n            this.formGroup.get('comboUnitOptions').disable();\n            this.formGroup.get('limited').disable();\n        }\n    }\n\n    writeValue(value: number): void {\n        if (!this.formGroup) {\n            this.initialValue = value;\n            return;\n        }\n        if (value === null) {\n            if (this.showUnlimitedOption) {\n                // Set Unlimited checkbox to false because the form control was reset\n                this.formGroup.get('unlimited').setValue(false);\n            }\n            this.formGroup.get('limited').setValue(null);\n            return;\n        }\n        this.computeBestUnitAndValue(value);\n        this.formGroup.get('limited').setValue(this.bestValue);\n        this.formGroup.get('comboUnitOptions').setValue(this.bestUnit.getMultiplier());\n    }\n\n    private computeBestUnitAndValue(value: number): void {\n        if (value === null) {\n            this.bestValue = null;\n            this.bestUnit = this.unitOptions[0];\n        } else {\n            this.bestUnit = this.inputValueUnit.findBestUnit(value, this.unitOptions);\n            this.bestValue = this.inputValueUnit.getOutputValue(value, this.bestUnit);\n        }\n    }\n\n    private value(): number {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.unlimitedValue;\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value && this.unitOptions) {\n            const selectedComboUnit = this.comboOptions.find(\n                // tslint:disable-next-line:triple-equals\n                co => co.value == this.formGroup.get('comboUnitOptions').value\n            );\n            const selectedUnit = this.comboOptionUnitMap.get(selectedComboUnit);\n            return selectedUnit.getOutputValue(value, this.inputValueUnit);\n        }\n        return value;\n    }\n\n    get displayValue(): string {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.translationService.translate('unlimited');\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value) {\n            if (this.unitOptions && this.unitDropdown) {\n                // Return the value and the selected unit.\n                const inputUnit: Unit = this.comboOptionUnitMap.get(this.unitDropdown.selectedOption);\n                return this.unitFormattter.bestFormat(value, inputUnit, this.unitOptions);\n            } else if (this.unitOptions && this.unitOptions.length === 1) {\n                // Return the value and the predefined unit. For example, 100 %.\n                return this.unitFormattter.bestFormat(value, this.unitOptions[0], this.unitOptions);\n            } else if (this.isReadOnly) {\n                // Return the value with best unit when #limited FormControl.value\n                // is set programmatically\n                const displayComboUnit = this.comboOptions.find(\n                    // tslint:disable-next-line:triple-equals\n                    co => co.value == this.formGroup.get('comboUnitOptions').value\n                );\n                const displayUnit = this.comboOptionUnitMap.get(displayComboUnit);\n                return this.unitFormattter.bestFormat(value, displayUnit, this.unitOptions);\n            }\n            // Return only the value when unitOptions was not set.\n            return value.toString();\n        }\n        return;\n    }\n\n    /**\n     * Set the unit in the dropdown.\n     * @param value Should be one of the value that you pass in {@link #unitOptions} to select the Unit.\n     */\n    set selectedUnit(value: number) {\n        this.formGroup.get('comboUnitOptions').setValue(value);\n    }\n\n    ngOnDestroy(): void {\n        this.tracker.unsubscribeAll();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (this.formGroup) {\n            if (isDisabled) {\n                this.formGroup.get('comboUnitOptions').disable();\n                this.formGroup.get('limited').disable();\n            } else {\n                this.formGroup.get('comboUnitOptions').enable();\n                this.formGroup.get('limited').enable();\n            }\n        }\n        this.disabled = isDisabled;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockRecord.html":{"url":"interfaces/MockRecord.html","title":"interface - MockRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/mock-data.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        age\n                                \n                                \n                                        city\n                                \n                                \n                                        details\n                                \n                                \n                                        name\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nexport const mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOption.html":{"url":"interfaces/MultiSelectOption.html","title":"interface - MultiSelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Same as the SelectOption but value is always a string\n\n            \n\n            \n                Extends\n            \n            \n                        SelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOptionInternal.html":{"url":"interfaces/MultiSelectOptionInternal.html","title":"interface - MultiSelectOptionInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOptionInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Used internally for DatagridMultiSelectFilterComponent.options to add unique IDs to filter options. The IDs are used for\nassociating checkbox options with their labels in the HTML\n\n            \n\n            \n                Extends\n            \n            \n                        MultiSelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for each checkbox option instantiated in the HTML\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NestedPropertyPipe.html":{"url":"pipes/NestedPropertyPipe.html","title":"pipe - NestedPropertyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NestedPropertyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/nested-property.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for extracting the value of nested property of an object.\nExample:\nconst obj = {\n     a: {\n         b: {\n             c: 'c'\n         }\n     }\n}\nInvoking {{ obj | nestedProperty: 'a.b.c' }} in a template produces c\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nestedProperty\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/pipes/nested-property.pipe.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatePipe, DecimalPipe } from '@angular/common';\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\n\nconst OBJECT_PROPERTY_SEPARATOR = '.';\nconst DATE_OBJECT_CLASS = '[object Date]';\n\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\n@Pipe({\n    name: 'nestedProperty',\n    pure: true,\n})\nexport class NestedPropertyPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) private localeId: string) {}\n    public transform(item: any, property: string): string {\n        if (!item || !property) {\n            return null;\n        }\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        let returnValue;\n        if (splitProperty.length > 1) {\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        } else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\n\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n */\nfunction isNullOrUndefined(value: unknown): boolean {\n    return value == null;\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberWithUnitFormInputWidgetObject.html":{"url":"classes/NumberWithUnitFormInputWidgetObject.html","title":"class - NumberWithUnitFormInputWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberWithUnitFormInputWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Test wrapper for the VCD Number With Unit Form Input component.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNativeElement\n                            \n                            \n                                selectUnit\n                            \n                            \n                                setInputValueUnit\n                            \n                            \n                                setUnitOptionsToNone\n                            \n                            \n                                setUnitOptionsToPercent\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    displayValue\n                                \n                                \n                                    readonlyText\n                                \n                                \n                                    unlimitedFormControl\n                                \n                                \n                                    valueFormControl\n                                \n                                \n                                    unitFormControl\n                                \n                                \n                                    selectedUnit\n                                \n                                \n                                    selectedUnitDisplayValue\n                                \n                                \n                                    isUnitDropDownDisplayed\n                                \n                                \n                                    singleUnitDisplayText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-number-with-unit-form-input'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNativeElement\n                        \n                        \n                    \n                \n            \n            \n                \ngetNativeElement(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectUnit\n                        \n                        \n                    \n                \n            \n            \n                \nselectUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValueUnit\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValueUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToNone\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToNone()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToPercent\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToPercent()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        displayValue\n                    \n                \n\n                \n                    \n                        getdisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readonlyText\n                    \n                \n\n                \n                    \n                        getreadonlyText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:28\n                                \n                            \n                    \n                        \n                                Reads from the readonly section. If widget is not readonly, it returns an empty string;\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedFormControl\n                    \n                \n\n                \n                    \n                        getunlimitedFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:32\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        valueFormControl\n                    \n                \n\n                \n                    \n                        getvalueFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:36\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unitFormControl\n                    \n                \n\n                \n                    \n                        getunitFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnit\n                    \n                \n\n                \n                    \n                        getselectedUnit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnitDisplayValue\n                    \n                \n\n                \n                    \n                        getselectedUnitDisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUnitDropDownDisplayed\n                    \n                \n\n                \n                    \n                        getisUnitDropDownDisplayed()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        singleUnitDisplayText\n                    \n                \n\n                \n                    \n                        getsingleUnitDisplayText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:88\n                                \n                            \n                    \n                        \n                                Returns an empty string if there is no HTML for single unit\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AbstractControl } from '@angular/forms';\nimport { WidgetObject } from '../../utils/test';\nimport { Percent, Unit } from '../../utils/unit/unit';\nimport { NumberWithUnitFormInputComponent } from './number-with-unit-form-input.component';\n\n/**\n * Test wrapper for the VCD Number With Unit Form Input component.\n */\nexport class NumberWithUnitFormInputWidgetObject extends WidgetObject {\n    static tagName = 'vcd-number-with-unit-form-input';\n\n    get formControl(): AbstractControl {\n        return this.component.formControl;\n    }\n\n    get displayValue(): string {\n        return this.component.displayValue;\n    }\n\n    /**\n     * Reads from the readonly section. If widget is not readonly, it returns an empty string;\n     */\n    get readonlyText(): string {\n        return this.getText('.readonly-text');\n    }\n\n    get unlimitedFormControl(): AbstractControl {\n        return this.component.formGroup.get('unlimited');\n    }\n\n    get valueFormControl(): AbstractControl {\n        return this.component.formGroup.get('limited');\n    }\n\n    get unitFormControl(): AbstractControl {\n        return this.component.formGroup.get('comboUnitOptions');\n    }\n\n    selectUnit(unit: Unit): void {\n        this.component.selectedUnit = unit.getMultiplier();\n    }\n\n    setInputValueUnit(unit: Unit): void {\n        this.component.inputValueUnit = unit;\n    }\n\n    get selectedUnit(): number {\n        return this.component.formGroup.get('comboUnitOptions').value;\n    }\n\n    get selectedUnitDisplayValue(): string {\n        return (\n            this.component.unitOptions\n                // tslint:disable-next-line:triple-equals\n                .find(item => item.getMultiplier() == this.selectedUnit)\n                .getUnitName()\n        );\n    }\n\n    setUnitOptionsToPercent(): void {\n        this.component.unitOptions = [Percent.ZERO_TO_100];\n        this.component.inputValueUnit = Percent.ZERO_TO_1;\n        this.unitFormControl.setValue(this.component.unitOptions[0].getMultiplier());\n        this.fixture.detectChanges();\n    }\n\n    setUnitOptionsToNone(): void {\n        this.component.unitOptions = [];\n        this.fixture.detectChanges();\n    }\n\n    getNativeElement(cssSelector: string): HTMLElement {\n        return this.findElement(cssSelector) && this.findElement(cssSelector).nativeElement;\n    }\n\n    get isUnitDropDownDisplayed(): boolean {\n        return !!this.getNativeElement('.combo-options');\n    }\n\n    /**\n     * Returns an empty string if there is no HTML for single unit\n     */\n    get singleUnitDisplayText(): string {\n        const element = this.getNativeElement('.single-option');\n        return element ? element.innerHTML : '';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ObjectAndResponse.html":{"url":"interfaces/ObjectAndResponse.html","title":"interface - ObjectAndResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ObjectAndResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A combination of some object and the response that gave that object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        object\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                    \n                                \n                                \n                                    \n                                        object:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that was returned from a given activity, if any.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         ActivityResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivityResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The response that an activity returned.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationCallback.html":{"url":"interfaces/PaginationCallback.html","title":"interface - PaginationCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                A function that can be used to render the pagination data in the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [firstItem: number, lastItem: number, totalItems: number]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string | Observable\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationConfiguration.html":{"url":"interfaces/PaginationConfiguration.html","title":"interface - PaginationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information the user gives to show page size and page size options in the pagination footer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageSize\n                                \n                                \n                                            Optional\n                                        pageSizeOptions\n                                \n                                \n                                            Optional\n                                        rowHeight\n                                \n                                \n                                            Optional\n                                        shouldShowPageNumberInput\n                                \n                                \n                                            Optional\n                                        shouldShowPageSizeSelector\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:     number | \"Magic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"Magic\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\nnumber of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\nMagic: Auto calculates the size based on available height of the container\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSizeOptions\n                                    \n                                \n                                \n                                    \n                                        pageSizeOptions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Available page size options in the dropdown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowHeight\n                                    \n                                \n                                \n                                    \n                                        rowHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The height of a row in the datagrid. If not set, will use the default of ROW_HEIGHT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageNumberInput\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageNumberInput:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page number input should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageSizeSelector\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageSizeSelector:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page size option dropdown should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PagionationInformation.html":{"url":"interfaces/PagionationInformation.html","title":"interface - PagionationInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PagionationInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about pagionation that will be exposed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        itemsPerPage\n                                \n                                \n                                        pageNumber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    How many items belong on a page.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageNumber\n                                    \n                                \n                                \n                                    \n                                        pageNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    What page is currently selected.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percent.html":{"url":"classes/Percent.html","title":"class - Percent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Percent is handled differently compared to other Units.\nCan be represented in two different formats -\nZERO_TO_100 - ex: 50 %\nZERO_TO_1 - ex: 0.5 %\nIn both formats single unitName - \"%\" is used represent the value\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                unitTranslationKey\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKey\n                            \n                            \n                                    Static\n                                ZERO_TO_1\n                            \n                            \n                                    Static\n                                ZERO_TO_100\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n                \n                    \n                            Percent always has unitName as \"%\"\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.display.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:162\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(1)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_100\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(0.01)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:172\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, unitList: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:188\n                \n            \n\n\n            \n                \n                    Percent is always best represented in ZERO_TO_100 format\nand so returns ZERO_TO_100\nEx: 50 % is the display format for ZERO_TO_100 for value - 50\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unitList\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NestedPropertyPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { NestedPropertyPipe } from './nested-property.pipe';\n\nconst declarations = [NestedPropertyPipe];\n\n@NgModule({\n    declarations,\n    exports: [...declarations],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisteredProviders.html":{"url":"interfaces/RegisteredProviders.html","title":"interface - RegisteredProviders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisteredProviders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                Interface describing what providers are registered within the system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        provider\n                                \n                                \n                                        section\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         SpotlightSearchProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchProvider\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The very search provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The section name (the title or the group name) that this provider will provides results for.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchSection.html":{"url":"interfaces/SearchSection.html","title":"interface - SearchSection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchSection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isLoading\n                                \n                                \n                                        results\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                    \n                                \n                                \n                                    \n                                        results:         SpotlightSearchResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { SpotlightSearchResult, SpotlightSearchResultType } from './spotlight-search-result';\nimport { RegisteredProviders, SpotlightSearchService } from './spotlight-search.service';\n\ninterface SearchSection extends RegisteredProviders {\n    results: SpotlightSearchResult[];\n    isLoading: boolean;\n}\n\n/**\n * The Spotlight Search component is inspired by the Spotlight Search functionality in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Spotlight Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Spotlight Search consists of:\n * \n *     SpotlightSearchComponent - the visual component that you should include in your template\n *     {@link SpotlightSearchService}SpotlightSearchService\n *     - the service that you should register your own providers with\n *     {@link SpotlightSearchProvider}SpotlightSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link SpotlightSearchResult} or a promise for lazy loading of results\n * \n *\n * SpotlightSearchComponent:\n *\n *    \n *\n *\n * {@link SpotlightSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are gropued\n * in sections based on the registered provider {@link SpotlightSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Spotlight Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-spotlight-search',\n    templateUrl: './spotlight-search.component.html',\n    styleUrls: ['./spotlight-search.component.scss'],\n})\nexport class SpotlightSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    constructor(\n        private searchService: SpotlightSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link SpotlightSearchService} upon opening the Spotlight Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: SpotlightSearchResult;\n\n    itemClicked(item: SpotlightSearchResult): void {\n        this.handleItem(item);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n        // Upon new search we clear the currently selected item\n        this.selectedItem = null;\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async searchSection => {\n            let results: SpotlightSearchResultType = [];\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                results = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (results instanceof Promise) {\n                    searchSection.isLoading = true;\n                    results = await results;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.results = results;\n            searchSection.isLoading = false;\n            this.selectFirst(true);\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        // Do nothing if there is already a selection\n        if (this.selectedItem) {\n            return;\n        }\n\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.results[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.results || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ ...data, results: [], isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: SpotlightSearchResult): void {\n        item.handler();\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        // In order to show a section title there should be more than one sections\n        // and the current section should either be loading data or have results\n        return this.searchSections.length > 1 && (searchSection.isLoading || searchSection.results.length > 0);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/select-option.ts\n        \n\n            \n                Description\n            \n            \n                Options displayed in a select input option list\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be shown for the option\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for translation of the SelectOption.display text\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value of a option\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SelectOption {\n    /**\n     * Value of a option\n     */\n    value: string | number;\n    /**\n     * Text to be shown for the option\n     */\n    display: string;\n    /**\n     * Used for translation of the {@link SelectOption.display} text\n     */\n    isTranslatable?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ShowClippedTextDirective.html":{"url":"directives/ShowClippedTextDirective.html","title":"directive - ShowClippedTextDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ShowClippedTextDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                Displays a clarity tooltip with the full contents of a host element on hover but only if\nthe elements is clipped.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdShowClippedText]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                    Public\n                                hostElement\n                            \n                            \n                                    Static\n                                instanceCount\n                            \n                            \n                                mouseoutDelay\n                            \n                            \n                                    Private\n                                onMouseIn\n                            \n                            \n                                    Private\n                                onMouseOut\n                            \n                            \n                                tooltipSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                deactivate\n                            \n                            \n                                    Private\n                                isOverflowing\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdShowClippedText\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(host: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        host\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdShowClippedText\n                    \n                \n                \n                    \n                        Type :         CliptextConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \nactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \ndeactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOverflowing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflowing()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:246\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.host.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                        The HTML element receiving the directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            instanceCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:222\n                            \n                        \n\n                \n                    \n                        To destroy the tooltip when no longer needed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mouseoutDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:244\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:288\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:299\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TooltipSize.md\n\n                        \n                    \n                    \n                        \n                            Default value : TooltipSize.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:245\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowClippedTextDirectiveModule.html":{"url":"modules/ShowClippedTextDirectiveModule.html","title":"module - ShowClippedTextDirectiveModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowClippedTextDirectiveModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ShowClippedTextDirective } from './show-clipped-text.directive';\n\n@NgModule({\n    declarations: [ShowClippedTextDirective],\n    exports: [ShowClippedTextDirective],\n})\nexport class ShowClippedTextDirectiveModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowClippedTextDirectiveTestHelper.html":{"url":"classes/ShowClippedTextDirectiveTestHelper.html","title":"class - ShowClippedTextDirectiveTestHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowClippedTextDirectiveTestHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n        \n\n            \n                Description\n            \n            \n                Used to remove DOM specific code from the jasmine tests while testing this directive\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                componentInstance\n                            \n                            \n                                    Public\n                                hideDelay\n                            \n                            \n                                    Private\n                                host\n                            \n                            \n                                    Private\n                                secondHost\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                moveMouseOffHost\n                            \n                            \n                                moveMouseOffTooltip\n                            \n                            \n                                moveMouseOverHost\n                            \n                            \n                                moveMouseOverSecondHost\n                            \n                            \n                                moveMouseOverTooltip\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    hostPosition\n                                \n                                \n                                    disabled\n                                \n                                \n                                    hostText\n                                \n                                \n                                    tooltipSize\n                                \n                                \n                                    isTooltipVisible\n                                \n                                \n                                    tooltipText\n                                \n                                \n                                    tooltipPosition\n                                \n                                \n                                    tooltipCount\n                                \n                                \n                                    tooltipVisibility\n                                \n                                \n                                    tooltipContent\n                                \n                                \n                                    tooltip\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                        ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            componentInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.fixture.componentInstance\n\n                        \n                    \n                    \n                        \n                            Default value : this.fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.componentInstance.directive.mouseoutDelay\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.directive.mouseoutDelay\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            host\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            secondHost\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div2.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverSecondHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverSecondHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n\n                \n                    \n                        setwidth(width: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            width\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostPosition\n                    \n                \n\n\n                \n                    \n                        sethostPosition(quadrant)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            quadrant\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n\n                \n                    \n                        setdisabled(disabled: boolean)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:44\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            disabled\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostText\n                    \n                \n\n\n                \n                    \n                        sethostText(text: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            text\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipSize\n                    \n                \n\n                \n                    \n                        gettooltipSize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:54\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTooltipVisible\n                    \n                \n\n                \n                    \n                        getisTooltipVisible()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:78\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipText\n                    \n                \n\n                \n                    \n                        gettooltipText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipPosition\n                    \n                \n\n                \n                    \n                        gettooltipPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:86\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipCount\n                    \n                \n\n                \n                    \n                        gettooltipCount()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:98\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipVisibility\n                    \n                \n\n                \n                    \n                        gettooltipVisibility()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:102\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipContent\n                    \n                \n\n                \n                    \n                        gettooltipContent()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:110\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltip\n                    \n                \n\n                \n                    \n                        gettooltip()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:114\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowClippedTextDirectiveTestHostComponent.html":{"url":"components/ShowClippedTextDirectiveTestHostComponent.html","title":"component - ShowClippedTextDirectiveTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowClippedTextDirectiveTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                {{ text }}\n{{ text2 }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                directive\n                            \n                            \n                                    Public\n                                disabled\n                            \n                            \n                                div\n                            \n                            \n                                div2\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                text2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ShowClippedTextDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(ShowClippedTextDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div2')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:128\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting too'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:131\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ text }}{{ text2 }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowClippedTextDirectiveTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortedColumn.html":{"url":"interfaces/SortedColumn.html","title":"interface - SortedColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SortedColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about the currently sorted column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        reverse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the column that is sorted.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reverse\n                                    \n                                \n                                \n                                    \n                                        reverse:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the column is sorted normally or reversed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerActivityReporterComponent.html":{"url":"components/SpinnerActivityReporterComponent.html","title":"component - SpinnerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Spinner activity reporter shows the spinner until an error or success message is returned.\nAn error message is displayed through the error banner.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-spinner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./spinner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errorText\n                            \n                            \n                                    Public\n                                running\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:44\n                \n            \n\n\n            \n                \n                    Hides the loading indicator and shows an error message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:52\n                \n            \n\n\n            \n                \n                    Hides the loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:36\n                \n            \n\n\n            \n                \n                    Begins to show the loading indicator to the user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                        When set show the error text\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:22\n                            \n                        \n\n                \n                    \n                        When true show the spinner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Spinner activity reporter shows the spinner until an error or success message is returned.\n * An error message is displayed through the error banner.\n */\n@Component({\n    selector: 'vcd-spinner-activity-reporter',\n    templateUrl: './spinner-activity-reporter.component.html',\n})\nexport class SpinnerActivityReporterComponent extends ActivityReporter {\n    /**\n     * When true show the spinner\n     */\n    public running = false;\n\n    /**\n     * When set show the error text\n     */\n    public errorText: string = null;\n\n    constructor(@Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the loading indicator to the user.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.errorText = null;\n    }\n\n    /**\n     * Hides the loading indicator and shows an error message.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Hides the loading indicator.\n     */\n    reportSuccess(): void {\n        this.running = false;\n    }\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpinnerActivityReporterWidgetObject.html":{"url":"classes/SpinnerActivityReporterWidgetObject.html","title":"class - SpinnerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpinnerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getSpinner\n                            \n                            \n                                    Public\n                                isSpinnerSpinning\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-spinner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSpinner\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpinner()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:24\n                \n            \n\n\n            \n                \n                    Gives the spinner for this element\n\n\n                    \n                        Returns :         DebugElement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSpinnerSpinning\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSpinnerSpinning()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DebugElement } from '@angular/core';\nimport { SpinnerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class SpinnerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-spinner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    /**\n     * Gives the spinner for this element\n     */\n    private getSpinner(): DebugElement {\n        const element = this.findElement('.spinner');\n\n        if (!element) {\n            throw new Error('Could not find the spinner element.');\n        }\n        return element;\n    }\n\n    public isSpinnerSpinning(): boolean {\n        try {\n            return !!this.getSpinner();\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotlightSearchModule.html":{"url":"modules/SpotlightSearchModule.html","title":"module - SpotlightSearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotlightSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\ncluster_SpotlightSearchModule_providers\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\nSpotlightSearchService\n\nSpotlightSearchService\n\nSpotlightSearchModule -->\n\nSpotlightSearchService->SpotlightSearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            SpotlightSearchService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { SpotlightSearchComponent } from './spotlight-search.component';\nimport { SpotlightSearchService } from './spotlight-search.service';\n\n@NgModule({\n    imports: [CommonModule, ClarityModule, FormsModule, ReactiveFormsModule, I18nModule],\n    declarations: [SpotlightSearchComponent],\n    exports: [SpotlightSearchComponent],\n    providers: [SpotlightSearchService],\n})\nexport class SpotlightSearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchProvider.html":{"url":"interfaces/SpotlightSearchProvider.html","title":"interface - SpotlightSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.provider.ts\n        \n\n            \n                Description\n            \n            \n                The interface a search providers should implement in order to register itself with the SpotlightSearchService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    search\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.provider.ts:16\n                \n            \n\n\n            \n                \n                    Returns an array or a promise of array of items that comply with the search criteria.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search string provided by the user when typing in the Spotlight Search Component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpotlightSearchResultType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpotlightSearchResultType } from './spotlight-search-result';\n\n/**\n * The interface a search providers should implement in order to register itself with the {@link SpotlightSearchService}\n */\nexport interface SpotlightSearchProvider {\n    /**\n     * Returns an array or a promise of array of items that comply with the search criteria.\n     * @param criteria The search string provided by the user when typing in the Spotlight Search Component\n     */\n    search(criteria: string): SpotlightSearchResultType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchResult.html":{"url":"interfaces/SpotlightSearchResult.html","title":"interface - SpotlightSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search-result.ts\n        \n\n            \n                Description\n            \n            \n                The interface a spotlight search result item should implement\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayText\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        kbdShortcut\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayText\n                                    \n                                \n                                \n                                    \n                                        displayText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text that will be displayed in the spotlight search component\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function that is going to be called when this item is to be handled, i.e. when the\nuser clicks on this item or  selects it and presses the Enter key.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        kbdShortcut\n                                    \n                                \n                                \n                                    \n                                        kbdShortcut:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The keyboard shortcut that can be used to call the handler of this item\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpotlightSearchResult {\n    /**\n     * The text that will be displayed in the spotlight search component\n     */\n    displayText: string;\n\n    /**\n     * The keyboard shortcut that can be used to call the handler of this item\n     */\n    kbdShortcut?: string;\n\n    /**\n     * Function that is going to be called when this item is to be handled, i.e. when the\n     * user clicks on this item or  selects it and presses the Enter key.\n     */\n    handler: () => void;\n}\n\n/**\n * The type of the spotlight search result which can be a promise\n */\nexport type SpotlightSearchResultType = SpotlightSearchResult[] | Promise;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotlightSearchService.html":{"url":"injectables/SpotlightSearchService.html","title":"injectable - SpotlightSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpotlightSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getRegisteredProviders\n                            \n                            \n                                    Public\n                                registerProvider\n                            \n                            \n                                    Public\n                                unregisterProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRegisteredProviders\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRegisteredProviders()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:96\n                \n            \n\n\n            \n                \n                    Get a list of all the registered search providers.\n\n\n                    \n                        Returns :         RegisteredProviders[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            registerProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerProvider(provider: SpotlightSearchProvider, section: string, order: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:51\n                \n            \n\n\n            \n                \n                    Register a search provider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                SpotlightSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The search provider {\n\n                                    \n                                \n                                \n                                    section\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The section name (the title or the group name) that this provider will provides results for.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        The order of the section in the spotlight search results. Less the order, closer to the beginning\nof the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            unregisterProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unregisterProvider(registrationId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:85\n                \n            \n\n\n            \n                \n                    Unregister a search provider by providing the registration id.\nReturns true if unregistration was done.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registrationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id returned when registering the provider\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InternalRegistrationData[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:42\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionTracker.html":{"url":"classes/SubscriptionTracker.html","title":"class - SubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                Components can use this to have subscriptions automatically removed when the component is destroyed\n\n            \n\n\n            \n                Implements\n            \n            \n                            ISubscriptionTracker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                unsubscribe\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(destroyable: OnDestroy)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n                \n                    \n                            Constructs this tracker to call unsubscribeAll when OnDestroy.ngOnDestroy is called.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        destroyable\n                                                  \n                                                        \n                                                                        OnDestroy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThousandsUnit.html":{"url":"classes/ThousandsUnit.html","title":"class - ThousandsUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThousandsUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of thousands\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:89\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unit.html":{"url":"classes/Unit.html","title":"class - Unit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Allows you to define different types of units with unitName and\nmultiplier that converts to baseUnit.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number, unitName: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nValue that is used to convert this to base unit\n\n\n                                                        \n                                                \n                                                \n                                                        unitName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nName of the Unit. Also used to construct translation\nkeys for each type of Unit.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:71\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:45\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:37\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:61\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:54\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnitFormatter.html":{"url":"injectables/UnitFormatter.html","title":"injectable - UnitFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnitFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit-formatter.ts\n        \n\n            \n                Description\n            \n            \n                UnitFormatter is used to format the value with unitName in localized string\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bestFormat\n                            \n                            \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit-formatter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bestFormat\n                        \n                        \n                    \n                \n            \n            \n                \nbestFormat(value: number, inputUnit: Unit, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:46\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to best unit out of availableUnits and returns\nin localized string format ${value} ${outputUnit.unitName}\nEx: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        = value of inputUnit\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlist of units from which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            format\n                        \n                        \n                    \n                \n            \n            \n                \nformat(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:29\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to outPutUnit returns in\nlocalized string format ${value} ${outputUnit.unitName}\nEx: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nvalue of inputUnit\n\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit to which value is converted\n\n\n                                    \n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nhow many digits are shown after decimal\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { CommonUtil } from '../common-util';\nimport { Unit } from './unit';\n\n/**\n * UnitFormatter is used to format the value with unitName in localized string\n */\n@Injectable()\nexport class UnitFormatter {\n    constructor(private translationService: TranslationService) {}\n\n    /**\n     * Converts the value of inputUnit to outPutUnit returns in\n     * localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n     *\n     * @param value - value of inputUnit\n     * @param inputUnit - unit of value\n     * @param outputUnit - unit to which value is converted\n     * @param precision - how many digits are shown after decimal\n     */\n    format(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number): string {\n        // TODO response from getOutputValue() needs to be formatted to localized number\n        return this.translationService.translate(outputUnit.getValueWithUnitTranslationKey(), [\n            CommonUtil.roundTo(inputUnit.getOutputValue(value, outputUnit), precision),\n        ]);\n    }\n\n    /**\n     * Converts the value of inputUnit to best unit out of availableUnits and returns\n     * in localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n     *\n     * @param value = value of inputUnit\n     * @param inputUnit - unit of value\n     * @param availableUnits - list of units from which best unit is calculated\n     */\n    bestFormat(value: number, inputUnit: Unit, availableUnits: Unit[]): string {\n        return this.format(value, inputUnit, inputUnit.findBestUnit(value, availableUnits));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActionMenuModule.html":{"url":"modules/VcdActionMenuModule.html","title":"module - VcdActionMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActionMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/action-menu/action-menu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ActionMenuComponent } from './action-menu.component';\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, I18nModule],\n    declarations: [ActionMenuComponent],\n    providers: [],\n    exports: [ActionMenuComponent],\n})\nexport class VcdActionMenuModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActivityReporterModule.html":{"url":"modules/VcdActivityReporterModule.html","title":"module - VcdActivityReporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActivityReporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdErrorBannerModule } from '../error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from '../loading/loading-indicator.module';\nimport { BannerActivityReporterComponent } from './banner-activity-reporter.component';\nimport { SpinnerActivityReporterComponent } from './spinner-activity-reporter.component';\n\n@NgModule({\n    declarations: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    imports: [CommonModule, ClarityModule, I18nModule, VcdErrorBannerModule, VcdLoadingIndicatorModule],\n    exports: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    entryComponents: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n})\nexport class VcdActivityReporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdComponentsModule.html":{"url":"modules/VcdComponentsModule.html","title":"module - VcdComponentsModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdComponentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/components.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            SpotlightSearchModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdDataExporterModule\n                        \n                        \n                            VcdDatagridModule\n                        \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdFormModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { VcdActivityReporterModule } from './common/activity-reporter/activity-reporter.module';\nimport { VcdErrorBannerModule } from './common/error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from './common/loading/loading-indicator.module';\nimport { VcdDataExporterModule } from './data-exporter/data-exporter.module';\nimport { VcdDatagridModule } from './datagrid/datagrid.module';\nimport { VcdFormModule } from './form/form.module';\nimport { ShowClippedTextDirectiveModule } from './lib/directives/show-clipped-text.directive.module';\nimport { SpotlightSearchModule } from './spotlight-search/spotlight-search.module';\n\n@NgModule({\n    exports: [\n        VcdDataExporterModule,\n        VcdDatagridModule,\n        ShowClippedTextDirectiveModule,\n        VcdErrorBannerModule,\n        VcdLoadingIndicatorModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        SpotlightSearchModule,\n    ],\n})\nexport class VcdComponentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDataExporterModule.html":{"url":"modules/VcdDataExporterModule.html","title":"module - VcdDataExporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDataExporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DataExporterComponent } from './data-exporter.component';\n\n@NgModule({\n    declarations: [DataExporterComponent],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n    exports: [DataExporterComponent],\n})\nexport class VcdDataExporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDatagridModule.html":{"url":"modules/VcdDatagridModule.html","title":"module - VcdDatagridModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDatagridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            ComponentRendererOutletDirective\n                        \n                        \n                            DatagridComponent\n                        \n                        \n                            DatagridMultiSelectFilterComponent\n                        \n                        \n                            DatagridNumericFilterComponent\n                        \n                        \n                            DatagridSelectFilterComponent\n                        \n                        \n                            DatagridStringFilterComponent\n                        \n                        \n                            FunctionRendererPipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            filters\n                        \n                        \n                            renderers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdFormModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            DatagridComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdActivityReporterModule } from '../common/activity-reporter/activity-reporter.module';\nimport { PipesModule } from '../common/pipes/pipes.module';\nimport { VcdFormModule } from '../form/form.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DatagridComponent } from './datagrid.component';\nimport { ComponentRendererOutletDirective } from './directives/component-renderer-outlet.directive';\nimport { DatagridMultiSelectFilterComponent } from './filters/datagrid-multiselect-filter.component';\nimport { DatagridNumericFilterComponent } from './filters/datagrid-numeric-filter.component';\nimport { DatagridSelectFilterComponent } from './filters/datagrid-select-filter.component';\nimport { DatagridStringFilterComponent } from './filters/datagrid-string-filter.component';\nimport { FunctionRendererPipe } from './pipes/function-renderer.pipe';\nimport { BoldTextRendererComponent } from './renderers/bold-text-renderer.component';\n\nconst directives = [ComponentRendererOutletDirective];\nconst pipes = [FunctionRendererPipe];\nconst renderers = [BoldTextRendererComponent];\nconst filters = [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ClarityModule,\n        RouterModule,\n        PipesModule,\n        ReactiveFormsModule,\n        ShowClippedTextDirectiveModule,\n        FormsModule,\n        I18nModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n    ],\n    declarations: [DatagridComponent, ...directives, ...renderers, ...pipes, ...filters],\n    providers: [],\n    exports: [DatagridComponent, ...renderers],\n    entryComponents: [...renderers, ...filters],\n})\nexport class VcdDatagridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VcdDatagridWidgetObject.html":{"url":"classes/VcdDatagridWidgetObject.html","title":"class - VcdDatagridWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VcdDatagridWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for our VCD DataGrid\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gridHeader\n                                \n                                \n                                    clrDatagrid\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : `vcd-datagrid`\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gridHeader\n                    \n                \n\n                \n                    \n                        getgridHeader()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:19\n                                \n                            \n                    \n                        \n                                Gives the header above the grid.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        clrDatagrid\n                    \n                \n\n                \n                    \n                        getclrDatagrid()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:26\n                                \n                            \n                    \n                        \n                                Gives the widget object for this clr datagrid.\n\n\n                                \n                                    Returns :         ClrDatagridWidgetObject\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../widget-object';\nimport { DatagridComponent } from './../../../datagrid/datagrid.component';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Widget Object for our VCD DataGrid\n */\nexport class VcdDatagridWidgetObject extends WidgetObject> {\n    static tagName = `vcd-datagrid`;\n\n    /**\n     * Gives the header above the grid.\n     */\n    get gridHeader(): string {\n        return this.getText('h3');\n    }\n\n    /**\n     * Gives the widget object for this clr datagrid.\n     */\n    get clrDatagrid(): ClrDatagridWidgetObject {\n        const constElement = this.findElement(ClrDatagridWidgetObject.tagName);\n        return new ClrDatagridWidgetObject(this.fixture, constElement, constElement.componentInstance);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdErrorBannerModule.html":{"url":"modules/VcdErrorBannerModule.html","title":"module - VcdErrorBannerModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdErrorBannerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/error/error-banner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ErrorBannerComponent } from './error-banner.component';\n\n@NgModule({\n    declarations: [ErrorBannerComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [ErrorBannerComponent],\n    entryComponents: [ErrorBannerComponent],\n})\nexport class VcdErrorBannerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormModule.html":{"url":"modules/VcdFormModule.html","title":"module - VcdFormModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_exports\n\n\n\ncluster_VcdFormModule_providers\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/form/form.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            UnitFormatter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { UnitFormatter } from '../utils/unit/unit-formatter';\nimport { FormCheckboxComponent } from './form-checkbox/form-checkbox.component';\nimport { FormInputComponent } from './form-input/form-input.component';\nimport { FormSelectComponent } from './form-select/form-select.component';\nimport {\n    MinMaxValidator,\n    NumberWithUnitFormInputComponent,\n} from './number-with-unit-input/number-with-unit-form-input.component';\n\nconst declarations = [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n];\n\n@NgModule({\n    imports: [ClarityModule, FormsModule, ReactiveFormsModule, CommonModule, I18nModule],\n    declarations,\n    providers: [UnitFormatter],\n    exports: [...declarations],\n})\nexport class VcdFormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdLoadingIndicatorModule.html":{"url":"modules/VcdLoadingIndicatorModule.html","title":"module - VcdLoadingIndicatorModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdLoadingIndicatorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/loading/loading-indicator.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { LoadingIndicatorComponent } from './loading-indicator.component';\n\n@NgModule({\n    declarations: [LoadingIndicatorComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [LoadingIndicatorComponent],\n    entryComponents: [LoadingIndicatorComponent],\n})\nexport class VcdLoadingIndicatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetFinder.html":{"url":"classes/WidgetFinder.html","title":"class - WidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                findWidgets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(componentConstructor: Type)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        componentConstructor\n                                                  \n                                                        \n                                                                    Type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The host component to be created as the root of the tests's fixture\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:173\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:217\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findWidgets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWidgets(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:192\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds widgets within a fixture\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType[]\n\n                    \n                    \n                        A Potentially empty list of widgets matching the given specs\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetObject.html":{"url":"classes/WidgetObject.html","title":"class - WidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\nThe main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\nqueries the internals of a component from a test.\nSubclass Rules\n\nMethods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\ncallers to query it from the outside creating potential duplicate querying code and abstraction leaks.\nSubclasses also should not have testing assertions. They should only provide the state and the calling test can\nassert code on its own.\n\n\n\nT is the type of the JS/TS object being wrapped\nIt is recommended that files for implementations be named with a .wo.ts extension\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture, root: DebugElement, component: T)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\nneed to find a widget within the tree, you should use find.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The test fixture, so we can call {\n\n                                                        \n                                                \n                                                \n                                                        root\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The root element (host) for the component instance. We typically prefer to interact with the\ncomponent but there are times when we must check the DOM.\n\n                                                        \n                                                \n                                                \n                                                        component\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The component instance being managed. Whenever possible, we should access the component's API.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:42\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:73\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:54\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:62\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:115\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:123\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:87\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:101\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing to vcd-ui-common\nThe vcd-ui-common project team welcomes contributions from the community. Before you start working with vcd-ui-common, please\nread our Developer Certificate of Origin. All contributions to this repository must be\nsigned as described on that page. Your signature certifies that you wrote the patch or have the right to pass it on\nas an open-source patch.\nContribution Flow\nThis is a rough outline of what a contributor's workflow looks like:\n\nCreate a topic branch from where you want to base your work\nMake commits of logical units\nMake sure your commit messages are in the proper format (see below)\nPush your changes to a topic branch in your fork of the repository\nSubmit a pull request\n\nContribution Requirements\n\nPublic/exported members must be documented using tsdoc\n\nEvery commit must contain unit tests, striving for full coverage. If full coverage cannot be achieved, the Pull\nRequest should explain why tests could not be written.\n\nDescriptive Pull Requests:\n\nInclude list of steps for manual testing\nExplain alternatives that were considered\nFor bug fixes, explain what was causing the issue, don't repeat the text from the issue\n\n\n\nMerge vs fast-forward\nPRs with single commits should use --fast-forward. Otherwise, pull requests should be merge commits.\nStaying In Sync With Upstream\nWhen your branch gets out of sync with the vmware/master branch, use the following to update:\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream master\ngit push --force-with-lease origin my-new-featureUpdating pull requests\nIf your PR fails to pass CI or needs changes based on code review, you'll most likely want to squash these changes into\nexisting commits.\nIf your pull request contains a single commit or your changes are related to the most recent commit, you can simply\namend the commit.\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-featureIf you need to squash changes into an earlier commit, you can use:\ngit add .\ngit commit --fixup \ngit rebase -i --autosquash master\ngit push --force-with-lease origin my-new-featureBe sure to add a comment to the PR indicating your new changes are ready to review, as GitHub does not generate a\nnotification when you git push.\nCode Style\nFormatting Commit Messages\nWe follow the conventions on How to Write a Git Commit Message.\nBe sure to include any related GitHub issue references in the commit message. See\nGFM syntax for referencing issues\nand commits.\nReporting Bugs and Creating Issues\nWhen opening a new issue, try to roughly follow the commit message format conventions above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/components/src/action-menu/action-menu.component.ts\n            \n            component\n            ActionMenuComponent\n            \n                78 %\n                (15/19)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            class\n            ActivityPromiseResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ActivityResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ObjectAndResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-reporter.ts\n            \n            class\n            ActivityReporter\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n            \n            component\n            BannerActivityReporterComponent\n            \n                66 %\n                (12/18)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n            \n            component\n            SpinnerActivityReporterComponent\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                projects/components/src/common/error/error-banner.component.ts\n            \n            component\n            ErrorBannerComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionDisplayConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionItem\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/select-option.ts\n            \n            interface\n            SelectOption\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/common/loading/loading-indicator.component.ts\n            \n            component\n            LoadingIndicatorComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            pipe\n            NestedPropertyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            function\n            isNullOrUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            DATE_OBJECT_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            OBJECT_PROPERTY_SEPARATOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/pipes.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            class\n            SubscriptionTracker\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            interface\n            ISubscriptionTracker\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            injectable\n            CsvExporterService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            encodeValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            hasPotentialInjection\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            processRow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            sanitizeString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            variable\n            LEADING_CONTROL_CHAR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            component\n            DataExporterComponent\n            \n                58 %\n                (23/39)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            DataExportRequestEvent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            ExportColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.wo.ts\n            \n            class\n            DataExporterWidgetObject\n            \n                82 %\n                (14/17)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            component\n            DatagridComponent\n            \n                73 %\n                (60/82)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            ColumnConfigInternal\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPane\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPaneConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailRowConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridDataFetchResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridState\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationCallback\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PagionationInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            SortedColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_PAGINATION_TRANSLATION_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            MAX_HEADER_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            ROW_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            directives\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            filters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            pipes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            renderers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n            \n            directive\n            ComponentRendererOutletDirective\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            class\n            DatagridFilter\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            function\n            FilterComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            variable\n            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            component\n            DatagridMultiSelectFilterComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            DatagridMultiSelectFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOption\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOptionInternal\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            function\n            DatagridMultiSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            component\n            DatagridNumericFilterComponent\n            \n                36 %\n                (11/30)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            interface\n            DatagridNumericFilterConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            function\n            DatagridNumericFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            component\n            DatagridSelectFilterComponent\n            \n                47 %\n                (11/23)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            interface\n            DatagridSelectFilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            function\n            DatagridSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            component\n            DatagridStringFilterComponent\n            \n                45 %\n                (10/22)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            interface\n            DatagridStringFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            function\n            DatagridStringFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRenderer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRendererSpec\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            Button\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ButtonConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ColumnRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButton\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButtonConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            FunctionRenderer\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GlobalButton\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GridColumn\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            function\n            ColumnComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            interface\n            MockRecord\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            variable\n            mockData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n            \n            pipe\n            FunctionRendererPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            component\n            BoldTextRendererComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            interface\n            BoldTextRendererConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            function\n            BoldTextRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            class\n            BoldTextRendererWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            function\n            WithGridBoldRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            class\n            BaseFormControl\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-checkbox/form-checkbox.component.ts\n            \n            component\n            FormCheckboxComponent\n            \n                76 %\n                (16/21)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            component\n            FormInputComponent\n            \n                77 %\n                (24/31)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            getFormattedDateValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            pad\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-select/form-select.component.ts\n            \n            component\n            FormSelectComponent\n            \n                72 %\n                (13/18)\n            \n        \n        \n            \n                \n                projects/components/src/form/form.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/interfaces/can-be-read-only.interface.ts\n            \n            interface\n            CanBeReadOnly\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            component\n            NumberWithUnitFormInputComponent\n            \n                59 %\n                (25/42)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            directive\n            MinMaxValidator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            variable\n            UNLIMITED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n            \n            class\n            NumberWithUnitFormInputWidgetObject\n            \n                52 %\n                (9/17)\n            \n        \n        \n            \n                \n                projects/components/src/form/validators.ts\n            \n            class\n            FormValidators\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            component\n            ShowClippedTextDirectiveTestHostComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            class\n            ShowClippedTextDirectiveTestHelper\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            directive\n            ShowClippedTextDirective\n            \n                20 %\n                (3/15)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            interface\n            CliptextConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            setStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            unwatchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            watchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            fireTipTransitionEndForTests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            tip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search-result.ts\n            \n            interface\n            SpotlightSearchResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            component\n            SpotlightSearchComponent\n            \n                31 %\n                (7/22)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            interface\n            SearchSection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.provider.ts\n            \n            interface\n            SpotlightSearchProvider\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            injectable\n            SpotlightSearchService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            InternalRegistrationData\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            RegisteredProviders\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            variable\n            createId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/common-util.ts\n            \n            class\n            CommonUtil\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            class\n            FilterBuilder\n            \n                70 %\n                (17/24)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            variable\n            Operators\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/id-generator/id-generator.ts\n            \n            class\n            IdGenerator\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n            \n            class\n            BannerActivityReporterWidgetObject\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n            \n            class\n            SpinnerActivityReporterWidgetObject\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            class\n            ClrDatagridWidgetObject\n            \n                90 %\n                (37/41)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            CELL_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_CSS_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            FILTER_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            ROW_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            component\n            FilterTestHostComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            configureTestingModule\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelperWithFinder\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n            \n            class\n            VcdDatagridWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetFinder\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetObject\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindableWidget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            HasFinder\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            function\n            isFindParamsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit-formatter.ts\n            \n            injectable\n            UnitFormatter\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Bytes\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Hertz\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Percent\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            ThousandsUnit\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Unit\n            \n                54 %\n                (6/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.9\n        \n            @angular/common : 9.1.9\n        \n            @angular/compiler : 9.1.9\n        \n            @angular/core : 9.1.9\n        \n            @angular/forms : 9.1.9\n        \n            @angular/platform-browser : 9.1.9\n        \n            @angular/platform-browser-dynamic : 9.1.9\n        \n            @angular/router : 9.1.9\n        \n            @clr/angular : 3.1.3\n        \n            @clr/core : 3.1.3\n        \n            @clr/icons : 3.1.3\n        \n            @clr/ui : 3.1.3\n        \n            @stackblitz/sdk : 1.3.0\n        \n            @vmw/ng-live-docs : 0.0.6\n        \n            @vmw/plain-js-live-docs : 0.0.2\n        \n            @webcomponents/webcomponentsjs : 2.0.0\n        \n            @wessberg/ts-evaluator : 0.0.25\n        \n            angular-cli-ghpages : 0.6.2\n        \n            classlist.js : 1.1.20150312\n        \n            codecov.io : 0.1.6\n        \n            karma-coverage : 2.0.2\n        \n            lit-html : 1.1.2\n        \n            messageformat : 1.0.2\n        \n            mousetrap : 1.6.5\n        \n            prismjs : 1.17.1\n        \n            properties : 1.2.1\n        \n            rbradford-compodoc : 1.1.11\n        \n            rxjs : 6.5.5\n        \n            tsickle : 0.38.1\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/animations : 9.*\n        \n            @angular/common : 9.*\n        \n            @angular/compiler : 9.*\n        \n            @angular/core : 9.*\n        \n            @angular/forms : 9.*\n        \n            @angular/platform-browser : 9.*\n        \n            @angular/platform-browser-dynamic : 9.*\n        \n            @angular/router : 9.*\n        \n            @clr/angular : 3.*\n        \n            @clr/ui : 3.*\n        \n            @clr/icons : 3.*\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionStyling   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActionType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActivityIndicatorType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            CheckBoxStyling   (projects/.../form-checkbox.component.ts)\n                        \n                        \n                            ContextualButtonPosition   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            FormFields   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            GridColumnHideable   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            GridSelectionType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            InactiveButtonDisplayMode   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            SIZES   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            TextIcon   (projects/.../action-item.interface.ts)\n                        \n                        \n                            TooltipPosition   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            TooltipSize   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UserOptions   (projects/.../data-exporter.component.ts)\n                        \n                        \n                            WildCardPosition   (projects/.../datagrid-string-filter.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionStyling\n                    \n                \n                    \n                        \n                            Display options for action menu\n\n                        \n                    \n                        \n                            \n                                 INLINE\n                            \n                        \n                        \n                            \n                                Value : INLINE\n                            \n                        \n                        \n                            \n                                 DROPDOWN\n                            \n                        \n                        \n                            \n                                Value : DROPDOWN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                    \n                        \n                            List of different type of action buckets\n\n                        \n                    \n                        \n                            \n                                 STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                Value : STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n                        \n                            \n                                Value : STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TextIcon\n                    \n                \n                    \n                        \n                            An enum that describes the possible ways to display the button title.\n\n                        \n                    \n                        \n                            \n                                 ICON\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 ICON_AND_TEXT\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivityIndicatorType\n                    \n                \n                    \n                        \n                            The types of activity indicators that can be displayed on top of the grid.\n\n                        \n                    \n                        \n                            \n                                 SPINNER\n                            \n                        \n                        \n                            \n                                 BANNER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridSelectionType\n                    \n                \n                    \n                        \n                            Different types of row selection on the grid\n\n                        \n                    \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : MULTI\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : SINGLE\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : NONE\n                            \n                        \n            \n        \n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n    \n        \n            \n                \n                    \n                        \n                        CheckBoxStyling\n                    \n                \n                        \n                            \n                                 CHECKBOX\n                            \n                        \n                        \n                            \n                                Value : checkbox\n                            \n                        \n                        \n                            \n                                 TOGGLESWITCH\n                            \n                        \n                        \n                            \n                                Value : toggle-switch\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ContextualButtonPosition\n                    \n                \n                    \n                        \n                            An enum that describes where the contextual buttons should display.\n\n                        \n                    \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 ROW\n                            \n                        \n                        \n                            \n                                Value : ROW\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridColumnHideable\n                    \n                \n                        \n                            \n                                 Never\n                            \n                        \n                        \n                            \n                                Value : NEVER\n                            \n                        \n                        \n                            \n                                 Shown\n                            \n                        \n                        \n                            \n                                Value : SHOWN\n                            \n                        \n                        \n                            \n                                 Hidden\n                            \n                        \n                        \n                            \n                                Value : HIDDEN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InactiveButtonDisplayMode\n                    \n                \n                    \n                        \n                            The ways buttons should be displayed when they are inactive.\n\n                        \n                    \n                        \n                            \n                                 Hide\n                            \n                        \n                        \n                            \n                                Value : HIDE\n                            \n                        \n                        \n                            \n                                 Disable\n                            \n                        \n                        \n                            \n                                Value : Disable\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        FormFields\n                    \n                \n                        \n                            \n                                 from\n                            \n                        \n                        \n                            \n                                Value : from\n                            \n                        \n                        \n                            \n                                 to\n                            \n                        \n                        \n                            \n                                Value : to\n                            \n                        \n            \n        \n\n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n        \n            \n                \n                    \n                        \n                        SIZES\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : sm\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : md\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : lg\n                            \n                        \n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        TooltipPosition\n                    \n                \n                        \n                            \n                                 tl\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-left\n                            \n                        \n                        \n                            \n                                 tr\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-right\n                            \n                        \n                        \n                            \n                                 br\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-right\n                            \n                        \n                        \n                            \n                                 bl\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-left\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TooltipSize\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : 100px\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : 200px\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : 400px\n                            \n                        \n            \n        \n\n    projects/components/src/data-exporter/data-exporter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        UserOptions\n                    \n                \n                        \n                            \n                                 selectAll\n                            \n                        \n                        \n                            \n                                Value : selectAll\n                            \n                        \n                        \n                            \n                                 friendlyNames\n                            \n                        \n                        \n                            \n                                Value : friendlyNames\n                            \n                        \n                        \n                            \n                                 sanitize\n                            \n                        \n                        \n                            \n                                Value : sanitize\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        WildCardPosition\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 END\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 WRAP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BoldTextRenderer   (projects/.../bold-text-renderer.component.ts)\n                        \n                        \n                            ColumnComponentRendererSpec   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            configureTestingModule   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelper   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelperWithFinder   (projects/.../filter-utils.ts)\n                        \n                        \n                            DatagridMultiSelectFilter   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            DatagridNumericFilter   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            DatagridSelectFilter   (projects/.../datagrid-select-filter.component.ts)\n                        \n                        \n                            DatagridStringFilter   (projects/.../datagrid-string-filter.component.ts)\n                        \n                        \n                            encodeValue   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            FilterComponentRendererSpec   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            getFormattedDateValue   (projects/.../form-input.component.ts)\n                        \n                        \n                            hasPotentialInjection   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            isFindParamsObject   (projects/.../widget-object.ts)\n                        \n                        \n                            isNullOrUndefined   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            pad   (projects/.../form-input.component.ts)\n                        \n                        \n                            processRow   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            sanitizeString   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            setStyle   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            unwatchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            watchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            WithGridBoldRenderer   (projects/.../bold-text-renderer.wo.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            BoldTextRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nBoldTextRenderer(textExtractor)\n                \n            \n\n\n\n\n            \n                \n                    Creates a ColumnRendererSpec for rendering bold text in a column.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textExtractor\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ColumnComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nColumnComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specification of ColumnRendererSpec type\nExample usage:\nconst gridColumn = {\n   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n}\nIn the above example this method helps in making sure that:\n\nValue \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/datagrid/filter-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            configureTestingModule\n                        \n                        \n                    \n                \n            \n            \n                \nconfigureTestingModule()\n                \n            \n\n\n\n\n            \n                \n                    Creates a testing module with FilterTestHostComponent that has only single column for filter testing\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelper\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelper(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Used inside beforeEach functions of filter tests and it does the following:\n\nCreates a testing module with FilterTestHostComponent that has only single column for filter testing\nSets the filter on the column of host component(FilterTestHostComponent)\nOpens the filter and returns a component instance of the filter created\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to be created in the test host component grid's column\n\n                                    \n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The configuration for the filter\nExample:\nbeforeEach(function(this: HasDgStringFilter): void {\nthis.filter = createDatagridFilterTestHelper(\nDatagridStringFilterComponent,\n{ wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n);\n});\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DatagridFilter\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelperWithFinder\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelperWithFinder(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Same as the above function but used for tests which need finder\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridMultiSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridMultiSelectFilter(options, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this multi-select filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridNumericFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridNumericFilter(value?, unitOptions?, unit?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this numeric filter.\n\n                                    \n                                \n                                \n                                    unitOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Select dropdown options for unit input\n\n                                    \n                                \n                                \n                                    unit\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        initial value for unit input to be selected\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridSelectFilter(options, value?, customFiql?: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this select filter.\n\n                                    \n                                \n                                \n                                    customFiql\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        when set as true will disable any formatting by {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridStringFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridStringFilter(wildCardPosition?, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    wildCardPosition\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        where the * should go in the FIQL string output.\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value of the filter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(cellValue, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cellValue\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cell cellValue to be encoded\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If this cellValue starts with a control should it be\nprefixed with the tab character\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \nhasPotentialInjection(row)\n                \n            \n\n\n\n\n            \n                \n                    Whether the given row data is at risk of code injection when exported to CSV.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \nprocessRow(row, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A list of cells to be turned into a CSV string, separated by commas\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sanitizeString\n                        \n                        \n                    \n                \n            \n            \n                \nsanitizeString(value)\n                \n            \n\n\n\n\n            \n                \n                    Prevents CSV injection by prefixing with a tab character if the string contains a\nspecial character.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            FilterComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nFilterComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specifications of FilterRendererSpec type\nExample usage:\nconst gridColumn = {\n   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n}\nIn the above examples these methods help in making sure that:\n\nValue \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/form/form-input/form-input.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getFormattedDateValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetFormattedDateValue(value)\n                \n            \n\n\n\n\n            \n                \n                    To format a date string into a value which can be given to the input html element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pad\n                        \n                        \n                    \n                \n            \n            \n                \npad(num)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/widget-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isFindParamsObject\n                        \n                        \n                    \n                \n            \n            \n                \nisFindParamsObject(params)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FindParams\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isNullOrUndefined\n                        \n                        \n                    \n                \n            \n            \n                \nisNullOrUndefined(value)\n                \n            \n\n\n\n\n            \n                \n                    Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setStyle\n                        \n                        \n                    \n                \n            \n            \n                \nsetStyle(el, style)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    style\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwatchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nunwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            watchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithGridBoldRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nWithGridBoldRenderer(Base)\n                \n            \n\n\n\n\n            \n                \n                    Mixin that allows ClrDatagridWidgetObject to read information from BoldTextRendererComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Base\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVMware Cloud Director UI Common Components\nRepo Structure\nThis monorepo contains four separate but related projects:\nComponent Library (./projects/components) @vcd/ui-components\nReusable components for vcd-ui and its plugin developers. See its README\nfor further details\nInternalization Library (./projects/i18n) @vcd/i18n\nTranslation code for vcd-ui and its plugin developers. See its README\nfor further details\nExamples App (./projects/examples)\nThe application that showcases @vcd/ui-components using @vmw/ng-live-docs.\nRun npm start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if\nyou change any of the source files. This is where you'll see changes made in components\nRoute Analyzer (./projects/route-analyzer) @vcd/route-analyzer\nRoute Analyzer statically analyzes angular source code and generates a json file with all the available routes,\nincluding the ones from lazy loaded modules. See its README\nfor further details\nPeer Dependencies\nThe component library depends on Clarity and Angular\nwhich must must be installed from your application's package.json. See package.json for version\ninformation.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use\nng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build:components, or npm run build:i18n. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun npm run test:components, or npm run test:i18n to execute the unit tests via Karma.\nRunning end-to-end tests (Examples App)\nRun ng e2e to execute the end-to-end tests via Protractor.\nCloning the repo\nWe typically use git clone https://github.com/vmware/vmware-cloud-director-ui-components ./vcd-ui-common to avoid\nthe extremely long folder name.\nPublishing\nPublishing happens through the CI/CD pipeline. See package.json\nVersioning\nFor all official releases, versioning should be semantic as per NPM's documentation.\nFor all development, nightly builds, the version should be created using npm version prerelease --preid=dev.\nSteps for publishing an @next release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, merge that PR into master\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @next tag(npm publish --tag next)\nSteps for publishing an @latest release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, Push the changes to remote repo using Git tag using following commands:\nAdd a Git tag to the HEAD commit that has to be published as latest: git tag -fa -v[0-999].[0-999].[0-999]\nPush to the remote repo(vmware/vmware-cloud-director-ui-components): git push git@github.com:vmware/vmware-cloud-director-ui-components.git refs/tags/-v[0-999].[0-999].[0-999]\n\n\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @latest tag(npm publish)\nAngular CLI\nThis project was generated with Angular CLI version 8.3.20. We attempt to\nkeep the project following CLI guidelines so we can benefit from ng update.\nFurther help\nTo get further help, please file issues on github.\nTo get more help on the Angular CLI use ng help or go check out the\nAngular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShowClippedTextDirectiveModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotlightSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActionMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActivityReporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdComponentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDataExporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDatagridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdErrorBannerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdLoadingIndicatorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\ncluster_SpotlightSearchModule_providers\n\n\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_providers\n\n\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\nSpotlightSearchService\n\nSpotlightSearchService\n\nSpotlightSearchModule -->\n\nSpotlightSearchService->SpotlightSearchModule\n\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    48 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionHandlerType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ComponentRendererConstructor   (projects/.../component-renderer.interface.ts)\n                        \n                        \n                            DatagridNumericFilterValue   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            EventHandler   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            LazyString   (projects/.../types.ts)\n                        \n                        \n                            Primitives   (projects/.../filter-builder.ts)\n                        \n                        \n                            SpinnerSize   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            SpotlightSearchResultType   (projects/.../spotlight-search-result.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ActionHandlerType\n                \n            \n            \n                \n                    Type of ActionItem.handler function\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentRendererConstructor\n                \n            \n            \n                \n                    Used for the type safety of ColumnRendererSpec\n\n                \n            \n            \n                \n                            Type>\n\n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n    \n        \n            \n                \n                    \n                    DatagridNumericFilterValue\n                \n            \n            \n                \n                    The type of value that goes in the DatagridNumericFilterConfig.\n\n                \n            \n            \n                \n                        [number, number]\n\n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n    \n        \n            \n                \n                    \n                    EventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    LazyString\n                \n            \n            \n                \n                    The result of a call to either TranslationService.translate or TranslationService.translateAsync.\nA duplicate of the @vcd/i18n LazyString.\n\n                \n            \n            \n                \n                        string | Observable | Promise\n\n                \n            \n        \n    \n    projects/components/src/utils/filter-builder.ts\n    \n    \n        \n            \n                \n                    \n                    Primitives\n                \n            \n            \n                \n                        boolean | string | number\n\n                \n            \n        \n    \n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerSize\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/components/src/spotlight-search/spotlight-search-result.ts\n    \n    \n        \n            \n                \n                    \n                    SpotlightSearchResultType\n                \n            \n            \n                \n                    The type of the spotlight search result which can be a promise\n\n                \n            \n            \n                \n                            SpotlightSearchResult[] | Promise\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CELL_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_CSS_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            createId   (projects/.../spotlight-search.service.ts)\n                        \n                        \n                            DATE_OBJECT_CLASS   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            declarations   (projects/.../form.module.ts)\n                        \n                        \n                            declarations   (projects/.../pipes.module.ts)\n                        \n                        \n                            DEFAULT_PAGINATION_TRANSLATION_KEY   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE_OPTIONS   (projects/.../datagrid.component.ts)\n                        \n                        \n                            directives   (projects/.../datagrid.module.ts)\n                        \n                        \n                            FILTER_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            filters   (projects/.../datagrid.module.ts)\n                        \n                        \n                            fireTipTransitionEndForTests   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            idGenerator   (projects/.../base-form-control.ts)\n                        \n                        \n                            idGenerator   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            LEADING_CONTROL_CHAR   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            MAX_HEADER_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            mockData   (projects/.../mock-data.ts)\n                        \n                        \n                            OBJECT_PROPERTY_SEPARATOR   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            Operators   (projects/.../filter-builder.ts)\n                        \n                        \n                            pipes   (projects/.../datagrid.module.ts)\n                        \n                        \n                            renderers   (projects/.../datagrid.module.ts)\n                        \n                        \n                            ROW_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            ROW_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            tip   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UNLIMITED   (projects/.../number-with-unit-form-input.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/utils/test/datagrid/datagrid.wo.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CELL_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-cell'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_CSS_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.datagrid-column-title'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-column'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FILTER_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-filter'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-row'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/spotlight-search/spotlight-search.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})()\n                        \n                    \n\n                \n                    \n                        Create unique id\n\n                    \n                \n\n            \n        \n\n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DATE_OBJECT_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[object Date]'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OBJECT_PROPERTY_SEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n\n                \n                    \n                        Number of milliseconds delayed before emitting the filter has changed observable\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/form.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/common/pipes/pipes.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [NestedPropertyPipe]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PAGINATION_TRANSLATION_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.grid.default.pagination'\n                        \n                    \n\n                \n                    \n                        Key used for translation of pagination when a translation key is not given as input from the caller\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 15\n                        \n                    \n\n                \n                    \n                        The default number of items on a single page.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [DEFAULT_SIZE, 20, 50, 100]\n                        \n                    \n\n                \n                    \n                        The default items to show in the page size dropdown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MAX_HEADER_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n\n                \n                    \n                        The maximum allowed .datagrid-header element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n\n                \n                    \n                        The default clr-dr-row element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/datagrid/datagrid.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            directives\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [ComponentRendererOutletDirective]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pipes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FunctionRendererPipe]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [BoldTextRendererComponent]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fireTipTransitionEndForTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (event: Event) => {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n}\n                        \n                    \n\n                \n                    \n                        Used to call tip.onTransitionEnd from outside this file.\nWe need to expose tip.onTransitionEnd because when the window is not focused\n(as in a headless chrome environment), the transitionend event is not fired.\nAs such, from the tests, you need to manually call this method.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n}\n                        \n                    \n\n                \n                    \n                        Singleton tooltip created by directive\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/base-form-control.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('base-form-control-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('vcd-multiselect-filter-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LEADING_CONTROL_CHAR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[-+=@]/\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/mock-data.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MockRecord[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/filter-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Operators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n}\n                        \n                    \n\n                \n                    \n                        TODO: Remove FilterBuilder from VCD-UI https://jira.eng.vmware.com/browse/VDUCC-115\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNLIMITED\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -1\n                        \n                    \n\n                \n                    \n                        -1 is the number to specify a value of unlimited.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
