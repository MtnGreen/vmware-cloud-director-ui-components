var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionDisplayConfig.html",[0,0.074,1,2.18]],["body/interfaces/ActionDisplayConfig.html",[0,0.113,1,3.306,2,1.058,3,0.096,4,0.077,5,0.068,6,3.756,7,3.756,8,0.315,9,1.912,10,4.383,11,6.103,12,0.195,13,0.585,14,0.729,15,3.492,16,7.194,17,4.895,18,0.312,19,0.008,20,1.764,21,4.286,22,3.306,23,6.132,24,6.83,25,2.207,26,0.157,27,2.4,28,3.914,29,4.683,30,2.162,31,3.391,32,4.683,33,5.202,34,1.556,35,1.631,36,1.698,37,5.587,38,3.035,39,2.969,40,2.7,41,3.391,42,4.042,43,3.306,44,5.587,45,2.995,46,4.683,47,1.78,48,3.756,49,4.287,50,0.762,51,4.287,52,1.074,53,3.518,54,2.7,55,3.07,56,4.045,57,1.797,58,1.78,59,0.599,60,1.534,61,1.666,62,1.906,63,2.593,64,2.125,65,2.878,66,1.698,67,3.07,68,4.683,69,3.211,70,3.992,71,1.725,72,3.518,73,0.484,74,2.329,75,3.771,76,3.756,77,1.741,78,0.117,79,2.152,80,2.099,81,1.351,82,3.559,83,1.666,84,3.145,85,0.722,86,3.792,87,1.912,88,3.12,89,6.103,90,2.048,91,1.631,92,4.683,93,2.537,94,4.683,95,4.683,96,1.061,97,3.992,98,3.471,99,0.975,100,3.306,101,1.498,102,1.741,103,4.287,104,4.683,105,3.992,106,4.683,107,4.287,108,1.863,109,0.755,110,3.992,111,2.048,112,2.537,113,2.537,114,1.437,115,0.781,116,4.683,117,4.287,118,1.498,119,4.042,120,3.343,121,3.992,122,3.992,123,3.391,124,3.756,125,3.992,126,3.756,127,1.821,128,2.668,129,1.631,130,2.79,131,0.585,132,1.906,133,3.903,134,0.739,135,4.287,136,3.035,137,2.394,138,2.79,139,1.467,140,2.208,141,2.995,142,3.518,143,1.821,144,3.636,145,2.484,146,2.048,147,2.329,148,2.7,149,1.148,150,0.004,151,0.006,152,0.004]],["title/interfaces/ActionItem.html",[0,0.074,69,2.117]],["body/interfaces/ActionItem.html",[0,0.105,1,2.285,2,0.953,3,0.086,4,0.069,5,0.061,6,3.382,7,3.382,8,0.284,9,1.321,10,4.333,11,4.218,12,0.176,13,0.546,14,0.846,15,3.247,16,4.218,18,0.325,19,0.008,20,1.713,21,3.392,22,2.617,23,4.853,24,5.901,25,1.978,26,0.152,27,2.302,28,4.45,29,4.218,30,2.232,31,3.054,32,4.218,33,4.853,34,1.516,35,1.468,36,1.612,37,5.213,38,2.832,39,3.017,40,2.745,41,3.054,42,4.113,43,3.085,44,5.213,45,2.697,46,4.218,47,1.603,48,3.382,49,3.861,50,0.711,51,3.861,52,1.336,53,3.978,54,2.431,55,3.076,56,4.523,57,1.898,58,1.603,59,0.54,60,1.678,61,2.026,62,2.318,63,2.652,64,2.244,65,3.254,66,1.858,67,3.375,68,5.694,69,3.791,70,4.853,71,1.95,72,3.978,73,0.528,74,2.832,75,3.891,76,5.535,77,2.117,78,0.142,79,2.617,80,2.552,81,1.642,82,4.327,83,2.026,84,3.375,85,0.651,86,3.6,87,1.784,88,2.911,89,5.694,90,1.844,91,1.468,92,4.218,93,2.285,94,6.901,95,4.218,96,1.095,97,4.853,98,3.947,99,1.185,100,3.739,101,1.821,102,2.117,103,5.213,104,5.694,105,4.853,106,5.694,107,5.213,108,2.265,109,0.918,110,4.853,111,2.489,112,3.085,113,3.085,114,1.747,115,0.825,116,5.694,117,5.213,118,1.821,119,4.238,120,3.328,121,4.853,122,4.853,123,4.997,124,4.566,125,4.853,126,5.535,127,1.64,128,2.489,129,1.468,130,2.513,131,0.546,132,1.717,133,3.642,134,0.665,135,3.861,136,2.832,137,2.156,138,2.513,139,1.321,140,1.989,141,2.697,142,3.282,143,1.64,144,3.392,145,2.318,146,1.844,147,2.097,148,2.431,149,1.034,150,0.004,151,0.005,152,0.004]],["title/classes/ActionSearchProvider.html",[78,0.077,153,3.684]],["body/classes/ActionSearchProvider.html",[3,0.094,4,0.076,5,0.067,10,4.285,12,0.192,13,0.578,14,0.798,18,0.32,19,0.008,26,0.124,36,1.509,50,0.841,54,3.478,55,2.873,59,0.772,63,2.238,67,2.873,69,4.375,73,0.494,76,4.838,78,0.088,96,1.053,98,3.085,101,1.472,115,0.914,134,0.952,150,0.004,151,0.006,152,0.004,153,5.523,154,1.412,155,6.533,156,2.178,157,7.458,158,3.922,159,1.74,160,4.662,161,1.822,162,4.151,163,7.595,164,7.595,165,0.931,166,6.807,167,6.807,168,6.807,169,8.062,170,2.704,171,0.978,172,5.191,173,3.553,174,0.866,175,5.191,176,1.672,177,0.82,178,6.807,179,0.681,180,5.191,181,3.721,182,2.575,183,0.436,184,6.807,185,7.145,186,8.062,187,3.124,188,5.191,189,3.369,190,1.971,191,5.191,192,6.807,193,5.191,194,4.601,195,1.067,196,5.638,197,6.807,198,5.191,199,6.807,200,5.191,201,6.807,202,5.191,203,6.033,204,5.191,205,6.807,206,2.921,207,3.478,208,2.704,209,5.142,210,1.062,211,5.191,212,5.191,213,5.191,214,5.191,215,3.268,216,0.412,217,1.71,218,3.922,219,1.789,220,3.69,221,5.191,222,0.663,223,4.212,224,4.601,225,2.838,226,2.838,227,8.37,228,2.344,229,5.191,230,5.191,231,1.749,232,0.58,233,5.191,234,5.191,235,5.191,236,5.191,237,5.191,238,4.601,239,4.601,240,5.191,241,5.191,242,5.191,243,6.807,244,5.191,245,6.807,246,5.191,247,5.191,248,5.191,249,5.191,250,5.191,251,5.191,252,5.191,253,5.191,254,5.191,255,5.191,256,5.191,257,5.191]],["title/classes/ActivityPromiseResolver.html",[78,0.077,258,2.787]],["body/classes/ActivityPromiseResolver.html",[0,0.114,3,0.098,4,0.079,5,0.069,8,0.462,12,0.2,14,0.628,18,0.309,19,0.008,26,0.141,34,1.237,50,0.773,57,1.823,58,3.234,60,1.082,66,1.815,73,0.515,78,0.131,82,5.215,85,1.159,127,2.668,150,0.007,151,0.006,152,0.004,154,1.469,165,0.955,174,0.663,176,1.316,177,0.645,195,0.852,215,2.594,232,0.618,258,5.025,259,4.753,260,4.753,261,4.081,262,5.668,263,4.966,264,5.668,265,6.731,266,3.086,267,3.818,268,5.278,269,4.182,270,4.966,271,2.707,272,2.92,273,5.71,274,5.503,275,6.282,276,1.174,277,6.282,278,6.986,279,5.402,280,6.147,281,5.402,282,3.816,283,2.92,284,6.642,285,2.655,286,6.184,287,5.215,288,2.58,289,5.642,290,2.273,291,6.642,292,2.821,293,6.878,294,3.334,295,5.514,296,6.878,297,6.642,298,5.668,299,5.402,300,5.514,301,5.514,302,5.503,303,6.282,304,5.849,305,4.966,306,1.879,307,3.467,308,4.383,309,1.768,310,4.383,311,3.322,312,1.039,313,5.668,314,5.668,315,3.84,316,4.383]],["title/classes/ActivityReporter.html",[78,0.077,317,2.18]],["body/classes/ActivityReporter.html",[3,0.095,4,0.076,5,0.067,8,0.455,12,0.193,14,0.773,18,0.315,19,0.008,26,0.095,34,1.431,39,3.132,50,0.843,57,1.988,58,3.2,59,0.976,62,2.467,64,1.613,65,3.506,73,0.517,78,0.089,85,0.935,108,2.41,111,3.335,127,2.356,150,0.004,151,0.006,152,0.004,154,1.421,165,0.935,171,0.984,174,0.832,176,1.694,177,0.795,195,1.121,210,1.066,215,3.283,216,0.267,222,0.866,231,1.761,232,0.536,258,5.382,259,5.459,260,5.459,265,5.745,266,2.785,269,4.286,280,5.99,285,2.439,286,5.165,287,3.521,288,1.93,289,4.962,290,2.329,300,4.606,301,3.521,306,1.86,317,3.283,318,4.632,319,6.837,320,6.837,321,3.283,322,2.785,323,2.156,324,6.501,325,5.165,326,2.253,327,3.384,328,6.837,329,6.837,330,6.058,331,5.548,332,5.548,333,5.548,334,3.792,335,5.548,336,5.548,337,6.558,338,4.632,339,5.227,340,2.586,341,3.283,342,8.388,343,2.11,344,6.837,345,6.06,346,5.548,347,5.548,348,5.227,349,6.982,350,5.548,351,6.558,352,5.548,353,5.227,354,5.548,355,5.227,356,5.548,357,5.548,358,5.227,359,4.429,360,6.337,361,4.86,362,5.165,363,5.548,364,5.227,365,5.227,366,4.241,367,7.62,368,7.62,369,5.416,370,6.837,371,6.837,372,6.837,373,6.837,374,6.837,375,5.227,376,6.754,377,5.227,378,5.227,379,5.227,380,5.227,381,5.227,382,5.227]],["title/interfaces/ActivityResponse.html",[0,0.074,305,3.227]],["body/interfaces/ActivityResponse.html",[0,0.12,2,1.16,3,0.105,4,0.084,5,0.074,8,0.345,12,0.214,13,0.62,14,0.755,18,0.303,19,0.008,26,0.145,34,1.025,50,0.808,57,1.906,58,3.158,60,1.16,66,1.619,73,0.522,78,0.124,82,4.92,85,1.184,127,2.517,150,0.007,151,0.006,152,0.005,215,2.781,232,0.612,258,4.484,259,3.556,260,3.556,261,4.376,262,4.7,263,4.117,264,4.7,265,6.76,266,3.093,267,3.166,268,4.376,269,3.731,270,4.117,271,2.244,272,2.421,273,5.389,274,5.191,275,5.926,277,4.7,280,5.956,282,3.405,283,2.421,284,5.926,285,2.646,286,5.518,287,4.92,289,5.667,290,2.028,291,5.926,292,2.517,293,6.816,294,2.975,295,4.92,296,6.816,297,5.926,298,4.7,300,5.389,301,5.389,302,5.191,303,5.926,304,5.518,305,5.686,306,2.046,307,4.687,308,4.7,309,1.806,310,4.7,311,3.432,312,1.404,313,5.926,314,5.926,315,4.117,316,4.7,383,5.792]],["title/classes/AngularWidgetDriver.html",[78,0.077,384,3.227]],["body/classes/AngularWidgetDriver.html",[0,0.096,3,0.076,4,0.061,5,0.054,8,0.25,12,0.155,14,0.834,18,0.326,19,0.008,26,0.076,38,2.596,57,1.776,58,3.194,59,0.668,71,1.705,73,0.558,78,0.071,96,0.889,98,2.669,99,1.087,102,1.94,150,0.003,151,0.005,152,0.003,154,1.851,159,1.505,161,1.651,165,0.805,171,1.109,174,0.881,176,1.753,177,0.857,179,0.778,183,0.436,195,1.128,216,0.412,222,0.757,232,0.601,288,3.438,309,1.228,330,6.474,369,2.981,384,4.186,385,7.033,386,2.772,387,2.981,388,5.237,389,3.967,390,4.838,391,5.22,392,3.338,393,4.449,394,2.669,395,4.449,396,2.282,397,4.449,398,5.889,399,5.889,400,4.449,401,4.449,402,2.828,403,3.219,404,5.889,405,1.332,406,4.449,407,3.219,408,3.403,409,4.184,410,2.844,411,4.355,412,4.194,413,3.338,414,4.449,415,4.194,416,4.552,417,4.449,418,4.194,419,4.449,420,3.717,421,2.828,422,4.194,423,4.449,424,4.194,425,4.449,426,4.194,427,3.779,428,3.544,429,3.653,430,4.194,431,5.142,432,1.625,433,4.449,434,4.194,435,5.889,436,3.717,437,5.889,438,3.717,439,5.576,440,4.449,441,4.194,442,4.449,443,4.194,444,2.828,445,4.194,446,4.449,447,4.194,448,4.449,449,4.194,450,5.889,451,3.717,452,0.911,453,4.449,454,4.194,455,2.125,456,4.449,457,4.194,458,2.828,459,5.576,460,4.194,461,4.449,462,4.194,463,0.42,464,2.293,465,2.471,466,2.293,467,2.981,468,2.293,469,1.956,470,2.345,471,2.825,472,2.215,473,0.758,474,4.194,475,3.594,476,4.194,477,4.249,478,4.194,479,4.194,480,6.806,481,5.889,482,4.194,483,5.889,484,4.194,485,4.194,486,4.194,487,4.194,488,2.825,489,2.825,490,3.967,491,2.825,492,3.779,493,2.825,494,3.717,495,5.889,496,4.194,497,2.825,498,4.194,499,2.825,500,4.194,501,5.889,502,5.889,503,4.194,504,4.194,505,4.194,506,4.194,507,4.194,508,5.889,509,4.194,510,1.413,511,4.194,512,1.586,513,4.194,514,4.194,515,2.825]],["title/classes/AngularWidgetFinder.html",[78,0.077,467,3.227]],["body/classes/AngularWidgetFinder.html",[0,0.086,3,0.095,4,0.076,5,0.067,8,0.313,12,0.194,13,0.582,14,0.686,18,0.328,19,0.008,20,1.4,26,0.124,50,0.58,57,2.322,59,0.777,78,0.089,81,1.751,85,0.717,87,2.118,91,1.617,115,0.594,139,2.118,149,1.138,150,0.004,151,0.007,152,0.004,154,1.425,161,1.467,165,0.937,171,0.987,174,0.817,176,1.581,177,0.705,183,0.336,195,0.93,208,3.421,216,0.429,222,0.839,232,0.506,272,3.189,288,2.53,294,2.79,306,1.162,309,1.592,312,1.317,343,1.617,384,3.725,385,6.628,386,2.721,390,3.725,396,3.135,409,4.973,410,3.189,411,4.343,413,5.044,427,3.363,428,4.212,429,3.777,432,3.253,463,0.524,464,2.865,465,3.087,466,2.865,467,5.423,468,3.744,473,0.947,477,2.865,510,3.031,512,2.591,516,3.725,517,4.171,518,3.617,519,4.967,520,2.893,521,3.193,522,2.213,523,4.897,524,3.135,525,4.897,526,6.071,527,6.849,528,6.763,529,4.645,530,2.36,531,4.396,532,4.396,533,2.16,534,4.396,535,3.39,536,4.396,537,5.241,538,5.241,539,2.654,540,5.287,541,4.645,542,5.241,543,5.63,544,4.035,545,4.396,546,3.217,547,3.725,548,3.725,549,3.363,550,2.031,551,3.363,552,3.363,553,4.645,554,4.645,555,3.363,556,3.087,557,4.205,558,3.363,559,4.586,560,4.205,561,4.035,562,3.217,563,3.363,564,3.363,565,3.363,566,3.363,567,2.249,568,3.363,569,3.363,570,2.135,571,4.252,572,4.645,573,3.363,574,3.217,575,2.415,576,3.217,577,3.363,578,2.677,579,3.363,580,3.363,581,4.897,582,1.116,583,2.79,584,3.217,585,3.363,586,3.363,587,2.375,588,3.363,589,3.363,590,2.767,591,3.363,592,3.363,593,3.959]],["title/components/BannerActivityReporterComponent.html",[183,0.291,594,1.401]],["body/components/BannerActivityReporterComponent.html",[3,0.078,4,0.062,5,0.055,8,0.41,12,0.158,13,0.507,14,0.763,18,0.318,19,0.008,21,4.283,26,0.078,30,2.161,34,1.057,39,2.314,57,1.795,58,3.025,59,1.031,60,0.857,63,1.188,65,2.496,72,3.051,73,0.528,78,0.072,85,1.018,96,0.559,99,0.789,101,2.22,108,3.041,109,0.854,111,2.666,113,2.054,127,1.474,131,0.632,134,0.962,150,0.004,151,0.005,152,0.004,156,0.988,161,0.822,165,0.816,171,1.125,173,3.575,174,0.871,176,1.663,177,0.829,179,0.597,183,0.441,187,1.658,190,2.155,195,1.108,210,0.931,215,2.054,216,0.4,217,1.967,219,1.474,228,2.503,258,4.57,259,5.47,266,2.869,269,3.051,280,6.088,285,2.651,287,2.882,288,1.58,289,4.223,290,1.658,300,4.022,301,2.882,306,1.736,312,1.431,317,4.142,323,2.469,324,4.511,330,5.464,331,4.845,332,4.845,333,4.845,334,3.39,335,6.041,336,6.041,337,6.755,341,3.303,346,5.582,347,3.471,349,5.582,350,3.471,351,4.845,352,3.471,354,3.471,356,3.471,357,5.582,359,3.153,360,4.511,361,6.211,362,3.232,363,5.582,405,0.968,452,1.297,463,0.428,594,2.297,595,1.324,596,1.292,597,1.32,598,1.658,599,7.23,600,3.471,601,2.846,602,5.292,603,1.014,604,1.618,605,1.745,606,1.839,607,1.843,608,5.292,609,4.415,610,7.445,611,7.445,612,3.782,613,1.804,614,7.831,615,3.792,616,5.971,617,3.876,618,5.971,619,4.278,620,7.445,621,4.278,622,4.278,623,4.278,624,4.278,625,4.278,626,5.292,627,1.729,628,2.784,629,3.48,630,3.792,631,3.792,632,3.792,633,3.792,634,3.792,635,3.792,636,4.278,637,4.278,638,3.792,639,3.232,640,4.278,641,3.792,642,6.598,643,7.445,644,6.598,645,2.259,646,1.349,647,1.324,648,1.349,649,3.281,650,1.886,651,1.379,652,1.886,653,2.632,654,1.292,655,1.743,656,1.886,657,1.618,658,1.886,659,1.163,660,1.886,661,1.543,662,2.067,663,1.58,664,3.281,665,1.474,666,1.58,667,1.618,668,1.474,669,1.658,670,1.886,671,1.699,672,1.886,673,1.743,674,1.618,675,2.348,676,1.886,677,1.618,678,3.281,679,1.58,680,2.732,681,1.58,682,1.983,683,1.58,684,2.632,685,1.58,686,1.699,687,1.886,688,1.543,689,1.743,690,1.32,691,1.379,692,1.239,693,1.213,694,1.886,695,1.658,696,1.265,697,1.886,698,1.58,699,1.836,700,1.886,701,1.543,702,1.743,703,1.886]],["title/classes/BannerActivityReporterWidgetObject.html",[78,0.077,704,3.684]],["body/classes/BannerActivityReporterWidgetObject.html",[3,0.091,4,0.073,5,0.065,8,0.494,12,0.186,13,0.566,14,0.792,18,0.324,19,0.008,25,2.034,26,0.091,34,0.891,35,1.553,57,1.313,59,0.903,66,1.658,71,1.873,73,0.548,78,0.085,81,1.705,96,0.658,109,0.719,129,2.458,131,0.566,134,1.233,139,1.851,147,2.218,150,0.004,151,0.007,152,0.004,154,1.368,156,1.966,165,0.912,170,2.649,174,0.884,176,1.661,177,0.814,179,0.909,183,0.531,195,1.108,208,1.999,210,1.167,216,0.341,232,0.549,271,3.086,276,1.093,285,2.5,288,2.762,294,2.05,309,1.05,312,0.967,341,3.591,361,5.316,386,2.355,394,3.609,402,3.591,403,3.645,407,3.645,410,2.787,411,4.614,416,4.171,421,2.416,444,2.416,452,2.009,458,2.416,470,3.212,472,2.657,475,4.496,510,3.129,521,2.346,522,1.603,524,2.898,535,2.491,575,1.774,578,3.821,594,1.553,597,2.058,599,6.909,601,2.149,603,1.132,605,1.38,606,1.308,609,4.8,629,3.867,704,5.411,705,6.909,706,4.083,707,4.701,708,4.088,709,4.28,710,4.28,711,4.28,712,7.48,713,7.48,714,5.032,715,3.39,716,2.491,717,1.426,718,2.75,719,1.695,720,2.657,721,3.39,722,2.491,723,3.645,724,2.058,725,3.645,726,2.716,727,4.069,728,3.949,729,2.829,730,2.75,731,2.993,732,3.39,733,2.75,734,3.39,735,3.109,736,2.75,737,3.39,738,2.861,739,2.416,740,2.75,741,3.39,742,2.571,743,3.39,744,1.622,745,1.695,746,2.75,747,2.75,748,3.39,749,2.75,750,2.75,751,3.39,752,2.571,753,3.521,754,2.657,755,2.75,756,2.491,757,2.571,758,2.75,759,1.695,760,3.301,761,3.645,762,3.39,763,1.426,764,2.75,765,4.46,766,5.032,767,4.46,768,5.032,769,5.032,770,5.032,771,5.032,772,4.46,773,2.491,774,4.46,775,4.46,776,5.032,777,5.032,778,5.032]],["title/classes/BaseFormControl.html",[78,0.077,779,2.913]],["body/classes/BaseFormControl.html",[3,0.085,4,0.068,5,0.06,8,0.497,12,0.172,13,0.538,14,0.726,18,0.325,19,0.008,26,0.085,45,3.594,52,1.205,59,1.008,62,2.287,73,0.516,78,0.079,83,2.436,84,2.457,96,1.149,98,3.66,99,1.17,100,3.044,101,2.362,109,1.271,115,0.719,131,0.538,134,1.129,137,3.862,150,0.004,151,0.005,152,0.004,154,1.958,159,1.621,165,0.867,170,2.518,171,0.879,174,0.886,176,1.521,177,0.787,179,0.852,183,0.406,195,1.015,216,0.395,222,0.455,232,0.512,306,1.847,325,4.789,463,0.467,470,2.481,473,1.146,590,3.348,613,1.915,627,1.835,648,2.627,675,2.755,779,4.068,780,7.595,781,3.786,782,3.594,783,3.239,784,6.34,785,6.34,786,4.079,787,6.34,788,2.582,789,2.457,790,5.257,791,6.34,792,7.2,793,5.439,794,5.439,795,4,796,5.439,797,6.102,798,5.439,799,4.789,800,4.789,801,4.789,802,4.789,803,4.242,804,4.621,805,5.439,806,3.918,807,7.2,808,7.2,809,5.619,810,6.377,811,6.34,812,4.667,813,4.667,814,5.835,815,4.667,816,3.138,817,4.506,818,3.348,819,4.789,820,2.235,821,4.667,822,2.873,823,5.835,824,4.667,825,4.789,826,4.789,827,5.612,828,5.039,829,4.667,830,4.789,831,4.667,832,4.789,833,4.506,834,4.667,835,4.506,836,4.789,837,4.667,838,2.464,839,5.835,840,4.667,841,5.835,842,2.649,843,4.789,844,2.956,845,4.667,846,3.892,847,3.735,848,4.667,849,4.789,850,4.667,851,1.689,852,4.667,853,4.789,854,2.136,855,4.136,856,4.667,857,6.34,858,4.667,859,4.667,860,4.667,861,4.667,862,5.619,863,1.572,864,3.594,865,3.317,866,2.865,867,3.143,868,4.667,869,2.995,870,4.667,871,4.136,872,4.667,873,4.667,874,3.317,875,4.667,876,6.34,877,4.667,878,4.667,879,4.667,880,4.667,881,4.667,882,4.667,883,4.667,884,4.667,885,4.667,886,3.525]],["title/classes/BaseWidgetObject.html",[78,0.077,887,3.43]],["body/classes/BaseWidgetObject.html",[0,0.064,3,0.071,4,0.057,5,0.05,8,0.232,12,0.144,14,0.818,18,0.321,19,0.008,26,0.101,38,2.878,58,3.226,71,1.398,73,0.558,77,2.73,78,0.066,81,1.824,85,1.245,87,1.08,96,0.932,98,2.959,101,1.103,102,2.151,109,1.124,111,1.507,123,4.579,139,1.08,150,0.003,151,0.005,152,0.003,154,1.94,159,1.427,165,0.763,171,0.733,174,0.864,176,1.722,177,0.841,179,0.829,195,1.105,208,1.545,209,4.217,210,0.871,216,0.199,228,2.727,231,1.31,232,0.6,271,1.507,288,3.376,309,1.488,312,1.452,315,2.765,343,2.747,386,2.731,388,6.158,389,2.62,392,3.164,393,4.217,394,2.53,395,4.933,396,3.473,397,4.217,400,4.217,401,4.217,402,2.68,403,3.051,405,1.263,406,4.217,407,3.051,414,4.933,416,4.606,417,4.933,419,4.933,421,3.135,423,4.933,425,4.933,427,4.19,428,3.627,429,3.74,431,5.39,432,2.163,433,4.933,439,5.39,440,4.933,442,4.933,444,3.135,446,4.933,448,4.217,452,2.022,453,4.933,455,2.014,456,4.933,458,3.135,459,5.941,461,4.933,510,1.881,547,4.641,605,1.687,613,1.175,722,1.925,731,1.34,739,2.68,745,2.545,752,1.987,763,1.103,887,4.217,888,7.418,889,2.205,890,4.948,891,4.948,892,3.89,893,3.89,894,3.89,895,3.89,896,3.89,897,3.89,898,3.89,899,3.89,900,3.89,901,3.89,902,3.89,903,3.89,904,3.89,905,3.89,906,3.89,907,3.89,908,3.447,909,3.89,910,3.89,911,2.496,912,3.447,913,2.763,914,2.62,915,6.675,916,3.45,917,3.447,918,2.496,919,2.765,920,2.948,921,3.156,922,1.987,923,3.447,924,3.156,925,3.447,926,4.948,927,1.55,928,1.987,929,3.447,930,3.447,931,3.447,932,3.447,933,3.447,934,3.447,935,3.447,936,3.447,937,3.447,938,3.447,939,3.447,940,3.447,941,3.447,942,3.447,943,3.447,944,3.447,945,3.447,946,3.447]],["title/components/BoldTextRendererComponent.html",[183,0.291,654,1.371]],["body/components/BoldTextRendererComponent.html",[0,0.09,3,0.1,4,0.08,5,0.07,8,0.328,12,0.203,18,0.273,19,0.008,26,0.142,30,1.462,50,0.912,52,0.856,55,2.077,60,1.1,63,1.524,73,0.449,78,0.093,90,3.024,109,1.009,115,0.801,131,0.699,150,0.005,151,0.006,152,0.005,156,1.268,159,1.805,174,0.521,177,0.787,183,0.568,187,2.128,210,1.452,216,0.399,219,1.892,232,0.468,276,1.789,285,2.001,306,1.217,323,1.731,340,2.077,405,1.242,452,1.534,463,0.549,594,1.694,595,1.565,596,2.488,597,1.694,598,2.128,601,1.77,604,2.077,605,1.774,606,1.877,613,2.132,646,1.731,647,1.565,648,1.731,649,3.63,650,2.42,651,1.77,652,2.42,653,3.112,654,2.714,655,3.613,656,2.42,657,2.077,658,2.42,659,1.493,660,2.42,661,1.981,662,2.287,663,2.028,664,3.63,665,1.892,666,2.028,667,2.077,668,1.892,669,2.128,670,2.42,671,2.181,672,2.42,673,2.236,674,2.077,675,2.525,676,2.42,677,2.077,678,3.63,679,2.028,680,3.099,681,2.028,682,2.194,683,2.028,684,3.112,685,2.028,686,2.181,687,2.42,688,1.981,689,2.236,690,1.694,691,1.77,692,1.59,693,1.557,694,2.42,695,2.128,696,1.624,697,2.42,698,2.028,699,2.356,700,2.42,701,1.981,702,2.236,703,2.42,947,5.018,948,4.148,949,3.655,950,3.178,951,2.326,952,2.212,953,2.95,954,2.226,955,6.683,956,2.433,957,2.179,958,3.029,959,3.074,960,4.53,961,6.257,962,6.915,963,2.078,964,4.208,965,5.491,966,2.56,967,2.077,968,5.333,969,2.751,970,2.899,971,2.899,972,4.148,973,4.866,974,4.866,975,4.148,976,4.455,977,4.866,978,4.866]],["title/interfaces/BoldTextRendererConfig.html",[0,0.074,964,2.319]],["body/interfaces/BoldTextRendererConfig.html",[0,0.106,2,1.291,3,0.117,4,0.094,5,0.083,8,0.384,12,0.238,13,0.663,18,0.305,19,0.008,26,0.152,30,2.078,50,0.965,52,1.005,55,2.438,73,0.501,78,0.109,90,3.024,109,1.115,115,0.731,150,0.005,151,0.006,152,0.005,159,1.648,183,0.558,210,1.476,216,0.429,232,0.517,276,1.695,340,2.438,463,0.645,596,2.357,605,1.189,606,1.265,654,2.697,655,3.638,947,4.581,948,4.869,949,3.6,950,3.178,951,2.124,952,2.212,953,2.694,954,2.033,955,6.331,956,2.221,957,1.989,958,2.765,959,2.958,960,4.136,961,5.713,962,5.713,963,1.717,964,4.455,966,3.005,967,2.438,968,5.894,969,2.958,970,3.404,971,3.404,972,5.894,973,6.915,974,6.915,975,4.869,976,5.23,977,5.713,978,5.713]],["title/classes/BoldTextRendererWidgetObject.html",[78,0.077,979,3.684]],["body/classes/BoldTextRendererWidgetObject.html",[3,0.09,4,0.072,5,0.064,8,0.506,12,0.183,13,0.561,14,0.79,18,0.325,19,0.008,25,2.019,26,0.12,34,0.878,35,1.531,50,0.731,52,0.774,57,1.294,59,0.898,66,1.646,71,1.86,73,0.546,78,0.112,81,1.689,109,0.709,129,2.444,131,0.672,134,1.229,139,1.834,147,2.187,150,0.004,151,0.007,152,0.004,154,1.349,156,1.958,165,0.903,170,2.624,174,0.871,176,1.656,177,0.812,179,0.907,183,0.528,195,1.105,208,1.97,210,1.439,216,0.405,222,0.483,232,0.525,271,3.069,276,1.078,288,2.743,294,2.021,309,1.549,312,0.954,386,2.438,394,3.588,402,3.802,403,3.611,407,3.611,410,2.761,411,4.606,416,4.156,421,2.382,444,2.382,452,2.005,458,2.382,463,0.496,469,2.313,470,3.207,472,2.619,475,4.478,510,3.123,521,2.313,522,1.588,524,2.878,535,2.456,575,1.749,578,3.794,597,2.039,603,1.261,605,1.37,606,1.296,629,3.858,654,1.995,655,3.359,707,4.691,708,4.059,709,4.239,710,4.239,711,4.239,715,3.342,716,2.456,717,1.406,718,2.712,719,1.671,720,2.619,721,3.342,722,2.456,723,3.611,724,2.039,725,3.611,726,2.691,727,4.046,728,3.922,729,2.809,730,2.712,731,2.983,732,3.342,733,2.712,734,3.342,735,3.08,736,2.712,737,3.342,738,2.834,739,2.382,740,2.712,741,3.342,742,2.534,743,3.342,744,1.599,745,1.671,746,2.712,747,2.712,748,3.342,749,2.712,750,2.712,751,3.342,752,2.534,753,3.488,754,2.619,755,2.712,756,2.456,757,2.534,758,2.712,759,1.671,760,3.27,761,3.611,762,3.342,763,1.406,764,2.712,854,1.671,869,3.184,947,5.279,952,1.873,959,2.792,979,5.36,980,4.025,981,4.961,982,4.961,983,3.748,984,4.961,985,4.025,986,4.397,987,4.397,988,4.025,989,3.526,990,3.526,991,1.79,992,3.748,993,4.961,994,4.961,995,4.961,996,4.961,997,6.606,998,4.961,999,4.961,1000,4.961]],["title/interfaces/Button.html",[0,0.074,75,1.948]],["body/interfaces/Button.html",[0,0.141,2,0.79,3,0.072,4,0.058,5,0.051,8,0.235,9,2.193,12,0.146,13,0.61,14,0.506,15,2.782,18,0.319,19,0.008,20,1.152,21,3.791,22,3.094,26,0.159,27,2.123,30,2.255,34,1.165,35,1.217,36,1.459,38,1.738,39,3.281,40,2.932,43,1.893,47,2.217,50,0.937,52,1.416,55,2.988,57,1.029,58,1.899,59,0.639,60,0.79,61,1.243,64,1.217,65,2.356,66,1.459,67,2.873,72,2.88,73,0.522,75,3.99,77,1.857,78,0.138,79,1.606,80,1.566,83,1.778,85,1.08,90,3.152,91,1.217,96,0.938,99,0.728,100,1.893,102,2.365,112,1.893,114,2.212,115,0.862,118,1.118,119,3.447,120,3.23,127,1.359,128,3.518,129,1.74,130,2.082,131,0.559,132,3.001,133,3.196,134,0.788,136,1.738,137,3.442,138,2.082,139,1.827,140,1.648,141,2.235,142,2.88,144,2.082,146,2.185,148,2.015,150,0.003,151,0.005,152,0.003,156,0.91,171,0.743,174,0.535,179,0.658,182,2.132,183,0.533,190,1.142,207,2.015,210,1.232,215,3.447,216,0.367,222,0.549,228,1.217,232,0.374,266,1.359,276,1.429,290,1.095,292,1.359,309,1.584,311,1.692,326,2.365,340,1.492,530,1.359,533,1.778,539,2.782,567,1.692,570,1.606,595,0.874,603,1.117,627,1.905,647,1.684,654,1.191,693,1.118,717,1.118,744,1.271,759,1.328,783,2.015,788,2.296,820,1.39,842,1.648,851,1.05,927,1.565,949,1.692,952,2.614,953,2.75,954,1.243,956,2.267,957,2.216,958,2.419,959,2.932,963,2.104,964,2.015,967,1.492,969,2.677,991,1.423,1001,2.155,1002,2.155,1003,3.461,1004,2.365,1005,4.662,1006,3.218,1007,4.039,1008,4.474,1009,3.73,1010,4.23,1011,2.977,1012,3.461,1013,3.924,1014,1.738,1015,1.738,1016,3.257,1017,1.566,1018,1.217,1019,1.606,1020,1.528,1021,2.082,1022,1.692,1023,2.082,1024,2.319,1025,2.419,1026,3.924,1027,4.039,1028,3.73,1029,2.977,1030,3.362,1031,2.132,1032,1.39,1033,2.652,1034,2.74,1035,2.68,1036,4.039,1037,3.668,1038,4.407,1039,3.461,1040,3.196,1041,2.421,1042,3.196,1043,3.321,1044,2.169,1045,2.421,1046,3.73,1047,2.421,1048,2.421,1049,1.738,1050,1.738,1051,2.082,1052,2.235,1053,2.421,1054,1.692,1055,2.977,1056,2.419,1057,2.421,1058,2.235,1059,2.239,1060,1.359,1061,2.55,1062,1.456,1063,1.738,1064,2.421,1065,2.185,1066,4.039,1067,3.461,1068,3.461,1069,3.461,1070,1.632,1071,2.421,1072,2.421,1073,2.267,1074,2.421,1075,3.196,1076,1.738,1077,1.423,1078,2.015,1079,1.893,1080,2.421,1081,2.235,1082,2.421,1083,1.328,1084,2.421,1085,1.328,1086,2.421,1087,2.082,1088,1.606,1089,2.323,1090,2.323,1091,2.421,1092,1.566,1093,1.787,1094,2.082,1095,2.421,1096,2.235,1097,2.421,1098,1.606,1099,2.323,1100,2.323,1101,3.196,1102,1.217,1103,1.423,1104,2.082,1105,2.015,1106,3.461,1107,2.421,1108,1.952,1109,1.893,1110,1.692,1111,2.323,1112,1.692,1113,2.082,1114,1.738,1115,1.692,1116,1.648,1117,2.015,1118,2.082,1119,2.015,1120,2.082,1121,2.082,1122,1.787,1123,2.323]],["title/interfaces/ButtonConfig.html",[0,0.074,1052,2.573]],["body/interfaces/ButtonConfig.html",[0,0.139,2,0.795,3,0.072,4,0.058,5,0.051,8,0.237,9,2.263,12,0.147,13,0.612,14,0.647,15,2.791,18,0.318,19,0.008,20,1.158,21,3.803,22,3.102,26,0.16,27,2.13,30,2.171,34,1.169,35,1.226,36,1.464,38,1.751,39,3.373,40,3.033,43,1.907,47,2.225,50,0.939,52,1.358,55,2.995,57,1.036,58,1.909,59,0.643,60,0.795,61,1.252,64,1.226,65,2.368,66,1.464,67,2.143,72,2.029,73,0.51,75,3.899,77,1.309,78,0.112,79,1.618,80,1.578,83,1.787,85,1.083,90,3.158,91,1.226,96,0.941,99,0.733,100,1.907,102,2.373,112,1.907,114,2.071,115,0.864,118,1.126,119,3.459,120,3.237,127,1.369,128,3.576,129,1.749,130,2.097,131,0.561,132,3.006,133,3.212,134,0.792,136,1.751,137,2.568,138,2.097,139,1.834,140,1.66,141,2.251,142,2.895,144,2.097,146,2.56,148,2.029,150,0.003,151,0.005,152,0.003,156,0.917,171,0.748,174,0.538,179,0.661,182,2.143,183,0.534,190,1.15,207,2.029,210,1.188,215,3.459,216,0.368,222,0.552,228,1.226,232,0.375,266,1.369,276,1.435,290,1.103,292,1.369,309,1.652,311,1.704,326,2.373,340,1.502,530,1.369,533,1.787,539,2.791,567,1.704,570,1.618,595,0.88,603,1.121,627,1.912,647,1.688,654,1.2,693,1.126,717,1.126,744,1.28,759,1.338,783,2.029,788,2.308,820,1.4,842,1.66,851,1.058,927,1.573,949,1.704,952,2.616,953,2.761,954,1.252,956,2.276,957,2.223,958,2.431,959,2.938,963,2.109,964,2.029,967,1.502,969,2.685,991,1.433,1001,2.171,1002,2.171,1003,2.438,1004,2.373,1005,4.675,1006,2.691,1007,3.478,1008,4.487,1009,3.745,1010,4.243,1011,2.097,1012,2.438,1013,3.611,1014,1.751,1015,1.751,1016,3.27,1017,1.578,1018,1.226,1019,1.618,1020,1.539,1021,2.093,1022,1.704,1023,2.093,1024,2.329,1025,2.431,1026,3.937,1027,4.055,1028,3.745,1029,2.992,1030,3.375,1031,2.143,1032,1.4,1033,2.66,1034,2.748,1035,2.691,1036,4.055,1037,4.046,1038,4.861,1039,4.055,1040,4.083,1041,2.438,1042,3.212,1043,3.338,1044,2.3,1045,2.438,1046,4.723,1047,2.438,1048,2.438,1049,1.751,1050,1.751,1051,2.992,1052,3.212,1053,4.422,1054,2.431,1055,2.992,1056,2.431,1057,2.438,1058,2.251,1059,2.251,1060,1.369,1061,2.56,1062,1.467,1063,1.751,1064,2.438,1065,2.196,1066,4.055,1067,3.478,1068,3.478,1069,3.478,1070,1.64,1071,2.438,1072,2.438,1073,2.276,1074,2.438,1075,3.212,1076,1.751,1077,1.433,1078,2.029,1079,1.907,1080,2.438,1081,2.251,1082,2.438,1083,1.338,1084,2.438,1085,1.338,1086,2.438,1087,2.097,1088,1.618,1089,2.34,1090,2.34,1091,2.438,1092,1.578,1093,1.8,1094,2.097,1095,2.438,1096,2.251,1097,2.438,1098,1.618,1099,2.34,1100,2.34,1101,3.212,1102,1.226,1103,1.433,1104,2.097,1105,2.029,1106,3.478,1107,2.438,1108,1.966,1109,1.907,1110,1.704,1111,2.34,1112,1.704,1113,2.097,1114,1.751,1115,1.704,1116,1.66,1117,2.029,1118,2.097,1119,2.029,1120,2.097,1121,2.097,1122,1.8,1123,2.34]],["title/classes/Bytes.html",[78,0.077,1124,3.684]],["body/classes/Bytes.html",[3,0.071,4,0.057,5,0.05,8,0.484,12,0.145,13,0.476,14,0.729,18,0.321,19,0.008,20,1.339,25,2.453,26,0.102,34,1.266,48,2.78,62,2.842,71,1.973,73,0.521,78,0.095,84,3.323,85,1.155,109,1.023,115,0.941,131,0.793,134,1.181,150,0.003,151,0.005,152,0.003,154,1.064,161,1.668,165,0.766,174,0.894,176,1.528,177,0.766,179,0.962,195,1.142,208,1.554,222,0.546,231,1.318,232,0.474,312,1.455,322,2.913,334,3.823,469,3.335,473,1.368,522,2.208,582,0.833,603,0.952,629,3.94,682,2.582,786,4.527,847,2.304,916,2.538,953,2.989,1031,2.477,1037,3.868,1077,2.581,1124,6.583,1125,2.635,1126,5.82,1127,3.673,1128,5.805,1129,6.55,1130,6.006,1131,6.55,1132,2.47,1133,4.967,1134,4.967,1135,5.382,1136,5.382,1137,6.392,1138,6.094,1139,6.094,1140,5.6,1141,5.084,1142,5.767,1143,4.818,1144,5.465,1145,3.911,1146,3.911,1147,7.153,1148,3.911,1149,3.911,1150,2.16,1151,3.911,1152,3.174,1153,3.911,1154,3.911,1155,3.911,1156,3.911,1157,3.911,1158,3.911,1159,3.911,1160,3.911,1161,3.911,1162,3.911,1163,3.467,1164,3.467,1165,2.955,1166,2.955,1167,3.911,1168,3.911,1169,3.911,1170,5.382,1171,5.958,1172,3.467,1173,2.691,1174,5.676,1175,3.139,1176,4.687,1177,4.704,1178,3.007,1179,4.284,1180,3.984,1181,3.984,1182,2.691,1183,3.984,1184,5.382,1185,3.467,1186,3.467,1187,4.655,1188,3.467,1189,3.467,1190,4.655,1191,5.692,1192,3.467,1193,3.467,1194,3.467,1195,3.481,1196,5.307,1197,5.307,1198,5.6,1199,4.655,1200,3.467,1201,4.412,1202,2.81,1203,2.955,1204,2.955,1205,2.955,1206,2.955,1207,2.955,1208,2.955,1209,2.955,1210,2.78,1211,1.878,1212,1.479,1213,3.984,1214,3.984,1215,3.984,1216,2.78,1217,2.78,1218,2.635,1219,2.635,1220,2.78,1221,2.78,1222,3.984,1223,3.984,1224,2.78]],["title/interfaces/CanBeReadOnly.html",[0,0.074,793,3.43]],["body/interfaces/CanBeReadOnly.html",[0,0.136,2,1.44,3,0.131,4,0.105,5,0.092,8,0.429,12,0.266,13,0.707,18,0.252,19,0.008,26,0.131,60,1.667,96,1.148,99,1.536,150,0.006,151,0.007,152,0.006,518,3.797,595,1.594,717,2.36,786,3.797,793,6.289,804,5.8,869,4.615,1092,2.856,1225,6.373,1226,6.373,1227,8.325,1228,5.342,1229,8.325,1230,7.378,1231,8.325,1232,6.755]],["title/interfaces/CliptextConfig.html",[0,0.074,1016,2.247]],["body/interfaces/CliptextConfig.html",[0,0.068,2,0.835,3,0.076,4,0.061,5,0.053,8,0.249,9,1.629,12,0.154,13,0.498,14,0.723,18,0.258,19,0.008,25,1.134,26,0.134,27,1.735,30,2.067,36,0.925,38,1.839,50,0.462,52,1.058,59,1.033,74,2.586,78,0.071,81,1.5,83,1.315,85,0.802,87,1.158,96,0.962,98,3.746,99,0.77,101,1.924,102,2.236,108,1.471,109,0.596,115,0.473,118,1.183,131,0.683,149,1.274,150,0.003,151,0.005,152,0.003,159,1.066,161,1.305,210,1.058,216,0.213,222,0.805,228,2.647,231,1.405,232,0.576,292,1.437,326,1.374,343,1.287,452,1.685,463,0.417,517,2.28,520,2.673,522,1.003,530,1.437,550,2.273,582,1.713,597,1.287,605,0.77,606,0.819,627,1.698,647,0.925,648,2.537,701,2.117,702,1.699,729,2.219,731,1.437,739,2.003,742,2.131,744,2.373,745,1.405,788,1.699,851,1.111,886,5.861,953,2.452,963,1.807,991,2.117,1016,3.359,1018,2.394,1029,3.098,1044,2.343,1059,2.33,1065,2.273,1073,1.437,1083,1.405,1101,4.561,1102,1.81,1103,2.982,1104,2.203,1105,4.111,1150,2.343,1178,1.657,1179,2.203,1233,2.365,1234,2.677,1235,2.33,1236,3.847,1237,5.506,1238,3.644,1239,5.678,1240,2.586,1241,1.933,1242,2.273,1243,4.571,1244,5.562,1245,3.646,1246,5.861,1247,3.964,1248,5.861,1249,4.025,1250,5.861,1251,3.151,1252,3.385,1253,3.151,1254,3.385,1255,3.385,1256,3.385,1257,3.151,1258,3.151,1259,3.385,1260,3.385,1261,1.743,1262,5.075,1263,3.385,1264,3.385,1265,1.945,1266,4.76,1267,3.385,1268,3.467,1269,5.506,1270,3.385,1271,3.952,1272,3.385,1273,3.385,1274,3.385,1275,3.151,1276,3.385,1277,3.151,1278,2.131,1279,5.861,1280,3.385,1281,4.76,1282,3.385,1283,3.385,1284,5.506,1285,4.76,1286,3.385,1287,4.76,1288,3.385,1289,4.76,1290,2.677,1291,3.385,1292,5.506,1293,3.385,1294,3.385,1295,3.385,1296,4.76,1297,4.76,1298,3.385,1299,3.385,1300,4.17,1301,3.385,1302,3.385,1303,3.385,1304,3.385,1305,3.385,1306,5.506,1307,3.385,1308,3.385,1309,3.385,1310,5.974,1311,3.385,1312,4.76,1313,4.76,1314,3.385,1315,5.506,1316,3.385,1317,3.385,1318,3.385,1319,3.385,1320,3.385,1321,2.817,1322,1.89,1323,3.385,1324,3.385,1325,4.76,1326,3.385,1327,4.76,1328,5.974,1329,4.76,1330,3.075,1331,4.76,1332,2.065,1333,4.76,1334,3.385,1335,3.151,1336,3.385,1337,2.965,1338,4.76,1339,3.385,1340,3.385,1341,3.385,1342,3.385,1343,2.81,1344,3.385,1345,2.965,1346,3.151,1347,3.385,1348,3.385,1349,3.385,1350,4.76,1351,5.506,1352,3.151,1353,3.385,1354,3.385,1355,3.385,1356,3.385,1357,4.76,1358,5.974,1359,2.965,1360,2.965,1361,2.965,1362,2.965,1363,6.295,1364,4.432,1365,5.2,1366,3.385,1367,5.974,1368,3.697,1369,3.697,1370,3.385,1371,3.697,1372,3.697,1373,3.385,1374,4.17,1375,3.385,1376,3.697,1377,3.385,1378,3.151,1379,3.697,1380,3.697,1381,3.697,1382,3.697,1383,5.2,1384,3.697,1385,5.2,1386,6.015,1387,3.697,1388,5.2,1389,5.2,1390,3.697,1391,3.151,1392,3.697,1393,3.697,1394,3.697,1395,1.657,1396,3.697,1397,6.015,1398,3.697,1399,3.697,1400,5.2,1401,5.2,1402,2.458,1403,2.561,1404,4.432,1405,3.697,1406,3.697,1407,3.697,1408,3.697,1409,3.385,1410,3.697,1411,1.437,1412,3.151,1413,3.697,1414,3.697,1415,3.697,1416,3.697,1417,3.697,1418,5.2,1419,3.697,1420,3.697,1421,3.697,1422,3.385,1423,3.697,1424,3.697,1425,3.385,1426,2.677,1427,1.743,1428,3.385,1429,3.385]],["title/interfaces/ColumnConfigInternal.html",[0,0.074,1430,2.397]],["body/interfaces/ColumnConfigInternal.html",[0,0.12,1,2.179,2,0.437,3,0.04,4,0.032,5,0.028,8,0.13,9,1.457,10,3.405,12,0.276,13,0.446,14,0.59,15,2.657,18,0.256,19,0.008,20,1.073,22,0.888,25,1.234,26,0.143,27,1.552,28,1.114,30,1.89,34,1.376,36,1.814,39,0.845,40,2.042,42,1.047,47,0.735,50,0.873,52,0.557,53,1.825,54,1.114,55,3.125,56,1.886,59,0.849,60,1.246,61,2.071,62,0.787,63,1.727,64,1.92,66,0.792,67,0.825,69,2.7,71,0.895,73,0.465,74,1.575,77,1.177,78,0.077,80,0.866,81,0.913,83,1.127,84,2.244,85,0.621,86,2.867,87,1.608,88,0.988,90,3.058,91,0.673,93,3.666,96,0.954,99,0.968,101,2.07,102,0.718,108,2.042,109,1.232,111,2.244,114,0.593,115,0.849,118,1.287,120,0.866,127,0.751,128,1.759,129,1.102,131,0.76,132,1.289,134,0.918,139,1.457,140,0.911,143,2.263,145,2.089,146,0.845,149,1.586,150,0.003,151,0.003,152,0.002,159,0.557,161,1.626,162,1.192,165,0.621,171,0.411,173,2,174,0.207,177,0.419,179,0.579,181,1.192,182,0.825,183,0.479,189,2.246,190,1.034,195,0.553,206,0.935,210,0.34,216,0.39,217,0.718,222,0.844,225,1.192,226,1.953,232,0.596,266,0.751,272,0.911,276,0.776,282,1.017,283,3.298,285,1.287,290,0.992,292,2.445,306,0.483,309,1.095,312,1.404,317,1.715,321,2.179,323,0.688,326,1.908,327,2.598,341,1.715,343,1.401,396,1.384,405,0.493,432,0.845,452,0.776,455,0.787,463,0.218,473,1.187,510,1.204,512,1.351,522,1.091,524,1.384,533,1.431,575,2.193,582,1.398,594,0.673,595,0.792,596,1.585,601,0.703,603,0.606,605,0.402,606,0.701,607,0.673,613,1.079,617,1.768,627,1.677,628,2.447,645,1.151,647,1.163,651,1.151,659,0.593,662,0.605,690,0.673,691,0.703,692,1.034,696,0.645,717,0.618,719,1.204,724,1.92,726,1.455,729,0.825,731,1.564,745,1.768,759,0.735,763,0.618,773,1.079,789,0.845,816,1.079,820,0.769,822,0.988,844,1.017,851,0.581,854,0.735,916,1.759,922,1.114,927,0.605,928,1.825,950,1.849,951,1.729,952,2.121,954,0.688,956,2.631,957,2.254,963,1.209,966,1.017,967,0.825,969,2.042,970,1.151,971,1.151,991,2.473,1004,2.867,1014,0.961,1015,0.961,1017,0.866,1018,0.673,1019,0.888,1022,0.935,1023,1.676,1024,1.6,1025,1.947,1031,0.825,1032,2.315,1033,3.102,1034,1.289,1035,2.359,1044,1.984,1049,0.961,1050,2.313,1054,0.935,1060,1.808,1061,2.657,1062,1.676,1063,0.961,1065,0.845,1070,1.034,1073,0.751,1077,1.637,1083,1.204,1088,0.888,1092,2.084,1098,0.888,1102,2.592,1103,2.635,1112,1.533,1115,1.947,1127,1.666,1132,2.553,1173,1.715,1178,0.866,1182,2.52,1195,1.533,1202,0.935,1211,1.047,1212,0.825,1235,1.419,1238,2,1240,1.575,1241,1.177,1242,1.384,1261,1.493,1265,1.017,1268,1.114,1278,1.114,1321,1.047,1322,1.619,1330,0.988,1332,3.513,1395,0.866,1411,0.751,1427,0.911,1430,3.058,1431,1.114,1432,2.573,1433,2.057,1434,2.573,1435,2.975,1436,2.771,1437,2.975,1438,1.953,1439,2.481,1440,2.781,1441,1.236,1442,2.19,1443,2.025,1444,1.886,1445,0.935,1446,1.236,1447,1.953,1448,2.573,1449,2.025,1450,0.631,1451,1.493,1452,0.935,1453,1.079,1454,1.192,1455,0.825,1456,1.017,1457,1.259,1458,2.481,1459,3.607,1460,3.058,1461,1.192,1462,2.396,1463,1.151,1464,1.114,1465,1.114,1466,1.047,1467,1.953,1468,2.319,1469,1.151,1470,1.192,1471,1.192,1472,2.771,1473,1.192,1474,4.473,1475,1.886,1476,1.192,1477,2.481,1478,1.886,1479,3.178,1480,2,1481,1.236,1482,1.768,1483,1.236,1484,1.825,1485,1.236,1486,2.975,1487,1.886,1488,1.236,1489,1.236,1490,2.025,1491,1.192,1492,2.868,1493,1.236,1494,2.179,1495,1.886,1496,2.025,1497,1.236,1498,2.025,1499,2.025,1500,2.771,1501,2.573,1502,1.079,1503,1.047,1504,1.192,1505,1.236,1506,1.236,1507,1.017,1508,3.283,1509,4.24,1510,2.573,1511,1.236,1512,1.236,1513,4.405,1514,1.151,1515,2.252,1516,2.975,1517,3.723,1518,1.151,1519,1.236,1520,2.396,1521,1.047,1522,0.845,1523,1.236,1524,1.236,1525,3.165,1526,1.236,1527,2.396,1528,0.888,1529,0.961,1530,1.236,1531,2.116,1532,1.236,1533,1.151,1534,2.025,1535,2.025,1536,1.236,1537,1.236,1538,1.715,1539,1.114,1540,1.236,1541,1.236,1542,0.866,1543,1.236,1544,1.953,1545,2.573,1546,1.236,1547,1.236,1548,1.236,1549,2.025,1550,1.236,1551,2.025,1552,1.236,1553,2.573,1554,1.236,1555,1.151,1556,1.151,1557,1.236,1558,2.025,1559,1.236,1560,1.236,1561,1.236,1562,1.236,1563,1.236,1564,1.236,1565,1.192,1566,1.236,1567,2.025,1568,1.236,1569,1.192,1570,1.236,1571,1.803,1572,1.236,1573,2.573,1574,2.481,1575,1.236,1576,1.236,1577,3.526,1578,1.236,1579,2.025,1580,1.236,1581,1.236,1582,2.025,1583,2.025,1584,1.236,1585,1.236,1586,1.236,1587,1.114,1588,1.236,1589,1.236,1590,1.236,1591,1.236,1592,1.236,1593,1.236,1594,1.236,1595,2.975,1596,2.025,1597,2.025,1598,1.236,1599,1.236,1600,1.236,1601,1.236,1602,1.236,1603,1.236,1604,2.025,1605,2.025,1606,2.025,1607,2.025,1608,2.573,1609,1.236,1610,1.236,1611,1.236,1612,1.236,1613,2.025,1614,2.025,1615,2.975,1616,1.236,1617,1.236,1618,1.236,1619,1.236,1620,1.236,1621,2.975,1622,2.975,1623,0.961,1624,1.236,1625,1.236,1626,2.975,1627,2.025,1628,1.236,1629,1.236,1630,1.236,1631,2.573,1632,1.236,1633,1.192,1634,1.192,1635,1.236,1636,1.236,1637,1.236,1638,1.236,1639,1.236,1640,1.236,1641,1.236,1642,1.236,1643,1.236,1644,1.236,1645,1.236,1646,1.236,1647,1.236,1648,2.025,1649,1.236,1650,1.236,1651,1.236,1652,1.236,1653,1.236,1654,1.114,1655,1.236,1656,1.151,1657,1.236,1658,1.236,1659,1.236,1660,1.236,1661,1.236,1662,1.236,1663,1.236,1664,1.236,1665,1.236,1666,1.236,1667,1.236,1668,1.236,1669,1.236,1670,1.236,1671,1.236,1672,0.911,1673,1.236,1674,2.025,1675,1.236,1676,1.192,1677,1.236,1678,1.236,1679,1.236,1680,1.236,1681,2.025,1682,2.447,1683,1.236,1684,1.236,1685,1.236,1686,1.236,1687,1.236,1688,2.025,1689,2.025,1690,2.025,1691,1.236,1692,2.573,1693,2.975,1694,2.025,1695,1.236,1696,1.236,1697,1.236,1698,1.236,1699,1.236,1700,1.236,1701,1.236,1702,1.151,1703,1.236,1704,1.236,1705,1.236,1706,0.735,1707,1.236,1708,1.236,1709,1.236,1710,1.236,1711,1.236,1712,1.236,1713,1.236,1714,1.236,1715,1.236,1716,1.151,1717,1.192,1718,1.236,1719,1.236,1720,2.025,1721,2.025,1722,1.953,1723,1.236,1724,1.236,1725,2.025,1726,1.236,1727,2.025,1728,1.236,1729,1.236,1730,1.236,1731,1.236,1732,1.236,1733,1.236,1734,1.192,1735,1.236,1736,1.192,1737,1.236,1738,1.236,1739,1.236,1740,2.025,1741,1.236,1742,1.236,1743,1.236,1744,1.236,1745,1.236,1746,1.236,1747,1.236,1748,1.236,1749,1.236,1750,2.025,1751,2.975,1752,2.573,1753,1.236,1754,1.236,1755,1.236,1756,1.236,1757,2.025,1758,1.236,1759,1.236,1760,1.236,1761,1.236,1762,1.236,1763,1.236,1764,1.236,1765,1.351,1766,2.025,1767,1.236,1768,1.236,1769,1.236,1770,1.192,1771,1.236,1772,1.236,1773,1.236,1774,1.236,1775,1.236,1776,1.236,1777,1.236,1778,1.236,1779,1.236,1780,1.236,1781,1.236,1782,1.236,1783,1.236,1784,2.975,1785,1.236,1786,1.236,1787,1.236,1788,1.236,1789,1.236,1790,1.236,1791,1.192,1792,1.236,1793,1.236,1794,2.025,1795,1.236,1796,2.025,1797,1.236,1798,1.236,1799,2.025,1800,1.236,1801,1.236,1802,1.236,1803,1.236,1804,1.236,1805,2.573,1806,1.236,1807,1.236,1808,1.236,1809,1.236,1810,1.236,1811,1.236,1812,1.236,1813,1.236,1814,1.236,1815,1.236,1816,1.236,1817,1.236,1818,1.236,1819,1.047,1820,1.192,1821,1.236,1822,1.236,1823,1.047,1824,1.236,1825,1.236,1826,2.025,1827,3.283,1828,1.047,1829,1.236,1830,1.236,1831,1.236,1832,1.236,1833,1.236,1834,1.236,1835,2.025,1836,1.236,1837,1.236,1838,1.953,1839,1.236,1840,1.151,1841,1.236,1842,1.236,1843,1.236,1844,1.236,1845,1.236,1846,1.236]],["title/interfaces/ColumnRendererSpec.html",[0,0.074,969,1.6]],["body/interfaces/ColumnRendererSpec.html",[0,0.139,2,0.803,3,0.073,4,0.059,5,0.051,8,0.239,9,2.319,12,0.148,13,0.614,15,2.804,18,0.315,19,0.008,20,1.166,21,3.82,22,3.114,26,0.16,27,2.139,30,2.177,34,1.176,35,1.238,36,1.472,38,1.768,39,3.294,40,2.945,43,1.926,47,2.238,50,0.941,52,1.395,55,3.005,57,1.047,58,1.922,59,0.647,60,0.803,61,1.799,64,1.238,65,2.385,66,1.472,67,2.158,72,2.049,73,0.511,75,3.904,77,1.322,78,0.112,79,1.634,80,1.593,83,1.799,85,1.086,90,3.167,91,1.238,96,0.945,99,0.74,100,1.926,102,2.384,112,1.926,114,2.079,115,0.901,118,1.137,119,3.474,120,3.247,127,1.382,128,3.526,129,1.761,130,2.118,131,0.564,132,2.949,133,3.235,134,0.798,136,1.768,137,2.586,138,2.118,139,1.844,140,1.676,141,2.274,142,2.915,144,2.118,146,2.211,148,2.049,150,0.003,151,0.005,152,0.003,156,0.926,171,0.755,174,0.541,179,0.664,182,2.158,183,0.559,190,1.161,207,2.049,210,1.192,215,3.474,216,0.37,222,0.556,228,1.238,232,0.378,266,1.382,276,1.443,290,1.114,292,1.382,309,1.657,311,1.721,326,2.384,340,2.158,530,1.382,533,1.799,539,2.804,567,1.721,570,1.634,595,0.889,603,1.228,627,1.923,647,1.695,654,1.212,693,1.618,717,1.137,744,1.293,759,1.351,783,2.049,788,2.324,820,1.414,842,1.676,851,1.068,927,1.584,949,1.721,952,2.634,953,3.024,954,1.265,956,2.289,957,2.233,958,2.448,959,2.997,963,2.296,964,2.049,967,1.517,969,2.801,991,1.447,1001,2.192,1002,2.192,1003,2.462,1004,2.188,1005,3.503,1006,2.705,1007,3.503,1008,3.913,1009,3.235,1010,3.913,1011,2.118,1012,2.462,1013,3.63,1014,1.768,1015,1.768,1016,3.288,1017,1.593,1018,1.238,1019,1.634,1020,1.554,1021,2.107,1022,1.721,1023,2.107,1024,2.551,1025,2.448,1026,3.955,1027,4.077,1028,3.765,1029,3.013,1030,3.393,1031,2.158,1032,1.414,1033,2.672,1034,2.949,1035,2.705,1036,4.077,1037,3.696,1038,4.442,1039,3.503,1040,3.235,1041,2.462,1042,3.235,1043,3.362,1044,2.185,1045,2.462,1046,3.765,1047,2.462,1048,2.462,1049,1.768,1050,1.768,1051,2.118,1052,2.274,1053,2.462,1054,1.721,1055,3.507,1056,2.85,1057,2.462,1058,2.274,1059,2.266,1060,1.382,1061,2.574,1062,1.481,1063,1.768,1064,2.462,1065,2.211,1066,4.077,1067,3.503,1068,3.503,1069,3.503,1070,1.652,1071,2.462,1072,2.462,1073,2.289,1074,2.462,1075,3.235,1076,1.768,1077,1.447,1078,2.049,1079,1.926,1080,2.462,1081,2.274,1082,2.462,1083,1.351,1084,2.462,1085,1.351,1086,2.462,1087,2.118,1088,1.634,1089,2.363,1090,2.363,1091,2.462,1092,1.593,1093,1.818,1094,2.118,1095,2.462,1096,2.274,1097,2.462,1098,1.634,1099,2.363,1100,2.363,1101,3.235,1102,1.238,1103,1.447,1104,2.118,1105,2.049,1106,3.503,1107,2.462,1108,1.985,1109,1.926,1110,1.721,1111,2.363,1112,1.721,1113,2.118,1114,1.768,1115,1.721,1116,1.676,1117,2.049,1118,2.118,1119,2.049,1120,2.118,1121,2.118,1122,1.818,1123,2.363]],["title/classes/CommonUtil.html",[78,0.077,220,3.227]],["body/classes/CommonUtil.html",[3,0.119,4,0.096,5,0.084,8,0.392,12,0.243,14,0.709,18,0.319,19,0.008,25,2.479,26,0.119,52,1.369,60,1.58,66,1.749,78,0.111,85,1.079,127,2.719,131,0.805,132,2.847,134,1.183,150,0.005,151,0.007,152,0.005,154,1.786,165,1.079,174,0.749,176,1.486,177,0.729,179,0.941,195,0.962,220,5.608,232,0.523,312,1.517,582,1.398,827,4.423,828,4.473,1150,2.65,1364,5.961,1765,2.484,1847,7.497,1848,5.328,1849,7.89,1850,7.89,1851,7.89,1852,6.566,1853,7.89,1854,7.89,1855,8.079,1856,6.566,1857,7.89,1858,7.89,1859,8.775,1860,7.89,1861,6.993,1862,6.993,1863,6.566]],["title/interfaces/ComponentRenderer.html",[0,0.074,949,1.948]],["body/interfaces/ComponentRenderer.html",[0,0.13,2,1.322,3,0.12,4,0.096,5,0.085,8,0.394,12,0.244,13,0.672,18,0.326,19,0.008,26,0.154,50,1.01,52,1.029,57,2.212,64,2.037,88,2.991,109,0.944,115,0.962,150,0.005,151,0.007,152,0.005,171,1.491,183,0.591,195,0.804,216,0.337,271,2.558,282,3.077,309,1.875,463,0.66,521,3.077,539,3.067,595,1.755,596,2.391,647,1.755,693,1.871,828,3.741,915,4.986,949,3.637,951,2.608,963,2.431,969,2.327,972,5.979,1023,2.923,1024,2.327,1034,3.171,1056,2.832,1058,3.741,1060,2.274,1109,3.169,1515,2.832,1823,4.221,1840,3.485,1864,4.986,1865,4.986,1866,7.015,1867,5.921,1868,5.85,1869,7.015,1870,3.741,1871,5.85,1872,5.85,1873,3.741,1874,5.85]],["title/directives/ComponentRendererOutletDirective.html",[648,1.432,693,1.287]],["body/directives/ComponentRendererOutletDirective.html",[3,0.097,4,0.078,5,0.069,8,0.32,9,2.266,12,0.198,13,0.59,14,0.693,17,5.483,18,0.321,19,0.008,26,0.097,33,6.826,36,1.188,50,0.903,52,0.836,55,3.277,57,2.13,59,0.959,66,1.541,78,0.091,88,3.15,109,1.167,112,3.338,150,0.004,151,0.006,152,0.004,161,1.805,165,0.95,170,2.761,171,1.01,174,0.848,176,1.453,177,0.712,183,0.607,195,0.995,216,0.355,222,0.522,228,1.654,231,1.806,232,0.461,276,1.51,282,3.241,290,1.93,452,1.773,463,0.536,520,3.039,604,2.028,605,1.282,613,2.1,648,2.574,692,1.552,693,1.971,719,2.342,763,2.187,949,2.3,950,2.831,954,2.192,955,6.623,959,3.213,963,2.055,966,2.499,967,2.028,969,2.45,991,2.783,1023,2.849,1024,3.109,1034,2.508,1059,2.761,1088,2.184,1261,2.905,1515,3.877,1539,4.17,1544,4.461,1634,2.93,1828,2.574,1875,8.009,1876,4.751,1877,6.951,1878,5.251,1879,6.951,1880,6.951,1881,6.951,1882,8.162,1883,4.095,1884,8.665,1885,8.941,1886,8.162,1887,6.951,1888,8.162,1889,8.162,1890,5.361,1891,8.665,1892,7.714,1893,8.162,1894,6.951,1895,6.951,1896,7.714,1897,5.828,1898,6.259,1899,6.951,1900,5.361,1901,4.941,1902,5.361,1903,5.361,1904,5.361,1905,5.361,1906,5.361,1907,6.951,1908,6.951,1909,5.361,1910,5.361,1911,5.361,1912,8.162,1913,5.361,1914,5.361,1915,5.361,1916,5.361,1917,5.361,1918,5.361,1919,5.361,1920,5.361,1921,5.361,1922,5.361,1923,5.361]],["title/interfaces/ComponentRendererSpec.html",[0,0.074,1024,1.6]],["body/interfaces/ComponentRendererSpec.html",[0,0.127,2,1.283,3,0.116,4,0.093,5,0.082,8,0.382,12,0.237,13,0.66,18,0.333,19,0.008,26,0.152,50,1.003,52,1.213,57,1.672,64,2.399,88,3.523,109,1.112,115,0.882,150,0.005,151,0.006,152,0.005,171,1.639,183,0.593,195,0.948,216,0.328,271,3.013,282,3.625,309,1.913,463,0.641,521,3.625,539,3.373,595,1.421,596,1.936,647,1.421,693,2.204,828,3.632,915,5.874,949,3.591,951,2.111,963,2.443,969,2.741,972,6.575,1023,3.214,1024,2.741,1034,3.217,1056,3.336,1058,3.632,1060,2.679,1109,3.077,1515,3.336,1823,3.733,1840,4.105,1864,4.841,1865,4.841,1866,5.68,1867,6.006,1868,5.68,1869,7.714,1870,4.407,1871,5.68,1872,6.891,1873,4.407,1874,5.68,1924,6.408]],["title/interfaces/ContextualButton.html",[0,0.074,1042,2.573]],["body/interfaces/ContextualButton.html",[0,0.139,2,0.797,3,0.072,4,0.058,5,0.051,8,0.237,9,2.2,12,0.147,13,0.612,15,2.953,18,0.318,19,0.008,20,1.159,21,3.806,22,3.104,26,0.16,27,2.131,30,2.26,34,1.17,35,1.228,36,1.466,38,1.753,39,3.335,40,2.991,43,1.91,47,2.227,50,0.939,52,1.418,55,2.997,57,1.038,58,1.911,59,0.643,60,0.797,61,1.254,64,1.228,65,2.371,66,1.466,67,2.882,72,2.032,73,0.517,75,3.983,77,1.311,78,0.112,79,1.62,80,1.58,83,1.789,85,1.083,90,3.16,91,1.228,96,0.942,99,0.734,100,1.91,102,2.375,112,1.91,114,2.217,115,0.864,118,1.608,119,4.003,120,3.311,127,1.371,128,3.522,129,1.751,130,2.1,131,0.561,132,2.942,133,3.216,134,0.793,136,1.753,137,2.57,138,2.1,139,1.836,140,1.662,141,2.255,142,2.898,144,2.1,146,2.198,148,2.032,150,0.003,151,0.005,152,0.003,156,0.918,171,0.749,174,0.538,179,0.661,182,2.146,183,0.534,190,1.152,207,2.032,210,1.189,215,3.461,216,0.369,222,0.553,228,1.228,232,0.376,266,1.371,276,1.436,290,1.104,292,1.371,309,1.59,311,1.707,326,2.375,340,1.505,530,1.371,533,1.789,539,2.793,567,1.707,570,1.62,595,0.882,603,1.224,627,1.914,647,1.689,654,1.202,693,1.128,717,1.128,744,1.282,759,1.34,783,2.032,788,2.311,820,1.402,842,1.662,851,1.06,927,1.575,949,1.707,952,2.617,953,2.763,954,1.254,956,2.278,957,2.224,958,2.434,959,2.939,963,2.11,964,2.032,967,1.505,969,2.686,991,1.435,1001,2.174,1002,2.174,1003,2.442,1004,2.178,1005,3.482,1006,3.227,1007,4.059,1008,3.895,1009,3.216,1010,3.895,1011,2.1,1012,2.442,1013,3.94,1014,1.753,1015,1.753,1016,3.273,1017,1.58,1018,1.228,1019,1.62,1020,1.541,1021,2.095,1022,1.707,1023,2.095,1024,2.331,1025,2.434,1026,3.94,1027,4.059,1028,3.748,1029,2.995,1030,3.378,1031,2.146,1032,1.402,1033,2.662,1034,2.749,1035,2.693,1036,4.059,1037,3.893,1038,4.678,1039,3.482,1040,3.216,1041,3.482,1042,3.748,1043,3.342,1044,2.177,1045,2.442,1046,3.748,1047,2.442,1048,2.442,1049,1.753,1050,1.753,1051,2.1,1052,2.255,1053,2.442,1054,1.707,1055,2.995,1056,2.434,1057,2.442,1058,2.255,1059,2.253,1060,1.371,1061,2.562,1062,1.469,1063,1.753,1064,2.442,1065,2.198,1066,4.059,1067,3.482,1068,3.482,1069,3.482,1070,1.642,1071,2.442,1072,2.442,1073,2.278,1074,2.442,1075,3.216,1076,1.753,1077,1.435,1078,2.032,1079,1.91,1080,2.442,1081,2.255,1082,2.442,1083,1.34,1084,2.442,1085,1.34,1086,2.442,1087,2.1,1088,1.62,1089,2.343,1090,2.343,1091,2.442,1092,1.58,1093,1.803,1094,2.1,1095,2.442,1096,2.255,1097,2.442,1098,1.62,1099,2.343,1100,2.343,1101,3.216,1102,1.228,1103,1.435,1104,2.1,1105,2.032,1106,3.482,1107,2.442,1108,1.969,1109,1.91,1110,1.707,1111,2.343,1112,1.707,1113,2.1,1114,1.753,1115,1.707,1116,1.662,1117,2.032,1118,2.1,1119,2.032,1120,2.1,1121,2.1,1122,1.803,1123,2.343]],["title/interfaces/ContextualButtonConfig.html",[0,0.074,1046,2.573]],["body/interfaces/ContextualButtonConfig.html",[0,0.138,2,0.777,3,0.071,4,0.057,5,0.05,8,0.232,9,2.247,12,0.143,13,0.605,14,0.706,15,3.045,18,0.319,19,0.008,20,1.457,21,3.764,22,3.075,26,0.159,27,2.108,30,2.156,34,1.336,35,1.198,36,1.742,38,1.711,39,3.268,40,2.92,43,2.676,47,2.197,50,0.934,52,1.351,55,2.972,57,1.013,58,1.878,59,0.632,60,0.777,61,1.224,64,1.198,65,2.33,66,1.446,67,2.108,72,1.983,73,0.515,75,3.905,77,1.279,78,0.11,79,1.581,80,1.542,83,1.758,85,1.074,90,3.137,91,1.198,96,0.931,99,0.716,100,2.676,102,2.487,112,1.864,114,2.053,115,0.891,118,1.1,119,3.773,120,3.559,127,1.921,128,3.636,129,2.013,130,2.943,131,0.687,132,3.043,133,4.454,134,0.912,136,2.457,137,2.955,138,2.943,139,1.979,140,2.33,141,4.041,142,3.642,144,2.05,146,2.16,148,1.983,150,0.003,151,0.005,152,0.003,156,0.896,171,0.731,174,0.529,179,0.652,182,2.108,183,0.53,190,1.124,207,1.983,210,1.177,215,3.423,216,0.364,222,0.543,228,1.198,232,0.369,266,1.338,276,1.417,290,1.078,292,1.338,309,1.575,311,1.665,326,2.349,340,1.468,530,1.338,533,1.758,539,2.762,567,1.665,570,1.581,595,0.861,603,1.107,627,1.888,647,1.673,654,1.172,693,1.1,717,1.1,744,1.251,759,1.308,783,1.983,788,3.201,820,1.368,842,1.622,851,1.034,927,1.548,949,1.665,952,2.61,953,2.726,954,1.224,956,2.247,957,2.2,958,2.392,959,2.92,963,2.093,964,1.983,967,1.468,969,2.661,991,2.011,1001,2.122,1002,2.122,1003,2.383,1004,2.349,1005,3.422,1006,2.657,1007,3.422,1008,3.842,1009,3.16,1010,3.842,1011,2.05,1012,2.383,1013,3.565,1014,1.711,1015,1.711,1016,3.228,1017,1.542,1018,1.198,1019,1.581,1020,1.504,1021,2.059,1022,1.665,1023,2.059,1024,2.299,1025,2.392,1026,3.896,1027,4.004,1028,3.697,1029,2.943,1030,3.332,1031,2.108,1032,1.368,1033,2.633,1034,2.723,1035,2.657,1036,4.004,1037,3.642,1038,4.376,1039,3.422,1040,3.16,1041,2.383,1042,4.041,1043,4.199,1044,2.153,1045,3.422,1046,4.041,1047,3.422,1048,2.383,1049,2.457,1050,2.457,1051,2.05,1052,2.2,1053,2.383,1054,1.665,1055,2.943,1056,2.392,1057,2.383,1058,2.2,1059,2.214,1060,1.338,1061,2.527,1062,1.434,1063,1.711,1064,2.383,1065,2.16,1066,4.004,1067,3.422,1068,3.422,1069,3.422,1070,1.614,1071,2.383,1072,2.383,1073,2.247,1074,2.383,1075,3.16,1076,1.711,1077,1.4,1078,1.983,1079,1.864,1080,2.383,1081,2.2,1082,2.383,1083,1.308,1084,2.383,1085,1.308,1086,2.383,1087,2.05,1088,1.581,1089,2.287,1090,2.287,1091,2.383,1092,1.542,1093,1.759,1094,2.05,1095,2.383,1096,2.2,1097,2.383,1098,1.581,1099,2.287,1100,2.287,1101,3.16,1102,1.198,1103,1.4,1104,2.05,1105,1.983,1106,3.422,1107,2.383,1108,1.921,1109,1.864,1110,1.665,1111,2.287,1112,1.665,1113,2.05,1114,1.711,1115,1.665,1116,1.622,1117,1.983,1118,2.05,1119,1.983,1120,2.05,1121,2.05,1122,1.759,1123,2.287,1925,3.882]],["title/injectables/CsvExporterService.html",[1926,2.675,1927,3.227]],["body/injectables/CsvExporterService.html",[3,0.093,4,0.075,5,0.107,8,0.451,12,0.19,14,0.679,18,0.281,19,0.008,20,1.05,26,0.137,35,2.477,36,1.139,50,0.568,52,1.252,57,1.34,59,0.767,60,1.715,73,0.542,74,2.979,78,0.087,83,2.382,85,1.225,96,1.09,101,2.142,102,1.692,115,0.767,134,0.718,147,3.33,149,1.116,150,0.007,151,0.006,152,0.004,165,0.924,174,0.717,176,1.423,177,0.77,179,0.756,195,1.017,216,0.263,222,0.813,228,1.585,232,0.587,267,3.695,312,0.987,340,2.557,366,6.13,410,2.146,463,0.514,473,1.222,522,2.155,582,1.093,757,2.624,790,4.551,828,4.283,953,3.355,1033,3.163,1056,2.9,1065,1.99,1076,2.264,1077,2.896,1081,2.911,1083,2.277,1479,4.102,1571,2.04,1828,2.466,1926,3.982,1927,4.804,1928,3.88,1929,4.73,1930,6.065,1931,3.88,1932,6.759,1933,6.759,1934,5.485,1935,6.759,1936,6.771,1937,5.136,1938,7.555,1939,6.888,1940,8.028,1941,6.514,1942,7.115,1943,7.738,1944,6.696,1945,6.13,1946,4.375,1947,7.852,1948,6.759,1949,6.949,1950,5.136,1951,4.149,1952,5.485,1953,5.485,1954,6.768,1955,6.759,1956,5.136,1957,6.696,1958,3.88,1959,5.136,1960,5.136,1961,5.991,1962,5.136,1963,5.136,1964,6.759,1965,5.136,1966,4.552,1967,5.136,1968,5.136,1969,2.911,1970,4.167,1971,5.136,1972,5.136,1973,5.136,1974,5.136,1975,6.759,1976,5.136,1977,5.136,1978,5.136,1979,5.136,1980,5.136,1981,5.136,1982,5.136,1983,4.167,1984,3.88,1985,4.552,1986,5.136,1987,5.136,1988,4.552,1989,4.552,1990,5.136,1991,5.136,1992,5.136,1993,4.552,1994,7.59,1995,5.991,1996,5.991,1997,4.552,1998,6.696,1999,3.296,2000,4.167,2001,5.485,2002,4.552,2003,6.759,2004,5.136,2005,3.46,2006,5.136,2007,5.136,2008,5.136,2009,5.136,2010,4.167,2011,4.552,2012,5.136,2013,5.136,2014,5.136,2015,5.136,2016,4.552,2017,4.552,2018,4.552,2019,4.552,2020,5.136]],["title/classes/CypressWidgetDriver.html",[78,0.077,2021,3.43]],["body/classes/CypressWidgetDriver.html",[0,0.098,3,0.077,4,0.062,5,0.076,8,0.254,12,0.158,14,0.836,18,0.326,19,0.008,26,0.108,38,2.627,52,1.071,58,3.212,71,1.493,73,0.559,78,0.101,96,0.898,98,2.701,102,1.964,138,2.253,150,0.004,151,0.005,152,0.004,154,1.868,159,1.523,161,1.657,165,0.815,171,0.803,174,0.882,176,1.756,177,0.859,179,0.427,195,1.134,216,0.351,222,0.581,231,1.437,232,0.614,288,3.453,289,2.619,304,4.502,307,2.738,309,1.243,312,0.82,330,4.627,369,4.236,386,2.776,387,3.032,388,5.27,389,4.015,391,6.088,392,3.378,393,4.502,394,2.701,395,4.502,396,2.31,397,4.502,400,4.502,401,4.502,402,2.862,403,3.258,405,1.348,406,4.502,407,3.258,414,4.502,416,4.586,417,4.502,419,4.502,420,3.781,421,2.862,423,4.502,425,4.502,427,3.825,428,3.57,429,3.681,431,5.189,432,1.653,433,4.502,436,3.781,438,3.781,439,5.189,440,4.502,442,4.502,444,2.862,446,4.502,448,4.502,451,3.781,452,1.492,453,4.502,455,1.539,456,4.502,458,2.862,459,5.617,461,4.502,468,2.332,469,1.989,473,1.077,494,3.781,854,2.008,913,2.112,992,4.502,1028,2.418,1090,2.513,1722,2.332,2021,4.502,2022,6.628,2023,5.913,2024,4.015,2025,5.96,2026,5.96,2027,4.266,2028,4.266,2029,5.96,2030,4.266,2031,4.266,2032,4.266,2033,4.266,2034,4.266,2035,4.266,2036,4.266,2037,4.266,2038,5.96,2039,4.266,2040,5.96,2041,4.266,2042,4.266,2043,4.266,2044,4.266,2045,4.266,2046,4.266,2047,4.266,2048,4.266,2049,3.223,2050,3.781,2051,5.282,2052,3.781,2053,3.781,2054,3.781,2055,3.462,2056,3.781,2057,4.266,2058,4.266,2059,3.462,2060,4.266,2061,4.266,2062,4.266,2063,4.266,2064,3.462,2065,2.513,2066,4.266,2067,4.266,2068,4.266,2069,4.266,2070,5.96,2071,6.869,2072,4.266,2073,4.266,2074,4.266,2075,4.266,2076,1.406,2077,4.266,2078,4.266,2079,4.266,2080,3.462,2081,4.266,2082,3.462,2083,3.223,2084,4.266,2085,4.266,2086,5.96,2087,4.266,2088,4.266,2089,4.266,2090,4.266,2091,4.266,2092,4.266,2093,4.266,2094,4.266,2095,4.266,2096,4.266,2097,4.266,2098,4.266,2099,4.266,2100,4.266,2101,4.266,2102,4.266,2103,5.96,2104,5.96,2105,4.266,2106,4.266,2107,4.266,2108,4.266,2109,4.015,2110,5.96,2111,4.266,2112,4.266,2113,4.266]],["title/classes/CypressWidgetFinder.html",[78,0.077,2049,3.43]],["body/classes/CypressWidgetFinder.html",[3,0.118,4,0.094,5,0.083,8,0.386,12,0.239,14,0.582,18,0.306,19,0.008,26,0.118,50,0.716,57,2.279,78,0.11,87,2.172,91,1.997,139,2.334,150,0.005,151,0.007,152,0.005,154,1.76,165,1.07,174,0.614,176,1.473,177,0.598,195,0.789,208,3.469,216,0.4,222,0.871,232,0.429,288,2.391,306,1.435,309,1.753,386,2.776,396,3.258,427,4.154,428,4.193,429,4.161,432,3.258,473,1.17,510,2.942,512,2.959,516,4.601,517,4.595,518,4.13,519,4.802,520,2.695,521,3.647,522,2.021,529,5.737,539,2.508,540,5.161,547,4.601,548,4.601,557,3.973,559,4.95,560,4.802,561,3.813,562,3.973,571,5.252,574,3.973,575,2.282,576,3.973,583,2.636,584,3.973,2021,4.89,2022,5.56,2023,4.601,2049,5.909,2050,5.737,2114,6.347,2115,6.473]],["title/interfaces/DataExportRequestEvent.html",[0,0.074,2116,3.43]],["body/interfaces/DataExportRequestEvent.html",[0,0.093,2,0.793,3,0.12,4,0.058,5,0.092,8,0.236,12,0.146,13,0.48,18,0.231,19,0.008,20,1.348,26,0.151,27,1.171,30,2.107,34,1.001,35,1.222,36,1.253,40,2.682,50,0.73,52,1.122,58,2.423,59,0.897,60,1.775,62,1.428,66,1.253,73,0.414,75,3.394,78,0.067,83,1.249,85,0.773,86,3.765,96,1.064,97,2.991,99,1.403,101,2.402,108,2.536,109,1.31,113,3.454,114,1.956,115,0.449,131,0.646,137,2.562,145,2.04,149,1.433,150,0.003,151,0.005,152,0.003,159,1.012,161,1.601,173,2.907,177,0.522,179,0.719,183,0.362,190,1.146,210,1.371,216,0.404,217,1.305,222,0.771,231,1.334,232,0.607,266,2.869,270,2.814,288,2.088,295,2.667,306,0.878,309,1.179,311,1.699,312,0.761,321,2.715,322,1.613,343,1.745,405,1.492,463,0.396,473,1.602,533,1.783,544,2.333,550,1.534,582,1.404,605,0.731,606,0.777,607,1.222,617,4.496,628,3.075,657,1.498,724,1.222,745,1.334,763,1.122,789,1.534,806,3.589,818,3.798,822,2.562,842,2.363,851,1.055,854,2.423,863,1.334,916,1.534,920,4.177,952,2.243,956,2.869,958,1.699,989,2.814,991,2.04,1033,1.462,1060,2.272,1061,1.534,1093,1.794,1177,3.205,1212,1.498,1228,2.541,1235,1.573,1241,1.863,1242,2.191,1265,3.075,1271,2.667,1395,1.573,1411,1.364,1436,3.798,1440,3.166,1442,2.494,1445,1.699,1450,1.146,1455,2.139,1456,1.846,1466,1.901,1479,2.023,1542,1.573,1556,2.985,1587,2.023,1672,1.655,1702,2.091,1883,2.333,1927,4.687,1929,2.333,1936,4.271,1939,5.976,1941,5.836,1949,3.213,1952,4.588,1953,3.213,1954,3.213,1984,4.271,2116,4.271,2117,2.541,2118,2.991,2119,4.588,2120,6.742,2121,7.011,2122,6.742,2123,5.845,2124,5.011,2125,5.011,2126,5.011,2127,5.011,2128,6.152,2129,5.845,2130,6.402,2131,2.991,2132,3.354,2133,4.588,2134,3.509,2135,3.509,2136,3.213,2137,3.509,2138,1.96,2139,3.213,2140,4.588,2141,4.588,2142,6.172,2143,3.213,2144,3.213,2145,3.509,2146,3.509,2147,3.509,2148,5.845,2149,2.814,2150,2.991,2151,3.213,2152,3.509,2153,3.509,2154,3.509,2155,3.509,2156,3.509,2157,3.509,2158,4.588,2159,5.845,2160,3.509,2161,3.509,2162,2.814,2163,3.509,2164,3.509,2165,3.509,2166,3.509,2167,3.213,2168,3.509,2169,3.509,2170,3.509,2171,3.509,2172,3.509,2173,3.509,2174,3.509,2175,3.509,2176,3.509,2177,3.509,2178,3.509,2179,3.509,2180,5.845,2181,3.509,2182,3.509,2183,3.509,2184,3.509,2185,3.808,2186,3.509,2187,3.509,2188,3.509,2189,3.509,2190,3.509,2191,3.509,2192,3.509,2193,3.509,2194,3.509,2195,3.509,2196,3.509,2197,3.509,2198,3.509,2199,3.509,2200,4.687,2201,3.509,2202,4.588,2203,3.509,2204,4.588,2205,3.509,2206,5.011,2207,3.213,2208,3.213,2209,5.011,2210,3.509,2211,3.509,2212,3.509,2213,5.845,2214,3.509,2215,5.011,2216,3.509,2217,3.509,2218,3.509,2219,3.509,2220,6.375,2221,3.509,2222,3.509,2223,3.509,2224,3.509,2225,5.011,2226,3.509,2227,3.509,2228,3.509,2229,3.509,2230,3.509,2231,3.509,2232,3.509,2233,3.509,2234,3.509,2235,3.509,2236,3.509,2237,3.509,2238,3.509,2239,5.845,2240,3.509,2241,3.509,2242,3.509,2243,3.509,2244,3.509,2245,3.509,2246,3.509,2247,3.509,2248,3.509,2249,3.509,2250,3.509,2251,2.023,2252,3.509,2253,3.509,2254,3.509,2255,3.509,2256,3.509,2257,4.588,2258,3.509,2259,3.509,2260,3.509,2261,3.509,2262,3.509,2263,3.509,2264,3.509,2265,3.509,2266,3.509,2267,3.509,2268,3.509,2269,3.509,2270,3.509,2271,3.509,2272,3.509,2273,3.509,2274,3.509,2275,3.509,2276,3.509,2277,3.509,2278,3.509,2279,3.509,2280,3.509]],["title/classes/DataExporterWidgetObject.html",[78,0.077,2281,3.684]],["body/classes/DataExporterWidgetObject.html",[3,0.08,4,0.064,5,0.056,8,0.509,12,0.32,13,0.515,14,0.789,18,0.321,19,0.008,25,1.894,26,0.126,34,0.775,35,1.351,50,0.485,57,1.142,59,1.029,60,1.395,66,1.544,71,1.744,73,0.543,75,3.595,78,0.074,81,1.551,83,1.913,84,2.914,85,0.83,96,0.793,109,0.867,119,2.102,129,2.32,131,0.725,134,1.194,137,1.984,139,1.685,145,2.189,147,1.93,149,1.318,150,0.004,151,0.006,152,0.004,154,1.19,156,1.886,165,0.83,170,2.41,174,0.882,176,1.653,177,0.811,179,0.887,183,0.506,195,1.13,208,1.739,210,1.086,216,0.31,232,0.498,271,2.914,276,0.951,288,2.572,294,1.783,309,1.453,312,1.339,323,1.913,326,1.999,386,2.059,394,3.702,402,3.344,403,3.317,407,3.317,410,2.536,411,4.536,416,4.023,421,2.102,444,2.102,452,1.97,458,2.102,470,3.157,472,2.312,475,4.314,492,3.894,510,3.072,521,2.041,522,1.459,524,2.699,535,2.167,575,1.543,578,3.558,582,1.601,597,1.872,603,1.03,605,1.285,606,1.191,628,2.829,629,3.767,657,2.634,696,1.294,707,4.604,708,3.806,709,3.894,710,3.894,711,3.894,715,2.949,716,2.167,717,1.241,718,2.393,719,1.475,720,2.312,721,2.949,722,4.292,723,3.317,724,1.872,725,3.317,726,2.471,727,3.842,728,3.677,729,2.634,730,2.393,731,2.887,732,2.949,733,2.393,734,2.949,735,2.829,736,2.393,737,2.949,738,2.603,739,2.102,740,2.393,741,2.949,742,2.237,743,2.949,744,1.411,745,1.475,746,2.393,747,2.393,748,2.949,749,2.393,750,2.393,751,2.949,752,2.237,753,3.204,754,2.312,755,2.393,756,2.167,757,2.237,758,2.393,759,1.475,760,3.004,761,3.317,762,2.949,763,1.241,764,2.393,854,2.044,913,3.004,920,3.677,952,2.571,986,3.88,1089,3.575,1322,3.407,1427,2.536,1587,3.1,1633,3.317,1929,5.172,2117,5.634,2130,5.68,2151,4.923,2167,4.923,2281,4.923,2282,3.88,2283,7.519,2284,6.068,2285,7.519,2286,7.519,2287,6.964,2288,6.964,2289,6.964,2290,4.378,2291,4.378,2292,6.068,2293,4.378,2294,4.378,2295,6.068,2296,6.068,2297,4.378,2298,6.068,2299,4.378,2300,4.378,2301,4.378,2302,6.068,2303,6.068,2304,4.378,2305,4.378,2306,7.519,2307,4.378,2308,4.378,2309,4.313,2310,3.88,2311,4.378,2312,6.068,2313,6.068,2314,4.378,2315,6.068,2316,4.378,2317,4.378,2318,4.378,2319,4.378]],["title/classes/DatagridFilter.html",[78,0.077,1457,1.6]],["body/classes/DatagridFilter.html",[0,0.094,3,0.073,4,0.059,5,0.052,8,0.24,9,2.321,12,0.149,13,0.565,14,0.651,18,0.324,19,0.008,26,0.139,35,1.24,36,0.891,45,4.337,47,1.354,50,0.975,52,1.037,59,0.965,60,0.805,61,2.284,66,1.267,73,0.496,78,0.097,96,0.946,99,1.227,109,1.035,111,2.215,112,1.93,114,1.554,115,1,118,1.62,131,0.65,134,1.07,149,0.873,150,0.003,151,0.005,152,0.003,154,2.224,159,1.461,161,1.278,165,0.99,170,2.27,171,1.076,174,0.874,176,1.364,177,0.669,179,0.921,183,0.535,195,1.064,216,0.427,222,0.648,232,0.542,267,3.124,269,2.92,276,0.873,290,2.124,309,1.192,322,3.238,326,1.883,334,3.785,386,2.472,463,0.402,470,3.007,473,1.309,512,1.52,530,1.969,539,3.468,550,2.215,567,1.725,570,1.637,583,1.637,587,2.59,595,1.696,603,1.129,613,2.187,659,1.554,662,1.587,665,1.385,668,1.385,675,1.654,682,1.522,693,2.053,696,1.69,717,1.139,719,1.925,724,2.524,763,1.62,783,2.054,789,1.558,818,3.018,838,3.018,842,1.68,851,1.929,863,1.354,927,2.58,949,3.107,951,2.386,952,1.885,954,1.267,957,1.24,959,2.015,963,2.347,966,1.874,967,1.52,1004,2.191,1006,2.95,1020,2.577,1021,2.675,1023,2.111,1024,2.344,1034,2.76,1055,2.122,1056,2.853,1059,2.27,1062,2.456,1070,1.164,1073,1.969,1076,2.519,1085,1.925,1098,1.637,1108,1.99,1109,1.93,1110,1.725,1113,2.122,1114,3.749,1116,1.68,1117,2.054,1118,2.122,1119,2.054,1120,2.122,1121,2.122,1122,1.821,1150,1.214,1235,2.27,1236,3.239,1241,2.191,1242,2.577,1395,2.876,1402,2.368,1411,2.495,1433,2.59,1442,2.162,1450,1.164,1451,1.68,1452,1.725,1455,2.894,1456,1.874,1457,2.344,1502,1.99,1528,3.116,1529,2.931,1531,1.874,1623,2.519,1672,2.388,1867,3.849,1870,3.239,1883,2.368,1951,4.082,2132,3.897,2138,2.829,2320,4.046,2321,2.707,2322,4.637,2323,4.317,2324,4.637,2325,4.647,2326,6.451,2327,5.395,2328,4.267,2329,4.446,2330,3.7,2331,3.958,2332,4.178,2333,4.062,2334,3.667,2335,3.7,2336,5.715,2337,2.197,2338,4.019,2339,3.508,2340,4.647,2341,4.019,2342,4.267,2343,4.019,2344,4.019,2345,3.667,2346,4.019,2347,3.508,2348,4.019,2349,3.667,2350,4.019,2351,3.367,2352,2.92,2353,4.019,2354,3.667,2355,3.667,2356,4.019,2357,4.019,2358,3.124,2359,4.019,2360,3.508,2361,3.667,2362,3.667,2363,4.647,2364,3.367,2365,4.019,2366,2.92,2367,5.715,2368,4.019,2369,4.019,2370,4.019,2371,4.019,2372,4.019,2373,3.261,2374,3.261,2375,3.261,2376,3.036,2377,3.036,2378,3.036,2379,4.062,2380,3.036,2381,3.261,2382,3.261,2383,3.261,2384,3.261,2385,3.261,2386,3.261,2387,5.395,2388,3.261,2389,3.261,2390,3.261,2391,3.261,2392,3.261,2393,3.261,2394,3.261,2395,3.261,2396,3.261,2397,3.261,2398,2.707,2399,4.637,2400,3.261,2401,2.707,2402,3.036,2403,3.036,2404,2.707,2405,2.707,2406,3.036,2407,3.036]],["title/components/DatagridMultiSelectFilterComponent.html",[183,0.291,661,1.638]],["body/components/DatagridMultiSelectFilterComponent.html",[0,0.103,3,0.067,4,0.053,5,0.047,8,0.219,9,1.485,12,0.135,13,0.454,14,0.663,18,0.309,19,0.008,20,1.418,26,0.126,31,2.353,34,1.229,36,1.186,45,3.031,50,0.768,52,0.572,59,0.959,60,0.734,61,1.156,63,1.018,65,2.235,73,0.503,78,0.062,79,2.178,81,1.367,85,0.731,91,1.65,96,0.907,99,0.676,109,0.524,114,0.997,115,0.925,118,1.79,131,0.676,134,1.032,143,3.097,150,0.003,151,0.004,152,0.003,154,1.717,156,0.846,159,1.367,161,1.028,165,0.731,171,0.69,174,0.88,176,1.39,177,0.8,179,0.921,183,0.444,187,1.421,190,2.009,195,1.089,210,0.572,216,0.407,219,1.263,222,0.615,231,1.235,232,0.511,267,2.004,269,1.873,276,1.162,285,1.516,290,1.018,306,0.813,312,0.705,322,2.572,323,1.156,326,1.208,334,3.531,340,1.387,386,2.182,405,1.881,452,1.162,455,2.78,463,0.367,470,2.865,473,1.474,520,1.263,530,1.263,539,2.689,550,1.421,583,1.493,594,1.131,595,1.186,596,1.107,597,1.131,598,1.421,601,1.181,603,1.253,604,1.387,605,1.723,606,1.811,607,1.65,613,1.907,629,3.782,646,1.156,647,1.708,648,1.156,649,3.059,650,1.616,651,1.181,652,1.616,653,2.357,654,1.107,655,1.493,656,1.616,657,1.387,658,1.616,659,1.717,660,1.616,661,2.87,662,2.139,663,3.3,664,3.059,665,1.263,666,1.354,667,1.387,668,1.263,669,1.421,670,1.616,671,1.456,672,1.616,673,1.493,674,1.387,675,2.407,676,1.616,677,1.387,678,3.059,679,1.354,680,2.508,681,1.354,682,1.849,683,1.354,684,2.357,685,1.354,686,1.456,687,1.616,688,1.323,689,1.493,690,1.131,691,1.181,692,1.061,693,1.516,694,1.616,695,1.421,696,1.084,697,1.616,698,1.354,699,1.573,700,1.616,701,1.323,702,1.493,703,1.616,719,1.235,724,2.142,738,1.573,763,1.039,795,3.032,806,2.783,846,2.25,851,1.424,863,1.235,864,3.031,865,2.606,866,2.25,867,2.469,874,2.606,920,3.665,927,2.495,951,2.431,952,1.516,954,1.686,956,1.843,957,1.65,958,2.295,959,1.885,963,2.306,1004,1.762,1006,3.24,1011,2.824,1020,2.072,1021,2.726,1059,1.456,1060,1.843,1062,1.354,1070,1.548,1073,1.263,1076,1.616,1079,2.568,1085,1.235,1102,1.948,1114,2.357,1179,1.936,1212,2.388,1228,4.454,1235,1.456,1236,2.078,1241,2.08,1395,2.508,1411,2.741,1427,1.532,1433,1.661,1442,1.387,1450,1.061,1455,2.388,1457,3.184,1480,2.357,1515,2.295,1522,1.421,1528,2.178,1529,1.616,1571,1.456,1623,1.616,1672,1.532,1706,1.235,1819,1.76,1870,2.078,1901,2.606,1951,2.25,2132,4.037,2138,1.815,2251,1.873,2309,3.801,2320,3.724,2325,4.454,2328,3.432,2329,3.876,2330,4.065,2331,4.348,2332,4.166,2333,4.933,2334,2.353,2335,3.546,2337,2.923,2339,2.25,2340,3.432,2342,3.432,2345,2.353,2347,2.25,2349,2.353,2351,2.16,2352,2.732,2354,2.353,2355,2.353,2358,3.451,2360,2.25,2361,2.353,2362,2.353,2363,3.432,2364,2.16,2366,1.873,2408,1.76,2409,3.546,2410,3.602,2411,4.04,2412,4.675,2413,4.04,2414,4.04,2415,3.031,2416,3.666,2417,2.769,2418,3.666,2419,3.666,2420,3.666,2421,3.666,2422,3.666,2423,4.675,2424,3.666,2425,3.801,2426,3.602,2427,3.249,2428,2.769,2429,2.769,2430,2.769,2431,2.769,2432,2.769,2433,2.769,2434,2.769,2435,2.769,2436,2.769,2437,4.253,2438,3.666,2439,4.04,2440,2.769,2441,2.769,2442,2.769,2443,2.769,2444,3.125,2445,2.078,2446,1.815,2447,2.078,2448,2.004,2449,4.675,2450,2.353,2451,2.769,2452,3.801,2453,2.769,2454,2.469,2455,2.078,2456,2.606,2457,2.769,2458,2.769,2459,2.769,2460,2.769,2461,2.769,2462,2.769,2463,2.769,2464,4.04,2465,2.769,2466,2.769,2467,2.769,2468,2.769,2469,2.769,2470,2.769,2471,2.769,2472,2.769,2473,2.769,2474,2.769,2475,2.769,2476,2.769,2477,2.769,2478,2.769,2479,2.469,2480,4.339,2481,5.631,2482,3.283]],["title/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.074,2423,3.058]],["body/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.126,2,1.06,3,0.096,4,0.077,5,0.068,12,0.196,13,0.586,18,0.268,19,0.008,20,1.66,26,0.148,31,3.398,34,1.221,36,1.174,50,0.899,52,0.826,59,0.87,65,2.213,73,0.496,78,0.09,79,2.809,81,1.353,85,0.943,91,1.634,96,0.692,109,0.757,115,0.921,118,1.501,131,0.45,134,0.74,143,3.23,150,0.004,151,0.006,152,0.004,159,1.353,174,0.502,177,0.489,179,0.916,183,0.442,190,1.996,216,0.45,222,0.747,231,1.784,232,0.558,276,1.15,312,1.018,340,2.003,386,1.566,405,1.99,455,3.039,463,0.53,470,1.824,473,1.561,520,1.824,583,2.157,603,1.43,605,0.977,606,1.039,607,1.634,647,1.7,659,1.44,661,2.766,662,1.47,663,3,675,1.996,738,2.272,795,3.682,806,3.039,846,3.25,851,1.41,863,1.784,864,3.909,865,3.763,866,3.25,867,3.567,874,3.763,920,4.049,927,2.476,951,2.272,952,1.501,954,1.67,956,1.824,957,1.634,958,2.272,959,1.867,963,2.244,1004,1.744,1006,2.157,1011,2.796,1020,2.971,1021,3,1060,1.824,1070,1.533,1079,2.542,1102,2.128,1179,2.796,1212,2.608,1228,4.921,1241,2.272,1411,1.824,1427,2.213,1450,1.533,1457,2.431,1480,3.039,1515,2.272,1522,2.052,1571,2.103,1706,1.784,1819,2.542,1901,3.763,2132,3.927,2251,2.705,2309,3.763,2320,2.334,2330,2.705,2331,2.894,2332,2.705,2335,3.523,2337,2.894,2358,2.894,2408,2.542,2409,3.918,2410,3.567,2411,4,2412,4.645,2413,4,2414,4,2415,3.001,2423,5.165,2425,3.763,2426,3.567,2437,4.645,2439,4,2444,3.796,2445,3.001,2446,2.621,2447,3.001,2448,2.894,2449,5.817,2450,3.398,2451,4,2452,4.901,2453,4,2454,3.567,2455,3.001,2456,3.763,2457,4,2458,4,2459,4,2460,4,2461,4,2462,4,2463,4,2464,5.209,2465,4,2466,4,2467,4,2468,4,2469,4,2470,4,2471,4,2472,4,2473,4,2474,4,2475,4,2476,4,2477,4,2478,4,2479,3.567]],["title/components/DatagridNumericFilterComponent.html",[183,0.291,665,1.564]],["body/components/DatagridNumericFilterComponent.html",[0,0.059,3,0.066,4,0.053,5,0.046,9,1.737,12,0.133,13,0.531,14,0.711,18,0.32,19,0.008,26,0.125,27,1.067,36,1.172,40,2.205,45,2.996,50,0.585,52,0.563,59,0.997,60,0.722,61,1.138,63,1.002,73,0.44,78,0.061,85,0.855,87,1.002,96,0.9,99,0.666,101,1.023,109,1.161,114,0.981,115,0.6,118,1.023,131,0.761,134,1.071,143,2.156,145,1.301,150,0.003,151,0.004,152,0.003,154,1.701,156,0.833,159,1.351,161,1.561,165,0.723,170,2.099,171,0.679,174,0.892,176,1.491,177,0.797,179,0.886,183,0.441,187,1.398,195,1.098,210,0.563,216,0.405,219,1.243,222,0.61,231,1.215,232,0.565,267,1.972,269,1.843,285,1.498,290,1.002,306,0.8,312,0.694,322,2.805,323,1.138,326,1.189,334,3.518,340,1.364,386,2.037,405,1.558,452,1.148,463,0.361,469,2.464,470,2.854,473,1.385,520,1.243,530,1.243,539,2.669,550,1.398,582,0.768,594,1.113,595,1.172,596,1.09,597,1.113,598,1.398,601,1.163,603,1.062,604,1.364,605,1.72,606,1.813,607,1.631,613,1.889,629,3.772,646,1.138,647,1.172,648,1.138,649,3.036,650,1.59,651,1.163,652,1.59,653,2.33,654,1.09,655,1.469,656,1.59,657,1.364,658,1.59,659,0.981,660,1.59,661,1.301,662,2.127,663,1.332,664,3.036,665,2.526,666,3.45,667,1.364,668,1.243,669,1.398,670,1.59,671,1.433,672,1.59,673,1.469,674,1.364,675,2.437,676,1.59,677,1.364,678,3.036,679,1.332,680,2.485,681,1.332,682,2.497,683,1.332,684,2.33,685,1.332,686,1.433,687,1.59,688,2.764,689,1.469,690,1.113,691,1.163,692,1.044,693,1.498,694,1.59,695,1.398,696,1.85,697,1.59,698,1.332,699,1.548,700,1.59,701,1.301,702,1.469,703,1.59,719,1.215,724,2.125,763,1.023,790,2.045,806,1.59,820,1.272,838,3.872,851,0.961,863,1.215,927,2.369,951,1.189,963,2.041,1006,3.224,1020,2.424,1021,2.31,1044,1.09,1059,1.433,1062,1.332,1073,1.243,1076,1.59,1085,1.215,1102,2.364,1114,2.33,1176,3.765,1177,2.996,1235,1.433,1236,2.045,1241,2.061,1242,2.424,1395,2.485,1403,2.215,1411,2.728,1433,1.635,1442,1.364,1445,1.548,1450,1.044,1455,2.366,1457,3.177,1521,1.732,1522,1.398,1528,2.153,1529,1.59,1542,2.099,1623,1.59,1672,1.508,1765,3.184,1870,2.045,1951,2.215,2132,3.785,2138,1.786,2251,1.843,2320,4.008,2325,4.42,2328,3.392,2329,3.84,2330,4.044,2331,3.419,2332,4.147,2333,4.896,2334,2.315,2335,3.519,2337,2.889,2339,2.215,2340,3.392,2342,3.392,2345,2.315,2347,2.215,2349,2.315,2351,2.125,2352,3.196,2354,2.315,2355,2.315,2358,3.419,2360,2.215,2361,2.315,2362,2.315,2363,3.392,2364,2.125,2366,1.843,2408,1.732,2409,2.7,2415,2.996,2417,2.725,2426,3.56,2427,3.197,2428,2.725,2429,2.725,2430,2.725,2431,2.725,2432,2.725,2433,2.725,2434,2.725,2435,2.725,2436,2.725,2440,2.725,2441,2.725,2442,2.725,2443,2.725,2446,2.616,2447,2.045,2448,1.972,2455,2.045,2483,5.544,2484,5.544,2485,5.076,2486,5.544,2487,5.544,2488,5.544,2489,5.589,2490,5.579,2491,3.608,2492,4.685,2493,5.286,2494,3.608,2495,3.608,2496,3.608,2497,3.608,2498,5.212,2499,3.608,2500,5.949,2501,3.197,2502,3.608,2503,3.197,2504,4.289,2505,4.685,2506,3.197,2507,5.544,2508,3.608,2509,4.685,2510,3.608,2511,3.608,2512,3.608,2513,3.608,2514,3.608,2515,3.608,2516,3.608,2517,2.315,2518,2.315,2519,2.927,2520,2.927,2521,3.197,2522,4.289,2523,5.544,2524,5.076,2525,4.289,2526,4.289,2527,3.197,2528,5.544,2529,3.197,2530,4.685,2531,3.197,2532,3.197,2533,3.197,2534,2.927,2535,3.197,2536,3.197,2537,2.927,2538,3.197,2539,3.197,2540,2.43,2541,4.685,2542,4.685,2543,3.197,2544,3.197,2545,3.197,2546,3.197,2547,3.197,2548,2.725,2549,3.993,2550,3.993,2551,3.608,2552,2.927]],["title/interfaces/DatagridNumericFilterConfig.html",[0,0.074,2498,3.227]],["body/interfaces/DatagridNumericFilterConfig.html",[0,0.087,2,1.064,3,0.097,4,0.078,5,0.068,8,0.317,9,1.919,12,0.196,13,0.691,14,0.731,18,0.295,19,0.008,26,0.148,27,1.571,36,1.532,40,2.436,50,0.765,52,0.829,59,0.923,73,0.305,78,0.09,85,1.05,87,1.919,96,0.694,101,1.506,109,1.236,131,0.783,134,0.743,143,2.381,145,1.917,150,0.004,151,0.006,152,0.004,159,1.358,161,1.329,179,0.865,183,0.443,216,0.45,222,0.748,231,1.79,232,0.603,312,1.021,322,2.815,340,2.01,386,2.043,405,1.563,463,0.531,469,2.477,470,1.831,473,1.47,520,1.831,603,1.304,605,0.98,606,1.042,607,1.64,662,1.475,665,2.381,666,3.251,675,1.538,682,2.548,688,2.771,806,2.342,820,1.873,838,4.056,863,1.79,927,2.341,963,1.841,1006,2.164,1020,3.268,1021,2.837,1102,2.37,1176,3.777,1177,3.012,1241,2.277,1242,2.678,1411,1.831,1445,2.28,1450,1.538,1457,2.436,1521,2.551,1522,2.059,1542,2.11,1765,3.442,2132,3.581,2251,2.714,2320,2.342,2330,2.714,2332,2.714,2335,3.531,2337,2.904,2352,2.714,2358,2.904,2408,2.551,2409,3.531,2415,3.012,2426,3.579,2446,3.421,2447,3.012,2448,2.904,2455,3.012,2483,4.709,2484,4.709,2485,4.311,2486,4.709,2487,4.709,2488,4.709,2489,4.311,2490,6.011,2498,5.781,2500,6.232,2505,4.709,2507,4.709,2509,4.709,2517,3.41,2518,3.41,2519,4.311,2520,5.607,2521,4.709,2522,5.607,2523,6.807,2524,6.232,2525,5.607,2526,5.607,2527,4.709,2528,6.807,2529,4.709,2530,6.125,2531,4.709,2532,4.709,2533,4.709,2534,4.311,2535,4.709,2536,4.709,2537,4.311,2538,4.709,2539,4.709,2540,3.579,2541,6.125,2542,6.125,2543,4.709,2544,4.709,2545,4.709,2546,4.709,2547,4.709,2548,4.014]],["title/components/DatagridSelectFilterComponent.html",[183,0.291,667,1.717]],["body/components/DatagridSelectFilterComponent.html",[0,0.062,3,0.069,4,0.056,5,0.049,8,0.227,9,1.528,12,0.141,13,0.467,14,0.635,18,0.308,19,0.008,20,1.32,26,0.117,30,1.466,34,1.383,35,1.698,36,1.22,45,3.119,50,0.782,52,0.595,59,0.935,60,0.764,61,1.202,63,1.058,65,2.3,66,0.845,73,0.49,78,0.065,81,1.407,85,0.883,96,1.021,99,1.015,109,0.923,114,1.037,115,0.85,118,1.83,131,0.733,134,1.092,143,2.938,150,0.003,151,0.005,152,0.003,154,1.756,156,0.88,159,1.407,161,1.241,165,0.752,171,0.718,174,0.877,176,1.331,177,0.775,179,0.939,183,0.453,187,1.477,195,1.089,206,1.636,210,0.595,216,0.399,219,1.314,222,0.536,231,1.284,232,0.534,267,2.084,269,1.948,276,1.195,285,1.56,290,1.058,306,0.845,312,0.733,322,2.63,323,1.202,326,1.256,334,3.563,340,1.442,386,2.216,405,2.091,452,1.195,455,2.704,463,0.381,470,2.894,473,1.355,520,1.314,530,1.314,539,2.739,550,1.477,582,0.812,583,1.553,594,1.177,595,1.22,596,1.152,597,1.177,598,1.477,601,1.229,603,1.096,604,1.442,605,1.728,606,1.819,607,1.698,613,1.95,629,3.807,646,1.202,647,1.22,648,1.202,649,3.116,650,1.68,651,1.229,652,1.68,653,2.425,654,1.152,655,1.553,656,1.68,657,1.442,658,1.68,659,1.756,660,1.68,661,1.375,662,2.168,663,1.408,664,3.116,665,1.314,666,1.408,667,3.045,668,1.314,669,1.477,670,1.68,671,1.514,672,1.68,673,1.553,674,1.442,675,2.331,676,1.68,677,1.442,678,3.116,679,1.408,680,2.564,681,1.408,682,1.883,683,1.408,684,2.425,685,1.408,686,1.514,687,1.68,688,1.375,689,1.553,690,1.177,691,1.229,692,1.104,693,1.56,694,1.68,695,1.477,696,1.127,697,1.68,698,1.408,699,1.636,700,1.68,701,1.375,702,1.553,703,1.68,717,1.081,719,1.284,724,2.182,763,1.081,806,2.425,820,1.344,851,1.016,863,1.284,927,2.532,951,1.256,952,1.56,954,1.735,956,1.896,957,1.698,958,2.361,959,1.94,963,2.145,1004,1.813,1006,3.28,1020,2.132,1021,2.769,1030,2.811,1059,1.514,1062,1.408,1073,1.314,1076,1.68,1079,2.642,1085,1.284,1102,1.992,1114,2.425,1235,1.514,1236,2.161,1241,2.127,1242,2.502,1395,2.564,1411,2.774,1412,4.157,1433,1.728,1442,1.442,1450,1.104,1455,2.442,1457,3.201,1478,2.906,1515,2.361,1522,1.477,1528,2.63,1529,1.68,1623,1.68,1672,1.593,1870,2.161,1951,2.341,2132,3.843,2138,1.887,2251,2.811,2320,3.701,2325,4.537,2328,3.531,2329,3.964,2330,4.114,2331,4.401,2332,4.211,2333,3.911,2334,2.447,2335,3.612,2337,3.008,2339,2.341,2340,3.531,2342,3.531,2345,2.447,2347,2.341,2349,2.447,2351,2.246,2352,1.948,2354,2.447,2355,2.447,2358,2.084,2360,2.341,2361,2.447,2362,2.447,2363,3.531,2364,3.804,2366,1.948,2408,1.831,2409,3.612,2415,3.119,2417,2.88,2428,2.88,2429,2.88,2430,2.88,2431,2.88,2432,2.88,2433,2.88,2434,2.88,2435,2.88,2436,2.88,2440,2.88,2441,2.88,2442,2.88,2443,2.88,2444,3.711,2445,2.161,2446,2.724,2447,2.161,2448,2.084,2455,2.161,2480,4.465,2481,5.736,2482,3.378,2492,3.379,2501,3.379,2517,4.537,2540,2.568,2553,5.341,2554,3.911,2555,4.877,2556,5.025,2557,4.877,2558,5.722,2559,4.878,2560,3.813,2561,3.379,2562,3.813,2563,3.813,2564,3.813,2565,3.813,2566,4.877,2567,2.88,2568,2.88,2569,3.379,2570,4.877,2571,5.736,2572,5.722,2573,3.094,2574,3.379,2575,3.094,2576,3.379,2577,3.094,2578,2.88,2579,3.379,2580,5.722,2581,2.88,2582,2.88,2583,2.88,2584,5.503]],["title/interfaces/DatagridSelectFilterConfig.html",[0,0.074,2567,3.43]],["body/interfaces/DatagridSelectFilterConfig.html",[0,0.089,2,1.093,3,0.099,4,0.08,5,0.07,8,0.325,12,0.202,13,0.597,14,0.632,18,0.288,19,0.008,20,1.738,26,0.141,30,1.453,34,1.377,35,1.684,36,1.559,50,0.909,52,0.851,59,0.798,65,2.28,66,1.559,73,0.447,78,0.092,81,1.395,85,1.064,96,1.111,99,1.007,109,1.005,115,0.882,118,1.547,131,0.661,134,0.763,143,3.219,150,0.005,151,0.006,152,0.005,159,1.395,161,1.049,179,0.943,183,0.45,206,3.016,216,0.445,222,0.685,231,1.838,232,0.577,276,1.185,312,1.049,340,2.064,386,1.613,405,2.094,455,2.806,463,0.546,470,1.88,473,1.406,520,1.88,582,1.161,583,2.222,603,1.321,605,1.007,606,1.071,607,1.684,659,1.484,662,1.515,667,3.108,717,1.547,806,3.099,820,2.478,863,1.838,927,2.555,952,1.547,954,1.72,956,1.88,957,1.684,958,2.341,959,1.923,963,2.072,1004,1.798,1006,2.222,1020,3.014,1021,3.035,1030,3.974,1079,2.62,1102,2.17,1241,2.316,1242,2.724,1411,1.88,1412,4.122,1450,1.579,1457,2.478,1478,2.881,1515,2.341,1522,2.114,1528,2.864,2132,3.627,2251,3.592,2320,2.405,2330,2.787,2331,2.982,2332,2.787,2335,3.592,2337,2.982,2364,3.214,2408,2.62,2409,3.974,2415,3.093,2444,4.309,2445,3.093,2446,3.48,2447,3.093,2448,2.982,2455,3.093,2517,4.512,2540,3.675,2553,5.311,2554,3.878,2555,4.835,2556,4.997,2557,4.835,2558,4.835,2559,4.122,2566,4.835,2567,5.311,2568,5.311,2569,6.231,2570,6.231,2571,7.186,2572,6.894,2573,4.427,2574,4.835,2575,4.427,2576,4.835,2577,4.427,2578,4.122,2579,4.835,2580,6.894,2581,4.122,2582,4.122,2583,4.122]],["title/components/DatagridStringFilterComponent.html",[183,0.291,668,1.564]],["body/components/DatagridStringFilterComponent.html",[0,0.068,3,0.076,4,0.061,5,0.054,9,1.631,12,0.155,13,0.499,14,0.698,18,0.308,19,0.008,26,0.134,27,1.236,45,3.331,50,0.463,52,0.916,59,0.958,60,0.837,61,1.318,63,1.161,66,0.927,73,0.547,78,0.071,85,0.803,96,0.963,99,0.771,109,0.598,114,1.137,115,0.667,118,1.185,131,0.659,134,1.126,149,0.908,150,0.003,151,0.005,152,0.003,154,1.847,156,0.965,159,1.502,161,1.493,165,0.803,171,0.787,174,0.883,176,1.462,177,0.803,179,0.915,183,0.472,187,1.62,195,1.104,210,0.652,216,0.397,219,1.441,222,0.662,231,1.408,232,0.56,267,2.285,269,2.136,285,1.666,290,1.161,294,1.703,306,0.927,312,1.306,322,2.767,323,1.318,326,1.377,334,3.635,340,1.581,386,2.009,405,0.946,452,1.276,463,0.418,470,2.775,473,1.403,520,1.441,530,1.441,539,2.856,550,1.62,582,0.89,594,1.29,595,1.303,596,1.263,597,1.29,598,1.62,601,1.347,603,1.153,604,1.581,605,1.741,606,1.835,607,1.813,613,2.052,627,1.21,629,3.864,646,1.318,647,1.303,648,1.318,649,3.248,650,1.843,651,1.347,652,1.843,653,2.59,654,1.263,655,1.703,656,1.843,657,1.581,658,1.843,659,1.137,660,1.843,661,1.508,662,2.236,663,1.544,664,3.248,665,1.441,666,1.544,667,1.581,668,2.676,669,1.62,670,1.843,671,1.661,672,1.843,673,1.703,674,1.581,675,2.395,676,1.843,677,1.581,678,3.248,679,1.544,680,2.699,681,1.544,682,1.963,683,1.544,684,2.59,685,1.544,686,1.661,687,1.843,688,1.508,689,1.703,690,1.29,691,1.347,692,1.21,693,1.666,694,1.843,695,1.62,696,1.236,697,1.843,698,1.544,699,1.794,700,1.843,701,1.508,702,1.703,703,1.843,719,1.408,724,2.274,735,2.74,763,1.185,788,3.369,806,2.59,851,1.114,863,1.408,927,2.414,951,1.377,963,2.068,1006,3.369,1020,2.277,1021,2.509,1059,1.661,1062,1.544,1073,1.441,1076,1.843,1085,1.408,1102,2.097,1114,2.59,1150,1.263,1235,1.661,1236,2.37,1241,2.238,1395,2.699,1411,2.85,1433,1.894,1442,2.57,1450,1.21,1455,2.57,1457,3.239,1482,2.069,1522,1.62,1528,3.002,1529,1.843,1623,1.843,1672,1.747,1870,2.37,1951,2.566,2132,3.937,2138,2.069,2251,2.136,2320,3.722,2325,4.73,2328,3.771,2329,4.171,2330,4.226,2331,3.714,2332,4.314,2333,4.176,2334,2.683,2335,3.765,2337,3.212,2339,2.566,2340,3.771,2342,3.771,2345,2.683,2347,2.566,2349,2.683,2351,2.463,2352,2.136,2354,2.683,2355,2.683,2358,2.285,2360,2.566,2361,2.683,2362,2.683,2363,3.771,2364,4.003,2366,2.136,2408,2.007,2409,3.002,2415,3.331,2417,3.158,2428,3.158,2429,3.158,2430,3.158,2431,3.158,2432,3.158,2433,3.158,2434,3.158,2435,3.158,2436,3.158,2440,3.158,2441,3.158,2442,3.158,2443,3.158,2446,2.909,2447,2.37,2448,2.285,2455,2.37,2503,3.705,2506,3.705,2517,2.683,2540,2.816,2561,3.705,2578,3.158,2581,3.158,2585,5.876,2586,4.181,2587,5.208,2588,6.308,2589,6.532,2590,4.181,2591,5.208,2592,6.022,2593,4.181,2594,4.181,2595,4.176,2596,3.158,2597,5.208,2598,4.439,2599,3.705,2600,3.158,2601,5.208,2602,5.208,2603,3.705,2604,5.208,2605,3.705,2606,5.208,2607,3.705,2608,3.158,2609,3.705,2610,5.208,2611,3.705,2612,3.158]],["title/interfaces/DatagridStringFilterConfig.html",[0,0.074,2600,3.43]],["body/interfaces/DatagridStringFilterConfig.html",[0,0.097,2,1.187,3,0.108,4,0.086,5,0.076,8,0.353,12,0.219,13,0.629,14,0.666,18,0.259,19,0.008,26,0.154,27,1.752,50,0.656,52,1.156,59,0.84,66,1.314,73,0.542,78,0.1,85,1.013,96,0.774,134,0.829,149,1.287,150,0.005,151,0.006,152,0.005,159,1.515,161,1.139,179,0.902,183,0.474,216,0.446,222,0.788,231,1.996,232,0.598,294,2.414,312,1.424,340,2.241,463,0.593,473,1.461,520,2.042,582,1.261,603,1.372,605,1.093,606,1.163,607,1.829,627,1.715,662,1.645,668,2.553,735,3.454,788,3.551,806,3.266,863,1.996,927,2.244,963,1.973,1006,2.414,1020,3.132,1021,2.985,1102,2.286,1150,1.79,1241,2.441,1411,2.042,1442,3.057,1450,1.715,1457,2.612,1482,2.933,1522,2.296,1528,3.292,2132,3.769,2251,3.027,2320,2.612,2330,3.027,2332,3.027,2335,3.785,2337,3.239,2364,3.491,2408,2.845,2409,3.785,2415,3.359,2446,3.667,2447,3.359,2448,3.239,2455,3.359,2517,3.803,2540,3.991,2578,4.476,2581,4.476,2587,5.252,2588,6.725,2589,6.566,2591,5.252,2592,6.566,2595,5.266,2596,4.476,2597,6.566,2598,5.597,2599,6.566,2600,5.597,2601,6.566,2602,6.566,2603,5.252,2604,6.566,2605,5.252,2606,6.566,2607,5.252,2608,4.476,2609,5.252,2610,6.566,2611,5.252,2612,4.476]],["title/interfaces/DetailPane.html",[0,0.074,1520,2.397]],["body/interfaces/DetailPane.html",[0,0.12,1,2.183,2,0.438,3,0.04,4,0.032,5,0.028,8,0.13,9,1.61,10,3.407,12,0.277,13,0.446,14,0.196,15,2.659,18,0.249,19,0.008,20,1.074,22,0.89,25,1.236,26,0.143,27,1.554,28,1.116,30,1.892,34,1.376,36,1.815,39,0.847,40,2.044,42,1.049,47,0.736,50,0.874,52,0.82,53,1.829,54,1.116,55,3.126,56,1.89,59,0.849,60,1.247,61,2.073,62,0.788,63,1.729,64,1.922,66,0.793,67,0.827,69,2.703,71,0.896,73,0.454,74,2.004,77,1.179,78,0.077,80,0.868,81,1.162,83,1.129,84,2.247,85,0.622,86,2.87,87,1.61,88,0.99,90,3.06,91,0.674,93,3.668,96,0.955,99,0.97,101,2.072,102,0.72,108,2.044,109,1.232,111,2.247,114,0.594,115,0.867,118,1.289,120,0.868,127,0.753,128,1.761,129,1.104,131,0.761,132,1.291,134,0.919,139,1.459,140,0.913,143,2.265,145,2.092,146,0.847,149,1.588,150,0.003,151,0.003,152,0.002,159,0.559,161,1.627,162,1.194,165,0.622,171,0.412,173,2.004,174,0.207,177,0.42,179,0.58,181,1.194,182,0.827,183,0.506,189,2.25,190,1.036,195,0.554,206,0.938,210,0.341,216,0.391,217,0.72,222,0.844,225,1.194,226,1.956,232,0.597,266,0.753,272,0.913,276,0.777,282,1.019,283,3.3,285,1.289,290,0.994,292,2.447,306,0.484,309,1.096,312,1.405,317,1.718,321,1.718,323,0.689,326,1.91,327,2.601,341,1.718,343,1.403,396,1.387,405,0.494,432,0.847,452,0.777,455,0.788,463,0.219,473,1.188,510,1.206,512,1.354,522,1.093,524,1.387,533,1.433,575,2.195,582,1.399,594,0.674,595,0.793,596,1.373,601,0.704,603,0.371,605,0.403,606,0.702,607,0.674,613,1.081,617,1.772,627,1.679,628,2.45,645,1.154,647,1.008,651,1.154,659,0.594,662,0.607,690,0.674,691,0.704,692,1.036,696,0.646,717,0.619,719,1.206,724,1.922,726,1.458,729,0.827,731,1.566,745,1.77,759,0.736,763,0.619,773,1.082,789,0.847,816,1.082,820,0.77,822,0.99,844,1.019,851,0.582,854,0.736,916,1.761,922,1.116,927,0.607,928,1.829,950,1.851,951,1.498,952,2.122,954,0.689,956,2.633,957,2.192,963,1.211,966,1.019,967,0.827,969,1.602,970,1.154,971,1.154,991,2.475,1004,2.868,1014,0.963,1015,0.963,1017,0.868,1018,0.674,1019,0.89,1022,0.938,1023,2.141,1024,1.602,1025,1.95,1031,0.827,1032,2.195,1033,3.104,1034,1.291,1035,1.851,1044,2.073,1049,0.963,1050,2.316,1054,0.938,1060,1.811,1061,2.961,1062,1.679,1063,0.963,1065,0.847,1070,1.036,1073,0.753,1077,1.64,1083,1.531,1088,0.89,1092,2.087,1098,0.89,1102,2.612,1103,2.637,1112,1.536,1115,1.536,1127,1.669,1132,2.316,1173,1.718,1178,0.868,1182,2.523,1195,1.536,1202,0.938,1211,1.049,1212,0.827,1235,1.422,1238,2.004,1240,1.578,1241,1.179,1242,1.387,1261,1.496,1265,1.019,1268,1.116,1278,1.116,1321,1.049,1322,1.622,1330,0.99,1332,3.516,1395,0.868,1411,0.753,1427,0.913,1430,2.775,1431,1.116,1432,2.029,1433,1.622,1434,2.029,1435,1.239,1436,1.154,1437,1.239,1438,1.956,1439,2.485,1440,2.784,1441,1.239,1442,2.193,1443,2.029,1444,1.89,1445,0.938,1446,1.239,1447,1.956,1448,2.577,1449,2.029,1450,0.633,1451,1.496,1452,0.938,1453,1.082,1454,1.194,1455,0.827,1456,1.019,1457,1.262,1458,2.485,1459,3.608,1460,3.062,1461,1.194,1462,2.4,1463,1.154,1464,1.116,1465,1.116,1466,1.049,1467,1.956,1468,2.322,1469,1.154,1470,1.194,1471,1.194,1472,2.775,1473,1.194,1474,4.475,1475,1.89,1476,1.194,1477,2.485,1478,1.89,1479,3.181,1480,2.004,1481,1.239,1482,1.772,1483,1.239,1484,1.829,1485,1.239,1486,2.979,1487,1.89,1488,1.239,1489,1.239,1490,2.029,1491,1.194,1492,2.872,1493,1.239,1494,2.183,1495,1.89,1496,2.029,1497,1.239,1498,2.029,1499,2.029,1500,2.775,1501,2.577,1502,1.082,1503,1.049,1504,1.194,1505,1.239,1506,1.239,1507,1.019,1508,3.287,1509,4.243,1510,2.577,1511,1.239,1512,1.239,1513,4.591,1514,1.154,1515,2.255,1516,2.979,1517,4.143,1518,1.154,1519,2.029,1520,2.775,1521,1.718,1522,1.387,1523,1.239,1524,1.239,1525,3.169,1526,1.239,1527,2.4,1528,0.89,1529,0.963,1530,1.239,1531,2.119,1532,1.239,1533,1.154,1534,2.029,1535,2.029,1536,1.239,1537,1.239,1538,1.718,1539,1.116,1540,1.239,1541,1.239,1542,0.868,1543,1.239,1544,1.956,1545,2.577,1546,1.239,1547,1.239,1548,1.239,1549,2.029,1550,1.239,1551,2.029,1552,1.239,1553,2.577,1554,1.239,1555,1.154,1556,1.154,1557,1.239,1558,2.029,1559,1.239,1560,1.239,1561,1.239,1562,1.239,1563,1.239,1564,1.239,1565,1.194,1566,1.239,1567,2.029,1568,1.239,1569,1.194,1570,1.239,1571,1.805,1572,1.239,1573,2.577,1574,2.485,1575,1.239,1576,1.239,1577,3.53,1578,1.239,1579,2.029,1580,1.239,1581,1.239,1582,2.029,1583,2.029,1584,1.239,1585,1.239,1586,1.239,1587,1.116,1588,1.239,1589,1.239,1590,1.239,1591,1.239,1592,1.239,1593,1.239,1594,1.239,1595,2.979,1596,2.029,1597,2.029,1598,1.239,1599,1.239,1600,1.239,1601,1.239,1602,1.239,1603,1.239,1604,2.029,1605,2.029,1606,2.029,1607,2.029,1608,2.577,1609,1.239,1610,1.239,1611,1.239,1612,1.239,1613,2.029,1614,2.029,1615,2.979,1616,1.239,1617,1.239,1618,1.239,1619,1.239,1620,1.239,1621,2.979,1622,2.979,1623,0.963,1624,1.239,1625,1.239,1626,2.979,1627,2.029,1628,1.239,1629,1.239,1630,1.239,1631,2.577,1632,1.239,1633,1.194,1634,1.194,1635,1.239,1636,1.239,1637,1.239,1638,1.239,1639,1.239,1640,1.239,1641,1.239,1642,1.239,1643,1.239,1644,1.239,1645,1.239,1646,1.239,1647,1.239,1648,2.029,1649,1.239,1650,1.239,1651,1.239,1652,1.239,1653,1.239,1654,1.116,1655,1.239,1656,1.154,1657,1.239,1658,1.239,1659,1.239,1660,1.239,1661,1.239,1662,1.239,1663,1.239,1664,1.239,1665,1.239,1666,1.239,1667,1.239,1668,1.239,1669,1.239,1670,1.239,1671,1.239,1672,0.913,1673,1.239,1674,2.029,1675,1.239,1676,1.194,1677,1.239,1678,1.239,1679,1.239,1680,1.239,1681,2.029,1682,2.45,1683,1.239,1684,1.239,1685,1.239,1686,1.239,1687,1.239,1688,2.029,1689,2.029,1690,2.029,1691,1.239,1692,2.577,1693,2.979,1694,2.029,1695,1.239,1696,1.239,1697,1.239,1698,1.239,1699,1.239,1700,1.239,1701,1.239,1702,1.154,1703,1.239,1704,1.239,1705,1.239,1706,0.736,1707,1.239,1708,1.239,1709,1.239,1710,1.239,1711,1.239,1712,1.239,1713,1.239,1714,1.239,1715,1.239,1716,1.154,1717,1.194,1718,1.239,1719,1.239,1720,2.029,1721,2.029,1722,1.956,1723,1.239,1724,1.239,1725,2.029,1726,1.239,1727,2.029,1728,1.239,1729,1.239,1730,1.239,1731,1.239,1732,1.239,1733,1.239,1734,1.194,1735,1.239,1736,1.194,1737,1.239,1738,1.239,1739,1.239,1740,2.029,1741,1.239,1742,1.239,1743,1.239,1744,1.239,1745,1.239,1746,1.239,1747,1.239,1748,1.239,1749,1.239,1750,2.029,1751,2.979,1752,2.577,1753,1.239,1754,1.239,1755,1.239,1756,1.239,1757,2.029,1758,1.239,1759,1.239,1760,1.239,1761,1.239,1762,1.239,1763,1.239,1764,1.239,1765,1.354,1766,2.029,1767,1.239,1768,1.239,1769,1.239,1770,1.194,1771,1.239,1772,1.239,1773,1.239,1774,1.239,1775,1.239,1776,1.239,1777,1.239,1778,1.239,1779,1.239,1780,1.239,1781,1.239,1782,1.239,1783,1.239,1784,2.979,1785,1.239,1786,1.239,1787,1.239,1788,1.239,1789,1.239,1790,1.239,1791,1.194,1792,1.239,1793,1.239,1794,2.029,1795,1.239,1796,2.029,1797,1.239,1798,1.239,1799,2.029,1800,1.239,1801,1.239,1802,1.239,1803,1.239,1804,1.239,1805,2.577,1806,1.239,1807,1.239,1808,1.239,1809,1.239,1810,1.239,1811,1.239,1812,1.239,1813,1.239,1814,1.239,1815,1.239,1816,1.239,1817,1.239,1818,1.239,1819,1.049,1820,1.194,1821,1.239,1822,1.239,1823,1.049,1824,1.239,1825,1.239,1826,2.029,1827,3.287,1828,1.049,1829,1.239,1830,1.239,1831,1.239,1832,1.239,1833,1.239,1834,1.239,1835,2.029,1836,1.239,1837,1.239,1838,1.956,1839,1.239,1840,1.154,1841,1.239,1842,1.239,1843,1.239,1844,1.239,1845,1.239,1846,1.239]],["title/interfaces/DetailPaneConfig.html",[0,0.074,1518,2.397]],["body/interfaces/DetailPaneConfig.html",[0,0.12,1,2.189,2,0.439,3,0.04,4,0.032,5,0.028,8,0.131,9,1.613,10,3.412,12,0.277,13,0.447,14,0.197,15,2.663,18,0.241,19,0.008,20,1.077,22,0.894,25,1.239,26,0.144,27,1.558,28,1.121,30,1.895,34,1.378,36,1.816,39,0.85,40,2.048,42,1.053,47,0.739,50,0.875,52,0.56,53,1.835,54,1.121,55,3.181,56,1.896,59,0.85,60,1.249,61,2.077,62,0.791,63,1.732,64,1.925,66,1.01,67,0.83,69,2.709,71,0.899,73,0.454,74,1.583,77,1.183,78,0.077,80,0.871,81,0.918,83,1.132,84,2.252,85,0.623,86,2.876,87,1.613,88,0.994,90,3.206,91,0.677,93,3.673,96,0.956,99,0.972,101,2.075,102,0.723,108,2.048,109,1.233,111,2.252,114,0.597,115,0.85,118,1.292,120,0.871,127,0.756,128,1.766,129,1.108,131,0.761,132,1.295,134,0.921,139,1.462,140,0.917,143,2.269,145,2.096,146,0.85,149,1.59,150,0.003,151,0.003,152,0.002,159,0.561,161,1.628,162,1.199,165,0.623,171,0.413,173,2.009,174,0.208,177,0.421,179,0.581,181,1.199,182,0.83,183,0.49,189,2.256,190,1.04,195,0.556,206,0.941,210,0.342,216,0.391,217,0.723,222,0.845,225,1.199,226,1.963,232,0.597,266,0.756,272,0.917,276,0.78,282,1.023,283,3.303,285,1.292,290,0.997,292,2.451,306,0.486,309,1.212,312,1.407,317,1.724,321,1.724,323,0.692,326,1.914,327,2.607,341,1.724,343,1.407,396,1.391,405,0.496,432,0.85,452,0.78,455,0.791,463,0.219,473,1.19,510,1.21,512,1.358,522,1.096,524,1.391,533,1.437,575,2.199,582,1.402,594,0.677,595,0.796,596,1.377,601,0.707,603,0.372,605,0.405,606,0.705,607,0.677,613,1.085,617,1.777,627,1.682,628,2.456,645,1.158,647,1.01,651,1.157,659,0.597,662,0.609,690,0.677,691,0.707,692,1.04,696,0.649,717,0.622,719,1.21,724,1.925,726,1.463,729,0.83,731,1.571,745,1.775,759,0.739,763,0.622,773,1.086,789,0.85,816,1.086,820,0.773,822,0.994,844,1.023,851,0.584,854,0.739,916,1.766,922,1.121,927,0.609,928,1.835,950,1.857,951,1.502,952,2.125,954,0.692,956,2.636,957,2.195,963,1.214,966,1.023,967,0.83,969,1.607,970,1.158,971,1.158,991,2.479,1004,2.869,1014,0.967,1015,0.967,1017,0.871,1018,0.677,1019,0.894,1022,0.941,1023,1.683,1024,1.607,1025,1.956,1031,0.83,1032,2.199,1033,3.106,1034,1.295,1035,1.857,1044,1.989,1049,0.967,1050,2.322,1054,0.941,1060,1.815,1061,2.663,1062,1.683,1063,0.967,1065,0.85,1070,1.04,1073,0.756,1077,1.644,1083,1.21,1088,0.894,1092,2.092,1098,0.894,1102,2.595,1103,2.64,1112,1.541,1115,1.541,1127,1.674,1132,2.322,1173,1.724,1178,0.871,1182,2.529,1195,1.541,1202,0.941,1211,1.053,1212,0.83,1235,1.426,1238,2.009,1240,1.583,1241,1.183,1242,1.391,1261,1.501,1265,1.023,1268,1.121,1278,1.121,1321,1.053,1322,1.627,1330,0.994,1332,3.521,1395,0.871,1411,0.756,1427,0.917,1430,2.781,1431,1.121,1432,2.035,1433,1.627,1434,2.035,1435,1.244,1436,1.158,1437,1.244,1438,1.963,1439,2.491,1440,2.79,1441,1.244,1442,2.198,1443,2.035,1444,1.896,1445,0.941,1446,1.244,1447,1.963,1448,2.584,1449,2.035,1450,0.635,1451,1.501,1452,0.941,1453,1.086,1454,1.199,1455,0.83,1456,1.023,1457,1.266,1458,2.491,1459,3.612,1460,3.068,1461,1.199,1462,2.407,1463,1.158,1464,1.121,1465,1.121,1466,1.053,1467,1.963,1468,2.329,1469,1.158,1470,1.199,1471,1.199,1472,2.781,1473,1.199,1474,4.479,1475,1.896,1476,1.199,1477,2.491,1478,1.896,1479,3.187,1480,2.009,1481,1.244,1482,1.777,1483,1.244,1484,1.835,1485,1.244,1486,2.986,1487,1.896,1488,1.244,1489,1.244,1490,2.035,1491,1.199,1492,2.879,1493,1.244,1494,2.189,1495,1.896,1496,2.035,1497,1.244,1498,2.035,1499,2.035,1500,2.781,1501,2.584,1502,1.086,1503,1.053,1504,1.199,1505,1.244,1506,1.244,1507,1.023,1508,3.294,1509,4.249,1510,2.584,1511,1.244,1512,1.244,1513,4.541,1514,1.158,1515,2.493,1516,2.986,1517,4.032,1518,1.896,1519,1.244,1520,2.407,1521,1.053,1522,0.85,1523,1.244,1524,1.244,1525,3.176,1526,1.244,1527,2.407,1528,0.894,1529,0.967,1530,1.244,1531,2.125,1532,1.244,1533,1.158,1534,2.035,1535,2.035,1536,1.244,1537,1.244,1538,1.724,1539,1.121,1540,1.244,1541,1.244,1542,0.871,1543,1.244,1544,1.963,1545,2.584,1546,1.244,1547,1.244,1548,1.244,1549,2.035,1550,1.244,1551,2.035,1552,1.244,1553,2.584,1554,1.244,1555,1.158,1556,1.158,1557,1.244,1558,2.035,1559,1.244,1560,1.244,1561,1.244,1562,1.244,1563,1.244,1564,1.244,1565,1.199,1566,1.244,1567,2.035,1568,1.244,1569,1.199,1570,1.244,1571,1.81,1572,1.244,1573,2.584,1574,2.491,1575,1.244,1576,1.244,1577,3.536,1578,1.244,1579,2.035,1580,1.244,1581,1.244,1582,2.035,1583,2.035,1584,1.244,1585,1.244,1586,1.244,1587,1.121,1588,1.244,1589,1.244,1590,1.244,1591,1.244,1592,1.244,1593,1.244,1594,1.244,1595,2.986,1596,2.035,1597,2.035,1598,1.244,1599,1.244,1600,1.244,1601,1.244,1602,1.244,1603,1.244,1604,2.035,1605,2.035,1606,2.035,1607,2.035,1608,2.584,1609,1.244,1610,1.244,1611,1.244,1612,1.244,1613,2.035,1614,2.035,1615,2.986,1616,1.244,1617,1.244,1618,1.244,1619,1.244,1620,1.244,1621,2.986,1622,2.986,1623,0.967,1624,1.244,1625,1.244,1626,2.986,1627,2.035,1628,1.244,1629,1.244,1630,1.244,1631,2.584,1632,1.244,1633,1.199,1634,1.199,1635,1.244,1636,1.244,1637,1.244,1638,1.244,1639,1.244,1640,1.244,1641,1.244,1642,1.244,1643,1.244,1644,1.244,1645,1.244,1646,1.244,1647,1.244,1648,2.035,1649,1.244,1650,1.244,1651,1.244,1652,1.244,1653,1.244,1654,1.121,1655,1.244,1656,1.158,1657,1.244,1658,1.244,1659,1.244,1660,1.244,1661,1.244,1662,1.244,1663,1.244,1664,1.244,1665,1.244,1666,1.244,1667,1.244,1668,1.244,1669,1.244,1670,1.244,1671,1.244,1672,0.917,1673,1.244,1674,2.035,1675,1.244,1676,1.199,1677,1.244,1678,1.244,1679,1.244,1680,1.244,1681,2.035,1682,2.456,1683,1.244,1684,1.244,1685,1.244,1686,1.244,1687,1.244,1688,2.035,1689,2.035,1690,2.035,1691,1.244,1692,2.584,1693,2.986,1694,2.035,1695,1.244,1696,1.244,1697,1.244,1698,1.244,1699,1.244,1700,1.244,1701,1.244,1702,1.158,1703,1.244,1704,1.244,1705,1.244,1706,0.739,1707,1.244,1708,1.244,1709,1.244,1710,1.244,1711,1.244,1712,1.244,1713,1.244,1714,1.244,1715,1.244,1716,1.158,1717,1.199,1718,1.244,1719,1.244,1720,2.035,1721,2.035,1722,1.963,1723,1.244,1724,1.244,1725,2.035,1726,1.244,1727,2.035,1728,1.244,1729,1.244,1730,1.244,1731,1.244,1732,1.244,1733,1.244,1734,1.199,1735,1.244,1736,1.199,1737,1.244,1738,1.244,1739,1.244,1740,2.035,1741,1.244,1742,1.244,1743,1.244,1744,1.244,1745,1.244,1746,1.244,1747,1.244,1748,1.244,1749,1.244,1750,2.035,1751,2.986,1752,2.584,1753,1.244,1754,1.244,1755,1.244,1756,1.244,1757,2.035,1758,1.244,1759,1.244,1760,1.244,1761,1.244,1762,1.244,1763,1.244,1764,1.244,1765,1.358,1766,2.035,1767,1.244,1768,1.244,1769,1.244,1770,1.199,1771,1.244,1772,1.244,1773,1.244,1774,1.244,1775,1.244,1776,1.244,1777,1.244,1778,1.244,1779,1.244,1780,1.244,1781,1.244,1782,1.244,1783,1.244,1784,2.986,1785,1.244,1786,1.244,1787,1.244,1788,1.244,1789,1.244,1790,1.244,1791,1.199,1792,1.244,1793,1.244,1794,2.035,1795,1.244,1796,2.035,1797,1.244,1798,1.244,1799,2.035,1800,1.244,1801,1.244,1802,1.244,1803,1.244,1804,1.244,1805,2.584,1806,1.244,1807,1.244,1808,1.244,1809,1.244,1810,1.244,1811,1.244,1812,1.244,1813,1.244,1814,1.244,1815,1.244,1816,1.244,1817,1.244,1818,1.244,1819,1.053,1820,1.199,1821,1.244,1822,1.244,1823,1.053,1824,1.244,1825,1.244,1826,2.035,1827,3.294,1828,1.053,1829,1.244,1830,1.244,1831,1.244,1832,1.244,1833,1.244,1834,1.244,1835,2.035,1836,1.244,1837,1.244,1838,1.963,1839,1.244,1840,1.158,1841,1.244,1842,1.244,1843,1.244,1844,1.244,1845,1.244,1846,1.244]],["title/interfaces/DetailRowConfig.html",[0,0.074,1514,2.397]],["body/interfaces/DetailRowConfig.html",[0,0.12,1,2.179,2,0.437,3,0.04,4,0.032,5,0.028,8,0.13,9,1.608,10,3.405,12,0.296,13,0.446,14,0.196,15,2.657,18,0.256,19,0.008,20,1.073,22,0.888,25,1.234,26,0.143,27,1.552,28,1.114,30,1.89,34,1.376,36,1.814,39,0.845,40,2.042,42,1.047,47,0.735,50,0.873,52,0.557,53,1.825,54,1.114,55,3.177,56,1.886,59,0.849,60,1.246,61,2.071,62,0.787,63,1.727,64,1.92,66,1.006,67,0.825,69,2.7,71,0.895,73,0.454,74,1.575,77,1.177,78,0.077,80,0.866,81,0.913,83,1.127,84,2.244,85,0.621,86,2.867,87,1.608,88,0.988,90,3.201,91,0.673,93,3.666,96,0.954,99,0.968,101,2.07,102,0.718,108,2.042,109,1.232,111,2.244,114,0.593,115,0.849,118,1.287,120,0.866,127,0.751,128,1.759,129,1.102,131,0.77,132,1.289,134,0.918,139,1.457,140,0.911,143,2.263,145,2.089,146,0.845,149,1.586,150,0.003,151,0.003,152,0.002,159,0.557,161,1.626,162,1.192,165,0.621,171,0.411,173,2,174,0.207,177,0.419,179,0.579,181,1.192,182,0.825,183,0.489,189,2.246,190,1.034,195,0.553,206,0.935,210,0.34,216,0.39,217,0.718,222,0.844,225,1.192,226,1.953,232,0.596,266,0.751,272,0.911,276,0.776,282,1.017,283,3.298,285,1.287,290,0.992,292,2.445,306,0.483,309,1.208,312,1.404,317,1.715,321,1.715,323,0.688,326,1.908,327,2.598,341,1.715,343,1.401,396,1.384,405,0.493,432,0.845,452,0.776,455,0.787,463,0.218,473,1.187,510,1.204,512,1.351,522,1.091,524,1.384,533,1.431,575,2.193,582,1.398,594,0.673,595,0.792,596,1.371,601,0.703,603,0.37,605,0.402,606,0.701,607,0.673,613,1.079,617,1.768,627,1.677,628,2.447,645,1.151,647,1.006,651,1.151,659,0.593,662,0.605,690,0.673,691,0.703,692,1.034,696,0.645,717,0.618,719,1.204,724,1.92,726,1.455,729,0.825,731,1.564,745,1.768,759,0.735,763,0.618,773,1.079,789,0.845,816,1.079,820,0.769,822,0.988,844,1.017,851,0.581,854,0.735,916,1.759,922,1.114,927,0.605,928,1.825,950,1.849,951,1.495,952,2.121,954,0.688,956,2.631,957,2.19,963,1.209,966,1.017,967,0.825,969,1.6,970,1.151,971,1.151,991,2.473,1004,2.867,1014,0.961,1015,0.961,1017,0.866,1018,0.673,1019,0.888,1022,0.935,1023,1.676,1024,1.6,1025,1.947,1031,0.825,1032,2.193,1033,3.164,1034,1.289,1035,1.849,1044,1.984,1049,0.961,1050,2.553,1054,0.935,1060,1.808,1061,2.657,1062,1.676,1063,0.961,1065,0.845,1070,1.034,1073,0.751,1077,1.637,1083,1.204,1088,0.888,1092,2.084,1098,0.888,1102,2.628,1103,2.635,1112,1.533,1115,1.533,1127,1.666,1132,2.313,1173,1.715,1178,0.866,1182,2.52,1195,1.533,1202,0.935,1211,1.047,1212,0.825,1235,1.419,1238,2,1240,1.575,1241,1.177,1242,1.384,1261,1.493,1265,1.017,1268,1.114,1278,1.114,1321,1.047,1322,1.619,1330,0.988,1332,3.513,1395,0.866,1411,0.751,1427,0.911,1430,2.771,1431,1.114,1432,2.025,1433,1.619,1434,2.025,1435,1.236,1436,1.151,1437,1.236,1438,1.953,1439,2.481,1440,2.781,1441,1.236,1442,2.19,1443,2.025,1444,1.886,1445,0.935,1446,1.236,1447,1.953,1448,2.573,1449,2.025,1450,0.631,1451,1.493,1452,0.935,1453,1.079,1454,1.192,1455,0.825,1456,1.017,1457,1.259,1458,2.481,1459,3.607,1460,3.058,1461,1.192,1462,2.396,1463,1.151,1464,1.114,1465,1.114,1466,1.047,1467,1.953,1468,2.319,1469,1.151,1470,1.192,1471,1.192,1472,2.771,1473,1.192,1474,4.473,1475,1.886,1476,1.192,1477,2.481,1478,1.886,1479,3.356,1480,2,1481,1.236,1482,1.768,1483,1.236,1484,1.825,1485,1.236,1486,2.975,1487,1.886,1488,1.236,1489,1.236,1490,2.025,1491,1.192,1492,2.868,1493,1.236,1494,2.179,1495,1.886,1496,2.025,1497,1.236,1498,2.025,1499,2.025,1500,2.771,1501,2.573,1502,1.079,1503,1.047,1504,1.192,1505,1.236,1506,1.236,1507,1.017,1508,3.283,1509,4.24,1510,2.573,1511,1.236,1512,1.236,1513,4.589,1514,1.886,1515,2.485,1516,3.723,1517,3.723,1518,1.151,1519,1.236,1520,2.396,1521,1.047,1522,0.845,1523,1.236,1524,1.236,1525,3.165,1526,1.236,1527,2.396,1528,0.888,1529,0.961,1530,1.236,1531,2.116,1532,1.236,1533,1.151,1534,2.025,1535,2.025,1536,1.236,1537,1.236,1538,1.715,1539,1.114,1540,1.236,1541,1.236,1542,0.866,1543,1.236,1544,1.953,1545,2.573,1546,1.236,1547,1.236,1548,1.236,1549,2.025,1550,1.236,1551,2.025,1552,1.236,1553,2.573,1554,1.236,1555,1.151,1556,1.151,1557,1.236,1558,2.025,1559,1.236,1560,1.236,1561,1.236,1562,1.236,1563,1.236,1564,1.236,1565,1.192,1566,1.236,1567,2.025,1568,1.236,1569,1.192,1570,1.236,1571,1.803,1572,1.236,1573,2.573,1574,2.481,1575,1.236,1576,1.236,1577,3.526,1578,1.236,1579,2.025,1580,1.236,1581,1.236,1582,2.025,1583,2.025,1584,1.236,1585,1.236,1586,1.236,1587,1.114,1588,1.236,1589,1.236,1590,1.236,1591,1.236,1592,1.236,1593,1.236,1594,1.236,1595,2.975,1596,2.025,1597,2.025,1598,1.236,1599,1.236,1600,1.236,1601,1.236,1602,1.236,1603,1.236,1604,2.025,1605,2.025,1606,2.025,1607,2.025,1608,2.573,1609,1.236,1610,1.236,1611,1.236,1612,1.236,1613,2.025,1614,2.025,1615,2.975,1616,1.236,1617,1.236,1618,1.236,1619,1.236,1620,1.236,1621,2.975,1622,2.975,1623,0.961,1624,1.236,1625,1.236,1626,2.975,1627,2.025,1628,1.236,1629,1.236,1630,1.236,1631,2.573,1632,1.236,1633,1.192,1634,1.192,1635,1.236,1636,1.236,1637,1.236,1638,1.236,1639,1.236,1640,1.236,1641,1.236,1642,1.236,1643,1.236,1644,1.236,1645,1.236,1646,1.236,1647,1.236,1648,2.025,1649,1.236,1650,1.236,1651,1.236,1652,1.236,1653,1.236,1654,1.114,1655,1.236,1656,1.151,1657,1.236,1658,1.236,1659,1.236,1660,1.236,1661,1.236,1662,1.236,1663,1.236,1664,1.236,1665,1.236,1666,1.236,1667,1.236,1668,1.236,1669,1.236,1670,1.236,1671,1.236,1672,0.911,1673,1.236,1674,2.025,1675,1.236,1676,1.192,1677,1.236,1678,1.236,1679,1.236,1680,1.236,1681,2.025,1682,2.447,1683,1.236,1684,1.236,1685,1.236,1686,1.236,1687,1.236,1688,2.025,1689,2.025,1690,2.025,1691,1.236,1692,2.573,1693,2.975,1694,2.025,1695,1.236,1696,1.236,1697,1.236,1698,1.236,1699,1.236,1700,1.236,1701,1.236,1702,1.151,1703,1.236,1704,1.236,1705,1.236,1706,0.735,1707,1.236,1708,1.236,1709,1.236,1710,1.236,1711,1.236,1712,1.236,1713,1.236,1714,1.236,1715,1.236,1716,1.151,1717,1.192,1718,1.236,1719,1.236,1720,2.025,1721,2.025,1722,1.953,1723,1.236,1724,1.236,1725,2.025,1726,1.236,1727,2.025,1728,1.236,1729,1.236,1730,1.236,1731,1.236,1732,1.236,1733,1.236,1734,1.192,1735,1.236,1736,1.192,1737,1.236,1738,1.236,1739,1.236,1740,2.025,1741,1.236,1742,1.236,1743,1.236,1744,1.236,1745,1.236,1746,1.236,1747,1.236,1748,1.236,1749,1.236,1750,2.025,1751,2.975,1752,2.573,1753,1.236,1754,1.236,1755,1.236,1756,1.236,1757,2.025,1758,1.236,1759,1.236,1760,1.236,1761,1.236,1762,1.236,1763,1.236,1764,1.236,1765,1.351,1766,2.025,1767,1.236,1768,1.236,1769,1.236,1770,1.192,1771,1.236,1772,1.236,1773,1.236,1774,1.236,1775,1.236,1776,1.236,1777,1.236,1778,1.236,1779,1.236,1780,1.236,1781,1.236,1782,1.236,1783,1.236,1784,2.975,1785,1.236,1786,1.236,1787,1.236,1788,1.236,1789,1.236,1790,1.236,1791,1.192,1792,1.236,1793,1.236,1794,2.025,1795,1.236,1796,2.025,1797,1.236,1798,1.236,1799,2.025,1800,1.236,1801,1.236,1802,1.236,1803,1.236,1804,1.236,1805,2.573,1806,1.236,1807,1.236,1808,1.236,1809,1.236,1810,1.236,1811,1.236,1812,1.236,1813,1.236,1814,1.236,1815,1.236,1816,1.236,1817,1.236,1818,1.236,1819,1.047,1820,1.192,1821,1.236,1822,1.236,1823,1.047,1824,1.236,1825,1.236,1826,2.025,1827,3.283,1828,1.047,1829,1.236,1830,1.236,1831,1.236,1832,1.236,1833,1.236,1834,1.236,1835,2.025,1836,1.236,1837,1.236,1838,1.953,1839,1.236,1840,1.151,1841,1.236,1842,1.236,1843,1.236,1844,1.236,1845,1.236,1846,1.236]],["title/classes/DomUtil.html",[78,0.077,2613,3.43]],["body/classes/DomUtil.html",[3,0.117,4,0.094,5,0.083,8,0.385,12,0.239,14,0.581,18,0.226,19,0.008,25,2.284,26,0.117,38,3.444,59,0.886,73,0.483,77,3.054,78,0.109,85,1.068,150,0.005,151,0.007,152,0.005,154,1.757,165,1.068,174,0.613,176,1.217,177,0.597,195,0.788,216,0.33,222,0.761,232,0.428,288,2.387,360,4.882,452,2.086,463,0.646,510,2.633,522,1.554,605,1.71,647,1.732,742,3.992,795,3.752,1085,3.123,1240,3.847,1262,4.797,1374,6.455,1539,3.992,1848,5.243,2425,5.554,2613,5.903,2614,6.926,2615,7.814,2616,7.814,2617,8.937,2618,6.462,2619,7.814,2620,7.814,2621,8.049,2622,6.926,2623,5.903,2624,7.445,2625,7.814,2626,7.814,2627,7.814,2628,6.462,2629,6.462,2630,5.243,2631,6.462,2632,6.462]],["title/components/DropdownComponent.html",[183,0.291,669,1.759]],["body/components/DropdownComponent.html",[0,0.059,3,0.065,4,0.052,5,0.046,8,0.314,9,1.461,10,2.453,12,0.194,13,0.447,14,0.617,15,3.062,18,0.319,19,0.008,20,1.615,23,3.975,26,0.065,27,1.556,30,1.948,34,1.103,36,1.167,42,1.722,50,0.76,52,0.821,57,2.324,59,0.83,60,0.718,62,2.478,63,2.031,64,2.552,67,1.99,70,2.709,71,0.898,72,2.688,73,0.509,74,2.748,75,3.843,76,2.549,77,2.054,78,0.124,79,1.46,80,2.09,81,0.917,85,0.49,87,1.461,96,1.114,98,3.112,101,2.167,105,5.188,109,1.245,110,2.709,115,0.867,118,1.016,119,3.671,120,1.424,121,2.709,122,2.709,123,4,124,2.549,125,2.709,126,2.549,128,3.303,131,0.621,132,1.898,134,1.217,136,2.319,142,4.354,145,3.368,146,2.039,147,2.319,148,2.688,149,0.779,150,0.003,151,0.004,152,0.003,156,0.828,161,1.657,165,0.72,170,2.09,174,0.874,176,1.293,177,0.787,179,0.827,183,0.468,187,1.39,189,2.605,190,1.523,195,0.837,207,4.55,210,1.141,216,0.319,218,2.709,219,1.236,222,0.513,232,0.413,239,6.776,283,3.639,285,1.492,290,1.907,306,0.795,307,3.377,309,0.748,323,1.131,394,2.384,405,0.811,410,3.513,452,1.143,463,0.359,530,1.813,582,1.12,594,1.107,595,1.167,596,1.083,597,1.107,598,1.39,601,1.156,604,1.356,605,1.719,606,1.807,607,1.624,613,1.589,646,1.131,647,1.167,648,1.966,649,3.027,650,1.58,651,1.156,652,1.58,653,2.319,654,1.083,655,1.46,656,1.58,657,1.356,658,1.58,659,0.975,660,1.58,661,1.294,662,1.907,663,1.324,664,3.027,665,1.236,666,1.324,667,1.356,668,1.236,669,2.661,670,1.58,671,1.424,672,1.58,673,1.46,674,1.356,675,2.213,676,1.58,677,1.356,678,3.027,679,1.324,680,2.476,681,1.324,682,1.829,683,1.324,684,2.319,685,1.324,686,1.424,687,1.58,688,1.294,689,1.46,690,1.107,691,1.156,692,1.038,693,1.016,694,1.58,695,1.39,696,1.06,697,1.58,698,1.324,699,1.538,700,1.58,701,1.294,702,2.539,703,1.58,738,1.538,744,1.696,760,4.011,788,2.797,844,1.672,914,2.415,916,1.39,950,2.797,951,2.263,1016,3.784,1032,1.855,1034,1.898,1044,1.589,1059,2.09,1094,1.893,1103,1.898,1105,2.688,1116,2.199,1175,1.356,1212,1.356,1238,1.58,1239,3.23,1245,2.384,1247,2.688,1249,2.876,1330,1.625,1391,3.975,1403,2.201,1404,3.975,1409,2.909,1444,4.037,1521,2.993,1542,2.09,1571,1.424,1682,1.672,2352,2.688,2482,4.693,2549,2.709,2550,2.709,2630,2.909,2633,2.909,2634,4.664,2635,5.776,2636,6.203,2637,5.525,2638,4.664,2639,5.525,2640,5.525,2641,5.525,2642,5.525,2643,5.525,2644,5.262,2645,5.262,2646,6.482,2647,5.525,2648,5.525,2649,6.482,2650,5.525,2651,5.525,2652,5.525,2653,5.525,2654,5.525,2655,5.525,2656,5.262,2657,5.525,2658,3.586,2659,4.664,2660,4.664,2661,6.087,2662,4.664,2663,3.586,2664,5.188,2665,4.664,2666,3.586,2667,3.586,2668,3.586,2669,3.586,2670,3.586,2671,4.27,2672,5.262,2673,5.058,2674,3.586,2675,5.525,2676,3.586,2677,3.586,2678,4.664,2679,4.664,2680,3.586,2681,4.664,2682,3.586,2683,7.183,2684,3.586,2685,3.586,2686,3.586,2687,7.329,2688,6.776,2689,3.586,2690,3.586,2691,3.586,2692,4.664,2693,3.586,2694,3.586,2695,3.586,2696,3.586,2697,3.586,2698,3.586,2699,3.178,2700,2.909,2701,2.709,2702,3.178,2703,3.178,2704,3.178,2705,3.178,2706,3.178,2707,3.178,2708,4.664,2709,3.178,2710,3.178,2711,3.178,2712,3.178,2713,4.664,2714,2.909,2715,3.178,2716,3.178,2717,3.178,2718,3.178,2719,3.178,2720,3.178,2721,3.178,2722,3.178,2723,3.178,2724,3.178,2725,2.549,2726,3.178,2727,3.178,2728,3.178,2729,3.178,2730,5.262,2731,3.178,2732,3.586]],["title/interfaces/DropdownItem.html",[0,0.074,2701,3.43]],["body/interfaces/DropdownItem.html",[0,0.079,2,0.966,3,0.088,4,0.07,5,0.062,8,0.288,9,1.339,10,2.249,12,0.24,13,0.551,14,0.756,15,3.166,18,0.286,19,0.008,20,1.757,23,3.644,26,0.088,27,1.426,30,2.086,34,0.854,36,1.437,50,0.867,57,2.354,59,0.735,62,2.339,63,2.033,64,2.76,67,1.825,70,4.898,71,1.624,72,4.001,73,0.533,74,3.228,75,3.924,76,5.566,77,2.413,78,0.148,79,2.641,80,1.916,81,1.657,85,0.66,87,1.8,96,1.142,98,2.938,101,1.838,105,4.898,109,1.307,110,3.644,115,0.831,118,1.838,119,4.195,120,2.575,121,4.898,122,4.898,123,5.399,124,4.608,125,4.898,126,5.566,128,3.166,131,0.41,132,1.74,134,0.907,136,2.126,142,4.464,145,3.388,146,1.869,147,2.126,148,2.465,149,1.048,150,0.004,151,0.005,152,0.004,161,1.505,177,0.445,183,0.469,189,2.388,190,1.397,207,4.391,210,1.011,216,0.374,218,3.644,222,0.632,232,0.485,283,3.699,290,1.8,307,3.096,309,1.352,394,2.186,410,3.414,463,0.483,530,1.662,582,1.027,605,0.89,606,0.947,607,1.489,648,1.521,669,1.869,702,1.965,738,2.07,744,1.555,760,3.876,788,2.641,914,3.25,916,1.869,950,2.641,951,2.136,1016,3.625,1032,1.701,1034,1.74,1044,1.457,1059,1.916,1094,2.547,1103,1.74,1105,2.465,1116,2.016,1175,1.825,1212,1.825,1238,2.126,1239,2.962,1245,2.186,1247,2.465,1249,2.637,1391,3.644,1404,3.644,1444,3.867,1521,2.316,1542,1.916,1571,1.916,2352,2.465,2633,3.914,2634,4.276,2635,5.532,2636,5.942,2637,4.276,2638,4.276,2639,4.276,2640,4.276,2641,4.276,2642,4.276,2643,4.276,2646,4.276,2647,4.276,2648,4.276,2649,4.276,2650,4.276,2651,4.276,2652,4.276,2653,4.276,2654,4.276,2655,4.276,2657,4.276,2659,4.276,2660,4.276,2661,5.746,2662,4.276,2664,4.898,2665,4.276,2671,3.914,2673,3.914,2675,5.746,2678,4.276,2679,4.276,2681,4.276,2683,7.241,2687,7.456,2688,6.491,2692,4.276,2699,4.276,2700,5.261,2701,4.898,2702,4.276,2703,4.276,2704,4.276,2705,4.276,2706,4.276,2707,4.276,2708,5.746,2709,4.276,2710,4.276,2711,4.276,2712,4.276,2713,5.746,2714,3.914,2715,4.276,2716,4.276,2717,4.276,2718,4.276,2719,4.276,2720,4.276,2721,4.276,2722,4.276,2723,4.276,2724,4.276,2725,3.429,2726,4.276,2727,4.276,2728,4.276,2729,4.276]],["title/modules/DropdownModule.html",[2076,1.496,2733,3.058]],["body/modules/DropdownModule.html",[3,0.121,4,0.097,5,0.085,19,0.008,26,0.121,78,0.113,145,2.404,150,0.006,151,0.007,152,0.006,216,0.477,217,2.195,463,0.666,612,3.106,646,2.101,669,3.682,695,3.682,863,2.245,1017,2.646,1018,2.056,1150,2.012,1175,2.52,1450,1.929,1706,2.245,1878,5.034,2076,2.195,2733,6.4,2734,3.019,2735,3.019,2736,3.857,2737,3.298,2738,2.714,2739,4.213,2740,5.905,2741,5.905,2742,5.905,2743,5.905,2744,5.615,2745,3.94,2746,6.663,2747,4.351,2748,3.298,2749,4.736,2750,3.199,2751,3.298,2752,3.298,2753,3.298,2754,3.298,2755,3.298,2756,4.512,2757,3.404,2758,4.067,2759,5.362,2760,4.689,2761,4.512,2762,5.034,2763,6.663,2764,6.663]],["title/directives/DynamicDropdownPositionDirective.html",[648,1.432,695,1.759]],["body/directives/DynamicDropdownPositionDirective.html",[3,0.079,4,0.064,5,0.056,8,0.26,12,0.161,13,0.59,14,0.708,18,0.299,19,0.008,22,1.773,25,1.184,26,0.079,36,1.34,42,3.916,50,0.83,59,0.851,63,2.082,64,1.343,75,1.868,78,0.074,84,2.342,96,0.569,99,0.803,101,1.968,108,1.535,118,1.234,129,1.343,131,0.693,134,0.971,145,3.433,149,1.712,150,0.004,151,0.005,152,0.004,159,1.545,161,1.811,165,0.826,170,2.401,171,1.138,174,0.854,176,1.308,177,0.641,179,0.435,183,0.279,195,0.846,216,0.355,222,0.871,232,0.522,276,1.313,306,0.965,321,2.09,452,1.508,463,0.435,473,0.787,533,1.373,535,2.992,582,1.287,583,1.773,590,2.299,604,1.646,605,1.115,627,1.75,639,3.289,648,2.365,692,1.26,695,3.054,696,1.787,717,2.126,720,3.666,744,1.948,760,2.992,788,3.609,844,3.803,951,1.434,959,2.448,1018,2.315,1026,2.379,1044,2.38,1059,1.729,1061,2.342,1070,1.26,1087,2.299,1088,1.773,1094,3.191,1116,1.819,1150,2.266,1178,1.729,1240,3.306,1245,3.79,1247,3.547,1249,3.795,1262,5.317,1271,2.932,1290,2.794,1322,3.146,1352,5.245,1364,3.289,1426,3.879,1450,1.26,1468,2.224,1676,2.379,1716,2.299,1820,2.379,1867,4.071,1870,3.936,1878,4.566,1883,3.561,1945,3.532,2011,5.357,2082,3.532,2133,6.618,2158,3.532,2200,4.296,2482,3.71,2489,3.532,2608,3.289,2621,5.357,2623,3.289,2624,5.357,2635,6.162,2636,3.532,2757,2.224,2765,7.352,2766,3.532,2767,6.044,2768,7.559,2769,6.044,2770,6.044,2771,6.044,2772,6.943,2773,6.044,2774,6.044,2775,6.943,2776,6.943,2777,7.501,2778,6.943,2779,7.501,2780,6.943,2781,7.501,2782,6.044,2783,6.044,2784,6.943,2785,6.044,2786,6.943,2787,6.044,2788,4.353,2789,7.501,2790,5.745,2791,6.943,2792,6.943,2793,4.353,2794,4.353,2795,4.353,2796,6.044,2797,4.353,2798,6.044,2799,4.353,2800,3.858,2801,4.353,2802,4.353,2803,4.353,2804,4.353,2805,3.532,2806,4.353,2807,4.353,2808,4.353,2809,7.501,2810,4.353,2811,4.353,2812,4.353,2813,4.353,2814,4.353,2815,4.353,2816,4.353,2817,4.353,2818,4.353,2819,4.353,2820,4.353,2821,4.353,2822,6.044,2823,7.501,2824,3.532,2825,5.357,2826,3.532,2827,3.858,2828,6.648,2829,7.501,2830,4.353,2831,3.532,2832,3.858,2833,4.353,2834,4.353,2835,4.353,2836,4.353,2837,4.353,2838,4.353,2839,4.353,2840,4.353,2841,4.353,2842,4.353,2843,6.044,2844,4.353,2845,6.044,2846,4.353,2847,6.044,2848,4.353,2849,4.353,2850,4.353,2851,4.353,2852,6.943,2853,4.353,2854,3.858,2855,4.353,2856,5.357,2857,4.353,2858,4.353,2859,6.943,2860,4.353,2861,6.044,2862,4.353,2863,6.943,2864,4.353,2865,6.943,2866,7.501,2867,7.501,2868,4.353,2869,4.353,2870,4.353,2871,4.353,2872,4.353,2873,4.353,2874,6.044,2875,4.353,2876,6.044,2877,4.353,2878,4.353,2879,6.943,2880,4.353,2881,6.943,2882,4.353,2883,4.353,2884,3.858,2885,4.353,2886,4.353,2887,4.353,2888,4.353,2889,4.353,2890,4.353,2891,4.353,2892,4.353,2893,4.353,2894,6.044,2895,4.353,2896,4.353,2897,4.353,2898,4.353]],["title/components/ErrorBannerComponent.html",[183,0.291,671,1.803]],["body/components/ErrorBannerComponent.html",[3,0.134,4,0.072,5,0.063,8,0.293,12,0.182,13,0.558,14,0.59,18,0.317,19,0.008,26,0.089,30,1.749,36,1.09,59,0.839,60,0.985,63,1.365,66,1.456,73,0.497,78,0.083,96,1.074,99,1.456,100,3.153,108,2.315,109,1.128,131,0.67,134,1.103,150,0.004,151,0.005,152,0.004,156,1.135,161,1.421,165,0.898,170,2.608,174,0.843,176,1.237,177,0.798,179,0.789,183,0.527,187,1.905,195,0.8,210,0.767,216,0.251,219,1.694,232,0.326,266,3.024,285,1.861,289,4.031,294,2.675,306,2.086,323,1.55,345,5.82,362,6.781,405,1.112,452,1.426,463,0.492,473,1.187,594,1.517,595,1.456,596,1.485,597,1.517,598,1.905,601,2.784,604,1.86,605,1.762,606,1.861,607,2.026,613,1.983,646,1.55,647,1.456,648,1.55,649,3.478,650,2.167,651,1.585,652,2.167,653,2.894,654,1.485,655,2.003,656,2.167,657,1.86,658,2.167,659,1.337,660,2.167,661,1.774,662,2.191,663,1.816,664,3.478,665,1.694,666,1.816,667,1.86,668,1.694,669,1.905,670,2.167,671,3.134,672,2.167,673,2.003,674,1.86,675,2.449,676,2.167,677,1.86,678,3.478,679,1.816,680,2.937,681,1.816,682,2.102,683,1.816,684,2.894,685,1.816,686,1.953,687,2.167,688,1.774,689,2.003,690,1.517,691,1.585,692,1.423,693,1.394,694,2.167,695,1.905,696,2.501,697,2.167,698,1.816,699,2.109,700,2.167,701,1.774,702,2.003,703,2.167,731,2.263,763,2.237,838,3.904,924,5.328,928,3.355,1009,3.722,1150,1.485,1245,2.228,1247,2.512,1377,5.328,1403,3.018,1440,3.948,1442,2.797,1538,3.153,1542,2.608,1623,3.478,1706,1.656,1883,3.868,1969,2.787,2549,3.714,2550,3.714,2552,5.328,2748,2.434,2750,2.361,2751,2.434,2752,2.434,2753,2.434,2754,2.434,2755,2.434,2899,7.283,2900,4.358,2901,9.052,2902,7.394,2903,6.567,2904,7.394,2905,8.459,2906,6.567,2907,7.394,2908,7.394,2909,8.222,2910,7.394,2911,4.917,2912,6.567,2913,6.567,2914,7.891,2915,6.567,2916,4.917,2917,4.917,2918,4.961,2919,6.567,2920,6.567,2921,4.917,2922,4.917,2923,6.567,2924,4.917,2925,4.917,2926,4.917,2927,4.917,2928,4.917,2929,7.394,2930,4.917,2931,4.917,2932,4.917,2933,4.917,2934,6.567]],["title/interfaces/ExportColumn.html",[0,0.074,2128,3.43]],["body/interfaces/ExportColumn.html",[0,0.093,2,0.8,3,0.12,4,0.058,5,0.093,8,0.238,12,0.148,13,0.483,18,0.199,19,0.008,20,1.476,26,0.152,27,1.181,30,2.113,34,1.007,35,1.233,36,1.261,40,2.546,50,0.733,58,2.433,59,0.9,60,1.745,62,1.441,66,0.885,73,0.48,75,3.404,78,0.068,83,1.26,85,0.778,86,3.575,96,1.067,97,3.018,99,1.408,101,2.407,108,2.546,109,1.311,113,2.732,114,1.802,115,0.453,131,0.648,137,2.578,145,2.053,149,1.44,150,0.003,151,0.005,152,0.003,159,1.021,161,1.604,173,2.921,177,0.612,179,0.663,183,0.364,190,1.156,210,1.373,216,0.406,217,1.316,222,0.773,231,1.346,232,0.608,266,2.876,270,2.839,288,2.101,295,2.691,306,0.885,309,1.187,311,2.441,312,0.768,321,2.732,322,1.627,343,1.756,405,1.634,463,0.4,473,1.591,533,1.794,544,2.353,550,1.548,582,1.411,605,0.737,606,0.784,607,1.233,617,4.502,628,2.653,657,1.511,724,1.233,745,1.346,763,1.132,789,1.548,806,3.598,818,4.03,822,2.578,842,2.378,851,1.064,854,2.433,863,1.346,916,1.548,920,4.189,952,2.314,956,2.876,958,3.098,989,2.839,991,1.441,1033,1.475,1060,1.96,1061,1.548,1093,1.81,1177,3.756,1212,2.152,1228,2.563,1235,1.587,1241,1.875,1242,2.205,1265,3.09,1271,2.691,1395,1.587,1411,1.376,1436,4.311,1440,3.182,1442,2.506,1445,1.714,1450,1.156,1455,2.152,1456,1.862,1466,2.732,1479,2.041,1542,1.587,1556,2.109,1587,2.041,1672,1.669,1702,2.109,1883,2.353,1927,4.71,1929,2.353,1936,4.298,1939,5.766,1941,5.86,1949,3.241,1952,4.616,1953,3.241,1954,3.241,1984,4.298,2116,3.018,2117,2.563,2118,3.018,2119,3.241,2120,5.042,2121,5.873,2122,5.042,2123,5.042,2124,3.54,2125,3.54,2126,3.54,2127,3.54,2128,5.994,2129,5.042,2130,6.304,2131,3.018,2132,3.367,2133,4.616,2134,3.54,2135,5.042,2136,4.616,2137,5.042,2138,2.816,2139,3.241,2140,4.616,2141,4.616,2142,6.193,2143,3.241,2144,3.241,2145,3.54,2146,3.54,2147,3.54,2148,5.873,2149,2.839,2150,3.018,2151,3.241,2152,3.54,2153,3.54,2154,3.54,2155,3.54,2156,3.54,2157,3.54,2158,4.616,2159,5.873,2160,3.54,2161,3.54,2162,2.839,2163,3.54,2164,3.54,2165,3.54,2166,3.54,2167,3.241,2168,3.54,2169,3.54,2170,3.54,2171,3.54,2172,3.54,2173,3.54,2174,3.54,2175,3.54,2176,3.54,2177,3.54,2178,3.54,2179,3.54,2180,5.873,2181,3.54,2182,3.54,2183,3.54,2184,3.54,2185,3.832,2186,3.54,2187,3.54,2188,3.54,2189,3.54,2190,3.54,2191,3.54,2192,3.54,2193,3.54,2194,3.54,2195,3.54,2196,3.54,2197,3.54,2198,3.54,2199,3.54,2200,4.71,2201,3.54,2202,4.616,2203,3.54,2204,4.616,2205,3.54,2206,5.042,2207,3.241,2208,3.241,2209,5.042,2210,3.54,2211,3.54,2212,3.54,2213,5.873,2214,3.54,2215,5.042,2216,3.54,2217,3.54,2218,3.54,2219,3.54,2220,6.4,2221,3.54,2222,3.54,2223,3.54,2224,3.54,2225,5.042,2226,3.54,2227,3.54,2228,3.54,2229,3.54,2230,3.54,2231,3.54,2232,3.54,2233,3.54,2234,3.54,2235,3.54,2236,3.54,2237,3.54,2238,3.54,2239,5.873,2240,3.54,2241,3.54,2242,3.54,2243,3.54,2244,3.54,2245,3.54,2246,3.54,2247,3.54,2248,3.54,2249,3.54,2250,3.54,2251,2.041,2252,3.54,2253,3.54,2254,3.54,2255,3.54,2256,3.54,2257,4.616,2258,3.54,2259,3.54,2260,3.54,2261,3.54,2262,3.54,2263,3.54,2264,3.54,2265,3.54,2266,3.54,2267,3.54,2268,3.54,2269,3.54,2270,3.54,2271,3.54,2272,3.54,2273,3.54,2274,3.54,2275,3.54,2276,3.54,2277,3.54,2278,3.54,2279,3.54,2280,3.54]],["title/classes/FilterBuilder.html",[78,0.077,2446,2.247]],["body/classes/FilterBuilder.html",[3,0.061,4,0.049,5,0.043,8,0.2,12,0.124,13,0.424,14,0.791,18,0.315,19,0.008,26,0.109,35,2.049,59,0.567,61,1.576,71,0.838,73,0.518,78,0.057,82,3.367,96,0.437,115,0.567,130,4.194,131,0.757,134,0.468,150,0.006,151,0.004,152,0.003,154,0.909,161,1.714,165,0.683,171,0.63,174,0.864,176,1.659,177,0.823,179,0.93,195,1.141,209,6.735,222,0.837,228,1.847,232,0.594,295,3.367,321,2.4,473,1.2,510,2.394,512,2.819,522,2.283,550,1.937,716,4.593,838,1.766,851,1.768,916,1.937,927,2.576,954,1.576,1032,1.762,1044,2.005,1070,1.922,1083,1.684,1085,1.684,1094,3.505,1108,2.474,1110,2.144,1178,2.961,1375,6.896,1765,1.89,1861,4.43,2005,5.725,2347,3.068,2352,1.709,2446,4.781,2448,3.629,2534,4.055,2537,4.055,2559,3.776,2577,6.708,2596,5.631,2700,4.055,2918,3.776,2935,6.904,2936,2.527,2937,4.998,2938,4.998,2939,4.998,2940,7.454,2941,4.998,2942,4.998,2943,4.998,2944,4.998,2945,4.998,2946,4.998,2947,4.998,2948,4.998,2949,4.998,2950,5.984,2951,4.998,2952,6.639,2953,6.639,2954,4.998,2955,6.639,2956,4.998,2957,4.998,2958,4.998,2959,4.998,2960,4.998,2961,4.998,2962,4.998,2963,3.345,2964,3.345,2965,4.998,2966,3.345,2967,9.192,2968,3.345,2969,3.345,2970,7.726,2971,8.499,2972,3.345,2973,3.345,2974,4.998,2975,3.345,2976,3.345,2977,4.998,2978,3.345,2979,4.998,2980,3.345,2981,4.998,2982,7.454,2983,4.998,2984,4.998,2985,3.345,2986,3.345,2987,4.998,2988,7.942,2989,8.392,2990,3.345,2991,4.998,2992,3.345,2993,3.345,2994,4.998,2995,3.345,2996,4.998,2997,3.345,2998,4.998,2999,3.345,3000,4.998,3001,3.345,3002,4.998,3003,3.345,3004,4.998,3005,3.345,3006,3.345,3007,3.345,3008,4.998,3009,3.345,3010,2.714,3011,4.43,3012,4.43,3013,4.43,3014,4.43,3015,2.964,3016,2.964,3017,7.942,3018,3.345,3019,3.345,3020,3.345,3021,3.345,3022,6.639,3023,7.726,3024,7.726,3025,4.998,3026,6.639,3027,8.864,3028,4.998,3029,7.454,3030,6.639,3031,6.639,3032,6.639,3033,6.639,3034,3.345,3035,3.345,3036,3.345,3037,3.345,3038,3.345,3039,3.345,3040,3.345,3041,4.998,3042,3.345,3043,4.998,3044,3.345,3045,4.998,3046,3.345,3047,4.998,3048,3.345,3049,3.345,3050,3.345,3051,3.345,3052,3.345,3053,3.345,3054,3.345]],["title/interfaces/FilterConfig.html",[0,0.074,1020,1.759]],["body/interfaces/FilterConfig.html",[0,0.105,2,0.955,3,0.087,4,0.07,5,0.061,8,0.285,9,2.259,12,0.176,13,0.662,14,0.7,18,0.32,19,0.008,26,0.148,35,1.472,36,1.058,45,4.128,47,1.607,50,1.004,52,1.136,59,0.884,60,1.289,61,2.458,66,1.058,73,0.501,78,0.109,96,0.841,99,1.187,109,1.041,111,1.849,112,2.291,114,1.297,115,1.002,118,1.352,131,0.662,134,0.667,149,1.036,150,0.004,151,0.005,152,0.004,154,1.98,159,1.219,161,0.917,165,0.88,171,0.898,174,0.453,179,0.918,183,0.537,216,0.446,222,0.709,232,0.556,267,2.608,269,2.437,276,1.036,290,2.022,309,1.342,322,2.966,326,1.572,334,3.504,386,2.406,463,0.477,470,2.686,473,1.163,512,2.434,530,1.644,539,3.422,550,1.849,567,2.047,570,1.943,583,1.943,587,2.916,595,1.614,603,1.092,613,1.441,659,1.297,662,1.324,665,1.644,668,1.644,675,1.381,682,1.714,693,1.824,696,1.411,717,1.824,719,1.607,724,2.247,763,1.352,783,2.437,789,1.849,818,3.845,838,2.519,842,1.994,851,2.076,863,1.607,927,2.535,949,3.124,951,2.12,952,2.21,954,1.504,957,1.472,959,2.268,963,2.283,966,2.224,967,1.804,1004,2.763,1006,1.943,1020,2.822,1021,2.879,1023,2.377,1024,2.567,1034,2.936,1055,2.519,1056,2.761,1059,1.895,1062,2.689,1070,1.381,1073,1.644,1076,2.103,1085,1.607,1098,1.943,1108,2.361,1109,2.291,1110,2.047,1113,2.519,1114,3.778,1116,1.994,1117,2.437,1118,2.519,1119,2.437,1120,2.519,1121,2.519,1122,2.162,1150,1.441,1235,1.895,1236,2.704,1241,2.12,1242,2.494,1395,1.895,1402,2.81,1411,1.644,1433,2.162,1442,1.804,1450,1.381,1451,1.994,1452,2.047,1455,2.434,1456,2.224,1457,1.682,1502,3.185,1528,2.966,1529,2.836,1531,3,1623,2.103,1672,1.994,1867,3.213,1870,2.704,1883,2.81,1951,4.47,2132,3.634,2138,2.361,2320,2.103,2321,3.213,2322,3.871,2323,3.604,2324,3.871,2325,3.061,2326,6.804,2327,5.221,2328,3.061,2329,2.929,2330,2.437,2331,2.608,2332,3.72,2334,3.061,2335,3.288,2339,2.929,2340,4.13,2342,3.061,2345,3.061,2347,2.929,2349,3.061,2351,2.81,2352,2.437,2354,3.061,2355,3.061,2358,2.608,2360,2.929,2361,3.061,2362,3.061,2363,4.13,2364,2.81,2366,2.437,2373,3.871,2374,3.871,2375,3.871,2376,3.604,2377,3.604,2378,3.604,2379,4.574,2380,3.604,2381,5.221,2382,5.221,2383,3.871,2384,3.871,2385,3.871,2386,3.871,2387,5.908,2388,3.871,2389,3.871,2390,3.871,2391,3.871,2392,3.871,2393,3.871,2394,3.871,2395,3.871,2396,3.871,2397,3.871,2398,3.213,2399,5.221,2400,3.871,2401,3.213,2402,3.604,2403,3.604,2404,3.213,2405,3.213,2406,3.604,2407,3.604]],["title/interfaces/FilterRendererSpec.html",[0,0.074,1021,1.677]],["body/interfaces/FilterRendererSpec.html",[0,0.106,2,0.96,3,0.087,4,0.07,5,0.061,8,0.286,9,2.382,12,0.177,13,0.62,18,0.32,19,0.008,26,0.148,35,1.479,36,1.062,45,4.137,47,1.614,50,1.005,52,1.138,59,0.886,60,0.96,61,2.462,66,1.062,73,0.483,78,0.109,96,0.843,99,1.191,109,1.043,111,1.857,112,2.301,114,1.303,115,1.003,118,1.358,131,0.663,134,0.67,149,1.041,150,0.004,151,0.005,152,0.004,154,1.984,159,1.225,161,0.921,165,0.882,171,0.902,174,0.455,179,0.894,183,0.566,216,0.446,222,0.711,232,0.556,267,2.619,269,2.448,276,1.041,290,2.026,309,1.522,322,2.973,326,1.579,334,3.509,386,2.537,463,0.479,470,2.691,473,1.166,512,1.812,530,1.651,539,3.492,550,1.857,567,2.056,570,1.952,583,1.952,587,2.924,595,1.618,603,1.239,613,1.447,659,1.303,662,1.33,665,1.651,668,1.651,675,1.387,682,1.719,693,2.069,696,1.417,717,1.358,719,1.614,724,2.252,763,1.358,783,2.448,789,1.857,818,3.408,838,2.53,842,2.002,851,1.944,863,1.614,927,2.562,949,3.131,951,2.126,952,2.311,954,1.511,957,1.479,959,2.573,963,2.4,966,2.234,967,1.812,1004,2.404,1006,1.952,1020,2.501,1021,3.01,1023,2.384,1024,2.753,1034,3.029,1055,3.408,1056,3.131,1059,1.903,1062,2.384,1070,1.387,1073,1.651,1076,2.112,1085,1.614,1098,1.952,1108,2.372,1109,2.301,1110,2.056,1113,2.53,1114,3.593,1116,2.002,1117,2.448,1118,2.53,1119,2.448,1120,2.53,1121,2.53,1122,2.171,1150,1.447,1235,1.903,1236,2.716,1241,2.126,1242,2.501,1395,1.903,1402,2.823,1411,1.651,1433,2.171,1442,1.812,1450,1.387,1451,2.002,1452,2.056,1455,2.441,1456,2.234,1457,1.689,1502,2.372,1528,2.973,1529,2.845,1531,2.234,1623,2.112,1672,2.002,1867,3.227,1870,2.716,1883,2.823,1951,3.962,2132,3.641,2138,2.372,2320,2.112,2321,3.227,2322,3.888,2323,3.62,2324,3.888,2325,3.075,2326,5.921,2327,5.237,2328,3.075,2329,2.941,2330,2.448,2331,2.619,2332,3.729,2334,3.075,2335,3.297,2339,2.941,2340,4.142,2342,3.075,2345,3.075,2347,2.941,2349,3.075,2351,2.823,2352,2.448,2354,3.075,2355,3.075,2358,2.619,2360,2.941,2361,3.075,2362,3.075,2363,4.142,2364,2.823,2366,2.448,2373,3.888,2374,3.888,2375,3.888,2376,3.62,2377,3.62,2378,3.62,2379,4.587,2380,3.62,2381,3.888,2382,3.888,2383,3.888,2384,3.888,2385,3.888,2386,3.888,2387,5.921,2388,3.888,2389,3.888,2390,3.888,2391,3.888,2392,3.888,2393,3.888,2394,3.888,2395,3.888,2396,3.888,2397,3.888,2398,3.227,2399,5.237,2400,3.888,2401,3.227,2402,3.62,2403,3.62,2404,3.227,2405,3.227,2406,3.62,2407,3.62]],["title/components/FilterTestHostComponent.html",[183,0.291,673,1.849]],["body/components/FilterTestHostComponent.html",[3,0.084,4,0.068,5,0.059,8,0.277,9,1.287,12,0.171,13,0.536,14,0.416,18,0.316,19,0.008,25,2.191,26,0.13,47,2.417,50,0.699,52,1.201,58,1.562,59,0.814,60,1.264,63,1.287,73,0.413,78,0.078,85,0.863,87,2.139,114,1.716,115,0.874,131,0.654,134,1.003,149,1.007,150,0.004,151,0.005,152,0.004,156,1.07,165,0.863,173,2.782,174,0.731,176,1.189,177,0.768,179,0.832,183,0.516,187,1.796,195,0.769,210,0.723,216,0.443,217,1.527,219,1.597,222,0.751,232,0.418,276,1.007,283,2.638,285,1.789,306,1.028,309,0.967,312,1.213,323,1.462,330,3.123,340,2.914,359,3.332,369,3.295,386,1.371,405,1.049,452,1.371,463,0.464,464,2.534,468,4.853,473,1.297,520,2.175,533,1.462,539,3.355,546,2.846,550,2.446,570,2.571,587,3.491,594,1.431,595,1.399,596,2.327,597,1.431,598,1.796,601,1.494,604,1.753,605,1.75,606,1.844,646,1.462,647,1.708,648,1.462,649,3.395,650,2.043,651,1.494,652,2.043,653,2.782,654,1.4,655,1.888,656,2.043,657,1.753,658,2.043,659,1.261,660,2.043,661,1.672,662,2.139,663,1.712,664,3.395,665,1.597,666,1.712,667,1.753,668,2.175,669,1.796,670,2.043,671,1.841,672,2.043,673,3.527,674,1.753,675,2.407,676,2.043,677,1.753,678,3.395,679,1.712,680,2.85,681,1.712,682,2.215,683,1.712,684,2.782,685,1.712,686,1.841,687,2.043,688,1.672,689,1.888,690,1.431,691,1.494,692,1.342,693,1.314,694,2.043,695,1.796,696,1.371,697,2.043,698,1.712,699,1.989,700,2.043,701,1.672,702,1.888,703,2.043,716,2.295,738,1.989,763,1.314,789,2.446,795,3.03,842,2.638,864,3.577,866,2.846,867,3.123,913,4.116,927,2.573,951,2.364,952,2.605,957,2.214,958,2.708,959,2.225,960,2.975,963,2.338,985,3.761,990,3.295,1004,2.739,1021,2.331,1079,3.992,1092,2.507,1102,1.431,1114,2.043,1402,2.731,1457,2.53,1484,3.666,1528,2.571,1538,3.03,1571,2.507,1717,3.45,2065,2.731,2076,2.079,2409,3.224,2454,3.123,2588,3.295,2598,3.502,2664,3.502,2736,2.101,2738,1.888,2747,2.534,3055,6.539,3056,3.761,3057,6.311,3058,7.176,3059,7.176,3060,7.176,3061,4.636,3062,4.947,3063,4.636,3064,6.311,3065,7.369,3066,7.176,3067,4.636,3068,6.311,3069,4.636,3070,4.636,3071,6.311,3072,4.251,3073,4.636,3074,5.822,3075,4.636,3076,4.636,3077,4.109,3078,4.636,3079,4.109,3080,3.502,3081,4.636,3082,4.109,3083,4.109,3084,4.109,3085,4.109,3086,5.121,3087,4.109,3088,6.311,3089,6.311,3090,6.311,3091,6.311,3092,3.761,3093,4.636,3094,4.636]],["title/interfaces/FindParams.html",[0,0.074,428,2.18]],["body/interfaces/FindParams.html",[0,0.123,2,0.766,3,0.069,4,0.056,5,0.049,8,0.228,12,0.141,13,0.468,14,0.703,18,0.302,19,0.008,20,0.782,25,1.04,26,0.142,34,0.677,35,1.181,41,2.455,50,0.93,52,0.597,57,2.193,59,0.851,66,1.57,71,1.88,73,0.524,77,1.818,78,0.12,81,2.148,85,1.247,87,1.531,91,2.185,99,1.018,109,0.547,113,1.837,114,1.04,115,0.734,129,2.185,131,0.325,139,2.369,147,1.686,149,0.831,150,0.003,151,0.006,152,0.003,156,1.905,161,0.735,165,0.523,171,1.414,174,0.363,177,0.509,179,0.647,182,1.447,183,0.538,190,1.108,195,0.672,208,2.812,210,1.009,216,0.331,222,0.851,228,1.181,232,0.565,271,2.744,272,2.704,276,0.831,294,2.247,306,0.848,309,1.631,312,1.06,334,1.599,343,1.702,359,2.02,386,2.523,392,2.169,394,2.5,396,2.744,402,1.837,409,3.667,410,3.682,411,4.475,413,4.764,416,4.036,421,1.837,428,3.755,429,3.202,432,2.909,444,1.837,452,1.973,458,1.837,463,0.383,464,2.091,465,2.254,466,2.091,468,3.015,470,2.94,471,2.577,472,2.02,473,0.691,475,4.129,477,3.015,488,4.358,489,3.716,490,4.358,491,2.577,492,3.54,493,2.577,497,2.577,499,2.577,510,3.06,512,2.839,515,2.577,517,3.87,518,2.913,519,3.386,520,2.44,521,2.572,522,1.805,523,2.455,524,2.138,525,2.455,530,1.318,531,2.455,532,2.455,533,2.04,534,2.455,535,3.202,536,2.455,540,4.347,543,5.018,544,2.254,545,2.455,546,2.349,549,2.455,550,1.483,551,2.455,552,2.455,555,2.455,556,2.254,557,4.8,558,2.455,559,4.677,560,4.8,561,3.811,562,2.349,563,2.455,564,2.455,565,2.455,566,2.455,567,1.641,568,2.455,569,4.152,570,1.558,573,2.455,574,2.349,575,2.757,576,2.349,577,2.455,578,2.818,579,2.455,580,2.455,581,4.152,582,0.814,583,2.247,584,2.349,585,2.455,586,2.455,587,1.734,588,2.455,589,2.455,590,2.02,591,2.455,592,2.455,597,2.185,598,2.507,603,0.65,605,1.306,707,2.818,708,2.091,716,3.505,717,1.834,718,2.091,719,1.289,720,2.02,722,1.894,723,3.015,724,1.702,725,3.015,726,2.247,727,3.618,728,3.416,729,2.447,730,2.091,731,2.777,733,2.091,735,2.572,736,2.091,738,2.367,739,1.837,740,2.091,744,1.233,745,1.289,746,2.091,747,2.091,749,2.091,750,2.091,752,1.955,753,2.913,754,2.02,755,2.091,756,1.894,757,1.955,758,2.091,759,1.289,760,2.731,761,3.015,763,1.085,764,2.091,782,2.169,789,1.483,854,1.289,889,2.169,911,2.455,913,1.894,918,2.455,950,1.558,1070,1.108,1078,1.955,1085,2.529,1093,1.734,1110,2.367,1116,1.599,1122,2.5,1261,2.305,1459,1.686,1494,1.837,1503,1.837,1507,1.784,1765,2.086,1873,2.169,1946,3.305,1999,3.54,2024,2.577,2065,3.811,2109,2.577,2366,1.955,2790,2.577,3062,4.608,3095,2.455,3096,3.921,3097,2.719,3098,2.719,3099,2.719,3100,2.719,3101,3.921,3102,2.719,3103,2.719,3104,2.719,3105,2.719,3106,4.598,3107,2.577,3108,2.719,3109,2.719,3110,4.598,3111,2.719,3112,2.577,3113,2.719,3114,2.577,3115,2.719,3116,2.719,3117,2.719,3118,2.719,3119,3.921,3120,2.719,3121,2.577,3122,2.719,3123,2.719,3124,2.719,3125,2.719,3126,2.719,3127,2.577,3128,2.719,3129,2.719,3130,2.719,3131,2.719,3132,2.719,3133,2.577,3134,2.719,3135,3.921,3136,3.921,3137,2.719,3138,4.598,3139,2.719,3140,4.598,3141,2.719,3142,2.719,3143,2.719,3144,2.577,3145,2.719,3146,2.719,3147,2.719,3148,2.719,3149,2.719,3150,2.719,3151,3.921,3152,2.254,3153,2.577,3154,2.719,3155,2.719,3156,2.719,3157,2.349,3158,2.719,3159,2.719,3160,2.719,3161,2.719,3162,2.719,3163,2.719,3164,2.719,3165,2.719,3166,2.455]],["title/interfaces/FindableWidget.html",[0,0.074,429,2.247]],["body/interfaces/FindableWidget.html",[0,0.132,2,0.774,3,0.07,4,0.056,5,0.05,8,0.231,12,0.143,13,0.472,14,0.347,18,0.299,19,0.008,20,0.79,25,1.511,26,0.143,34,0.684,35,1.193,41,2.481,50,0.933,52,0.603,57,2.11,59,0.855,66,1.577,71,1.888,73,0.525,77,1.274,78,0.11,81,2.115,85,1.249,87,1.543,91,2.008,99,1.025,109,0.553,113,1.856,114,1.051,115,0.63,129,2.196,131,0.328,139,2.339,147,1.704,149,0.84,150,0.003,151,0.006,152,0.003,156,1.867,161,0.743,165,0.529,171,1.419,174,0.367,177,0.357,179,0.651,182,1.462,183,0.54,190,1.119,195,0.677,208,2.826,210,1.015,216,0.333,222,0.852,228,1.193,232,0.567,271,2.757,272,2.72,276,0.84,294,2.264,306,0.857,309,1.572,312,1.068,334,1.616,343,1.715,359,2.041,386,2.491,392,2.192,394,2.519,396,2.757,402,1.856,409,3.689,410,3.656,411,4.403,413,4.69,416,4.046,421,1.856,428,3.619,429,3.731,432,2.921,444,1.856,452,1.976,458,1.856,463,0.387,464,2.113,465,2.278,466,2.113,468,3.038,470,2.947,471,2.604,472,2.041,473,0.699,475,4.144,477,3.038,488,4.383,489,3.744,490,4.383,491,2.604,492,3.567,493,2.604,497,2.604,499,2.604,510,3.065,512,2.851,515,2.604,517,3.557,518,3.436,519,3.412,520,2.452,521,2.591,522,1.812,523,2.481,524,2.154,525,2.481,530,1.332,531,2.481,532,2.481,533,2.052,534,2.481,535,3.221,536,2.481,540,4.368,543,5.036,544,2.278,545,2.481,546,2.373,549,2.481,550,1.498,551,2.481,552,2.481,555,2.481,556,2.278,557,3.995,558,2.481,559,4.272,560,3.995,561,3.834,562,2.373,563,2.481,564,2.481,565,2.481,566,2.481,567,1.659,568,2.481,569,4.566,570,1.575,573,2.481,574,2.373,575,2.766,576,2.373,577,2.481,578,3.851,579,2.481,580,2.481,581,4.176,582,0.823,583,2.264,584,2.373,585,2.481,586,2.481,587,1.752,588,2.481,589,2.481,590,2.041,591,2.481,592,2.481,597,2.196,598,2.154,603,0.944,605,1.313,707,3.325,708,2.113,716,3.885,717,1.845,718,2.113,719,1.303,720,2.041,722,1.914,723,3.038,724,1.715,725,3.038,726,2.264,727,3.635,728,3.436,729,2.461,730,2.113,731,2.786,733,2.113,735,2.591,736,2.113,738,2.385,739,1.856,740,2.113,744,1.246,745,1.303,746,2.113,747,2.113,749,2.113,750,2.113,752,1.975,753,2.935,754,2.041,755,2.113,756,1.914,757,1.975,758,2.113,759,1.303,760,2.751,761,3.038,763,1.096,764,2.113,782,2.192,789,1.498,854,1.303,889,2.192,911,3.567,913,1.914,918,2.481,950,1.575,1070,1.609,1078,1.975,1085,2.397,1093,1.752,1110,2.792,1116,2.323,1122,1.752,1261,1.616,1459,1.704,1494,1.856,1503,1.856,1507,1.803,1765,2.102,1873,2.192,1946,3.325,1999,2.481,2024,2.604,2065,3.834,2109,2.604,2366,1.975,2790,2.604,3062,4.368,3095,2.481,3096,2.748,3097,2.748,3098,2.748,3099,2.748,3100,2.748,3101,3.951,3102,2.748,3103,2.748,3104,2.748,3105,2.748,3106,5.057,3107,2.604,3108,2.748,3109,2.748,3110,4.625,3111,2.748,3112,2.604,3113,2.748,3114,2.604,3115,2.748,3116,2.748,3117,2.748,3118,2.748,3119,3.951,3120,2.748,3121,2.604,3122,2.748,3123,2.748,3124,2.748,3125,2.748,3126,2.748,3127,2.604,3128,2.748,3129,2.748,3130,2.748,3131,2.748,3132,2.748,3133,2.604,3134,2.748,3135,3.951,3136,3.951,3137,2.748,3138,4.625,3139,2.748,3140,4.625,3141,2.748,3142,2.748,3143,2.748,3144,2.604,3145,2.748,3146,2.748,3147,2.748,3148,2.748,3149,2.748,3150,2.748,3151,3.951,3152,2.278,3153,2.604,3154,2.748,3155,2.748,3156,2.748,3157,3.412,3158,2.748,3159,3.951,3160,2.748,3161,2.748,3162,2.748,3163,2.748,3164,2.748,3165,2.748,3166,2.481,3167,3.866]],["title/components/FormCheckboxComponent.html",[183,0.291,674,1.717]],["body/components/FormCheckboxComponent.html",[3,0.079,4,0.064,5,0.056,8,0.487,12,0.161,13,0.514,14,0.752,18,0.327,19,0.008,26,0.11,27,1.289,34,1.071,50,0.67,52,1.171,59,0.926,60,0.873,62,2.708,63,1.211,71,1.515,73,0.504,78,0.074,83,1.908,96,1.115,98,3.149,99,0.804,100,2.094,101,2.235,109,1.287,115,0.894,119,2.905,131,0.67,134,1.17,135,6.791,137,4.13,150,0.004,151,0.005,152,0.004,156,1.007,165,0.827,170,2.403,171,0.821,174,0.884,176,1.485,177,0.81,179,0.877,183,0.481,187,1.69,195,0.915,210,1.368,216,0.355,219,1.502,232,0.289,276,1.314,285,1.715,306,1.541,322,2.465,323,1.375,343,1.867,405,0.986,452,1.631,463,0.436,469,2.033,470,2.085,590,2.302,594,1.346,595,1.341,596,1.317,597,1.346,598,1.69,601,1.405,603,1.027,604,1.649,605,1.747,606,1.842,607,1.867,613,1.828,627,1.262,629,3.91,646,1.375,647,1.664,648,1.908,649,3.309,650,1.922,651,1.405,652,1.922,653,2.667,654,1.317,655,1.776,656,1.922,657,1.649,658,1.922,659,1.186,660,1.922,661,1.573,662,2.084,663,1.61,664,3.309,665,1.502,666,1.61,667,1.649,668,1.502,669,1.69,670,1.922,671,1.732,672,1.922,673,1.776,674,2.839,675,2.624,676,1.922,677,1.649,678,3.309,679,1.61,680,2.76,681,1.61,682,1.999,683,1.61,684,2.667,685,1.61,686,1.732,687,1.922,688,1.573,689,1.776,690,1.346,691,1.405,692,1.262,693,1.236,694,1.922,695,1.69,696,1.289,697,1.922,698,1.61,699,1.871,700,1.922,701,1.573,702,1.776,703,1.922,779,5.965,782,3.43,786,2.302,790,4.836,794,4.571,795,3.337,796,4.571,797,5.25,798,4.571,799,4.571,800,4.571,801,4.571,802,4.571,803,3.565,804,3.883,805,4.571,806,2.667,810,5.8,814,3.294,816,2.158,817,3.099,818,3.669,819,3.294,820,1.537,822,1.976,823,4.571,825,3.294,826,3.294,827,4.076,828,3.43,830,3.294,832,3.294,833,3.099,835,3.099,836,3.294,838,2.302,839,4.571,841,6.165,842,1.822,843,3.294,844,2.033,846,2.677,847,2.569,849,3.294,851,1.161,853,3.294,854,2.657,863,1.469,920,4.836,1026,4.31,1051,3.195,1070,1.752,1242,1.69,1245,2.742,1247,3.835,2010,4.91,2482,3.715,2568,5.957,3168,5.637,3169,6.322,3170,3.538,3171,6.051,3172,6.949,3173,6.949,3174,6.949,3175,3.865,3176,4.36,3177,4.91,3178,4.36,3179,6.051,3180,4.36,3181,6.159,3182,6.949,3183,4.36,3184,4.36,3185,3.538,3186,3.538,3187,3.538,3188,3.538,3189,3.538,3190,3.538,3191,3.538,3192,3.538,3193,3.538,3194,3.538,3195,3.538,3196,3.538,3197,3.538,3198,3.538,3199,3.538,3200,4.36,3201,4.36,3202,3.294,3203,3.865,3204,4.36,3205,3.538,3206,3.538,3207,4.91]],["title/components/FormInputComponent.html",[183,0.291,677,1.717]],["body/components/FormInputComponent.html",[3,0.061,4,0.049,5,0.043,8,0.462,12,0.124,13,0.426,14,0.715,18,0.327,19,0.008,25,1.365,26,0.109,34,1.063,35,1.038,50,0.556,52,1.241,57,0.878,59,0.965,60,0.674,61,1.061,62,1.811,63,0.934,71,1.871,73,0.513,78,0.057,83,1.583,96,0.976,98,2.721,99,1.108,100,1.615,101,1.702,108,1.769,109,1.346,111,1.945,114,0.915,115,0.382,131,0.768,134,1.19,137,3.605,149,1.304,150,0.003,151,0.004,152,0.003,156,0.777,159,1.283,165,0.686,171,0.633,174,0.882,176,1.407,177,0.776,179,0.935,183,0.509,187,1.303,195,0.943,210,0.936,216,0.307,219,1.159,222,0.585,228,2.305,232,0.441,276,1.09,285,1.423,292,1.159,306,1.331,312,1.154,322,2.044,323,1.061,386,1.484,405,0.761,452,1.681,463,0.336,466,2.743,469,1.568,470,1.729,473,1.203,512,1.898,520,1.159,582,1.068,590,1.776,594,1.038,595,1.113,596,1.016,597,1.038,598,1.303,601,1.084,603,0.852,604,1.272,605,1.716,606,1.805,607,1.549,613,1.516,627,0.974,629,3.755,646,1.061,647,1.579,648,1.583,649,2.934,650,1.483,651,1.084,652,1.483,653,2.212,654,1.016,655,1.37,656,1.483,657,1.272,658,1.483,659,0.915,660,1.483,661,1.213,662,1.848,663,1.242,664,2.934,665,1.159,666,1.242,667,1.272,668,1.159,669,1.303,670,1.483,671,1.336,672,1.483,673,1.37,674,1.272,675,2.619,676,1.483,677,2.518,678,2.934,679,1.242,680,2.385,681,1.242,682,1.773,683,1.242,684,2.212,685,1.242,686,1.336,687,1.483,688,1.213,689,1.37,690,1.038,691,1.084,692,0.974,693,0.954,694,1.483,695,1.303,696,1.484,697,1.483,698,1.242,699,1.443,700,1.483,701,1.213,702,1.37,703,1.483,717,1.423,731,2.294,744,1.935,756,3.295,757,2.564,779,5.726,786,1.776,790,4.51,794,3.792,795,2.883,796,3.792,797,4.536,798,3.792,799,3.792,800,3.792,801,3.792,802,5.847,803,2.957,804,3.221,805,3.792,806,2.212,810,5.31,814,2.541,816,1.665,817,2.391,818,4.371,819,2.541,820,1.769,822,1.524,823,3.792,825,2.541,826,2.541,827,3.381,828,2.845,830,2.541,832,2.541,833,2.391,835,2.391,836,2.541,838,1.776,839,3.792,841,3.792,842,1.406,843,2.541,844,1.568,846,2.065,847,1.982,849,2.541,851,0.896,853,2.541,854,1.133,863,1.133,914,4.044,927,1.393,951,1.654,1044,2.011,1056,2.153,1076,2.212,1103,2.569,1132,2.212,1176,2.743,1202,2.153,1235,1.336,1240,2.646,1245,3.227,1249,2.743,1330,2.274,1343,3.381,1403,2.065,1422,4.072,1438,3.282,1440,2.883,1442,2.271,1445,2.576,1465,3.401,1466,3.196,1507,1.568,1525,3.639,1538,2.41,1539,2.564,1542,1.994,1682,2.799,1765,1.272,1838,3.639,1942,4.448,1946,2.564,1970,4.072,2005,3.381,2138,1.665,2185,5.478,2339,3.081,2401,4.484,2482,3.081,2504,2.729,2552,5.402,2856,4.448,3112,4.484,3168,5.938,3175,2.981,3177,4.072,3185,2.729,3186,2.729,3187,2.729,3188,2.729,3189,2.729,3190,2.729,3191,2.729,3192,2.729,3193,2.729,3194,2.729,3195,2.729,3196,2.729,3197,2.729,3198,2.729,3199,2.729,3202,2.541,3205,2.729,3206,2.729,3208,6.66,3209,2.159,3210,5.019,3211,6.657,3212,6.657,3213,2.981,3214,5.321,3215,4.448,3216,7.122,3217,6.657,3218,4.044,3219,5.321,3220,4.268,3221,5.779,3222,6.004,3223,6.004,3224,5.019,3225,3.364,3226,5.321,3227,2.981,3228,3.792,3229,3.364,3230,5.9,3231,2.981,3232,4.448,3233,4.448,3234,4.448,3235,4.448,3236,3.364,3237,4.448,3238,2.981,3239,3.364,3240,2.981,3241,3.364,3242,6.657,3243,6.657,3244,5.019,3245,5.019,3246,3.364,3247,3.364,3248,4.448,3249,3.364,3250,4.448,3251,5.019,3252,3.381,3253,5.019,3254,3.364,3255,4.448,3256,4.448,3257,2.981,3258,2.981,3259,3.364,3260,2.981,3261,4.448,3262,3.364,3263,3.364,3264,6.004,3265,4.448,3266,5.019,3267,3.364,3268,3.364,3269,3.364,3270,3.364,3271,5.019,3272,3.364,3273,3.364,3274,3.364,3275,3.364,3276,3.364,3277,3.364,3278,3.364,3279,3.364,3280,3.364,3281,3.364,3282,2.981,3283,2.981,3284,5.019,3285,2.981,3286,2.729,3287,2.981,3288,4.448,3289,2.981,3290,3.567,3291,6.004,3292,5.019,3293,5.321,3294,5.019,3295,2.981,3296,3.364,3297,3.364,3298,3.364]],["title/components/FormSelectComponent.html",[183,0.291,685,1.677]],["body/components/FormSelectComponent.html",[3,0.082,4,0.066,5,0.058,8,0.454,12,0.167,13,0.526,14,0.759,18,0.324,19,0.008,26,0.082,30,1.649,34,0.798,50,0.499,52,1.187,59,0.935,60,0.903,61,1.422,63,1.252,71,1.551,73,0.486,78,0.076,83,1.953,87,1.252,96,1.077,98,3.205,99,0.832,100,2.165,101,2.005,102,1.485,109,1.088,115,0.511,131,0.7,134,1.153,137,3.827,143,2.75,150,0.004,151,0.005,152,0.004,156,1.041,165,0.847,170,2.459,171,0.849,174,0.879,176,1.503,177,0.815,179,0.845,183,0.488,187,1.747,195,0.928,210,0.703,216,0.389,219,1.553,232,0.41,285,1.755,292,1.553,306,1.688,323,1.422,405,1.91,452,1.791,455,1.626,463,0.451,469,2.102,470,2.134,582,0.96,590,2.381,594,1.391,595,1.373,596,1.362,597,1.391,598,1.747,601,1.453,603,1.051,604,1.705,605,1.754,606,1.847,607,1.911,613,1.87,627,1.305,629,3.928,646,1.422,647,1.688,648,1.953,649,3.356,650,1.987,651,1.453,652,1.987,653,2.729,654,1.362,655,1.836,656,1.987,657,1.705,658,1.987,659,1.226,660,1.987,661,1.626,662,2.114,663,1.665,664,3.356,665,1.553,666,1.665,667,1.705,668,1.553,669,1.747,670,1.987,671,1.791,672,1.987,673,1.836,674,1.705,675,2.663,676,1.987,677,1.705,678,3.356,679,1.665,680,2.809,681,1.665,682,2.028,683,1.665,684,2.729,685,2.812,686,1.791,687,1.987,688,1.626,689,1.836,690,1.391,691,1.453,692,1.305,693,1.278,694,1.987,695,1.747,696,1.333,697,1.987,698,1.665,699,1.934,700,1.987,701,1.626,702,1.836,703,1.987,744,1.996,779,5.948,782,3.51,786,2.381,790,4.674,794,4.678,795,3.396,796,4.678,797,5.343,798,4.678,799,4.678,800,4.678,801,4.678,802,4.678,803,3.648,804,3.974,805,4.678,806,2.729,809,3.996,810,6.114,814,3.406,816,2.232,817,3.204,818,2.381,819,3.406,820,1.589,822,2.043,823,4.678,825,3.406,826,3.406,827,4.171,828,3.51,830,3.406,832,3.406,833,3.204,835,3.204,836,3.406,838,2.381,839,4.678,841,4.678,842,1.884,843,3.406,844,2.887,846,2.768,847,2.656,849,3.406,851,1.201,853,3.406,854,1.519,863,1.519,914,3.037,1119,2.303,1245,2.806,1337,3.204,1403,2.768,1482,2.232,1542,2.459,2010,5.024,2444,3.769,2445,2.555,2456,3.204,2480,5.024,2481,6.178,2482,5.061,2575,3.658,2731,3.996,3168,5.129,3185,3.658,3186,3.658,3187,3.658,3188,3.658,3189,3.658,3190,3.658,3191,3.658,3192,3.658,3193,3.658,3194,3.658,3195,3.658,3196,3.658,3197,3.658,3198,3.658,3199,3.658,3202,3.406,3205,3.658,3207,5.739,3213,3.996,3255,5.488,3285,3.996,3286,3.658,3287,3.996,3288,5.488,3289,3.996,3295,5.488,3299,5.752,3300,3.658,3301,7.073,3302,6.192,3303,7.073,3304,6.192,3305,4.508,3306,4.508,3307,4.508,3308,4.508,3309,4.508,3310,4.508,3311,6.192,3312,7.614,3313,4.508,3314,4.508,3315,4.508]],["title/classes/FormValidators.html",[78,0.077,3316,3.43]],["body/classes/FormValidators.html",[3,0.114,4,0.091,5,0.08,8,0.457,12,0.231,14,0.689,18,0.268,19,0.008,25,2.451,26,0.114,34,1.357,52,1.382,59,0.71,71,1.92,73,0.441,78,0.106,81,1.96,85,0.856,115,0.87,131,0.783,134,0.876,150,0.005,151,0.006,152,0.005,154,1.703,165,1.048,174,0.855,176,1.444,177,0.708,179,0.913,195,0.934,216,0.32,222,0.807,228,1.933,232,0.572,306,1.7,609,4.92,666,2.832,675,2.22,782,4.346,790,4.697,806,3.379,827,5.164,828,3.55,851,2.042,863,2.11,919,5.449,1083,2.583,1195,3.289,1682,3.863,2329,4.707,3133,5.164,3220,5.449,3316,5.792,3317,5.55,3318,7.344,3319,7.667,3320,7.667,3321,7.667,3322,7.667,3323,6.262,3324,7.667,3325,8.635,3326,8.169,3327,6.795,3328,7.851,3329,7.667,3330,8.286,3331,6.262,3332,7.667,3333,6.795,3334,7.667,3335,6.795,3336,8.286,3337,6.262,3338,6.262,3339,6.262,3340,6.262,3341,6.262,3342,6.262,3343,7.667]],["title/components/FormlyInputComponent.html",[183,0.291,679,1.677]],["body/components/FormlyInputComponent.html",[3,0.1,4,0.081,5,0.071,12,0.204,18,0.274,19,0.008,26,0.1,50,0.983,60,1.107,63,1.535,73,0.511,78,0.094,109,1.014,131,0.764,150,0.005,151,0.006,152,0.005,156,1.277,165,0.97,170,2.817,174,0.843,177,0.789,183,0.501,187,2.143,195,1.083,210,1.106,216,0.363,219,1.906,232,0.589,285,2.01,306,1.226,323,1.744,405,1.251,452,1.541,463,0.553,594,1.707,595,1.572,596,2.142,597,1.707,598,2.143,601,1.782,603,1.204,604,2.092,605,1.775,606,1.878,646,1.744,647,1.572,648,1.744,649,3.64,650,2.438,651,1.782,652,2.438,653,3.126,654,1.67,655,2.253,656,2.438,657,2.092,658,2.438,659,1.504,660,2.438,661,1.995,662,2.293,663,2.042,664,3.64,665,1.906,666,2.042,667,2.092,668,1.906,669,2.143,670,2.438,671,2.197,672,2.438,673,2.253,674,2.092,675,2.529,676,2.438,677,2.092,678,3.64,679,3.05,680,3.392,681,2.042,682,2.2,683,2.042,684,3.126,685,2.042,686,2.197,687,2.438,688,1.995,689,2.253,690,1.707,691,1.782,692,1.601,693,1.568,694,2.438,695,2.143,696,1.635,697,2.438,698,2.042,699,2.373,700,2.438,701,1.995,702,2.253,703,2.438,803,4.612,1044,1.67,1245,2.506,1682,3.65,3209,3.549,3218,5.274,3220,5.565,3228,4.178,3231,4.901,3235,4.901,3344,7.975,3345,6.352,3346,6.701,3347,6.701,3348,7.092,3349,5.53,3350,7.092,3351,4.901,3352,5.53,3353,7.092,3354,4.901,3355,5.53,3356,7.092,3357,5.53,3358,5.53,3359,7.092,3360,4.901,3361,5.53,3362,7.092,3363,4.487,3364,5.53,3365,7.092,3366,3.549,3367,3.549,3368,4.901,3369,4.901,3370,5.53,3371,4.901,3372,4.487,3373,5.53,3374,5.53,3375,5.53,3376,5.53]],["title/components/FormlyNumberWithUnitInputComponent.html",[183,0.291,681,1.677]],["body/components/FormlyNumberWithUnitInputComponent.html",[3,0.099,4,0.079,5,0.07,12,0.201,19,0.008,26,0.099,50,0.963,60,1.088,63,1.508,73,0.488,78,0.092,96,1.014,99,1.002,109,1.002,131,0.805,150,0.005,151,0.006,152,0.005,156,1.254,170,2.785,174,0.825,177,0.784,183,0.497,187,2.105,195,1.06,210,0.847,216,0.397,219,1.872,232,0.586,285,1.988,306,1.204,323,1.713,405,1.229,452,1.523,463,0.543,594,1.676,595,1.554,596,2.118,597,1.676,598,2.105,601,1.751,603,1.19,604,2.055,605,1.773,606,1.875,646,1.713,647,1.554,648,1.713,649,3.616,650,2.395,651,1.751,652,2.395,653,3.09,654,1.641,655,2.213,656,2.395,657,2.055,658,2.395,659,1.477,660,2.395,661,1.96,662,2.277,663,2.006,664,3.616,665,1.872,666,2.006,667,2.055,668,1.872,669,2.105,670,2.395,671,2.158,672,2.395,673,2.213,674,2.055,675,2.561,676,2.395,677,2.055,678,3.616,679,2.006,680,3.373,681,3.03,682,2.538,683,2.006,684,3.09,685,2.006,686,2.158,687,2.395,688,1.96,689,2.213,690,1.676,691,1.751,692,1.573,693,1.54,694,2.395,695,2.105,696,1.606,697,2.395,698,2.006,699,2.331,700,2.395,701,1.96,702,2.213,703,2.395,803,4.574,1044,1.641,1245,2.462,1682,3.62,1765,2.055,3209,3.486,3218,5.229,3220,5.518,3227,4.815,3228,4.104,3240,4.815,3345,6.299,3351,4.815,3354,4.815,3360,4.815,3363,4.408,3366,3.486,3367,3.486,3368,4.815,3369,4.815,3371,4.815,3372,4.408,3377,7.842,3378,6.289,3379,5.865,3380,5.865,3381,4.815,3382,7.011,3383,5.433,3384,7.011,3385,5.433,3386,7.011,3387,7.011,3388,5.433,3389,5.433,3390,7.011,3391,5.433,3392,7.011,3393,5.865,3394,5.433,3395,3.659,3396,3.659,3397,7.011,3398,5.433]],["title/components/FormlySelectComponent.html",[183,0.291,683,1.677]],["body/components/FormlySelectComponent.html",[3,0.11,4,0.088,5,0.077,12,0.223,19,0.008,26,0.11,60,1.21,63,1.677,73,0.431,78,0.102,131,0.724,150,0.005,151,0.006,152,0.005,156,1.395,170,2.979,174,0.711,177,0.81,183,0.522,187,2.341,210,0.942,216,0.436,219,2.082,232,0.54,285,2.126,306,1.339,323,1.905,405,1.845,452,1.629,455,2.18,463,0.604,594,1.864,595,1.662,596,2.265,597,1.864,598,2.341,601,1.947,603,1.273,604,2.285,605,1.784,606,1.889,646,1.905,647,1.662,648,1.905,649,3.759,650,2.663,651,1.947,652,2.663,653,3.305,654,1.825,655,2.461,656,2.663,657,2.285,658,2.663,659,1.643,660,2.663,661,2.18,662,2.367,663,2.231,664,3.759,665,2.082,666,2.231,667,2.285,668,2.082,669,2.341,670,2.663,671,2.4,672,2.663,673,2.461,674,2.285,675,2.587,676,2.663,677,2.285,678,3.759,679,2.231,680,3.483,681,2.231,682,2.271,683,3.149,684,3.305,685,2.231,686,2.4,687,2.663,688,2.18,689,2.461,690,1.864,691,1.947,692,1.749,693,1.713,694,2.663,695,2.341,696,1.786,697,2.663,698,2.231,699,2.592,700,2.663,701,2.18,702,2.461,703,2.663,803,4.804,1451,3.408,1452,2.592,1828,2.901,2444,2.991,2445,3.425,3300,4.902,3345,6.617,3363,4.902,3366,3.877,3367,3.877,3372,4.902,3399,7.228,3400,8.155,3401,6.042,3402,6.042,3403,6.042,3404,7.499,3405,6.042]],["title/interfaces/FunctionRenderer.html",[0,0.074,1035,1.849]],["body/interfaces/FunctionRenderer.html",[0,0.139,2,0.807,3,0.073,4,0.059,5,0.052,8,0.241,9,2.209,12,0.149,13,0.651,15,2.81,18,0.311,19,0.008,20,1.171,21,3.829,22,3.12,26,0.16,27,2.144,30,2.18,34,1.179,35,1.244,36,1.477,38,1.777,39,3.298,40,2.949,43,1.936,47,2.244,50,0.942,52,1.375,55,3.01,57,1.494,58,1.93,59,0.65,60,0.807,61,1.271,64,1.244,65,2.394,66,1.477,67,2.166,72,2.06,73,0.515,75,3.907,77,1.328,78,0.113,79,1.642,80,1.601,83,1.806,85,1.088,90,3.242,91,1.244,96,0.948,99,0.744,100,1.936,102,2.389,112,1.936,114,2.083,115,0.869,118,1.143,119,3.482,120,3.251,127,1.389,128,3.529,129,1.767,130,2.129,131,0.566,132,2.953,133,3.247,134,0.801,136,1.777,137,2.595,138,2.129,139,1.849,140,1.685,141,2.286,142,2.926,144,2.129,146,2.219,148,2.06,150,0.003,151,0.005,152,0.003,156,0.931,171,0.759,174,0.632,179,0.725,182,2.519,183,0.545,190,1.167,195,0.491,207,2.06,210,1.195,215,3.482,216,0.371,222,0.558,228,1.244,232,0.38,266,1.389,276,1.447,290,1.119,292,1.389,309,1.598,311,1.73,326,2.389,340,1.525,530,1.389,533,1.806,539,2.81,567,1.73,570,1.642,595,0.894,603,1.131,627,1.928,647,1.698,654,1.218,693,1.143,717,1.143,744,1.299,759,1.358,783,2.06,788,2.333,820,1.421,842,1.685,851,1.074,927,1.59,949,1.73,952,2.628,953,3.031,954,1.271,956,2.295,957,2.238,958,2.457,959,3,963,2.12,964,2.06,967,1.525,969,2.7,991,1.455,1001,2.204,1002,2.204,1003,2.475,1004,2.195,1005,3.516,1006,2.713,1007,3.516,1008,3.924,1009,3.247,1010,3.924,1011,2.129,1012,2.475,1013,3.641,1014,1.777,1015,1.777,1016,3.297,1017,1.601,1018,1.244,1019,1.642,1020,1.562,1021,2.115,1022,1.73,1023,2.115,1024,2.348,1025,2.457,1026,3.964,1027,4.089,1028,3.776,1029,3.024,1030,3.403,1031,2.519,1032,2.019,1033,2.678,1034,2.763,1035,2.954,1036,4.089,1037,3.705,1038,4.452,1039,3.516,1040,3.247,1041,2.475,1042,3.247,1043,3.374,1044,2.19,1045,2.475,1046,3.776,1047,2.475,1048,2.475,1049,1.777,1050,1.777,1051,2.129,1052,2.286,1053,2.475,1054,1.73,1055,3.024,1056,2.457,1057,2.475,1058,2.286,1059,2.275,1060,1.389,1061,2.581,1062,1.489,1063,1.777,1064,2.475,1065,2.219,1066,4.089,1067,3.516,1068,3.516,1069,3.516,1070,1.928,1071,2.475,1072,2.475,1073,2.295,1074,2.475,1075,3.247,1076,1.777,1077,1.455,1078,2.06,1079,1.936,1080,2.475,1081,2.286,1082,2.475,1083,1.358,1084,2.475,1085,1.358,1086,2.475,1087,2.129,1088,1.642,1089,2.375,1090,2.375,1091,2.475,1092,1.601,1093,1.827,1094,2.129,1095,2.475,1096,2.286,1097,2.475,1098,1.642,1099,2.375,1100,2.375,1101,3.247,1102,1.244,1103,1.455,1104,2.129,1105,2.06,1106,3.516,1107,2.475,1108,1.996,1109,1.936,1110,1.73,1111,2.375,1112,1.73,1113,2.129,1114,1.777,1115,1.73,1116,1.685,1117,2.06,1118,2.129,1119,2.06,1120,2.129,1121,2.129,1122,1.827,1123,2.375,3406,3.574,3407,3.272]],["title/pipes/FunctionRendererPipe.html",[3408,3.227,3409,3.058]],["body/pipes/FunctionRendererPipe.html",[3,0.125,4,0.1,5,0.088,8,0.411,13,0.689,14,0.619,18,0.241,19,0.008,26,0.125,52,1.074,59,0.781,64,2.505,73,0.467,78,0.117,99,1.498,115,0.921,150,0.006,151,0.007,152,0.006,159,1.761,165,0.942,174,0.654,176,1.297,177,0.797,189,4.019,195,0.84,216,0.352,228,2.126,232,0.538,309,1.693,343,2.505,463,0.689,522,1.952,604,2.606,838,4.287,952,2.302,959,3.143,1032,2.862,1035,3.307,1065,3.146,2352,4.148,2805,5.59,3080,6.735,3408,5.771,3409,5.469,3410,4.641,3411,7.196,3412,6.106,3413,8.119,3414,7.196,3415,7.196,3416,6.889,3417,7.196,3418,6.889]],["title/interfaces/GlobalButton.html",[0,0.074,1040,2.573]],["body/interfaces/GlobalButton.html",[0,0.139,2,0.807,3,0.073,4,0.059,5,0.052,8,0.24,9,2.209,12,0.149,13,0.616,15,2.81,18,0.315,19,0.008,20,1.17,21,3.828,22,3.119,26,0.16,27,2.144,30,2.228,34,1.179,35,1.244,36,1.476,38,1.776,39,3.344,40,3,43,1.935,47,2.243,50,0.942,52,1.397,55,3.01,57,1.051,58,1.929,59,0.649,60,0.807,61,1.271,64,1.244,65,2.393,66,1.476,67,2.166,72,2.059,73,0.511,75,3.953,77,1.328,78,0.113,79,1.641,80,1.601,83,1.805,85,1.088,90,3.172,91,1.244,96,0.947,99,0.743,100,1.935,102,2.389,112,1.935,114,2.164,115,0.869,118,1.142,119,3.481,120,3.251,127,1.389,128,3.528,129,1.767,130,2.128,131,0.566,132,2.953,133,3.245,134,0.801,136,1.776,137,2.594,138,2.128,139,1.849,140,1.684,141,2.284,142,2.925,144,2.128,146,2.219,148,2.059,150,0.003,151,0.005,152,0.003,156,0.93,171,0.759,174,0.543,179,0.666,182,2.166,183,0.536,190,1.167,207,2.059,210,1.194,215,3.481,216,0.371,222,0.558,228,1.244,232,0.379,266,1.389,276,1.447,290,1.119,292,1.389,309,1.597,311,1.729,326,2.389,340,1.524,530,1.389,533,1.805,539,2.81,567,1.729,570,1.641,595,0.893,603,1.231,627,1.928,647,1.698,654,1.217,693,1.142,717,1.142,744,1.299,759,1.358,783,2.059,788,2.332,820,1.421,842,1.684,851,1.073,927,1.589,949,1.729,952,2.62,953,2.783,954,1.271,956,2.295,957,2.237,958,2.456,959,2.949,963,2.119,964,2.059,967,1.524,969,2.7,991,1.454,1001,2.203,1002,2.203,1003,2.474,1004,2.194,1005,3.515,1006,3.241,1007,3.515,1008,3.923,1009,3.245,1010,3.923,1011,2.128,1012,2.474,1013,3.963,1014,1.776,1015,1.776,1016,3.296,1017,1.601,1018,1.244,1019,1.641,1020,1.562,1021,2.115,1022,1.729,1023,2.115,1024,2.347,1025,2.456,1026,3.963,1027,4.088,1028,3.775,1029,3.023,1030,3.402,1031,2.166,1032,1.421,1033,2.678,1034,2.763,1035,2.712,1036,4.088,1037,3.913,1038,4.701,1039,4.088,1040,3.775,1041,2.474,1042,3.245,1043,3.373,1044,2.19,1045,2.474,1046,3.775,1047,2.474,1048,2.474,1049,1.776,1050,1.776,1051,2.128,1052,2.284,1053,2.474,1054,1.729,1055,3.023,1056,2.456,1057,2.474,1058,2.284,1059,2.274,1060,1.389,1061,2.58,1062,1.488,1063,1.776,1064,2.474,1065,2.219,1066,4.088,1067,3.515,1068,3.515,1069,3.515,1070,1.657,1071,2.474,1072,2.474,1073,2.295,1074,2.474,1075,3.245,1076,1.776,1077,1.454,1078,2.059,1079,1.935,1080,2.474,1081,2.284,1082,2.474,1083,1.358,1084,2.474,1085,1.358,1086,2.474,1087,2.128,1088,1.641,1089,2.374,1090,2.374,1091,2.474,1092,1.601,1093,1.826,1094,2.128,1095,2.474,1096,2.284,1097,2.474,1098,1.641,1099,2.374,1100,2.374,1101,3.245,1102,1.244,1103,1.454,1104,2.128,1105,2.059,1106,3.515,1107,2.474,1108,1.995,1109,1.935,1110,1.729,1111,2.374,1112,1.729,1113,2.128,1114,1.776,1115,1.729,1116,1.684,1117,2.059,1118,2.128,1119,2.059,1120,2.128,1121,2.128,1122,1.826,1123,2.374]],["title/interfaces/GridColumn.html",[0,0.074,957,1.401]],["body/interfaces/GridColumn.html",[0,0.136,2,0.724,3,0.066,4,0.053,5,0.046,8,0.216,9,2.256,12,0.134,13,0.623,14,0.79,15,2.673,18,0.322,19,0.008,20,1.083,21,4.05,22,3.227,26,0.157,27,2.039,30,2.11,34,1.109,35,1.116,36,1.389,38,1.595,39,3.212,40,2.864,43,1.737,47,2.473,50,0.917,52,1.332,55,2.901,57,0.944,58,1.784,59,0.601,60,1.061,61,1.141,64,1.634,65,2.882,66,1.627,67,2.003,72,1.848,73,0.531,75,3.848,77,1.192,78,0.117,79,1.474,80,1.437,83,2.175,85,1.049,90,3.07,91,1.634,96,1.002,99,0.977,100,1.737,102,2.272,112,1.737,114,1.996,115,0.899,118,1.026,119,3.312,120,3.147,127,1.247,128,3.476,129,1.934,130,1.91,131,0.532,132,2.931,133,3.002,134,0.876,136,1.595,137,2.4,138,1.91,139,2.038,140,1.512,141,2.051,142,2.706,144,2.797,146,2.052,148,1.848,150,0.003,151,0.004,152,0.003,156,1.223,171,0.681,174,0.594,179,0.69,182,2.003,183,0.531,190,1.533,207,2.706,210,1.267,215,3.312,216,0.353,222,0.61,228,1.634,232,0.351,266,1.825,276,1.498,290,1.004,292,1.825,309,1.6,311,1.552,326,2.272,340,1.368,530,1.825,533,2.175,539,2.673,567,1.552,570,1.474,595,0.802,603,1.064,627,2.125,647,1.867,654,1.093,693,1.026,717,1.026,744,1.707,759,1.784,783,1.848,788,2.157,820,1.867,842,1.512,851,1.411,927,2.038,949,1.552,952,2.666,953,2.619,954,1.141,956,2.643,957,2.445,958,3.291,959,3.1,963,2.043,964,1.848,967,1.368,969,2.864,991,1.305,1001,1.977,1002,1.977,1003,2.221,1004,2.064,1005,3.251,1006,2.552,1007,3.251,1008,3.691,1009,3.002,1010,3.691,1011,1.91,1012,2.221,1013,3.425,1014,1.595,1015,1.595,1016,4.022,1017,1.437,1018,1.116,1019,1.474,1020,1.402,1021,2.547,1022,1.552,1023,1.956,1024,2.209,1025,2.959,1026,4.012,1027,3.847,1028,3.909,1029,2.797,1030,3.524,1031,2.37,1032,1.275,1033,2.711,1034,2.858,1035,3.124,1036,3.847,1037,3.524,1038,4.234,1039,3.251,1040,3.002,1041,2.221,1042,3.002,1043,3.12,1044,2.217,1045,2.221,1046,3.552,1047,2.221,1048,2.221,1049,1.595,1050,1.595,1051,1.91,1052,2.051,1053,2.221,1054,1.552,1055,2.797,1056,2.688,1057,2.221,1058,2.051,1059,2.489,1060,1.825,1061,2.972,1062,1.956,1063,2.335,1064,3.251,1065,2.673,1066,4.708,1067,4.234,1068,4.708,1069,4.234,1070,1.997,1071,3.251,1072,3.251,1073,2.643,1074,3.251,1075,3.909,1076,2.335,1077,1.911,1078,2.706,1079,3.312,1080,3.251,1081,3.002,1082,3.251,1083,1.784,1084,3.251,1085,1.784,1086,3.251,1087,2.797,1088,2.157,1089,3.12,1090,3.12,1091,4.234,1092,2.104,1093,2.4,1094,2.797,1095,3.251,1096,3.002,1097,3.251,1098,2.157,1099,3.12,1100,3.12,1101,3.909,1102,1.634,1103,1.911,1104,2.797,1105,2.706,1106,4.708,1107,4.234,1108,1.791,1109,1.737,1110,1.552,1111,2.131,1112,1.552,1113,1.91,1114,1.595,1115,1.552,1116,1.512,1117,1.848,1118,1.91,1119,1.848,1120,1.91,1121,1.91,1122,1.639,1123,2.131]],["title/interfaces/GridDataFetchResult.html",[0,0.074,1484,2.319]],["body/interfaces/GridDataFetchResult.html",[0,0.12,1,2.183,2,0.438,3,0.04,4,0.032,5,0.028,8,0.13,9,1.459,10,3.408,12,0.277,13,0.446,14,0.408,15,2.659,18,0.249,19,0.008,20,1.074,22,0.89,25,1.236,26,0.143,27,1.554,28,1.117,30,1.892,34,1.377,36,1.815,39,0.847,40,2.044,42,1.05,47,0.736,50,0.874,52,0.558,53,1.829,54,1.117,55,3.179,56,1.89,59,0.849,60,1.317,61,2.164,62,0.789,63,1.729,64,1.922,66,0.794,67,0.827,69,2.704,71,0.897,73,0.454,74,2.004,77,1.179,78,0.077,80,0.868,81,0.915,83,1.129,84,2.247,85,0.622,86,2.87,87,1.61,88,0.99,90,3.06,91,0.675,93,3.669,96,0.955,99,0.97,101,2.072,102,0.72,108,2.044,109,1.232,111,2.247,114,0.594,115,0.849,118,1.289,120,0.868,127,0.753,128,1.762,129,1.105,131,0.766,132,1.292,134,0.919,139,1.459,140,0.913,143,2.266,145,2.092,146,0.847,149,1.588,150,0.003,151,0.003,152,0.002,159,0.559,161,1.627,162,1.195,165,0.622,171,0.412,173,2.004,174,0.207,177,0.42,179,0.58,181,1.195,182,0.827,183,0.479,189,2.25,190,1.036,195,0.554,206,0.938,210,0.341,216,0.391,217,0.72,222,0.844,225,1.195,226,1.957,232,0.597,266,0.753,272,0.913,276,0.778,282,1.019,283,3.484,285,1.289,290,0.994,292,2.448,306,0.485,309,1.096,312,1.405,317,1.719,321,1.719,323,0.689,326,1.911,327,2.602,341,1.719,343,1.403,396,1.387,405,0.494,432,0.847,452,0.778,455,0.789,463,0.219,473,1.188,510,1.206,512,1.354,522,1.093,524,1.387,533,1.434,575,2.195,582,1.4,594,0.675,595,0.794,596,1.373,601,0.704,603,0.371,605,0.403,606,0.702,607,0.675,613,1.081,617,1.772,627,1.679,628,2.451,645,1.154,647,1.008,651,1.154,659,0.594,662,0.607,690,0.675,691,0.704,692,1.036,696,0.646,717,0.62,719,1.206,724,1.922,726,1.458,729,0.827,731,1.567,745,1.771,759,0.736,763,0.62,773,1.082,789,0.847,816,1.082,820,0.771,822,0.99,844,1.019,851,0.582,854,0.736,916,1.762,922,1.117,927,0.607,928,1.829,950,2.141,951,1.498,952,2.122,954,0.689,956,2.633,957,2.192,963,1.211,966,1.019,967,0.827,969,1.603,970,1.154,971,1.154,991,2.563,1004,2.881,1014,0.963,1015,0.963,1017,0.868,1018,0.675,1019,0.89,1022,0.938,1023,1.679,1024,1.603,1025,1.951,1031,0.827,1032,2.195,1033,3.104,1034,1.292,1035,1.852,1044,1.986,1049,0.963,1050,2.556,1054,0.938,1060,1.811,1061,2.659,1062,1.679,1063,0.963,1065,1.387,1070,1.036,1073,0.753,1077,1.64,1083,1.206,1088,0.89,1092,2.088,1098,0.89,1102,2.593,1103,2.637,1112,1.536,1115,1.536,1127,1.669,1132,2.317,1173,1.719,1178,0.868,1182,2.524,1195,1.536,1202,0.938,1211,1.05,1212,0.827,1235,1.422,1238,2.004,1240,1.578,1241,1.179,1242,1.387,1261,1.496,1265,1.019,1268,1.117,1278,1.117,1321,1.05,1322,1.622,1330,0.99,1332,3.516,1395,0.868,1411,0.753,1427,0.913,1430,2.775,1431,1.117,1432,2.029,1433,1.622,1434,2.029,1435,1.239,1436,1.154,1437,1.239,1438,1.957,1439,2.485,1440,2.784,1441,1.239,1442,2.193,1443,2.029,1444,1.89,1445,0.938,1446,1.239,1447,1.957,1448,2.577,1449,2.029,1450,0.633,1451,1.496,1452,0.938,1453,1.082,1454,1.195,1455,0.827,1456,1.019,1457,1.262,1458,2.485,1459,3.609,1460,3.062,1461,1.195,1462,2.401,1463,1.154,1464,1.117,1465,1.117,1466,1.05,1467,1.957,1468,2.323,1469,1.154,1470,1.195,1471,1.195,1472,2.775,1473,1.195,1474,4.518,1475,1.89,1476,1.195,1477,2.485,1478,1.89,1479,3.182,1480,2.004,1481,1.239,1482,1.772,1483,2.029,1484,2.323,1485,2.029,1486,3.727,1487,1.89,1488,1.239,1489,1.239,1490,2.029,1491,1.195,1492,2.873,1493,1.239,1494,2.183,1495,1.89,1496,2.029,1497,1.239,1498,2.029,1499,2.029,1500,2.775,1501,2.577,1502,1.082,1503,1.05,1504,1.195,1505,1.239,1506,1.239,1507,1.019,1508,3.287,1509,4.244,1510,2.577,1511,1.239,1512,1.239,1513,4.408,1514,1.154,1515,2.255,1516,2.979,1517,3.727,1518,1.154,1519,1.239,1520,2.401,1521,1.05,1522,0.847,1523,1.239,1524,1.239,1525,3.17,1526,1.239,1527,2.401,1528,0.89,1529,0.963,1530,1.239,1531,2.12,1532,1.239,1533,1.154,1534,2.029,1535,2.029,1536,1.239,1537,1.239,1538,1.719,1539,1.117,1540,1.239,1541,1.239,1542,0.868,1543,1.239,1544,1.957,1545,2.577,1546,1.239,1547,1.239,1548,1.239,1549,2.029,1550,1.239,1551,2.029,1552,1.239,1553,2.577,1554,1.239,1555,1.154,1556,1.154,1557,1.239,1558,2.029,1559,1.239,1560,1.239,1561,1.239,1562,1.239,1563,1.239,1564,1.239,1565,1.195,1566,1.239,1567,2.029,1568,1.239,1569,1.195,1570,1.239,1571,1.806,1572,1.239,1573,2.577,1574,2.485,1575,1.239,1576,1.239,1577,3.53,1578,1.239,1579,2.029,1580,1.239,1581,1.239,1582,2.029,1583,2.029,1584,1.239,1585,1.239,1586,1.239,1587,1.117,1588,1.239,1589,1.239,1590,1.239,1591,1.239,1592,1.239,1593,1.239,1594,1.239,1595,2.979,1596,2.029,1597,2.029,1598,1.239,1599,1.239,1600,1.239,1601,1.239,1602,1.239,1603,1.239,1604,2.029,1605,2.029,1606,2.029,1607,2.029,1608,2.577,1609,1.239,1610,1.239,1611,1.239,1612,1.239,1613,2.029,1614,2.029,1615,2.979,1616,1.239,1617,1.239,1618,1.239,1619,1.239,1620,1.239,1621,2.979,1622,2.979,1623,0.963,1624,1.239,1625,1.239,1626,2.979,1627,2.029,1628,1.239,1629,1.239,1630,1.239,1631,2.577,1632,1.239,1633,1.195,1634,1.195,1635,1.239,1636,1.239,1637,1.239,1638,1.239,1639,1.239,1640,1.239,1641,1.239,1642,1.239,1643,1.239,1644,1.239,1645,1.239,1646,1.239,1647,1.239,1648,2.029,1649,1.239,1650,1.239,1651,1.239,1652,1.239,1653,1.239,1654,1.117,1655,1.239,1656,1.154,1657,1.239,1658,1.239,1659,1.239,1660,1.239,1661,1.239,1662,1.239,1663,1.239,1664,1.239,1665,1.239,1666,1.239,1667,1.239,1668,1.239,1669,1.239,1670,1.239,1671,1.239,1672,0.913,1673,1.239,1674,2.029,1675,1.239,1676,1.195,1677,1.239,1678,1.239,1679,1.239,1680,1.239,1681,2.029,1682,2.451,1683,1.239,1684,1.239,1685,1.239,1686,1.239,1687,1.239,1688,2.029,1689,2.029,1690,2.029,1691,1.239,1692,2.577,1693,2.979,1694,2.029,1695,1.239,1696,1.239,1697,1.239,1698,1.239,1699,1.239,1700,1.239,1701,1.239,1702,1.154,1703,1.239,1704,1.239,1705,1.239,1706,0.736,1707,1.239,1708,1.239,1709,1.239,1710,1.239,1711,1.239,1712,1.239,1713,1.239,1714,1.239,1715,1.239,1716,1.154,1717,1.195,1718,1.239,1719,1.239,1720,2.029,1721,2.029,1722,1.957,1723,1.239,1724,1.239,1725,2.029,1726,1.239,1727,2.029,1728,1.239,1729,1.239,1730,1.239,1731,1.239,1732,1.239,1733,1.239,1734,1.195,1735,1.239,1736,1.195,1737,1.239,1738,1.239,1739,1.239,1740,2.029,1741,1.239,1742,1.239,1743,1.239,1744,1.239,1745,1.239,1746,1.239,1747,1.239,1748,1.239,1749,1.239,1750,2.029,1751,2.979,1752,2.577,1753,1.239,1754,1.239,1755,1.239,1756,1.239,1757,2.029,1758,1.239,1759,1.239,1760,1.239,1761,1.239,1762,1.239,1763,1.239,1764,1.239,1765,1.354,1766,2.029,1767,1.239,1768,1.239,1769,1.239,1770,1.195,1771,1.239,1772,1.239,1773,1.239,1774,1.239,1775,1.239,1776,1.239,1777,1.239,1778,1.239,1779,1.239,1780,1.239,1781,1.239,1782,1.239,1783,1.239,1784,2.979,1785,1.239,1786,1.239,1787,1.239,1788,1.239,1789,1.239,1790,1.239,1791,1.195,1792,1.239,1793,1.239,1794,2.029,1795,1.239,1796,2.029,1797,1.239,1798,1.239,1799,2.029,1800,1.239,1801,1.239,1802,1.239,1803,1.239,1804,1.239,1805,2.577,1806,1.239,1807,1.239,1808,1.239,1809,1.239,1810,1.239,1811,1.239,1812,1.239,1813,1.239,1814,1.239,1815,1.239,1816,1.239,1817,1.239,1818,1.239,1819,1.05,1820,1.195,1821,1.239,1822,1.239,1823,1.05,1824,1.239,1825,1.239,1826,2.029,1827,3.287,1828,1.05,1829,1.239,1830,1.239,1831,1.239,1832,1.239,1833,1.239,1834,1.239,1835,2.029,1836,1.239,1837,1.239,1838,1.957,1839,1.239,1840,1.154,1841,1.239,1842,1.239,1843,1.239,1844,1.239,1845,1.239,1846,1.239]],["title/interfaces/GridState.html",[0,0.074,1527,2.397]],["body/interfaces/GridState.html",[0,0.119,1,2.171,2,0.434,3,0.039,4,0.032,5,0.028,8,0.129,9,1.452,10,3.399,12,0.276,13,0.444,14,0.589,15,2.651,18,0.255,19,0.008,20,1.18,22,0.883,25,1.229,26,0.143,27,1.547,28,1.108,30,1.887,34,1.374,36,1.812,39,0.84,40,2.036,42,1.041,47,0.731,50,0.872,52,0.555,53,1.817,54,1.108,55,3.121,56,1.878,59,0.847,60,1.243,61,2.066,62,0.782,63,1.723,64,1.915,66,0.788,67,1.345,69,2.692,71,0.891,73,0.465,74,1.568,77,1.172,78,0.077,80,0.861,81,0.909,83,1.122,84,2.238,85,0.618,86,2.858,87,1.603,88,0.983,90,3.054,91,0.669,93,3.66,96,0.953,99,0.965,101,2.067,102,0.715,108,2.036,109,1.231,111,2.238,114,0.59,115,0.865,118,1.282,120,0.861,127,0.747,128,1.752,129,1.098,131,0.76,132,1.283,134,0.916,139,1.452,140,0.906,143,2.258,145,2.083,146,0.84,149,1.584,150,0.003,151,0.003,152,0.002,159,0.554,161,1.625,162,1.185,165,0.618,171,0.408,173,1.993,174,0.206,177,0.418,179,0.578,181,1.185,182,0.82,183,0.478,189,2.238,190,1.309,195,0.551,206,0.93,210,0.338,216,0.39,217,0.715,222,0.843,225,1.185,226,1.944,232,0.596,266,0.747,272,0.906,276,0.773,282,1.011,283,3.293,285,1.282,290,0.987,292,2.441,306,0.481,309,1.294,312,1.401,317,1.708,321,1.708,323,0.684,326,2.044,327,2.589,341,1.708,343,1.395,396,1.378,405,0.491,432,0.84,452,0.773,455,0.782,463,0.217,473,1.184,510,1.198,512,1.71,522,1.087,524,1.378,533,1.426,575,2.187,582,1.395,594,0.669,595,0.788,596,1.366,601,0.699,603,0.368,605,0.4,606,0.698,607,0.669,613,1.074,617,1.761,627,1.796,628,2.439,645,1.145,647,1.002,651,1.146,659,0.59,662,0.602,690,0.669,691,0.699,692,1.03,696,0.641,717,0.615,719,1.198,724,1.915,726,1.449,729,0.82,731,1.802,745,1.762,759,0.731,763,0.615,773,1.073,789,0.84,816,1.073,820,0.764,822,0.983,844,1.011,851,0.578,854,0.731,916,2.027,922,1.108,927,0.602,928,1.817,950,1.842,951,1.49,952,2.161,954,0.684,956,2.627,957,2.186,963,1.204,966,1.011,967,0.82,969,1.594,970,1.145,971,1.145,991,2.555,1004,2.877,1014,0.956,1015,0.956,1017,0.861,1018,0.669,1019,0.883,1022,0.93,1023,1.67,1024,1.594,1025,1.94,1031,0.82,1032,2.187,1033,3.099,1034,1.283,1035,1.842,1044,1.979,1049,0.956,1050,2.306,1054,0.93,1060,1.802,1061,2.651,1062,1.932,1063,1.568,1065,0.84,1070,1.03,1073,0.747,1077,1.631,1083,1.198,1088,0.883,1092,2.078,1098,1.449,1102,2.625,1103,2.63,1112,1.526,1115,1.526,1127,1.658,1132,2.306,1173,1.708,1178,0.861,1182,2.773,1195,1.526,1202,0.93,1211,1.708,1212,0.82,1235,1.413,1238,1.993,1240,1.568,1241,1.172,1242,1.378,1261,1.486,1265,1.011,1268,1.108,1278,1.108,1321,1.041,1322,1.612,1330,0.983,1332,3.506,1395,0.861,1411,0.747,1427,0.906,1430,2.762,1431,1.108,1432,2.016,1433,1.612,1434,2.016,1435,1.229,1436,1.145,1437,1.229,1438,1.944,1439,2.471,1440,2.773,1441,1.229,1442,2.184,1443,2.016,1444,1.878,1445,0.93,1446,1.229,1447,1.944,1448,2.563,1449,2.016,1450,0.628,1451,1.486,1452,0.93,1453,1.073,1454,1.185,1455,0.82,1456,1.011,1457,1.254,1458,2.471,1459,3.602,1460,3.049,1461,1.185,1462,2.388,1463,1.145,1464,1.108,1465,1.108,1466,1.041,1467,1.944,1468,2.31,1469,1.145,1470,1.185,1471,1.185,1472,2.762,1473,1.185,1474,4.65,1475,1.878,1476,1.185,1477,2.471,1478,1.878,1479,3.17,1480,1.993,1481,1.229,1482,1.761,1483,1.229,1484,1.817,1485,1.229,1486,2.965,1487,2.762,1488,1.229,1489,1.229,1490,2.016,1491,1.185,1492,2.859,1493,1.229,1494,2.171,1495,2.762,1496,2.016,1497,1.229,1498,2.016,1499,2.016,1500,2.762,1501,2.563,1502,1.073,1503,1.041,1504,1.185,1505,1.229,1506,1.229,1507,1.011,1508,3.273,1509,4.233,1510,2.563,1511,1.229,1512,1.229,1513,4.399,1514,1.145,1515,2.244,1516,2.965,1517,3.715,1518,1.145,1519,1.229,1520,2.388,1521,1.041,1522,0.84,1523,2.016,1524,2.016,1525,3.391,1526,2.016,1527,2.762,1528,1.449,1529,1.568,1530,2.016,1531,3.055,1532,2.965,1533,1.145,1534,2.016,1535,2.016,1536,1.229,1537,1.229,1538,1.708,1539,1.108,1540,1.229,1541,1.229,1542,0.861,1543,1.229,1544,1.944,1545,2.563,1546,1.229,1547,1.229,1548,1.229,1549,2.016,1550,1.229,1551,2.016,1552,1.229,1553,2.563,1554,1.229,1555,1.145,1556,1.145,1557,1.229,1558,2.016,1559,1.229,1560,1.229,1561,1.229,1562,1.229,1563,1.229,1564,1.229,1565,1.185,1566,1.229,1567,2.016,1568,1.229,1569,1.185,1570,1.229,1571,1.796,1572,1.229,1573,2.563,1574,2.471,1575,1.229,1576,1.229,1577,3.517,1578,1.229,1579,2.016,1580,1.229,1581,1.229,1582,2.016,1583,2.016,1584,1.229,1585,1.229,1586,1.229,1587,1.108,1588,1.229,1589,1.229,1590,1.229,1591,1.229,1592,1.229,1593,1.229,1594,1.229,1595,2.965,1596,2.016,1597,2.016,1598,1.229,1599,1.229,1600,1.229,1601,1.229,1602,1.229,1603,1.229,1604,2.016,1605,2.016,1606,2.016,1607,2.016,1608,2.563,1609,1.229,1610,1.229,1611,1.229,1612,1.229,1613,2.016,1614,2.016,1615,2.965,1616,1.229,1617,1.229,1618,1.229,1619,1.229,1620,1.229,1621,2.965,1622,2.965,1623,0.956,1624,1.229,1625,1.229,1626,2.965,1627,2.016,1628,1.229,1629,1.229,1630,1.229,1631,2.563,1632,1.229,1633,1.185,1634,1.185,1635,1.229,1636,1.229,1637,1.229,1638,1.229,1639,1.229,1640,1.229,1641,1.229,1642,1.229,1643,1.229,1644,1.229,1645,1.229,1646,1.229,1647,1.229,1648,2.016,1649,1.229,1650,1.229,1651,1.229,1652,1.229,1653,1.229,1654,1.108,1655,1.229,1656,1.145,1657,1.229,1658,1.229,1659,1.229,1660,1.229,1661,1.229,1662,1.229,1663,1.229,1664,1.229,1665,1.229,1666,1.229,1667,1.229,1668,1.229,1669,1.229,1670,1.229,1671,1.229,1672,0.906,1673,1.229,1674,2.016,1675,1.229,1676,1.185,1677,1.229,1678,1.229,1679,1.229,1680,1.229,1681,2.016,1682,2.439,1683,1.229,1684,1.229,1685,1.229,1686,1.229,1687,1.229,1688,2.016,1689,2.016,1690,2.016,1691,1.229,1692,2.563,1693,2.965,1694,2.016,1695,1.229,1696,1.229,1697,1.229,1698,1.229,1699,1.229,1700,1.229,1701,1.229,1702,1.145,1703,1.229,1704,1.229,1705,1.229,1706,0.731,1707,1.229,1708,1.229,1709,1.229,1710,1.229,1711,1.229,1712,1.229,1713,1.229,1714,1.229,1715,1.229,1716,1.145,1717,1.185,1718,1.229,1719,1.229,1720,2.016,1721,2.016,1722,1.944,1723,1.229,1724,1.229,1725,2.016,1726,1.229,1727,2.016,1728,1.229,1729,1.229,1730,1.229,1731,1.229,1732,1.229,1733,1.229,1734,1.185,1735,1.229,1736,1.185,1737,1.229,1738,1.229,1739,1.229,1740,2.016,1741,1.229,1742,1.229,1743,1.229,1744,1.229,1745,1.229,1746,1.229,1747,1.229,1748,1.229,1749,1.229,1750,2.016,1751,2.965,1752,2.563,1753,1.229,1754,1.229,1755,1.229,1756,1.229,1757,2.016,1758,1.229,1759,1.229,1760,1.229,1761,1.229,1762,1.229,1763,1.229,1764,1.229,1765,1.345,1766,2.016,1767,1.229,1768,1.229,1769,1.229,1770,1.185,1771,1.229,1772,1.229,1773,1.229,1774,1.229,1775,1.229,1776,1.229,1777,1.229,1778,1.229,1779,1.229,1780,1.229,1781,1.229,1782,1.229,1783,1.229,1784,2.965,1785,1.229,1786,1.229,1787,1.229,1788,1.229,1789,1.229,1790,1.229,1791,1.185,1792,1.229,1793,1.229,1794,2.016,1795,1.229,1796,2.016,1797,1.229,1798,1.229,1799,2.016,1800,1.229,1801,1.229,1802,1.229,1803,1.229,1804,1.229,1805,2.563,1806,1.229,1807,1.229,1808,1.229,1809,1.229,1810,1.229,1811,1.229,1812,1.229,1813,1.229,1814,1.229,1815,1.229,1816,1.229,1817,1.229,1818,1.229,1819,1.041,1820,1.185,1821,1.229,1822,1.229,1823,1.041,1824,1.229,1825,1.229,1826,2.016,1827,3.273,1828,1.041,1829,1.229,1830,1.229,1831,1.229,1832,1.229,1833,1.229,1834,1.229,1835,2.016,1836,1.229,1837,1.229,1838,1.944,1839,1.229,1840,1.145,1841,1.229,1842,1.229,1843,1.229,1844,1.229,1845,1.229,1846,1.229]],["title/interfaces/HasAngularFinder.html",[0,0.074,593,3.43]],["body/interfaces/HasAngularFinder.html",[0,0.095,2,1.16,3,0.105,4,0.084,5,0.074,8,0.345,12,0.214,13,0.62,18,0.31,19,0.008,20,1.184,26,0.133,50,0.641,57,1.906,59,0.657,78,0.098,81,1.481,85,0.792,87,2.028,91,1.787,115,0.828,139,2.221,149,1.258,150,0.005,151,0.007,152,0.005,161,1.113,183,0.371,208,3.177,216,0.443,222,0.862,232,0.53,272,3.052,294,2.359,306,1.284,309,1.523,312,1.113,343,2.254,384,4.117,385,4.376,386,2.561,390,4.117,396,2.83,409,4.761,410,3.343,411,3.96,413,4.761,428,3.841,429,3.615,432,3.1,463,0.579,464,3.166,465,3.412,466,3.166,467,5.97,468,4.833,473,1.047,477,3.166,510,2.917,512,2.762,516,4.117,517,3.992,518,3.058,519,4.484,520,2.756,521,2.7,522,2.02,523,3.717,524,2.244,525,3.717,526,5.133,528,6.473,530,1.996,531,3.717,532,3.717,533,1.826,534,3.717,535,2.867,536,3.717,540,5.157,543,5.557,544,3.412,545,3.717,546,3.556,547,4.117,548,4.117,549,3.717,550,2.244,551,3.717,552,3.717,553,5.133,554,5.133,555,3.717,556,3.412,557,4.484,558,3.717,559,4.761,560,4.484,561,4.303,562,3.556,563,3.717,564,3.717,565,3.717,566,3.717,567,2.485,568,3.717,569,3.717,570,2.359,571,4.7,572,5.133,573,3.717,574,3.556,575,2.575,576,3.556,577,3.717,578,2.959,579,3.717,580,3.717,581,5.134,582,1.233,583,2.975,584,3.556,585,3.717,586,3.717,587,3.31,588,4.687,589,4.687,590,3.857,591,4.687,592,4.687,593,5.518]],["title/interfaces/HasFinder.html",[0,0.074,3166,2.913]],["body/interfaces/HasFinder.html",[0,0.124,2,0.779,3,0.071,4,0.057,5,0.05,8,0.232,12,0.144,13,0.474,14,0.35,18,0.295,19,0.008,20,0.795,25,1.058,26,0.143,34,0.689,35,1.201,41,2.497,50,0.934,52,0.607,57,2.114,59,0.857,66,1.582,71,1.892,73,0.521,77,1.282,78,0.111,81,2.119,85,1.25,87,1.55,91,2.015,99,1.03,109,0.556,113,1.869,114,1.058,115,0.741,129,2.202,131,0.33,139,2.343,147,1.715,149,0.845,150,0.003,151,0.006,152,0.003,156,1.87,161,0.748,165,0.532,171,1.344,174,0.369,177,0.359,179,0.653,182,1.472,183,0.54,190,1.127,195,0.681,208,2.834,210,1.019,216,0.334,222,0.853,228,1.201,232,0.568,271,2.765,272,2.73,276,0.845,294,2.275,306,0.863,309,1.576,312,1.074,334,1.626,343,2.015,359,2.055,386,2.495,392,2.206,394,2.53,396,2.765,402,1.869,409,3.702,410,3.661,411,4.407,413,4.698,416,4.052,421,1.869,428,3.628,429,3.233,432,2.928,444,1.869,452,1.978,458,1.869,463,0.389,464,2.127,465,2.293,466,2.127,468,4.299,470,2.951,471,2.621,472,2.055,473,0.703,475,4.153,477,3.052,488,4.399,489,3.762,490,4.399,491,2.621,492,3.584,493,2.621,497,2.621,499,2.621,510,3.067,512,2.858,515,2.621,517,3.57,518,2.949,519,3.428,520,2.459,521,2.604,522,1.817,523,2.497,524,2.164,525,2.497,530,1.341,531,2.497,532,2.497,533,2.06,534,2.497,535,3.233,536,2.497,540,4.381,543,5.047,544,2.293,545,2.497,546,2.389,549,2.497,550,1.508,551,2.497,552,2.497,555,2.497,556,2.293,557,4.009,558,2.497,559,4.283,560,4.009,561,3.848,562,2.389,563,2.497,564,2.497,565,2.497,566,2.497,567,1.67,568,2.497,569,4.191,570,1.585,573,2.497,574,2.389,575,2.664,576,2.389,577,2.497,578,2.853,579,2.497,580,2.497,581,4.191,582,0.828,583,2.275,584,2.389,585,2.497,586,2.497,587,2.53,588,3.584,589,3.584,590,2.949,591,3.584,592,3.584,597,2.202,598,2.164,603,0.661,605,1.317,707,2.853,708,2.127,716,3.532,717,1.851,718,2.127,719,1.311,720,2.055,722,1.926,723,3.052,724,1.723,725,3.052,726,2.275,727,3.646,728,3.449,729,2.47,730,2.127,731,2.791,733,2.127,735,2.604,736,2.127,738,2.396,739,1.869,740,2.127,744,1.254,745,1.311,746,2.127,747,2.127,749,2.127,750,2.127,752,1.988,753,2.949,754,2.055,755,2.127,756,1.926,757,1.988,758,2.127,759,1.311,760,2.764,761,3.052,763,1.103,764,2.127,782,2.206,789,1.508,854,1.311,889,2.206,911,2.497,913,1.926,918,2.497,950,1.585,1070,1.127,1078,1.988,1085,2.404,1093,1.763,1110,2.396,1116,1.626,1122,1.763,1261,1.626,1459,1.715,1494,1.869,1503,1.869,1507,1.814,1765,2.112,1873,2.206,1946,3.337,1999,2.497,2024,2.621,2065,3.848,2109,2.621,2366,1.988,2790,2.621,3062,4.639,3095,2.497,3096,2.766,3097,2.766,3098,2.766,3099,2.766,3100,2.766,3101,3.969,3102,2.766,3103,2.766,3104,2.766,3105,2.766,3106,4.642,3107,2.621,3108,2.766,3109,2.766,3110,4.642,3111,2.766,3112,2.621,3113,2.766,3114,2.621,3115,2.766,3116,2.766,3117,2.766,3118,2.766,3119,3.969,3120,2.766,3121,2.621,3122,2.766,3123,2.766,3124,2.766,3125,2.766,3126,2.766,3127,2.621,3128,2.766,3129,2.766,3130,2.766,3131,2.766,3132,2.766,3133,2.621,3134,2.766,3135,3.969,3136,3.969,3137,2.766,3138,4.642,3139,2.766,3140,4.642,3141,2.766,3142,2.766,3143,2.766,3144,2.621,3145,2.766,3146,2.766,3147,2.766,3148,2.766,3149,2.766,3150,2.766,3151,3.969,3152,2.293,3153,2.621,3154,2.766,3155,2.766,3156,2.766,3157,2.389,3158,2.766,3159,2.766,3160,2.766,3161,2.766,3162,2.766,3163,2.766,3164,2.766,3165,2.766,3166,3.584]],["title/classes/Hertz.html",[78,0.077,3419,3.684]],["body/classes/Hertz.html",[3,0.071,4,0.057,5,0.05,8,0.484,12,0.145,13,0.477,14,0.73,18,0.322,19,0.008,20,1.341,25,2.454,26,0.102,34,1.268,62,2.845,71,1.975,73,0.522,78,0.095,84,3.325,85,1.156,109,1.024,115,0.942,131,0.793,134,1.182,150,0.003,151,0.005,152,0.003,154,1.067,161,1.669,165,0.768,174,0.894,176,1.529,177,0.767,179,0.962,195,1.143,208,1.558,222,0.547,231,1.322,232,0.475,312,1.457,322,2.918,334,3.825,469,3.34,473,1.37,522,2.209,582,0.835,603,0.954,629,3.941,682,2.582,786,4.53,847,2.311,916,2.542,953,2.993,1031,2.482,1037,3.873,1077,2.584,1125,2.643,1126,5.822,1127,3.059,1130,5.606,1132,2.476,1133,4.978,1134,4.978,1135,5.388,1136,5.388,1137,6.399,1138,6.098,1139,6.098,1140,5.606,1141,5.091,1142,5.772,1143,4.825,1144,5.47,1150,1.982,1163,3.477,1164,3.477,1165,2.964,1166,2.964,1170,5.388,1171,5.961,1172,3.477,1173,2.697,1174,5.679,1175,3.142,1176,4.69,1177,4.708,1178,3.011,1179,4.288,1180,3.992,1181,3.992,1182,2.697,1183,3.992,1184,5.388,1185,3.477,1186,3.477,1187,4.663,1188,3.477,1189,3.477,1190,4.663,1191,5.696,1192,3.477,1193,3.477,1194,3.477,1195,3.484,1196,5.312,1197,5.312,1198,6.01,1199,5.606,1200,3.477,1201,4.419,1202,2.815,1203,2.964,1204,2.964,1205,2.964,1206,2.964,1207,2.964,1208,2.964,1209,2.964,1210,2.789,1211,1.884,1212,1.484,1213,3.992,1214,3.992,1215,3.992,1216,2.789,1217,2.789,1218,2.643,1219,2.643,1220,2.789,1221,2.789,1222,3.992,1223,3.992,1224,2.789,3419,6.589,3420,6.561,3421,6.561,3422,6.561,3423,3.923,3424,3.923,3425,3.923,3426,3.923,3427,3.923,3428,3.923,3429,3.923,3430,3.923,3431,3.923,3432,3.923,3433,3.923,3434,3.923,3435,3.923,3436,3.923,3437,3.923,3438,3.923,3439,3.923,3440,3.923,3441,3.923,3442,3.923,3443,3.923,3444,3.923]],["title/interfaces/ISubscriptionTracker.html",[0,0.074,3445,3.43]],["body/interfaces/ISubscriptionTracker.html",[0,0.131,2,1.157,3,0.105,4,0.084,5,0.074,8,0.345,12,0.214,14,0.655,18,0.28,19,0.008,26,0.132,50,0.885,52,1.137,57,2.085,59,1.053,78,0.098,85,1.262,113,3.837,114,1.571,149,1.584,150,0.005,151,0.006,152,0.005,159,1.477,161,1.111,165,0.997,174,0.758,176,1.505,177,0.673,179,0.729,183,0.37,195,0.974,216,0.409,222,0.779,232,0.483,288,2.951,306,2.046,312,1.699,325,5.51,343,1.783,389,4.913,463,0.578,473,1.044,583,2.354,595,1.281,1232,4.689,1241,2.403,1451,3.856,1452,2.479,1455,2.186,1654,4.68,2059,7.17,2064,6.81,3445,6.037,3446,6.81,3447,4.689,3448,6.464,3449,7.832,3450,5.122,3451,7.832,3452,7.67,3453,5.779,3454,6.464,3455,6.464,3456,5.918,3457,6.464,3458,8.444,3459,7.083,3460,5.779,3461,7.439,3462,5.779,3463,7.439,3464,6.464,3465,5.122,3466,5.122,3467,5.122,3468,4.689,3469,5.122,3470,5.122,3471,4.689,3472,5.122,3473,5.122,3474,5.122,3475,6.464,3476,5.122,3477,5.122,3478,5.122,3479,5.122,3480,6.464,3481,6.464,3482,5.122,3483,5.122,3484,5.122,3485,5.122,3486,5.122,3487,5.122]],["title/classes/IdGenerator.html",[78,0.077,864,2.573]],["body/classes/IdGenerator.html",[3,0.125,4,0.1,5,0.088,8,0.41,12,0.254,13,0.688,14,0.617,18,0.284,19,0.008,25,2.345,26,0.125,50,0.76,73,0.535,78,0.116,79,3.512,131,0.583,134,0.961,150,0.006,151,0.007,152,0.006,154,1.868,161,1.658,165,1.108,171,1.294,174,0.818,176,1.294,177,0.634,179,0.687,195,1.051,231,2.315,232,0.455,273,6,302,4.884,311,3.478,582,1.725,795,3.892,864,4.888,866,5.468,2000,6.577,2452,4.884,3488,7.894,3489,6.089,3490,8.623,3491,6.871,3492,6.871,3493,8.106,3494,6.871,3495,6.871,3496,8.106,3497,6.871,3498,6.871,3499,6.871]],["title/interfaces/InternalRegistrationData.html",[0,0.074,3500,3.227]],["body/interfaces/InternalRegistrationData.html",[0,0.142,2,1.157,3,0.105,4,0.084,5,0.074,8,0.345,12,0.327,13,0.619,14,0.655,18,0.255,19,0.008,20,1.633,26,0.132,43,4.358,50,0.64,64,2.251,73,0.522,78,0.098,79,2.354,81,1.477,85,1.148,96,0.755,99,1.066,115,0.827,131,0.713,136,3.215,149,1.99,150,0.005,151,0.006,152,0.007,156,2.04,160,5.152,177,0.775,195,0.704,216,0.373,219,2.513,222,0.779,232,0.556,311,2.479,410,2.415,463,0.578,473,1.318,522,1.921,575,2.037,582,1.552,603,1.238,788,2.354,795,4.431,1013,3.159,1051,3.051,1083,1.947,1085,1.947,1178,2.295,1873,3.276,1926,4.297,1958,4.366,2083,4.366,2149,5.184,2450,4.68,2725,5.184,2738,2.971,3157,3.548,3252,6.254,3290,5.184,3500,5.68,3501,3.276,3502,3.159,3503,4.108,3504,5.51,3505,5.653,3506,4.689,3507,4.689,3508,5.51,3509,4.689,3510,7.08,3511,5.184,3512,4.366,3513,3.709,3514,4.689,3515,4.108,3516,4.689,3517,6.484,3518,4.689,3519,4.689,3520,4.689,3521,5.918,3522,5.918,3523,5.918,3524,5.918,3525,4.689,3526,4.689,3527,4.689,3528,4.689,3529,4.689,3530,4.689,3531,4.689,3532,4.689,3533,5.918,3534,4.689,3535,4.689,3536,4.689,3537,4.689,3538,4.689,3539,4.689,3540,4.689,3541,4.689]],["title/components/LoadingIndicatorComponent.html",[183,0.291,686,1.803]],["body/components/LoadingIndicatorComponent.html",[3,0.083,4,0.067,5,0.059,8,0.273,12,0.263,13,0.531,14,0.411,18,0.297,19,0.008,26,0.129,27,1.352,30,1.665,34,1.107,36,1.579,47,2.58,59,0.519,60,0.916,61,2.415,63,1.269,73,0.41,78,0.077,81,1.598,96,0.931,99,1.154,109,1.147,115,0.709,131,0.65,134,1.283,144,3.301,149,0.993,150,0.004,151,0.005,152,0.004,156,1.056,161,1.592,170,2.483,174,0.819,176,0.861,177,0.765,179,0.848,183,0.456,187,1.772,195,0.762,210,1.111,216,0.234,219,1.576,228,1.929,232,0.303,283,1.911,285,1.772,306,1.014,323,2.906,405,1.034,452,1.358,463,0.457,520,2.154,522,1.713,582,1.63,594,1.411,595,1.386,596,1.381,597,1.411,598,1.772,601,1.474,604,1.729,605,1.753,606,1.85,607,1.929,613,1.888,627,1.81,628,4.081,646,1.442,647,1.386,648,1.442,649,3.376,650,2.015,651,1.474,652,2.015,653,2.756,654,1.381,655,1.862,656,2.015,657,1.729,658,2.015,659,1.243,660,2.015,661,1.65,662,2.126,663,1.689,664,3.376,665,1.576,666,1.689,667,1.729,668,1.576,669,1.772,670,2.015,671,1.816,672,2.015,673,1.862,674,1.729,675,2.397,676,2.015,677,1.729,678,3.376,679,1.689,680,2.83,681,1.689,682,2.04,683,1.689,684,2.756,685,1.689,686,3.042,687,2.015,688,1.65,689,1.862,690,1.411,691,2.904,692,1.324,693,1.296,694,2.015,695,1.772,696,1.352,697,2.015,698,1.689,699,1.962,700,2.015,701,1.65,702,1.862,703,2.015,744,1.474,745,2.106,763,2.02,786,3.762,788,2.547,854,2.106,988,3.71,1033,1.689,1044,1.381,1085,2.4,1103,3.387,1104,3.301,1245,2.072,1247,2.336,1249,2.499,1251,4.723,1253,5.786,1261,1.911,1290,2.934,1332,3.527,1343,3.08,1346,4.723,1378,5.382,1403,2.807,1459,2.756,1468,3.913,1542,2.483,1656,3.762,1716,2.414,1765,1.729,1770,4.186,1791,2.499,2360,4.374,2398,5.159,2401,4.799,2482,3.838,2630,3.71,2828,7.339,2884,4.053,3286,6.719,3293,5.541,3542,6.222,3543,3.454,3544,6.252,3545,7.659,3546,7.125,3547,6.252,3548,7.125,3549,7.125,3550,8.02,3551,7.125,3552,4.572,3553,4.572,3554,4.572,3555,8.63,3556,7.758,3557,6.252,3558,7.125,3559,7.125,3560,4.572,3561,8.63,3562,6.252,3563,6.788,3564,6.252,3565,6.252,3566,6.252,3567,6.252,3568,6.252,3569,7.659,3570,6.252,3571,6.252,3572,6.252,3573,6.252,3574,4.572,3575,4.572,3576,4.572,3577,4.572,3578,4.572,3579,4.572,3580,4.572,3581,7.125,3582,8.28,3583,4.572,3584,6.252,3585,5.541,3586,4.572,3587,6.252,3588,4.572,3589,5.073,3590,6.252,3591,4.572,3592,4.572,3593,4.572]],["title/directives/MinMaxValidator.html",[648,1.432,698,1.677]],["body/directives/MinMaxValidator.html",[3,0.07,4,0.056,5,0.049,8,0.228,12,0.141,14,0.581,18,0.227,19,0.008,20,1.534,25,1.041,26,0.118,34,0.977,36,1.892,40,1.349,50,0.784,59,0.887,61,1.207,62,1.381,65,1.6,66,0.849,73,0.372,78,0.093,84,2.508,85,0.523,87,1.063,88,1.735,93,1.838,96,0.5,99,1.443,101,1.834,108,1.349,109,1.329,115,0.434,130,2.021,131,0.789,143,1.319,145,1.381,149,1.538,150,0.003,151,0.005,152,0.003,159,1.654,161,1.64,165,0.755,171,0.721,173,2.852,174,0.614,176,0.721,177,0.353,179,0.936,183,0.501,195,0.467,216,0.436,217,1.261,218,2.892,222,0.885,228,2.594,232,0.599,263,2.721,271,1.483,276,0.832,292,1.901,294,1.559,312,0.736,327,1.895,343,1.181,359,2.914,405,0.866,463,0.383,469,1.785,473,0.997,522,0.92,582,1.175,603,0.65,604,1.448,605,1.385,606,1.27,607,1.181,612,1.785,613,2.139,627,1.108,648,2.233,675,2.588,682,2.512,685,2.038,688,2.335,692,1.108,698,2.616,699,2.368,727,1.956,744,1.234,756,1.895,779,3.541,790,3.668,810,3.922,818,2.914,833,2.721,835,3.922,854,2.18,862,3.393,863,1.29,886,4.889,920,3.964,921,3.106,992,4.889,1030,1.956,1044,1.156,1103,1.991,1174,2.456,1176,3.871,1202,1.642,1218,2.578,1241,1.818,1242,2.138,1245,1.735,1343,2.578,1395,1.52,1411,1.319,1445,1.642,1455,1.448,1456,1.785,1465,2.819,1466,2.65,1480,2.432,1542,1.52,1571,2.192,1672,1.6,1682,3.847,1765,2.087,1819,2.65,1946,1.956,2131,5.35,2132,3.5,2185,4.359,2251,3.618,2401,3.717,2444,3.716,2485,4.478,2490,5.057,2517,3.541,2518,3.541,2522,4.478,2524,6.541,2525,3.106,2526,4.478,2559,2.892,2573,4.478,2635,2.892,2738,2.248,2768,3.393,3177,3.106,3202,4.169,3206,3.106,3207,4.478,3209,2.456,3214,3.393,3215,3.393,3218,2.578,3219,3.393,3220,5.865,3221,4.478,3226,3.393,3228,2.892,3230,4.891,3232,3.393,3233,3.393,3234,3.393,3237,3.393,3238,3.393,3248,3.393,3261,3.393,3299,2.892,3316,2.892,3318,7.145,3326,6.654,3328,4.891,3335,4.891,3379,2.892,3380,2.892,3381,3.393,3393,6.795,3395,4.771,3471,3.106,3594,5.35,3595,5.518,3596,6.471,3597,5.518,3598,5.518,3599,5.518,3600,3.828,3601,5.518,3602,6.471,3603,3.717,3604,3.393,3605,2.721,3606,3.828,3607,3.828,3608,3.828,3609,3.828,3610,6.471,3611,3.828,3612,3.828,3613,3.393,3614,3.828,3615,3.828,3616,3.828,3617,3.828,3618,3.828,3619,3.828,3620,3.828,3621,3.828,3622,3.828,3623,3.828,3624,3.828,3625,3.828,3626,3.828,3627,3.106,3628,3.828,3629,3.828,3630,6.471,3631,3.828,3632,3.828,3633,3.828,3634,3.828,3635,3.828,3636,5.518,3637,3.828,3638,3.828,3639,5.518,3640,7.082,3641,7.821,3642,7.082,3643,5.518,3644,3.828,3645,6.471,3646,5.518,3647,3.828,3648,3.828,3649,3.828,3650,3.828,3651,3.828,3652,3.828,3653,5.518,3654,3.828,3655,6.471,3656,6.471,3657,5.518,3658,5.518,3659,5.518,3660,3.828,3661,3.828,3662,3.828,3663,3.828,3664,3.828,3665,6.471,3666,3.828,3667,3.828,3668,3.828,3669,5.518,3670,3.828,3671,5.518,3672,4.891,3673,4.891,3674,5.518,3675,5.518,3676,5.518,3677,3.393,3678,3.828,3679,3.828,3680,3.828,3681,3.828,3682,3.828,3683,3.828,3684,3.828,3685,3.828,3686,3.828,3687,3.828,3688,3.393,3689,3.828,3690,3.828,3691,4.891,3692,3.828,3693,6.471,3694,3.828,3695,3.828,3696,3.828,3697,3.828,3698,5.518,3699,3.828,3700,3.828,3701,3.828,3702,3.828,3703,3.828,3704,3.828,3705,3.828]],["title/interfaces/MockRecord.html",[0,0.074,960,2.913]],["body/interfaces/MockRecord.html",[0,0.112,2,1.372,3,0.124,4,0.1,5,0.088,12,0.253,13,0.687,17,5.753,18,0.325,19,0.008,26,0.147,73,0.544,131,0.731,149,1.489,150,0.006,151,0.007,152,0.006,177,0.85,190,2.665,222,0.668,960,5.528,1150,2.07,1897,6.954,2410,4.616,2412,4.616,2553,6.954,2554,4.871,2556,4.871,3706,5.56,3707,5.56,3708,8.158,3709,7.634,3710,5.56,3711,7.173,3712,6.073,3713,6.073,3714,6.073,3715,6.073,3716,6.073]],["title/interfaces/MultiSelectOption.html",[0,0.074,2449,3.058]],["body/interfaces/MultiSelectOption.html",[0,0.125,2,1.058,3,0.096,4,0.077,5,0.068,8,0.315,12,0.195,13,0.585,18,0.268,19,0.008,20,1.566,26,0.147,31,4.419,34,1.219,36,1.171,50,0.898,52,0.824,59,0.869,65,2.208,73,0.518,78,0.089,79,2.805,81,1.351,85,0.942,91,1.631,96,0.69,109,0.755,115,0.921,118,1.498,131,0.449,134,0.739,143,3.175,150,0.004,151,0.006,152,0.004,159,1.351,174,0.501,177,0.488,179,0.934,183,0.441,190,1.994,216,0.449,222,0.746,231,1.78,232,0.558,276,1.148,312,1.016,340,1.999,386,1.562,405,1.953,455,3.037,463,0.528,470,1.821,473,1.56,520,1.821,583,2.152,603,1.429,605,0.975,606,1.037,607,1.631,647,1.698,659,1.437,661,2.764,662,1.467,663,2.998,675,1.994,738,2.954,795,3.678,806,3.035,846,3.244,851,1.407,863,1.78,864,3.903,865,3.756,866,3.244,867,3.559,874,3.756,920,4.045,927,2.475,951,2.269,952,1.498,954,1.666,956,1.821,957,1.631,958,2.267,959,1.863,963,2.242,1004,1.741,1006,2.152,1011,2.79,1020,2.668,1021,2.998,1060,1.821,1070,1.53,1079,2.537,1102,2.125,1179,2.79,1212,2.605,1228,4.916,1241,2.269,1411,1.821,1427,2.208,1450,1.53,1457,2.428,1480,3.035,1515,2.267,1522,2.048,1571,2.099,1706,1.78,1819,2.537,1901,3.756,2132,3.925,2251,2.7,2309,3.756,2320,2.329,2330,2.7,2331,2.888,2332,2.7,2335,3.518,2337,2.888,2358,2.888,2408,2.537,2409,3.914,2410,3.559,2411,3.992,2412,4.638,2413,3.992,2414,3.992,2415,2.995,2423,4.638,2425,3.756,2426,3.559,2437,4.638,2439,3.992,2444,4.167,2445,2.995,2446,2.615,2447,2.995,2448,2.888,2449,5.67,2450,3.391,2451,3.992,2452,4.895,2453,3.992,2454,3.559,2455,2.995,2456,3.756,2457,3.992,2458,3.992,2459,3.992,2460,3.992,2461,3.992,2462,3.992,2463,3.992,2464,5.202,2465,3.992,2466,3.992,2467,3.992,2468,3.992,2469,3.992,2470,3.992,2471,3.992,2472,3.992,2473,3.992,2474,3.992,2475,3.992,2476,3.992,2477,3.992,2478,3.992,2479,3.559]],["title/interfaces/MultiSelectOptionInternal.html",[0,0.074,2437,3.058]],["body/interfaces/MultiSelectOptionInternal.html",[0,0.125,2,1.046,3,0.095,4,0.076,5,0.067,8,0.312,12,0.193,13,0.58,18,0.267,19,0.008,20,1.557,26,0.147,31,3.352,34,1.21,36,1.158,50,0.894,52,0.815,59,0.864,65,2.183,73,0.511,78,0.088,79,3.291,81,1.335,85,0.934,91,1.612,96,0.683,109,0.747,115,0.976,118,1.481,131,0.444,134,0.73,143,3.201,150,0.004,151,0.006,152,0.004,159,1.335,174,0.496,177,0.482,179,0.914,183,0.438,190,1.979,216,0.448,222,0.742,231,1.76,232,0.556,276,1.135,312,1.004,340,1.976,386,1.544,405,1.946,455,3.104,463,0.522,470,1.8,473,1.555,520,1.8,583,2.127,603,1.424,605,0.964,606,1.025,607,1.612,647,1.859,659,1.42,661,2.748,662,1.45,663,2.984,675,1.979,738,2.241,795,4.131,806,3.012,846,4.195,851,1.391,863,1.76,864,3.874,865,3.712,866,3.206,867,3.518,874,3.712,920,4.428,927,2.496,951,2.252,952,1.481,954,1.647,956,1.8,957,1.612,958,2.241,959,1.841,963,2.234,1004,1.721,1006,2.127,1011,2.758,1020,2.648,1021,2.984,1060,1.8,1070,1.512,1079,2.508,1102,2.109,1179,2.758,1212,2.881,1228,4.889,1241,2.252,1411,1.8,1427,2.183,1450,1.512,1457,2.409,1480,3.012,1515,2.241,1522,2.024,1571,2.715,1706,2.302,1819,2.508,1901,4.858,2132,3.91,2251,2.668,2309,3.712,2320,2.302,2330,2.668,2331,2.855,2332,2.668,2335,3.492,2337,2.855,2358,2.855,2408,2.508,2409,3.892,2410,3.518,2411,3.946,2412,4.604,2413,3.946,2414,3.946,2415,2.961,2423,4.604,2425,3.712,2426,3.518,2437,5.131,2439,3.946,2444,3.771,2445,2.961,2446,2.585,2447,2.961,2448,2.855,2449,5.649,2450,4.386,2451,5.163,2452,5.744,2453,5.163,2454,3.518,2455,2.961,2456,3.712,2457,3.946,2458,3.946,2459,3.946,2460,3.946,2461,3.946,2462,3.946,2463,3.946,2464,5.163,2465,3.946,2466,3.946,2467,3.946,2468,3.946,2469,3.946,2470,3.946,2471,3.946,2472,3.946,2473,3.946,2474,3.946,2475,3.946,2476,3.946,2477,3.946,2478,3.946,2479,3.518]],["title/pipes/NestedPropertyPipe.html",[3408,3.227,3717,3.058]],["body/pipes/NestedPropertyPipe.html",[3,0.11,4,0.088,5,0.078,8,0.361,14,0.544,18,0.263,19,0.008,26,0.11,52,0.944,57,1.58,64,2.519,73,0.514,78,0.103,96,0.791,99,1.386,115,0.852,131,0.514,149,1.315,150,0.005,151,0.006,152,0.005,159,1.548,161,1.164,165,0.828,174,0.575,176,1.414,177,0.754,179,0.924,195,0.738,207,3.837,216,0.384,222,0.871,228,2.797,232,0.592,276,1.631,290,1.681,292,2.588,309,1.703,376,7.925,463,0.606,473,1.357,522,1.806,539,3.465,596,2.268,604,2.291,639,4.575,828,3.433,919,4.304,1070,2.588,1108,2.998,1127,3.501,1765,2.291,1828,2.908,2005,5.059,2757,3.094,2805,4.914,3408,5.338,3410,4.079,3414,6.656,3415,6.656,3417,6.656,3717,5.059,3718,5.673,3719,4.575,3720,7.51,3721,8.535,3722,7.51,3723,8.535,3724,7.51,3725,7.51,3726,6.056,3727,6.056,3728,6.056,3729,6.056,3730,4.914,3731,4.914,3732,6.056,3733,6.056,3734,7.51,3735,6.056,3736,6.056,3737,6.056,3738,6.656,3739,6.056,3740,6.056,3741,6.056,3742,6.056,3743,6.056,3744,6.056,3745,5.367,3746,5.367]],["title/classes/NumberWithUnitFormInputWidgetObject.html",[78,0.077,3747,3.684]],["body/classes/NumberWithUnitFormInputWidgetObject.html",[3,0.074,4,0.06,5,0.052,8,0.477,12,0.151,13,0.491,14,0.786,18,0.319,19,0.008,25,1.824,26,0.074,34,0.723,35,1.26,43,2.775,57,1.065,59,1.002,66,1.487,71,1.68,73,0.547,78,0.069,81,1.477,87,1.604,96,0.534,109,1.1,129,2.251,131,0.713,134,1.174,139,1.604,143,1.407,147,1.8,150,0.003,151,0.006,152,0.003,154,1.11,156,1.845,165,0.79,170,2.295,174,0.891,176,1.648,177,0.808,179,0.875,183,0.526,195,1.132,208,1.622,210,1.137,216,0.373,222,0.398,232,0.586,271,2.826,276,0.887,288,2.477,294,3.135,312,0.785,386,2.276,394,3.305,402,3.221,403,3.159,407,3.159,410,2.415,411,4.493,416,4.03,421,1.961,444,1.961,452,1.972,455,1.473,458,1.961,470,3.128,472,2.156,475,4.22,477,3.159,510,3.042,521,1.904,522,1.389,524,2.599,535,2.021,575,1.439,578,3.427,597,1.783,603,0.981,605,1.237,606,1.431,629,3.713,647,1.281,675,2.688,682,2.561,688,1.473,707,4.552,708,3.666,709,3.709,710,3.709,711,3.709,715,2.75,716,2.021,717,1.158,718,2.232,719,1.376,720,2.156,721,2.75,722,2.021,723,3.159,724,1.783,725,3.159,726,2.354,727,3.726,728,3.542,729,2.537,730,2.232,731,2.831,732,2.75,733,2.232,734,2.75,735,2.694,736,2.232,737,2.75,738,2.479,739,1.961,740,2.232,741,2.75,742,2.086,743,2.75,744,1.316,745,1.376,746,2.232,747,2.232,748,2.75,749,2.232,750,2.232,751,2.75,752,2.086,753,3.051,754,2.156,755,2.232,756,2.021,757,2.086,758,2.232,759,1.376,760,2.861,761,3.159,762,2.75,763,1.158,764,2.232,782,3.276,786,3.851,806,2.956,854,1.376,855,3.619,863,1.376,889,2.315,992,3.085,1144,2.75,1262,3.548,2065,3.405,2131,5.814,2518,2.62,3144,2.75,3395,6.144,3396,2.75,3594,6.891,3672,3.619,3673,3.619,3677,5.945,3688,5.945,3747,4.689,3748,8.084,3749,5.779,3750,5.779,3751,5.779,3752,7.293,3753,7.293,3754,6.707,3755,6.707,3756,6.707,3757,6.707,3758,6.707,3759,6.707,3760,6.707,3761,3.619,3762,5.779,3763,4.083,3764,5.779,3765,4.083,3766,5.779,3767,3.619,3768,4.083,3769,4.083,3770,4.083,3771,4.083,3772,4.083,3773,4.083,3774,4.083,3775,5.779,3776,4.083,3777,4.083,3778,4.083,3779,4.083,3780,4.083,3781,4.083,3782,4.083,3783,4.083,3784,4.083,3785,4.083,3786,4.083,3787,4.083,3788,4.083,3789,4.083,3790,4.083,3791,3.085,3792,4.083,3793,4.083,3794,4.083,3795,4.083,3796,4.083,3797,4.083,3798,4.083,3799,4.083,3800,5.779,3801,4.083,3802,6.707,3803,4.083,3804,4.083,3805,4.083,3806,4.083,3807,4.083,3808,4.083,3809,4.083,3810,4.083,3811,4.083,3812,4.083]],["title/interfaces/ObjectAndResponse.html",[0,0.074,274,3.227]],["body/interfaces/ObjectAndResponse.html",[0,0.12,2,1.163,3,0.106,4,0.085,5,0.074,8,0.347,12,0.215,13,0.621,14,0.657,18,0.303,19,0.008,26,0.146,34,1.028,50,0.81,57,2.194,58,3.159,60,1.465,66,1.622,73,0.483,78,0.124,82,4.929,85,1.185,127,2.521,150,0.007,151,0.006,152,0.005,215,2.789,232,0.612,258,4.492,259,3.566,260,3.566,261,4.389,262,4.714,263,4.129,264,4.714,265,6.787,266,2.987,267,3.175,268,4.389,269,3.739,270,4.129,271,2.251,272,2.428,273,5.396,274,5.694,275,5.937,277,4.714,280,5.961,282,3.412,283,2.428,284,5.937,285,2.647,286,5.528,287,4.929,289,5.515,290,2.032,291,5.937,292,2.521,293,6.5,294,2.981,295,4.929,296,6.5,297,5.937,298,4.714,300,5.396,301,5.396,302,5.201,303,5.937,304,5.528,305,5.977,306,1.921,307,3.728,308,5.937,309,1.926,310,5.937,311,3.719,312,1.407,313,5.937,314,5.937,315,4.129,316,4.714]],["title/interfaces/PaginationCallback.html",[0,0.074,1533,2.397]],["body/interfaces/PaginationCallback.html",[0,0.12,1,2.187,2,0.439,3,0.04,4,0.032,5,0.028,8,0.131,9,1.461,10,3.411,12,0.277,13,0.447,14,0.197,15,2.662,18,0.23,19,0.008,20,1.076,22,0.893,25,1.238,26,0.144,27,1.556,28,1.12,30,1.894,34,1.378,36,1.816,39,0.849,40,2.047,42,1.052,47,0.738,50,0.875,52,0.71,53,1.833,54,1.12,55,3.128,56,1.894,59,0.85,60,1.318,61,2.076,62,0.791,63,1.731,64,1.924,66,0.795,67,0.829,69,2.707,71,0.898,73,0.46,74,1.581,77,1.182,78,0.077,80,0.87,81,0.917,83,1.131,84,2.25,85,0.623,86,2.874,87,1.612,88,0.993,90,3.062,91,0.676,93,3.672,96,0.956,99,0.971,101,2.074,102,0.722,108,2.047,109,1.233,111,2.25,114,0.596,115,0.867,118,1.291,120,0.87,127,0.755,128,1.765,129,1.107,131,0.767,132,1.294,134,0.92,139,1.461,140,0.916,143,2.268,145,2.095,146,0.849,149,1.589,150,0.003,151,0.003,152,0.002,159,0.56,161,1.628,162,1.198,165,0.623,171,0.413,173,2.007,174,0.208,177,0.421,179,0.581,181,1.198,182,0.829,183,0.48,189,2.254,190,1.039,195,0.642,206,0.94,210,0.342,216,0.391,217,0.722,222,0.844,225,1.198,226,1.961,232,0.597,266,0.755,272,0.916,276,0.779,282,1.022,283,3.302,285,1.291,290,0.996,292,2.45,306,0.486,309,1.098,312,1.406,317,1.722,321,1.722,323,0.691,326,1.913,327,2.606,341,1.722,343,1.405,396,1.39,405,0.496,432,0.849,452,0.779,455,0.791,463,0.219,473,1.19,510,1.209,512,1.357,522,1.095,524,1.39,533,1.436,575,2.198,582,1.401,594,0.676,595,0.795,596,1.376,601,0.706,603,0.372,605,0.404,606,0.704,607,0.676,613,1.084,617,1.776,627,1.681,628,2.454,645,1.157,647,1.01,651,1.156,659,0.596,662,0.608,690,0.676,691,0.706,692,1.039,696,0.648,717,0.621,719,1.209,724,1.924,726,1.461,729,0.829,731,1.569,745,1.773,759,0.738,763,0.621,773,1.085,789,0.849,816,1.085,820,0.773,822,0.993,844,1.022,851,0.584,854,0.738,916,1.765,922,1.12,927,0.608,928,1.833,950,1.855,951,1.501,952,2.124,954,0.691,956,2.635,957,2.194,963,1.213,966,1.022,967,0.829,969,1.606,970,1.157,971,1.157,991,2.478,1004,2.882,1014,0.966,1015,0.966,1017,0.87,1018,0.676,1019,0.893,1022,0.94,1023,1.682,1024,1.606,1025,1.954,1031,0.829,1032,2.198,1033,3.105,1034,1.294,1035,1.855,1044,1.988,1049,0.966,1050,2.32,1054,0.94,1060,1.814,1061,2.662,1062,1.682,1063,0.966,1065,0.849,1070,1.319,1073,0.755,1077,1.643,1083,1.209,1088,0.893,1092,2.091,1098,0.893,1102,2.595,1103,2.639,1112,1.539,1115,1.539,1127,1.673,1132,2.32,1173,1.722,1178,0.87,1182,2.528,1195,1.539,1202,0.94,1211,1.052,1212,0.829,1235,1.425,1238,2.007,1240,1.581,1241,1.182,1242,1.39,1261,1.499,1265,1.022,1268,1.12,1278,1.12,1321,1.052,1322,1.626,1330,0.993,1332,3.52,1395,0.87,1411,0.755,1427,0.916,1430,2.78,1431,1.12,1432,2.033,1433,1.626,1434,2.033,1435,1.242,1436,1.157,1437,1.242,1438,1.961,1439,2.489,1440,2.788,1441,1.242,1442,2.196,1443,2.033,1444,1.894,1445,0.94,1446,1.242,1447,1.961,1448,2.582,1449,2.033,1450,0.634,1451,1.903,1452,0.94,1453,1.085,1454,1.198,1455,0.829,1456,1.022,1457,1.265,1458,2.489,1459,3.611,1460,3.066,1461,1.198,1462,2.405,1463,1.157,1464,1.12,1465,1.12,1466,1.052,1467,1.961,1468,2.327,1469,1.157,1470,1.198,1471,1.198,1472,2.78,1473,1.198,1474,4.521,1475,1.894,1476,1.198,1477,2.489,1478,1.894,1479,3.186,1480,2.007,1481,1.242,1482,1.776,1483,1.242,1484,1.833,1485,1.242,1486,3.292,1487,1.894,1488,1.242,1489,1.242,1490,2.033,1491,1.198,1492,2.877,1493,1.242,1494,2.187,1495,1.894,1496,2.033,1497,1.242,1498,2.033,1499,2.033,1500,2.78,1501,2.582,1502,1.085,1503,1.052,1504,1.198,1505,1.242,1506,1.242,1507,1.022,1508,3.292,1509,4.247,1510,2.582,1511,1.242,1512,1.242,1513,4.411,1514,1.157,1515,2.491,1516,2.984,1517,3.731,1518,1.157,1519,1.242,1520,2.405,1521,1.052,1522,0.849,1523,1.242,1524,1.242,1525,3.174,1526,1.242,1527,2.405,1528,0.893,1529,0.966,1530,1.242,1531,2.123,1532,1.242,1533,1.894,1534,2.582,1535,2.582,1536,1.242,1537,1.242,1538,1.722,1539,1.12,1540,1.242,1541,1.242,1542,0.87,1543,1.242,1544,1.961,1545,2.582,1546,1.242,1547,1.242,1548,1.242,1549,2.033,1550,1.242,1551,2.033,1552,1.242,1553,2.582,1554,1.242,1555,1.157,1556,1.157,1557,1.242,1558,2.033,1559,1.242,1560,1.242,1561,1.242,1562,1.242,1563,1.242,1564,1.242,1565,1.198,1566,1.242,1567,2.033,1568,1.242,1569,1.198,1570,1.242,1571,1.809,1572,1.242,1573,2.582,1574,2.489,1575,1.242,1576,1.242,1577,3.535,1578,1.242,1579,2.033,1580,1.242,1581,1.242,1582,2.033,1583,2.033,1584,1.242,1585,1.242,1586,1.242,1587,1.12,1588,1.242,1589,1.242,1590,1.242,1591,1.242,1592,1.242,1593,1.242,1594,1.242,1595,2.984,1596,2.033,1597,2.033,1598,1.242,1599,1.242,1600,1.242,1601,1.242,1602,1.242,1603,1.242,1604,2.033,1605,2.033,1606,2.033,1607,2.033,1608,2.582,1609,1.242,1610,1.242,1611,1.242,1612,1.242,1613,2.033,1614,2.033,1615,2.984,1616,1.242,1617,1.242,1618,1.242,1619,1.242,1620,1.242,1621,2.984,1622,2.984,1623,0.966,1624,1.242,1625,1.242,1626,2.984,1627,2.033,1628,1.242,1629,1.242,1630,1.242,1631,2.582,1632,1.242,1633,1.198,1634,1.198,1635,1.242,1636,1.242,1637,1.242,1638,1.242,1639,1.242,1640,1.242,1641,1.242,1642,1.242,1643,1.242,1644,1.242,1645,1.242,1646,1.242,1647,1.242,1648,2.033,1649,1.242,1650,1.242,1651,1.242,1652,1.242,1653,1.242,1654,1.12,1655,1.242,1656,1.157,1657,1.242,1658,1.242,1659,1.242,1660,1.242,1661,1.242,1662,1.242,1663,1.242,1664,1.242,1665,1.242,1666,1.242,1667,1.242,1668,1.242,1669,1.242,1670,1.242,1671,1.242,1672,0.916,1673,1.242,1674,2.033,1675,1.242,1676,1.198,1677,1.242,1678,1.242,1679,1.242,1680,1.242,1681,2.033,1682,2.454,1683,1.242,1684,1.242,1685,1.242,1686,1.242,1687,1.242,1688,2.033,1689,2.033,1690,2.033,1691,1.242,1692,2.582,1693,2.984,1694,2.033,1695,1.242,1696,1.242,1697,1.242,1698,1.242,1699,1.242,1700,1.242,1701,1.242,1702,1.157,1703,1.242,1704,1.242,1705,1.242,1706,0.738,1707,1.242,1708,1.242,1709,1.242,1710,1.242,1711,1.242,1712,1.242,1713,1.242,1714,1.242,1715,1.242,1716,1.157,1717,1.198,1718,1.242,1719,1.242,1720,2.033,1721,2.033,1722,1.961,1723,1.242,1724,1.242,1725,2.033,1726,1.242,1727,2.033,1728,1.242,1729,1.242,1730,1.242,1731,1.242,1732,1.242,1733,1.242,1734,1.198,1735,1.242,1736,1.198,1737,1.242,1738,1.242,1739,1.242,1740,2.033,1741,1.242,1742,1.242,1743,1.242,1744,1.242,1745,1.242,1746,1.242,1747,1.242,1748,1.242,1749,1.242,1750,2.033,1751,2.984,1752,2.582,1753,1.242,1754,1.242,1755,1.242,1756,1.242,1757,2.033,1758,1.242,1759,1.242,1760,1.242,1761,1.242,1762,1.242,1763,1.242,1764,1.242,1765,1.357,1766,2.033,1767,1.242,1768,1.242,1769,1.242,1770,1.198,1771,1.242,1772,1.242,1773,1.242,1774,1.242,1775,1.242,1776,1.242,1777,1.242,1778,1.242,1779,1.242,1780,1.242,1781,1.242,1782,1.242,1783,1.242,1784,2.984,1785,1.242,1786,1.242,1787,1.242,1788,1.242,1789,1.242,1790,1.242,1791,1.198,1792,1.242,1793,1.242,1794,2.033,1795,1.242,1796,2.033,1797,1.242,1798,1.242,1799,2.033,1800,1.242,1801,1.242,1802,1.242,1803,1.242,1804,1.242,1805,2.582,1806,1.242,1807,1.242,1808,1.242,1809,1.242,1810,1.242,1811,1.242,1812,1.242,1813,1.242,1814,1.242,1815,1.242,1816,1.242,1817,1.242,1818,1.242,1819,1.052,1820,1.198,1821,1.242,1822,1.242,1823,1.052,1824,1.242,1825,1.242,1826,2.033,1827,3.292,1828,1.052,1829,1.242,1830,1.242,1831,1.242,1832,1.242,1833,1.242,1834,1.242,1835,2.033,1836,1.242,1837,1.242,1838,1.961,1839,1.242,1840,1.157,1841,1.242,1842,1.242,1843,1.242,1844,1.242,1845,1.242,1846,1.242,3406,1.942,3407,1.778]],["title/interfaces/PaginationConfiguration.html",[0,0.074,1500,2.397]],["body/interfaces/PaginationConfiguration.html",[0,0.119,1,2.148,2,0.428,3,0.039,4,0.031,5,0.027,8,0.127,9,1.439,10,3.381,12,0.275,13,0.44,14,0.633,15,2.635,18,0.266,19,0.008,20,1.059,22,0.87,25,1.216,26,0.143,27,1.532,28,1.091,30,1.931,34,1.368,36,1.84,39,0.827,40,2.019,42,1.025,47,0.719,50,0.869,52,0.548,53,1.794,54,1.091,55,3.111,56,1.854,59,0.843,60,1.233,61,2.052,62,0.77,63,1.71,64,1.9,66,0.778,67,0.808,69,2.67,71,0.879,73,0.451,74,1.548,77,1.157,78,0.076,80,0.848,81,0.898,83,1.107,84,2.522,85,0.612,86,2.835,87,1.59,88,1.591,90,3.041,91,0.659,93,3.643,96,1.026,99,0.956,101,2.151,102,0.703,108,2.171,109,1.234,111,2.219,114,0.581,115,0.843,118,1.268,120,0.848,127,0.736,128,1.733,129,1.084,131,0.775,132,1.869,134,0.951,139,1.71,140,0.892,143,2.427,145,2.348,146,0.827,149,1.575,150,0.004,151,0.003,152,0.002,159,0.546,161,1.62,162,1.167,165,0.612,171,0.402,173,1.971,174,0.333,177,0.413,179,0.573,181,1.167,182,0.808,183,0.476,189,2.214,190,1.017,195,0.545,206,0.916,210,0.333,216,0.388,217,0.703,222,0.841,225,1.167,226,1.919,232,0.596,266,0.736,272,0.892,276,0.763,282,0.995,283,3.367,285,1.268,290,0.975,292,2.427,306,0.473,309,1.081,312,1.394,317,1.686,321,1.686,323,0.673,326,1.887,327,2.835,341,1.686,343,1.599,396,1.361,405,0.483,432,0.827,452,0.763,455,1.267,463,0.214,473,1.176,510,1.183,512,1.328,522,1.075,524,1.361,533,1.41,575,2.171,582,1.385,594,0.659,595,0.778,596,1.351,601,0.688,603,0.362,605,0.394,606,0.689,607,0.659,613,1.061,617,1.738,627,1.783,628,2.416,645,1.127,647,0.991,651,1.132,659,0.581,662,0.593,690,0.659,691,0.688,692,1.017,696,0.631,717,0.605,719,1.183,724,1.9,726,1.43,729,0.808,731,1.541,745,1.929,759,1.183,763,0.605,773,1.057,789,0.827,816,1.738,820,0.753,822,0.967,844,0.995,851,0.569,854,0.719,916,1.733,922,1.091,927,0.593,928,1.794,950,1.822,951,1.474,952,2.107,954,0.673,956,2.615,957,2.173,963,1.191,966,0.995,967,0.808,969,1.577,970,1.127,971,1.127,991,2.541,1004,2.857,1014,0.941,1015,0.941,1017,0.848,1018,0.659,1019,0.87,1022,0.916,1023,1.652,1024,1.577,1025,1.919,1031,0.808,1032,2.171,1033,3.112,1034,1.267,1035,1.822,1044,1.966,1049,0.941,1050,2.284,1054,0.916,1060,1.785,1061,2.635,1062,1.914,1063,0.941,1065,0.827,1070,1.017,1073,0.736,1077,1.614,1083,1.183,1088,0.87,1092,2.058,1098,0.87,1102,2.6,1103,2.871,1112,1.507,1115,1.507,1127,1.637,1132,2.284,1173,2.148,1178,0.848,1182,2.488,1195,1.507,1202,0.916,1211,1.025,1212,0.808,1235,1.395,1238,1.971,1240,1.548,1241,1.157,1242,1.361,1261,1.869,1265,0.995,1268,1.794,1278,1.091,1321,1.025,1322,2.027,1330,0.967,1332,3.678,1395,0.848,1411,0.736,1427,0.892,1430,2.736,1431,1.091,1432,1.99,1433,1.591,1434,1.99,1435,1.21,1436,1.127,1437,1.21,1438,1.919,1439,2.445,1440,2.75,1441,1.21,1442,2.166,1443,1.99,1444,1.854,1445,0.916,1446,1.21,1447,1.919,1448,2.535,1449,1.99,1450,0.618,1451,1.467,1452,0.916,1453,1.057,1454,1.167,1455,0.808,1456,0.995,1457,1.238,1458,2.445,1459,3.784,1460,3.024,1461,1.167,1462,2.362,1463,1.127,1464,1.091,1465,1.091,1466,1.025,1467,1.919,1468,2.285,1469,1.127,1470,1.167,1471,1.167,1472,3.024,1473,1.167,1474,4.496,1475,1.854,1476,1.167,1477,2.445,1478,1.854,1479,3.146,1480,1.971,1481,1.21,1482,1.738,1483,1.21,1484,1.794,1485,1.21,1486,2.937,1487,1.854,1488,1.21,1489,1.21,1490,1.99,1491,1.167,1492,2.832,1493,1.21,1494,2.148,1495,1.854,1496,1.99,1497,1.21,1498,1.99,1499,2.535,1500,3.024,1501,3.491,1502,1.738,1503,1.686,1504,1.919,1505,1.99,1506,1.99,1507,1.637,1508,3.854,1509,4.449,1510,3.491,1511,2.937,1512,2.937,1513,4.38,1514,1.127,1515,2.223,1516,2.937,1517,3.689,1518,1.127,1519,1.21,1520,2.362,1521,1.025,1522,0.827,1523,1.21,1524,1.21,1525,3.13,1526,1.21,1527,2.362,1528,0.87,1529,0.941,1530,1.21,1531,2.085,1532,1.21,1533,1.127,1534,1.99,1535,1.99,1536,1.21,1537,1.21,1538,1.686,1539,1.091,1540,1.21,1541,1.21,1542,0.848,1543,1.21,1544,1.919,1545,2.535,1546,1.21,1547,1.21,1548,1.21,1549,1.99,1550,1.21,1551,1.99,1552,1.21,1553,2.535,1554,1.21,1555,1.127,1556,1.127,1557,1.21,1558,1.99,1559,1.21,1560,1.21,1561,1.21,1562,1.21,1563,1.21,1564,1.21,1565,1.167,1566,1.21,1567,1.99,1568,1.21,1569,1.167,1570,1.21,1571,1.776,1572,1.21,1573,2.535,1574,2.445,1575,1.21,1576,1.21,1577,3.491,1578,1.21,1579,1.99,1580,1.21,1581,1.21,1582,1.99,1583,1.99,1584,1.21,1585,1.21,1586,1.21,1587,1.091,1588,1.21,1589,1.21,1590,1.21,1591,1.21,1592,1.21,1593,1.21,1594,1.21,1595,2.937,1596,1.99,1597,1.99,1598,1.21,1599,1.21,1600,1.21,1601,1.21,1602,1.21,1603,1.21,1604,1.99,1605,1.99,1606,1.99,1607,1.99,1608,2.535,1609,1.21,1610,1.21,1611,1.21,1612,1.21,1613,1.99,1614,1.99,1615,2.937,1616,1.21,1617,1.21,1618,1.21,1619,1.21,1620,1.21,1621,2.937,1622,2.937,1623,0.941,1624,1.21,1625,1.21,1626,2.937,1627,1.99,1628,1.21,1629,1.21,1630,1.21,1631,2.535,1632,1.21,1633,1.167,1634,1.167,1635,1.21,1636,1.21,1637,1.21,1638,1.21,1639,1.21,1640,1.21,1641,1.21,1642,1.21,1643,1.21,1644,1.21,1645,1.21,1646,1.21,1647,1.21,1648,1.99,1649,1.21,1650,1.21,1651,1.21,1652,1.21,1653,1.21,1654,1.091,1655,1.21,1656,1.127,1657,1.21,1658,1.21,1659,1.21,1660,1.21,1661,1.21,1662,1.21,1663,1.21,1664,1.21,1665,1.21,1666,1.21,1667,1.21,1668,1.21,1669,1.21,1670,1.21,1671,1.21,1672,0.892,1673,1.21,1674,1.99,1675,1.21,1676,1.167,1677,1.21,1678,1.21,1679,1.21,1680,1.21,1681,1.99,1682,2.416,1683,1.21,1684,1.21,1685,1.21,1686,1.21,1687,1.21,1688,1.99,1689,1.99,1690,1.99,1691,1.21,1692,2.535,1693,2.937,1694,1.99,1695,1.21,1696,1.21,1697,1.21,1698,1.21,1699,1.21,1700,1.21,1701,1.21,1702,1.127,1703,1.21,1704,1.21,1705,1.21,1706,0.719,1707,1.21,1708,1.21,1709,1.21,1710,1.21,1711,1.21,1712,1.21,1713,1.21,1714,1.21,1715,1.21,1716,1.127,1717,1.167,1718,1.21,1719,1.21,1720,1.99,1721,1.99,1722,1.919,1723,1.21,1724,1.21,1725,1.99,1726,1.21,1727,1.99,1728,1.21,1729,1.21,1730,1.21,1731,1.21,1732,1.21,1733,1.21,1734,1.167,1735,1.21,1736,1.167,1737,1.21,1738,1.21,1739,1.21,1740,1.99,1741,1.21,1742,1.21,1743,1.21,1744,1.21,1745,1.21,1746,1.21,1747,1.21,1748,1.21,1749,1.21,1750,1.99,1751,2.937,1752,2.535,1753,1.21,1754,1.21,1755,1.21,1756,1.21,1757,1.99,1758,1.21,1759,1.21,1760,1.21,1761,1.21,1762,1.21,1763,1.21,1764,1.21,1765,1.328,1766,1.99,1767,1.21,1768,1.21,1769,1.21,1770,1.167,1771,1.21,1772,1.21,1773,1.21,1774,1.21,1775,1.21,1776,1.21,1777,1.21,1778,1.21,1779,1.21,1780,1.21,1781,1.21,1782,1.21,1783,1.21,1784,2.937,1785,1.21,1786,1.21,1787,1.21,1788,1.21,1789,1.21,1790,1.21,1791,1.167,1792,1.21,1793,1.21,1794,1.99,1795,1.21,1796,1.99,1797,1.21,1798,1.21,1799,1.99,1800,1.21,1801,1.21,1802,1.21,1803,1.21,1804,1.21,1805,2.535,1806,1.21,1807,1.21,1808,1.21,1809,1.21,1810,1.21,1811,1.21,1812,1.21,1813,1.21,1814,1.21,1815,1.21,1816,1.21,1817,1.21,1818,1.21,1819,1.025,1820,1.167,1821,1.21,1822,1.21,1823,1.025,1824,1.21,1825,1.21,1826,1.99,1827,3.246,1828,1.025,1829,1.21,1830,1.21,1831,1.21,1832,1.21,1833,1.21,1834,1.21,1835,1.99,1836,1.21,1837,1.21,1838,1.919,1839,1.21,1840,1.127,1841,1.21,1842,1.21,1843,1.21,1844,1.21,1845,1.21,1846,1.21]],["title/interfaces/PagionationInformation.html",[0,0.074,1495,2.397]],["body/interfaces/PagionationInformation.html",[0,0.12,1,2.186,2,0.438,3,0.04,4,0.032,5,0.028,8,0.131,9,1.461,10,3.41,12,0.277,13,0.447,14,0.197,15,2.661,18,0.249,19,0.008,20,1.075,22,0.892,25,1.238,26,0.144,27,1.556,28,1.119,30,1.893,34,1.377,36,1.816,39,0.848,40,2.197,42,1.051,47,0.738,50,0.874,52,0.559,53,1.832,54,1.119,55,3.128,56,1.893,59,0.85,60,1.248,61,2.075,62,0.79,63,1.73,64,1.923,66,0.795,67,0.828,69,2.706,71,0.898,73,0.454,74,1.58,77,1.181,78,0.077,80,0.87,81,0.916,83,1.13,84,2.249,85,0.622,86,2.873,87,1.611,88,0.992,90,3.061,91,0.676,93,3.671,96,0.956,99,0.971,101,2.073,102,0.721,108,2.046,109,1.232,111,2.249,114,0.595,115,0.85,118,1.29,120,0.87,127,1.235,128,1.764,129,1.106,131,0.768,132,1.293,134,0.92,139,1.461,140,0.915,143,2.267,145,2.094,146,0.848,149,1.589,150,0.003,151,0.003,152,0.002,159,0.56,161,1.628,162,1.197,165,0.622,171,0.412,173,2.006,174,0.208,177,0.42,179,0.581,181,1.197,182,0.828,183,0.48,189,2.253,190,1.038,195,0.555,206,0.939,210,0.341,216,0.391,217,0.721,222,0.844,225,1.197,226,1.959,232,0.597,266,0.754,272,0.915,276,0.779,282,1.021,283,3.346,285,1.29,290,0.995,292,2.449,306,0.485,309,1.097,312,1.406,317,1.721,321,1.721,323,0.69,326,2.054,327,2.604,341,1.721,343,1.405,396,1.389,405,0.495,432,0.848,452,0.779,455,0.79,463,0.219,473,1.189,510,1.208,512,1.356,522,1.094,524,1.389,533,1.435,575,2.197,582,1.401,594,0.676,595,0.795,596,1.375,601,0.706,603,0.372,605,0.404,606,0.703,607,0.676,613,1.083,617,1.775,627,1.68,628,2.453,645,1.156,647,1.009,651,1.155,659,0.595,662,0.608,690,0.676,691,0.706,692,1.038,696,0.647,717,0.621,719,1.208,724,1.923,726,1.46,729,0.828,731,1.568,745,1.773,759,0.738,763,0.621,773,1.084,789,0.848,816,1.084,820,0.772,822,0.992,844,1.021,851,0.583,854,0.738,916,1.764,922,1.119,927,0.608,928,1.832,950,1.854,951,1.5,952,2.123,954,0.69,956,2.634,957,2.193,963,1.212,966,1.021,967,0.828,969,1.605,970,1.156,971,1.156,991,2.564,1004,2.869,1014,0.965,1015,0.965,1017,0.87,1018,0.676,1019,0.892,1022,0.939,1023,1.681,1024,1.605,1025,1.953,1031,0.828,1032,2.197,1033,3.105,1034,1.293,1035,1.854,1044,1.987,1049,0.965,1050,2.319,1054,0.939,1060,1.813,1061,2.661,1062,1.681,1063,0.965,1065,0.848,1070,1.038,1073,0.754,1077,1.642,1083,1.208,1088,0.892,1092,2.09,1098,0.892,1102,2.594,1103,2.638,1112,1.538,1115,1.538,1127,1.671,1132,2.319,1173,1.721,1178,0.87,1182,2.526,1195,1.538,1202,0.939,1211,1.051,1212,0.828,1235,1.424,1238,2.006,1240,1.58,1241,1.181,1242,1.389,1261,1.498,1265,1.021,1268,1.119,1278,1.119,1321,1.051,1322,1.624,1330,0.992,1332,3.518,1395,0.87,1411,0.754,1427,0.915,1430,2.778,1431,1.119,1432,2.032,1433,1.624,1434,2.032,1435,1.241,1436,1.156,1437,1.241,1438,1.959,1439,2.488,1440,2.787,1441,1.241,1442,2.195,1443,2.032,1444,1.893,1445,0.939,1446,1.241,1447,1.959,1448,2.58,1449,2.032,1450,0.634,1451,1.498,1452,0.939,1453,1.084,1454,1.197,1455,0.828,1456,1.021,1457,1.264,1458,2.488,1459,3.676,1460,3.065,1461,1.197,1462,2.404,1463,1.156,1464,1.119,1465,1.119,1466,1.051,1467,1.959,1468,2.326,1469,1.156,1470,1.197,1471,1.197,1472,2.778,1473,1.197,1474,4.477,1475,1.893,1476,1.197,1477,2.488,1478,1.893,1479,3.184,1480,2.006,1481,1.241,1482,1.775,1483,1.241,1484,1.832,1485,1.241,1486,2.982,1487,1.893,1488,1.241,1489,1.241,1490,2.032,1491,1.197,1492,2.876,1493,2.032,1494,2.526,1495,2.404,1496,3.29,1497,2.032,1498,3.29,1499,2.032,1500,2.778,1501,2.58,1502,1.084,1503,1.051,1504,1.197,1505,1.241,1506,1.241,1507,1.021,1508,3.29,1509,4.246,1510,2.58,1511,1.241,1512,1.241,1513,4.41,1514,1.156,1515,2.257,1516,2.982,1517,3.73,1518,1.156,1519,1.241,1520,2.404,1521,1.051,1522,0.848,1523,1.241,1524,1.241,1525,3.173,1526,1.241,1527,2.404,1528,0.892,1529,0.965,1530,1.241,1531,2.122,1532,1.241,1533,1.156,1534,2.032,1535,2.032,1536,1.241,1537,1.241,1538,1.721,1539,1.119,1540,1.241,1541,1.241,1542,0.87,1543,1.241,1544,1.959,1545,2.58,1546,1.241,1547,1.241,1548,1.241,1549,2.032,1550,1.241,1551,2.032,1552,1.241,1553,2.58,1554,1.241,1555,1.156,1556,1.156,1557,1.241,1558,2.032,1559,1.241,1560,1.241,1561,1.241,1562,1.241,1563,1.241,1564,1.241,1565,1.197,1566,1.241,1567,2.032,1568,1.241,1569,1.197,1570,1.241,1571,1.808,1572,1.241,1573,2.58,1574,2.488,1575,1.241,1576,1.241,1577,3.533,1578,1.241,1579,2.032,1580,1.241,1581,1.241,1582,2.032,1583,2.032,1584,1.241,1585,1.241,1586,1.241,1587,1.119,1588,1.241,1589,1.241,1590,1.241,1591,1.241,1592,1.241,1593,1.241,1594,1.241,1595,2.982,1596,2.032,1597,2.032,1598,1.241,1599,1.241,1600,1.241,1601,1.241,1602,1.241,1603,1.241,1604,2.032,1605,2.032,1606,2.032,1607,2.032,1608,2.58,1609,1.241,1610,1.241,1611,1.241,1612,1.241,1613,2.032,1614,2.032,1615,2.982,1616,1.241,1617,1.241,1618,1.241,1619,1.241,1620,1.241,1621,2.982,1622,2.982,1623,0.965,1624,1.241,1625,1.241,1626,2.982,1627,2.032,1628,1.241,1629,1.241,1630,1.241,1631,2.58,1632,1.241,1633,1.197,1634,1.197,1635,1.241,1636,1.241,1637,1.241,1638,1.241,1639,1.241,1640,1.241,1641,1.241,1642,1.241,1643,1.241,1644,1.241,1645,1.241,1646,1.241,1647,1.241,1648,2.032,1649,1.241,1650,1.241,1651,1.241,1652,1.241,1653,1.241,1654,1.119,1655,1.241,1656,1.156,1657,1.241,1658,1.241,1659,1.241,1660,1.241,1661,1.241,1662,1.241,1663,1.241,1664,1.241,1665,1.241,1666,1.241,1667,1.241,1668,1.241,1669,1.241,1670,1.241,1671,1.241,1672,0.915,1673,1.241,1674,2.032,1675,1.241,1676,1.197,1677,1.241,1678,1.241,1679,1.241,1680,1.241,1681,2.032,1682,2.453,1683,1.241,1684,1.241,1685,1.241,1686,1.241,1687,1.241,1688,2.032,1689,2.032,1690,2.032,1691,1.241,1692,2.58,1693,2.982,1694,2.032,1695,1.241,1696,1.241,1697,1.241,1698,1.241,1699,1.241,1700,1.241,1701,1.241,1702,1.156,1703,1.241,1704,1.241,1705,1.241,1706,0.738,1707,1.241,1708,1.241,1709,1.241,1710,1.241,1711,1.241,1712,1.241,1713,1.241,1714,1.241,1715,1.241,1716,1.156,1717,1.197,1718,1.241,1719,1.241,1720,2.032,1721,2.032,1722,1.959,1723,1.241,1724,1.241,1725,2.032,1726,1.241,1727,2.032,1728,1.241,1729,1.241,1730,1.241,1731,1.241,1732,1.241,1733,1.241,1734,1.197,1735,1.241,1736,1.197,1737,1.241,1738,1.241,1739,1.241,1740,2.032,1741,1.241,1742,1.241,1743,1.241,1744,1.241,1745,1.241,1746,1.241,1747,1.241,1748,1.241,1749,1.241,1750,2.032,1751,2.982,1752,2.58,1753,1.241,1754,1.241,1755,1.241,1756,1.241,1757,2.032,1758,1.241,1759,1.241,1760,1.241,1761,1.241,1762,1.241,1763,1.241,1764,1.241,1765,1.356,1766,2.032,1767,1.241,1768,1.241,1769,1.241,1770,1.197,1771,1.241,1772,1.241,1773,1.241,1774,1.241,1775,1.241,1776,1.241,1777,1.241,1778,1.241,1779,1.241,1780,1.241,1781,1.241,1782,1.241,1783,1.241,1784,2.982,1785,1.241,1786,1.241,1787,1.241,1788,1.241,1789,1.241,1790,1.241,1791,1.197,1792,1.241,1793,1.241,1794,2.032,1795,1.241,1796,2.032,1797,1.241,1798,1.241,1799,2.032,1800,1.241,1801,1.241,1802,1.241,1803,1.241,1804,1.241,1805,2.58,1806,1.241,1807,1.241,1808,1.241,1809,1.241,1810,1.241,1811,1.241,1812,1.241,1813,1.241,1814,1.241,1815,1.241,1816,1.241,1817,1.241,1818,1.241,1819,1.051,1820,1.197,1821,1.241,1822,1.241,1823,1.051,1824,1.241,1825,1.241,1826,2.032,1827,3.29,1828,1.051,1829,1.241,1830,1.241,1831,1.241,1832,1.241,1833,1.241,1834,1.241,1835,2.032,1836,1.241,1837,1.241,1838,1.959,1839,1.241,1840,1.156,1841,1.241,1842,1.241,1843,1.241,1844,1.241,1845,1.241,1846,1.241]],["title/classes/Percent.html",[78,0.077,3791,3.43]],["body/classes/Percent.html",[3,0.083,4,0.067,5,0.059,8,0.457,12,0.169,13,0.531,14,0.72,18,0.315,19,0.008,20,1.277,25,2.346,26,0.113,31,4.009,34,1.26,62,2.762,71,1.917,73,0.521,78,0.106,84,3.208,85,1.197,87,1.268,109,0.893,115,0.961,131,0.793,134,1.07,138,2.412,150,0.004,151,0.005,152,0.004,154,1.242,161,1.629,165,0.854,171,0.86,174,0.878,176,1.51,177,0.764,179,0.959,195,1.127,208,1.814,222,0.609,231,1.539,232,0.507,312,1.369,322,2.545,334,3.735,469,3.32,473,1.129,522,2.166,582,0.972,602,4.048,603,1.061,629,3.755,682,2.581,786,4.371,847,2.691,916,2.421,953,2.611,1031,2.363,1032,1.61,1037,3.638,1077,2.254,1125,3.076,1126,4.009,1127,2.913,1130,5.441,1135,5.061,1136,5.061,1138,6.023,1139,6.023,1140,5.441,1141,4.44,1142,5.441,1143,4.208,1144,5.157,1150,1.887,1165,3.45,1166,3.45,1170,5.441,1171,5.812,1173,2.193,1174,5.616,1175,3.032,1176,4.632,1177,4.544,1178,2.828,1179,4.233,1180,3.246,1181,3.246,1182,2.193,1183,3.246,1184,5.698,1187,4.44,1190,4.44,1191,5.576,1195,3.44,1196,5.708,1197,5.708,1198,5.441,1199,4.44,1201,4.208,1202,2.68,1203,3.45,1204,3.45,1205,3.45,1206,3.45,1207,3.45,1208,3.45,1209,3.45,1210,3.246,1211,2.193,1212,1.727,1213,4.44,1214,4.44,1215,4.44,1216,3.246,1217,3.246,1218,3.076,1219,3.076,1220,3.246,1221,3.246,1222,4.44,1223,4.44,1224,3.246,1464,3.638,2138,3.092,2918,3.45,3585,4.048,3791,6.253,3813,4.048,3814,4.567,3815,4.567,3816,6.247,3817,6.247,3818,8.277,3819,7.12,3820,6.247,3821,6.247,3822,4.048,3823,6.247,3824,4.567,3825,4.567,3826,4.567,3827,4.567,3828,4.567,3829,4.567,3830,4.567,3831,6.247,3832,4.567,3833,4.567,3834,4.567]],["title/modules/PipesModule.html",[2076,1.496,3835,3.227]],["body/modules/PipesModule.html",[3,0.125,4,0.1,5,0.088,19,0.008,26,0.125,78,0.116,150,0.006,151,0.007,152,0.006,207,3.504,216,0.414,222,0.668,463,0.686,612,3.198,646,2.163,674,3.435,677,3.435,685,3.354,688,3.277,698,3.354,1150,2.072,1175,2.594,1706,2.311,2076,2.26,2734,3.108,2735,3.108,2736,4.115,2737,3.395,2738,2.794,2739,4.265,2745,4.008,2748,3.395,2749,4.875,2750,3.293,2751,3.395,2752,3.395,2753,3.395,2754,3.395,2755,3.395,2758,4.137,3717,6.201,3835,6.754,3836,6.079,3837,6.079,3838,6.079,3839,5.565,3840,6.859]],["title/interfaces/RegisteredProviders.html",[0,0.074,3505,3.058]],["body/interfaces/RegisteredProviders.html",[0,0.141,2,1.15,3,0.104,4,0.084,5,0.074,8,0.342,12,0.326,13,0.617,18,0.254,19,0.008,20,1.628,26,0.132,43,4.476,50,0.635,64,2.241,73,0.521,78,0.097,79,2.338,81,1.856,85,1.145,96,0.75,99,1.059,115,0.651,131,0.617,136,3.511,149,1.988,150,0.005,151,0.006,152,0.007,156,2.068,160,5.416,177,0.815,195,0.7,216,0.371,219,2.502,222,0.776,232,0.555,311,2.463,410,2.399,463,0.574,473,1.312,522,1.915,575,2.024,582,1.546,603,0.975,788,2.338,795,4.302,1013,3.138,1051,3.031,1083,1.934,1085,1.934,1178,2.28,1873,3.254,1926,4.278,1958,4.336,2083,5.486,2149,5.662,2450,3.684,2725,5.162,2738,3.245,3157,3.524,3252,6.106,3290,5.662,3500,5.162,3501,3.254,3502,3.138,3503,4.08,3504,4.336,3505,5.64,3506,4.658,3507,5.893,3508,6.018,3509,5.893,3510,7.178,3511,5.162,3512,4.336,3513,3.684,3514,4.658,3515,4.08,3516,4.658,3517,6.464,3518,4.658,3519,4.658,3520,4.658,3521,5.893,3522,5.893,3523,5.893,3524,5.893,3525,4.658,3526,4.658,3527,4.658,3528,4.658,3529,4.658,3530,4.658,3531,4.658,3532,4.658,3533,5.893,3534,4.658,3535,4.658,3536,4.658,3537,4.658,3538,4.658,3539,4.658,3540,4.658,3541,4.658]],["title/interfaces/SearchSection.html",[0,0.074,3841,3.684]],["body/interfaces/SearchSection.html",[0,0.101,2,0.894,3,0.081,4,0.065,5,0.057,12,0.165,13,0.522,18,0.215,19,0.008,20,0.913,25,1.215,26,0.081,30,2.02,33,3.374,35,2.34,36,1.364,40,1.575,43,4.182,50,0.91,58,2.073,59,0.974,60,1.593,64,2.537,73,0.457,78,0.076,84,2.727,85,0.611,87,1.708,88,2.024,91,1.378,93,2.145,96,1.121,99,1.298,101,2.15,108,1.575,109,1.084,124,4.373,134,0.625,136,2.712,150,0.006,151,0.005,152,0.008,156,2.18,160,2.742,161,1.694,171,0.841,173,3.102,179,0.447,183,0.55,187,2.727,190,2.038,194,3.959,196,5.781,206,1.916,216,0.407,217,1.472,219,3.115,222,0.686,232,0.569,263,3.175,276,0.97,283,1.867,290,1.24,294,2.506,323,2.656,327,3.484,343,1.378,359,4.2,369,3.175,405,1.86,463,0.447,473,1.112,518,2.358,522,1.823,582,1.498,596,1.349,603,1.045,605,0.824,606,1.381,607,1.378,609,2.866,627,1.781,675,1.293,728,2.358,742,2.282,754,2.358,854,1.505,869,2.866,916,2.727,1009,3.488,1029,2.358,1056,1.916,1070,1.781,1073,1.539,1077,2.22,1085,2.073,1087,2.358,1093,2.024,1096,2.532,1114,1.969,1212,1.689,1219,3.009,1230,3.959,1240,3.343,1265,2.082,1275,3.374,1322,2.788,1335,3.374,1337,4.373,1426,2.866,1439,3.847,1440,2.954,1442,2.327,1445,1.916,1522,1.731,1542,1.774,1555,2.358,1569,2.441,1574,3.363,1654,2.282,1656,4.2,1828,2.145,2001,3.624,2130,3.374,2162,4.373,2200,5.654,2202,4.992,2204,3.624,2207,4.992,2257,3.624,2323,3.374,2404,3.009,2405,3.009,2595,5.003,2613,3.374,2623,3.374,2673,3.624,2738,3.089,2800,3.959,2918,4.648,3153,4.741,3221,4.992,3252,5.358,3256,3.959,3260,3.959,3290,3.175,3456,4.992,3501,2.532,3502,2.441,3504,4.648,3505,4.741,3508,4.648,3510,5.317,3513,4.867,3515,3.175,3589,3.624,3841,6.454,3842,3.959,3843,4.467,3844,3.959,3845,4.648,3846,4.467,3847,4.467,3848,4.467,3849,4.467,3850,4.467,3851,4.467,3852,4.467,3853,4.467,3854,4.467,3855,3.959,3856,3.959,3857,4.467,3858,4.467,3859,4.467,3860,4.467,3861,3.959,3862,4.467,3863,4.467,3864,8.582,3865,4.467,3866,4.467,3867,4.467,3868,3.624,3869,3.624,3870,4.467,3871,4.467,3872,4.467,3873,6.153,3874,6.153,3875,4.467,3876,4.467,3877,4.467,3878,6.153,3879,4.467,3880,6.153,3881,4.467,3882,4.467,3883,4.467,3884,7.038,3885,3.959,3886,4.467,3887,3.959,3888,4.467,3889,4.467,3890,4.467,3891,4.467,3892,4.467,3893,4.467,3894,6.153,3895,7.038,3896,4.467,3897,4.467,3898,4.467,3899,4.467,3900,7.584,3901,4.467,3902,4.467,3903,4.467,3904,4.467,3905,6.153,3906,4.467,3907,4.467,3908,7.038,3909,3.959,3910,4.467,3911,4.467,3912,4.467,3913,4.467,3914,4.467,3915,4.467,3916,3.959,3917,4.467,3918,4.467,3919,4.467,3920,6.153,3921,4.467,3922,4.467,3923,4.467,3924,4.467,3925,4.467,3926,4.467,3927,3.959,3928,4.467,3929,4.467,3930,4.467,3931,4.467,3932,4.467,3933,4.467,3934,4.467,3935,4.467,3936,4.467,3937,4.467,3938,4.467,3939,4.467,3940,6.153,3941,4.467,3942,3.959,3943,4.467,3944,4.467,3945,4.467,3946,4.467,3947,4.467,3948,4.467,3949,3.959,3950,4.467,3951,4.467]],["title/interfaces/SelectOption.html",[0,0.074,2444,2.247]],["body/interfaces/SelectOption.html",[0,0.114,2,1.397,3,0.127,4,0.102,5,0.089,8,0.416,12,0.258,13,0.695,14,0.735,18,0.304,19,0.008,20,1.426,26,0.127,30,1.858,34,1.584,50,0.772,73,0.531,96,1.134,109,0.997,115,0.928,126,6.362,131,0.737,132,2.951,143,2.404,150,0.006,151,0.007,152,0.006,179,0.924,210,1.396,405,1.578,455,3.291,1195,3.509,2444,4.049,3952,6.183,3953,6.183,3954,8.179]],["title/directives/ShowClippedTextDirective.html",[648,1.432,701,1.638]],["body/directives/ShowClippedTextDirective.html",[0,0.062,3,0.068,4,0.055,5,0.048,8,0.225,9,1.045,12,0.139,13,0.463,14,0.49,18,0.298,19,0.008,25,1.743,26,0.128,27,1.612,30,1.872,36,0.834,38,1.659,50,0.417,52,1,59,1.041,74,2.825,78,0.064,81,0.962,83,1.187,85,0.745,87,1.045,96,0.918,98,3.38,99,1.006,101,1.992,102,2.112,108,1.327,109,0.538,115,0.427,118,1.546,131,0.66,134,1.121,149,1.184,150,0.003,151,0.005,152,0.003,159,1.394,161,1.609,165,0.745,170,2.165,171,0.709,174,0.846,176,1.027,177,0.503,179,0.802,195,0.948,210,1,216,0.192,222,0.781,228,2.583,231,1.268,232,0.563,292,1.297,326,1.24,343,1.162,452,1.742,463,0.377,517,2.058,520,2.764,522,1.541,530,1.297,550,2.113,582,1.707,597,1.162,604,1.424,605,1.006,606,0.739,613,1.647,627,1.578,647,1.209,648,2.529,692,1.09,701,2.313,702,2.862,729,2.062,731,1.297,739,2.618,742,1.923,744,2.265,745,1.268,788,1.533,851,1.003,886,5.634,953,1.573,963,2.071,991,1.358,1016,3.173,1018,2.831,1029,1.988,1044,2.253,1059,2.165,1065,1.459,1073,1.879,1083,1.268,1101,3.633,1102,1.162,1103,2.313,1104,1.988,1105,3.811,1150,2.253,1178,1.495,1179,1.988,1233,5.086,1234,2.416,1235,1.495,1236,3.09,1237,4.424,1238,3.535,1239,5.631,1240,3.097,1241,2.112,1242,2.484,1243,4.318,1244,5.309,1245,3.524,1246,5.634,1247,3.811,1248,5.634,1249,3.841,1250,5.634,1251,2.844,1252,3.054,1253,2.844,1254,3.054,1255,3.054,1256,3.054,1257,2.844,1258,2.844,1259,3.054,1260,3.054,1261,1.573,1262,5.043,1263,3.054,1264,3.054,1265,1.755,1266,4.424,1267,3.054,1268,3.275,1269,5.201,1270,3.054,1271,3.672,1272,3.054,1273,3.054,1274,3.054,1275,2.844,1276,3.054,1277,2.844,1278,1.923,1279,5.634,1280,3.054,1281,5.201,1282,3.054,1283,3.054,1284,5.201,1285,4.424,1286,3.054,1287,4.424,1288,3.054,1289,4.424,1290,2.416,1291,3.054,1292,5.201,1293,3.054,1294,3.054,1295,3.054,1296,4.424,1297,4.424,1298,3.054,1299,3.054,1300,4.556,1301,3.054,1302,3.054,1303,3.054,1304,3.054,1305,3.054,1306,5.702,1307,3.054,1308,3.054,1309,3.054,1310,5.702,1311,3.054,1312,5.201,1313,4.424,1314,3.054,1315,5.702,1316,3.054,1317,3.054,1318,3.054,1319,3.054,1320,3.054,1321,2.618,1322,1.706,1323,3.054,1324,3.054,1325,4.424,1326,3.054,1327,4.424,1328,5.702,1329,4.424,1330,2.905,1331,4.424,1332,1.863,1333,4.424,1334,3.054,1335,2.844,1336,3.054,1337,2.676,1338,4.424,1339,3.054,1340,3.054,1341,3.054,1342,3.054,1343,2.536,1344,3.054,1345,2.676,1346,2.844,1347,3.054,1348,3.054,1349,3.054,1350,4.424,1351,5.201,1352,2.844,1353,3.054,1354,3.054,1355,3.054,1356,3.054,1357,4.424,1358,5.702,1359,2.676,1360,2.676,1361,2.676,1362,2.676,1363,6.052,1364,4.842,1365,5.681,1366,3.054,1367,5.702,1368,3.336,1369,3.336,1370,3.054,1371,3.336,1372,3.336,1373,3.054,1374,3.875,1375,3.054,1376,3.336,1377,4.424,1378,4.119,1379,4.832,1380,5.681,1381,3.336,1382,3.336,1383,4.832,1384,3.336,1385,4.832,1386,5.681,1387,3.336,1388,4.832,1389,4.832,1390,4.832,1391,4.842,1392,4.832,1393,5.681,1394,4.832,1395,2.791,1396,6.228,1397,5.681,1398,3.336,1399,3.336,1400,4.832,1401,4.832,1402,2.218,1403,2.311,1404,4.119,1405,3.336,1406,3.336,1407,3.336,1408,3.336,1409,3.054,1410,3.336,1411,2.421,1412,5.309,1413,3.336,1414,3.336,1415,5.681,1416,4.832,1417,4.832,1418,6.228,1419,5.681,1420,6.228,1421,3.336,1422,3.054,1423,3.336,1424,3.336,1425,3.054,1426,2.416,1427,1.573,1428,3.054,1429,3.054,3955,3.764,3956,5.452,3957,5.452,3958,3.764,3959,3.764,3960,3.764,3961,3.764,3962,3.764,3963,3.764,3964,3.764,3965,3.764,3966,3.764,3967,3.764,3968,3.764,3969,3.764]],["title/modules/ShowClippedTextDirectiveModule.html",[2076,1.496,2744,2.787]],["body/modules/ShowClippedTextDirectiveModule.html",[3,0.128,4,0.103,5,0.09,19,0.008,26,0.128,78,0.119,150,0.006,151,0.007,152,0.006,216,0.42,463,0.704,612,3.279,627,2.036,646,2.218,701,3.449,1018,2.536,1019,2.865,1150,2.124,1175,2.66,1233,3.987,1706,2.37,1969,3.987,2076,2.317,2734,3.187,2735,3.187,2736,3.946,2737,3.482,2738,2.865,2739,4.31,2744,5.735,2745,4.068,2748,3.482,2750,3.377,2751,3.482,2752,3.482,2753,3.482,2754,3.482,2755,3.482,2758,4.199,3970,6.234,3971,6.234,3972,6.234,3973,7.034]],["title/classes/ShowClippedTextDirectiveTestHelper.html",[78,0.077,3974,3.43]],["body/classes/ShowClippedTextDirectiveTestHelper.html",[3,0.085,4,0.068,5,0.06,8,0.279,12,0.173,13,0.539,14,0.726,18,0.304,19,0.008,26,0.115,36,1.714,59,1.048,71,1.172,73,0.499,78,0.108,96,1.01,98,3.663,101,1.326,115,0.72,131,0.539,134,1.081,139,1.763,149,1.016,150,0.004,151,0.005,152,0.004,154,1.727,161,1.668,165,0.868,170,2.522,171,0.881,174,0.894,176,1.522,177,0.747,179,0.773,183,0.407,195,1.084,210,1.261,216,0.369,222,0.753,228,1.444,231,1.576,232,0.583,271,2.461,408,3.796,409,4.383,413,3.6,463,0.468,464,2.557,477,3.471,520,2.484,522,2.201,556,4.247,559,3.6,582,1.847,587,2.877,596,1.413,597,1.96,627,2.087,648,2.273,689,1.905,701,2.291,744,1.508,913,3.143,1018,2.929,1019,1.905,1044,2.177,1233,5.354,1238,3.178,1239,4.426,1240,3.178,1243,5.744,1245,3.267,1247,3.683,1249,3.94,1262,5.118,1290,3.002,1300,5.496,1330,3.504,1345,5.746,1359,3.325,1360,3.325,1361,3.325,1362,3.325,1427,2.654,1445,2.007,1946,3.244,2080,5.152,3974,4.797,3975,7.664,3976,3.796,3977,6.389,3978,6.389,3979,6.389,3980,6.853,3981,6.853,3982,6.853,3983,6.853,3984,6.853,3985,6.35,3986,6.35,3987,6.389,3988,6.389,3989,6.389,3990,6.389,3991,6.389,3992,4.678,3993,4.678,3994,6.389,3995,4.678,3996,5.628,3997,4.678,3998,5.628,3999,4.678,4000,4.678,4001,4.678,4002,4.678,4003,4.678,4004,4.678,4005,4.678,4006,4.678,4007,4.678,4008,4.678,4009,4.678,4010,4.678,4011,4.678,4012,4.678,4013,4.678,4014,4.678,4015,4.678,4016,4.678,4017,4.678,4018,4.678,4019,4.678,4020,4.678,4021,4.678,4022,4.678,4023,4.678,4024,4.678,4025,4.678,4026,4.678,4027,4.678,4028,4.678,4029,4.678,4030,4.146,4031,4.146,4032,4.146,4033,4.146,4034,6.853,4035,4.146,4036,4.146,4037,4.146,4038,4.146,4039,4.146,4040,4.146,4041,5.628,4042,6.389,4043,4.146,4044,5.628,4045,5.628,4046,4.146,4047,5.628,4048,4.146,4049,4.146,4050,4.146,4051,4.146,4052,5.628,4053,4.146,4054,4.146,4055,4.146,4056,4.146,4057,4.146,4058,4.146,4059,5.628,4060,4.146,4061,4.146,4062,4.146,4063,4.146,4064,4.146,4065,5.628]],["title/components/ShowClippedTextDirectiveTestHostComponent.html",[183,0.291,689,1.849]],["body/components/ShowClippedTextDirectiveTestHostComponent.html",[3,0.087,4,0.07,5,0.061,12,0.176,13,0.546,18,0.294,19,0.008,26,0.117,36,1.728,59,0.951,60,0.955,63,1.324,71,1.195,73,0.493,78,0.109,96,0.952,98,3.532,101,1.824,115,0.541,131,0.712,134,1.018,139,1.786,149,1.036,150,0.004,151,0.005,152,0.004,154,1.297,156,1.101,161,1.498,174,0.796,177,0.752,179,0.728,183,0.466,187,1.849,210,1.377,216,0.372,219,1.644,222,0.759,228,1.472,231,1.607,232,0.585,271,1.849,285,1.824,306,1.058,323,1.504,405,1.079,409,3.648,413,2.704,452,1.398,463,0.477,464,2.608,477,3.517,520,1.644,522,2.207,556,2.81,559,3.648,582,1.855,587,2.162,594,1.472,595,1.427,596,1.944,597,1.986,598,1.849,601,1.538,604,1.804,605,1.754,606,1.849,627,2.108,646,1.504,647,1.427,648,2.566,649,3.436,650,2.103,651,1.538,652,2.103,653,2.836,654,1.441,655,1.943,656,2.103,657,1.804,658,2.103,659,1.297,660,2.103,661,1.721,662,2.164,663,1.762,664,3.436,665,1.644,666,1.762,667,1.804,668,1.644,669,1.849,670,2.103,671,1.895,672,2.103,673,1.943,674,1.804,675,2.428,676,2.103,677,1.804,678,3.436,679,1.762,680,2.892,681,1.762,682,2.076,683,1.762,684,2.836,685,1.762,686,1.895,687,2.103,688,1.721,689,3.175,690,1.472,691,1.538,692,1.381,693,1.352,694,2.103,695,1.849,696,1.411,697,2.103,698,1.762,699,2.047,700,2.103,701,2.812,702,1.943,703,2.103,744,1.538,913,2.361,1018,2.755,1019,1.943,1044,2.199,1233,4.858,1238,2.103,1239,2.929,1240,3.587,1243,5.482,1245,3.3,1247,3.72,1249,3.98,1262,4.785,1290,3.061,1300,3.391,1330,2.162,1345,5.54,1359,3.391,1360,3.391,1361,3.391,1362,3.391,1427,1.994,1445,2.047,1946,2.437,2080,3.871,2504,5.908,3974,3.604,3975,6.954,3976,3.871,3977,4.228,3978,4.228,3979,4.228,3980,4.228,3981,4.228,3982,4.228,3983,4.228,3984,4.228,3987,4.228,3988,4.228,3989,4.228,3990,4.228,3991,4.228,3994,4.228,3996,4.228,3998,4.228,4030,4.228,4031,4.228,4032,4.228,4033,4.228,4034,6.908,4035,4.228,4036,4.228,4037,4.228,4038,4.228,4039,4.228,4040,4.228,4041,5.703,4042,6.454,4043,4.228,4044,5.703,4045,5.703,4046,4.228,4047,5.703,4048,4.228,4049,4.228,4050,4.228,4051,4.228,4052,5.703,4053,4.228,4054,4.228,4055,4.228,4056,4.228,4057,4.228,4058,4.228,4059,7.432,4060,5.703,4061,5.703,4062,6.454,4063,5.703,4064,6.454,4065,6.908,4066,4.771,4067,4.771,4068,4.771,4069,4.771,4070,4.771,4071,4.771]],["title/interfaces/SortedColumn.html",[0,0.074,1487,2.397]],["body/interfaces/SortedColumn.html",[0,0.12,1,2.185,2,0.438,3,0.04,4,0.032,5,0.028,8,0.131,9,1.46,10,3.409,12,0.277,13,0.447,14,0.197,15,2.66,18,0.249,19,0.008,20,1.075,22,0.891,25,1.237,26,0.143,27,1.555,28,1.118,30,1.893,34,1.377,36,1.815,39,0.848,40,2.045,42,1.051,47,0.737,50,0.874,52,0.559,53,1.831,54,1.118,55,3.127,56,1.892,59,0.85,60,1.248,61,2.074,62,0.789,63,1.73,64,1.923,66,0.794,67,0.828,69,2.705,71,0.897,73,0.466,74,1.579,77,1.181,78,0.077,80,0.869,81,0.916,83,1.435,84,2.249,85,0.622,86,2.872,87,1.611,88,0.992,90,3.061,91,0.675,93,3.67,96,0.999,99,0.97,101,2.073,102,0.721,108,2.045,109,1.232,111,2.249,114,0.595,115,0.85,118,1.29,120,0.869,127,0.754,128,1.763,129,1.106,131,0.761,132,1.293,134,0.92,139,1.46,140,0.915,143,2.267,145,2.093,146,0.848,149,1.588,150,0.003,151,0.003,152,0.002,159,0.559,161,1.627,162,1.196,165,0.622,171,0.412,173,2.005,174,0.208,177,0.607,179,0.58,181,1.196,182,0.828,183,0.48,189,2.252,190,1.037,195,0.555,206,0.939,210,0.341,216,0.391,217,0.721,222,0.844,225,1.196,226,1.959,232,0.597,266,0.754,272,0.915,276,0.778,282,1.02,283,3.301,285,1.29,290,0.995,292,2.449,306,0.485,309,1.097,312,1.406,317,1.72,321,1.72,323,0.69,326,2.053,327,2.603,341,1.72,343,1.404,396,1.389,405,0.495,432,0.848,452,0.778,455,0.789,463,0.219,473,1.189,510,1.207,512,1.355,522,1.094,524,1.389,533,1.435,575,2.197,582,1.4,594,0.675,595,0.794,596,1.374,601,0.705,603,0.372,605,0.404,606,0.703,607,0.675,613,1.082,617,1.774,627,1.68,628,2.452,645,1.155,647,1.009,651,1.155,659,0.595,662,0.608,690,0.675,691,0.705,692,1.037,696,0.647,717,0.62,719,1.207,724,1.923,726,1.459,729,0.828,731,1.568,745,1.772,759,0.737,763,0.62,773,1.083,789,0.848,816,1.083,820,0.771,822,0.992,844,1.02,851,0.583,854,0.737,916,1.763,922,1.118,927,0.608,928,1.831,950,1.853,951,1.499,952,2.239,954,0.69,956,2.634,957,2.193,963,1.212,966,1.02,967,0.828,969,1.604,970,1.155,971,1.155,991,2.564,1004,2.868,1014,0.965,1015,0.965,1017,0.869,1018,0.675,1019,0.891,1022,0.939,1023,1.68,1024,1.604,1025,1.952,1031,0.828,1032,2.197,1033,3.104,1034,1.293,1035,1.853,1044,1.987,1049,0.965,1050,2.318,1054,0.939,1060,1.812,1061,2.66,1062,1.68,1063,0.965,1065,0.848,1070,1.037,1073,0.754,1077,1.641,1083,1.207,1088,0.891,1092,2.089,1098,0.891,1102,2.594,1103,2.638,1112,1.537,1115,1.537,1127,1.671,1132,2.318,1173,1.72,1178,0.869,1182,3.159,1195,1.537,1202,0.939,1211,1.051,1212,0.828,1235,1.423,1238,2.005,1240,1.579,1241,1.181,1242,1.389,1261,1.497,1265,1.02,1268,1.118,1278,1.118,1321,1.051,1322,1.624,1330,0.992,1332,3.518,1395,0.869,1411,0.754,1427,0.915,1430,2.777,1431,1.118,1432,2.031,1433,1.624,1434,2.031,1435,1.24,1436,1.155,1437,1.24,1438,1.959,1439,2.487,1440,2.786,1441,1.24,1442,2.195,1443,2.031,1444,1.892,1445,0.939,1446,1.24,1447,1.959,1448,2.579,1449,2.031,1450,0.634,1451,1.497,1452,0.939,1453,1.083,1454,1.196,1455,0.828,1456,1.02,1457,1.263,1458,2.487,1459,3.61,1460,3.064,1461,1.196,1462,2.403,1463,1.155,1464,1.118,1465,1.118,1466,1.051,1467,1.959,1468,2.325,1469,1.155,1470,1.196,1471,1.196,1472,2.777,1473,1.196,1474,4.476,1475,1.892,1476,1.196,1477,2.487,1478,1.892,1479,3.184,1480,2.005,1481,1.24,1482,1.774,1483,1.24,1484,1.831,1485,1.24,1486,2.981,1487,2.403,1488,2.031,1489,2.031,1490,3.289,1491,1.196,1492,2.875,1493,1.24,1494,2.185,1495,1.892,1496,2.031,1497,1.24,1498,2.031,1499,2.031,1500,2.777,1501,2.579,1502,1.083,1503,1.051,1504,1.196,1505,1.24,1506,1.24,1507,1.02,1508,3.289,1509,4.245,1510,2.579,1511,1.24,1512,1.24,1513,4.41,1514,1.155,1515,2.257,1516,2.981,1517,3.729,1518,1.155,1519,1.24,1520,2.403,1521,1.051,1522,0.848,1523,1.24,1524,1.24,1525,3.172,1526,1.24,1527,2.403,1528,0.891,1529,0.965,1530,1.24,1531,2.121,1532,1.24,1533,1.155,1534,2.031,1535,2.031,1536,1.24,1537,1.24,1538,1.72,1539,1.118,1540,1.24,1541,1.24,1542,0.869,1543,1.24,1544,1.959,1545,2.579,1546,1.24,1547,1.24,1548,1.24,1549,2.031,1550,1.24,1551,2.031,1552,1.24,1553,2.579,1554,1.24,1555,1.155,1556,1.155,1557,1.24,1558,2.031,1559,1.24,1560,1.24,1561,1.24,1562,1.24,1563,1.24,1564,1.24,1565,1.196,1566,1.24,1567,2.031,1568,1.24,1569,1.196,1570,1.24,1571,1.807,1572,1.24,1573,2.579,1574,2.487,1575,1.24,1576,1.24,1577,3.532,1578,1.24,1579,2.031,1580,1.24,1581,1.24,1582,2.031,1583,2.031,1584,1.24,1585,1.24,1586,1.24,1587,1.118,1588,1.24,1589,1.24,1590,1.24,1591,1.24,1592,1.24,1593,1.24,1594,1.24,1595,2.981,1596,2.031,1597,2.031,1598,1.24,1599,1.24,1600,1.24,1601,1.24,1602,1.24,1603,1.24,1604,2.031,1605,2.031,1606,2.031,1607,2.031,1608,2.579,1609,1.24,1610,1.24,1611,1.24,1612,1.24,1613,2.031,1614,2.031,1615,2.981,1616,1.24,1617,1.24,1618,1.24,1619,1.24,1620,1.24,1621,2.981,1622,2.981,1623,0.965,1624,1.24,1625,1.24,1626,2.981,1627,2.031,1628,1.24,1629,1.24,1630,1.24,1631,2.579,1632,1.24,1633,1.196,1634,1.196,1635,1.24,1636,1.24,1637,1.24,1638,1.24,1639,1.24,1640,1.24,1641,1.24,1642,1.24,1643,1.24,1644,1.24,1645,1.24,1646,1.24,1647,1.24,1648,2.031,1649,1.24,1650,1.24,1651,1.24,1652,1.24,1653,1.24,1654,1.118,1655,1.24,1656,1.155,1657,1.24,1658,1.24,1659,1.24,1660,1.24,1661,1.24,1662,1.24,1663,1.24,1664,1.24,1665,1.24,1666,1.24,1667,1.24,1668,1.24,1669,1.24,1670,1.24,1671,1.24,1672,0.915,1673,1.24,1674,2.031,1675,1.24,1676,1.196,1677,1.24,1678,1.24,1679,1.24,1680,1.24,1681,2.031,1682,2.452,1683,1.24,1684,1.24,1685,1.24,1686,1.24,1687,1.24,1688,2.031,1689,2.031,1690,2.031,1691,1.24,1692,2.579,1693,2.981,1694,2.031,1695,1.24,1696,1.24,1697,1.24,1698,1.24,1699,1.24,1700,1.24,1701,1.24,1702,1.155,1703,1.24,1704,1.24,1705,1.24,1706,0.737,1707,1.24,1708,1.24,1709,1.24,1710,1.24,1711,1.24,1712,1.24,1713,1.24,1714,1.24,1715,1.24,1716,1.155,1717,1.196,1718,1.24,1719,1.24,1720,2.031,1721,2.031,1722,1.959,1723,1.24,1724,1.24,1725,2.031,1726,1.24,1727,2.031,1728,1.24,1729,1.24,1730,1.24,1731,1.24,1732,1.24,1733,1.24,1734,1.196,1735,1.24,1736,1.196,1737,1.24,1738,1.24,1739,1.24,1740,2.031,1741,1.24,1742,1.24,1743,1.24,1744,1.24,1745,1.24,1746,1.24,1747,1.24,1748,1.24,1749,1.24,1750,2.031,1751,2.981,1752,2.579,1753,1.24,1754,1.24,1755,1.24,1756,1.24,1757,2.031,1758,1.24,1759,1.24,1760,1.24,1761,1.24,1762,1.24,1763,1.24,1764,1.24,1765,1.355,1766,2.031,1767,1.24,1768,1.24,1769,1.24,1770,1.196,1771,1.24,1772,1.24,1773,1.24,1774,1.24,1775,1.24,1776,1.24,1777,1.24,1778,1.24,1779,1.24,1780,1.24,1781,1.24,1782,1.24,1783,1.24,1784,2.981,1785,1.24,1786,1.24,1787,1.24,1788,1.24,1789,1.24,1790,1.24,1791,1.196,1792,1.24,1793,1.24,1794,2.031,1795,1.24,1796,2.031,1797,1.24,1798,1.24,1799,2.031,1800,1.24,1801,1.24,1802,1.24,1803,1.24,1804,1.24,1805,2.579,1806,1.24,1807,1.24,1808,1.24,1809,1.24,1810,1.24,1811,1.24,1812,1.24,1813,1.24,1814,1.24,1815,1.24,1816,1.24,1817,1.24,1818,1.24,1819,1.051,1820,1.196,1821,1.24,1822,1.24,1823,1.051,1824,1.24,1825,1.24,1826,2.031,1827,3.289,1828,1.051,1829,1.24,1830,1.24,1831,1.24,1832,1.24,1833,1.24,1834,1.24,1835,2.031,1836,1.24,1837,1.24,1838,1.959,1839,1.24,1840,1.155,1841,1.24,1842,1.24,1843,1.24,1844,1.24,1845,1.24,1846,1.24]],["title/components/SpinnerActivityReporterComponent.html",[183,0.291,690,1.401]],["body/components/SpinnerActivityReporterComponent.html",[3,0.085,4,0.068,5,0.06,8,0.43,12,0.173,13,0.539,14,0.766,18,0.317,19,0.008,21,4.082,26,0.085,30,1.691,34,1.124,36,1.407,39,2.46,57,1.88,58,3.067,59,0.998,60,0.936,63,1.298,65,2.653,73,0.52,78,0.079,96,0.611,99,1.33,101,2.191,108,2.541,111,2.793,127,1.611,131,0.656,134,0.888,150,0.004,151,0.005,152,0.004,156,1.079,165,0.868,171,0.88,174,0.858,176,1.675,177,0.835,179,0.635,183,0.462,187,1.812,195,1.102,206,2.723,210,1.206,215,2.245,216,0.368,219,1.611,228,2.224,258,4.745,259,5.234,266,2.938,269,3.243,280,5.207,285,2.629,287,3.149,288,1.727,289,4.424,290,1.762,300,4.276,301,3.149,306,2.018,311,2.723,317,4.223,323,2.689,324,4.795,330,5.615,331,5.15,332,5.15,333,5.15,334,3.484,335,6.272,336,6.763,337,6.918,338,4.143,341,3.881,346,5.15,347,3.793,349,5.848,350,3.793,351,5.15,352,3.793,354,3.793,356,3.793,357,5.848,359,3.352,360,4.795,361,5.925,362,3.532,363,3.793,405,1.058,452,1.379,463,0.468,522,2.004,594,1.443,595,1.407,596,1.412,597,1.443,598,1.812,600,3.793,601,2.323,603,1.078,604,1.768,605,1.756,606,1.853,607,1.959,608,5.626,609,4.625,626,5.626,627,2.413,628,3.886,629,3.576,630,4.143,631,4.143,632,4.143,633,4.143,634,4.143,635,4.143,638,4.143,639,3.532,641,4.143,642,6.387,644,5.626,646,1.474,647,1.407,648,1.474,649,3.407,650,2.061,651,1.507,652,2.061,653,2.798,654,1.412,655,1.904,656,2.061,657,1.768,658,2.061,659,1.271,660,2.061,661,1.687,662,2.146,663,1.727,664,3.407,665,1.611,666,1.727,667,1.768,668,1.611,669,1.812,670,2.061,671,1.857,672,2.061,673,1.904,674,1.768,675,2.413,676,2.061,677,1.768,678,3.407,679,1.727,680,2.863,681,1.727,682,2.059,683,1.727,684,2.798,685,1.727,686,1.857,687,2.061,688,1.687,689,1.904,690,2.385,691,2.892,692,1.353,693,1.325,694,2.061,695,1.812,696,1.382,697,2.061,698,1.727,699,2.006,700,2.061,701,1.687,702,1.904,703,2.061,4072,6.918,4073,6.348,4074,6.348,4075,4.675,4076,7.73,4077,4.675,4078,4.675,4079,4.675]],["title/classes/SpinnerActivityReporterWidgetObject.html",[78,0.077,4080,3.684]],["body/classes/SpinnerActivityReporterWidgetObject.html",[3,0.089,4,0.071,5,0.063,8,0.489,12,0.18,13,0.555,14,0.787,18,0.322,19,0.008,25,2.003,26,0.089,34,0.864,35,1.507,57,1.274,59,0.893,66,1.633,71,1.845,73,0.545,78,0.083,81,1.671,96,0.963,101,1.384,109,0.698,129,2.428,131,0.555,134,1.225,139,1.815,147,2.152,150,0.004,151,0.007,152,0.004,154,1.328,156,1.949,161,1.416,165,0.894,170,2.596,174,0.881,176,1.65,177,0.809,179,0.904,183,0.525,195,1.117,208,1.939,210,1.149,216,0.377,222,0.476,232,0.559,271,3.049,276,1.061,285,2.484,288,2.721,294,1.989,306,1.082,309,1.018,312,0.939,341,3.538,361,5.237,386,2.327,394,3.565,396,1.892,402,3.538,403,3.572,407,3.572,410,2.731,411,4.642,416,4.14,421,2.344,444,2.344,452,2.042,458,2.344,463,0.488,470,3.201,472,2.578,473,0.882,475,4.458,510,3.117,521,2.276,522,1.972,524,2.855,535,2.417,575,1.721,578,3.764,583,1.989,597,2.017,603,1.11,605,1.359,606,1.282,609,4.728,629,3.846,690,1.507,691,2.644,705,6.85,706,3.961,707,4.681,708,4.027,709,4.194,710,4.194,711,4.194,715,3.289,716,2.417,717,1.384,718,2.669,719,1.645,720,2.578,721,3.289,722,2.417,723,3.572,724,2.017,725,3.572,726,2.662,727,4.02,728,3.89,729,2.787,730,2.669,731,2.971,732,3.289,733,2.669,734,3.289,735,3.047,736,2.669,737,3.289,738,2.804,739,2.344,740,2.669,741,3.289,742,2.494,743,3.289,744,1.574,745,2.482,746,2.669,747,2.669,748,3.289,749,2.669,750,2.669,751,3.289,752,2.494,753,3.451,754,2.578,755,2.669,756,2.417,757,2.494,758,2.669,759,1.645,760,3.235,761,3.572,762,3.289,763,1.384,764,2.669,765,4.327,767,4.327,772,4.327,773,2.417,774,4.327,775,4.327,1087,2.578,2854,4.327,4072,6.85,4080,5.303,4081,7.868,4082,7.868,4083,4.882,4084,4.882,4085,4.882,4086,4.882,4087,4.882,4088,4.882,4089,4.882]],["title/modules/SpotlightSearchModule.html",[2076,1.496,4090,3.227]],["body/modules/SpotlightSearchModule.html",[3,0.125,4,0.1,5,0.088,19,0.008,26,0.125,78,0.116,150,0.006,151,0.007,152,0.006,187,3.695,216,0.471,217,2.264,219,2.367,463,0.687,612,3.203,646,2.167,863,2.315,1150,2.075,1175,2.599,1450,1.989,1706,2.315,1969,3.895,2076,2.264,2734,3.113,2735,3.113,2736,3.907,2737,3.401,2738,2.799,2739,4.268,2745,4.012,2747,3.755,2748,3.401,2750,3.299,2751,3.401,2752,3.401,2753,3.401,2754,3.401,2755,3.401,2756,4.595,2757,3.51,2758,4.141,2759,5.46,2760,4.776,2761,4.595,3501,3.895,3502,3.755,4090,6.611,4091,6.089,4092,6.089,4093,6.089,4094,6.871,4095,6.577,4096,6.871]],["title/interfaces/SpotlightSearchProvider.html",[0,0.074,160,2.787]],["body/interfaces/SpotlightSearchProvider.html",[0,0.141,2,1.373,3,0.125,4,0.1,5,0.088,8,0.483,12,0.253,14,0.616,18,0.24,19,0.008,26,0.125,50,0.759,58,2.728,73,0.522,85,0.938,108,2.855,150,0.007,151,0.007,152,0.006,156,2.194,158,5.181,160,4.971,165,1.107,174,0.651,176,1.292,177,0.633,183,0.519,185,7.89,195,1.05,203,7.177,216,0.351,219,2.969,283,3.384,518,4.276,1077,3.211,1085,2.728,2623,6.117,2738,3.298,3252,5.455,3501,4.59,3502,4.426,3513,5.197,3515,5.756,3845,6.509,4097,6.859,4098,8.098,4099,8.098]],["title/interfaces/SpotlightSearchResult.html",[0,0.074,196,3.058]],["body/interfaces/SpotlightSearchResult.html",[0,0.131,2,1.345,3,0.122,4,0.098,5,0.086,8,0.401,12,0.248,13,0.679,14,0.718,18,0.316,19,0.008,26,0.145,30,2.13,52,1.379,58,2.694,59,0.762,64,2.857,67,3.466,71,2.003,73,0.527,108,2.819,113,3.84,114,2.174,115,0.907,150,0.007,151,0.007,152,0.006,156,2.085,183,0.512,196,5.753,210,1.247,219,3.046,238,7.835,518,3.546,722,3.958,753,4.223,756,3.958,922,4.086,1096,4.533,3501,3.806,3502,3.67,3813,7.088,3845,5.073,3909,7.088,4100,5.449,4101,8.841,4102,7.997,4103,7.997]],["title/injectables/SpotlightSearchService.html",[1926,2.675,3513,2.913]],["body/injectables/SpotlightSearchService.html",[0,0.133,3,0.097,4,0.078,5,0.068,8,0.414,12,0.32,13,0.589,14,0.623,18,0.27,19,0.008,20,1.769,26,0.126,43,4.432,50,0.591,64,2.14,73,0.527,78,0.09,79,2.176,81,1.366,85,1.115,96,0.906,99,1.28,115,0.606,131,0.692,134,0.97,136,3.394,149,1.993,150,0.004,151,0.006,152,0.007,156,2.118,160,5.314,165,0.948,174,0.773,176,1.306,177,0.825,179,0.694,195,1.03,216,0.355,219,2.654,222,0.75,232,0.54,311,2.976,410,2.233,463,0.534,473,1.253,522,2.171,575,1.883,582,1.639,603,0.907,788,2.176,795,4.336,1013,2.92,1051,3.662,1083,1.8,1085,1.8,1178,2.755,1873,3.931,1926,4.086,1928,4.036,1958,4.036,2083,4.036,2149,5.474,2450,3.428,2725,5.794,2738,3.137,3157,4.258,3252,6.217,3290,5.474,3500,5.474,3501,4.788,3502,4.617,3503,3.797,3504,4.036,3505,5.491,3506,4.335,3507,4.335,3508,5.818,3509,4.335,3510,7.176,3511,4.93,3512,4.036,3513,4.451,3514,6.249,3515,4.93,3516,5.628,3517,6.614,3518,5.628,3519,5.628,3520,5.628,3521,5.628,3522,5.628,3523,6.249,3524,5.628,3525,4.335,3526,4.335,3527,4.335,3528,4.335,3529,4.335,3530,4.335,3531,5.628,3532,5.628,3533,6.249,3534,5.628,3535,5.628,3536,4.335,3537,4.335,3538,6.614,3539,4.335,3540,4.335,3541,4.335,4104,6.936,4105,6.936,4106,5.342,4107,5.342,4108,5.342,4109,5.342]],["title/classes/SubscriptionTracker.html",[78,0.077,1455,1.717]],["body/classes/SubscriptionTracker.html",[0,0.119,3,0.104,4,0.083,5,0.073,8,0.341,12,0.211,13,0.615,14,0.714,18,0.302,19,0.008,26,0.132,50,0.88,52,1.129,57,2.074,59,1.051,78,0.097,85,1.179,113,3.817,114,1.969,134,0.799,149,1.573,150,0.005,151,0.006,152,0.005,154,1.554,159,1.851,161,1.528,165,0.99,171,1.076,174,0.818,176,1.574,177,0.734,179,0.795,183,0.464,195,0.969,216,0.406,222,0.775,232,0.48,288,2.936,306,2.027,312,1.528,325,4.317,343,2.235,389,3.849,463,0.572,473,1.033,583,2.328,595,1.605,1232,5.876,1241,2.754,1451,3.821,1452,2.452,1455,2.739,1654,4.573,2059,6.998,2064,6.451,3445,6.006,3446,7.15,3447,4.637,3448,5.065,3449,7.933,3450,5.065,3451,7.644,3452,7.644,3454,5.065,3455,5.065,3456,4.637,3457,5.065,3458,8.436,3459,7.046,3461,6.418,3463,7.81,3464,5.065,3465,5.065,3466,5.065,3467,5.065,3468,5.876,3469,6.418,3470,6.418,3471,5.876,3472,6.418,3473,6.418,3474,5.065,3475,6.418,3476,5.065,3477,5.065,3478,5.065,3479,5.065,3480,6.418,3481,6.418,3482,5.065,3483,5.065,3484,5.065,3485,5.065,3486,5.065,3487,5.065,4110,7.242,4111,5.715,4112,5.715,4113,5.715,4114,5.715]],["title/classes/ThousandsUnit.html",[78,0.077,1126,2.913]],["body/classes/ThousandsUnit.html",[3,0.087,4,0.07,5,0.061,8,0.485,12,0.176,13,0.546,14,0.7,18,0.3,19,0.008,20,1.315,26,0.117,34,1.38,62,2.812,71,1.952,73,0.508,78,0.109,84,3.377,85,1.208,109,1.114,115,0.951,131,0.792,134,0.667,150,0.004,151,0.005,152,0.004,154,1.297,161,1.648,165,0.88,174,0.854,176,1.468,177,0.752,179,0.96,195,1.124,208,2.556,222,0.627,231,1.607,232,0.517,312,1.498,322,3.175,334,3.816,469,3.395,522,2.181,582,1.015,603,1.092,629,3.789,682,2.587,786,4.428,847,2.81,916,2.494,953,3.258,1031,2.434,1037,3.982,1077,2.812,1125,3.213,1126,5.381,1127,3,1130,5.54,1135,5.176,1136,5.176,1137,5.908,1138,5.54,1139,5.54,1140,5.54,1141,4.574,1142,5.54,1143,4.335,1144,5.251,1150,1.944,1165,3.604,1166,3.604,1170,5.54,1171,6.066,1173,3.09,1174,5.729,1175,3.172,1176,4.764,1177,4.753,1178,3.096,1179,4.428,1180,4.574,1181,4.574,1182,3.09,1183,4.574,1184,5.785,1187,4.574,1190,4.574,1191,5.648,1195,3.492,1196,5.482,1197,5.251,1198,5.54,1199,4.574,1201,4.335,1202,2.761,1203,3.604,1204,3.604,1205,3.604,1206,3.604,1207,3.604,1208,3.604,1209,3.604,1210,3.391,1211,2.291,1212,1.804,1213,4.574,1214,4.574,1215,4.574,1216,3.391,1217,3.391,1218,4.335,1219,4.335,1220,4.574,1221,4.574,1222,4.574,1223,4.574,1224,3.391,4115,4.771,4116,4.771]],["title/classes/Unit.html",[78,0.077,682,1.209]],["body/classes/Unit.html",[3,0.09,4,0.072,5,0.063,8,0.491,12,0.183,13,0.559,14,0.71,18,0.307,19,0.008,20,1.346,26,0.12,34,1.166,62,2.852,71,1.98,73,0.521,78,0.112,84,3.282,85,1.216,109,0.942,115,0.996,131,0.795,150,0.004,151,0.005,152,0.004,154,1.343,161,1.662,165,0.901,171,0.93,174,0.852,176,1.489,177,0.782,179,0.959,195,1.118,208,1.962,222,0.642,231,1.664,232,0.524,312,1.425,322,2.683,334,3.786,469,3.685,522,2.193,582,1.051,603,0.838,682,2.58,786,4.472,847,3.88,916,2.552,953,2.752,989,3.51,1031,2.491,1032,1.741,1037,3.786,1077,2.376,1125,3.327,1126,4.227,1127,3.071,1130,5.618,1132,2.177,1135,5.267,1136,5.267,1138,5.618,1139,5.618,1140,4.681,1141,4.681,1142,5.618,1143,4.436,1144,5.325,1150,1.989,1170,5.267,1171,5.917,1173,2.371,1174,5.637,1175,3.115,1176,4.726,1177,4.668,1178,2.943,1179,4.348,1180,3.51,1181,3.51,1182,2.371,1183,3.51,1184,6.02,1187,4.681,1190,4.681,1191,5.705,1195,3.634,1196,5.917,1197,5.325,1198,5.618,1199,4.681,1201,4.436,1202,2.826,1210,4.681,1211,3.162,1212,2.491,1213,4.681,1214,4.681,1215,4.681,1216,3.51,1217,3.51,1218,3.327,1219,3.327,1220,3.51,1221,3.51,1222,4.681,1223,4.681,1224,3.51,2150,3.731,3822,4.377,4117,4.939,4118,4.939,4119,6.586,4120,4.939,4121,4.939,4122,4.939,4123,4.939,4124,4.939,4125,4.939,4126,4.939,4127,4.939]],["title/injectables/UnitFormatter.html",[1926,2.675,3603,3.058]],["body/injectables/UnitFormatter.html",[3,0.104,4,0.084,5,0.073,8,0.475,12,0.212,14,0.715,18,0.279,19,0.008,20,1.482,26,0.104,73,0.53,78,0.097,85,1.224,115,0.823,127,2.499,131,0.783,132,2.616,149,1.817,150,0.005,151,0.006,152,0.005,165,0.992,171,1.079,173,3.886,174,0.755,176,1.499,177,0.735,179,0.96,195,1.075,216,0.428,217,1.887,220,4.071,231,1.93,232,0.481,265,4.071,288,2.115,463,0.573,615,5.076,682,2.555,1031,2.743,1075,3.247,1128,7.414,1143,3.858,1150,2.19,1171,6.032,1174,5.369,1175,2.743,1176,3.964,1177,4.111,1191,6.032,1196,4.885,1197,5.635,1529,2.524,1855,6.428,1862,6.428,1898,4.647,1926,4.272,1928,4.327,2138,4.485,2150,6.32,3603,5.635,3691,8.401,3844,5.076,4128,7.414,4129,5.076,4130,8.955,4131,7.252,4132,5.727,4133,7.252,4134,5.727,4135,8.366,4136,7.252,4137,8.366,4138,8.366,4139,8.366,4140,7.252,4141,8.631,4142,5.727,4143,7.252,4144,4.647,4145,5.727,4146,5.727,4147,5.727,4148,5.727]],["title/modules/VcdActionMenuModule.html",[2076,1.496,4149,3.058]],["body/modules/VcdActionMenuModule.html",[3,0.122,4,0.098,5,0.086,19,0.008,26,0.122,63,1.868,78,0.114,150,0.006,151,0.007,152,0.006,155,4.781,216,0.474,217,2.216,463,0.673,612,3.136,646,2.121,651,3.065,1017,2.672,1018,2.076,1150,2.032,1175,2.544,1450,1.947,1453,3.33,1454,3.677,1706,2.266,1969,3.813,2076,2.216,2733,6.174,2734,3.048,2735,3.048,2736,3.873,2737,3.33,2738,3.261,2739,4.23,2744,5.627,2745,3.962,2747,4.376,2748,3.33,2750,3.23,2751,3.33,2752,3.33,2753,3.33,2754,3.33,2755,3.33,2756,4.538,2757,3.437,2758,4.09,2760,4.716,2761,4.538,2762,5.082,4149,6.385,4150,5.962,4151,5.962,4152,6.727,4153,5.962,4154,6.727,4155,5.962]],["title/modules/VcdActivityReporterModule.html",[2076,1.496,4156,3.058]],["body/modules/VcdActivityReporterModule.html",[3,0.119,4,0.096,5,0.084,19,0.008,26,0.119,78,0.111,150,0.005,151,0.007,152,0.005,216,0.475,217,2.163,259,4.031,260,4.031,285,2.237,463,0.657,594,2.944,601,2.116,612,3.061,646,2.071,690,2.944,691,2.116,1150,1.983,1175,2.484,1450,1.901,1706,2.212,1969,3.722,2076,2.163,2734,2.975,2735,2.975,2736,3.833,2737,3.25,2738,2.675,2739,4.187,2745,3.906,2747,4.313,2748,3.25,2750,3.153,2751,3.25,2752,3.25,2753,3.25,2754,3.25,2755,3.25,2756,4.473,2757,3.355,2758,4.031,2760,4.648,2761,4.473,4156,6.425,4157,5.82,4158,5.82,4159,5.82,4160,5.82,4161,6.14,4162,6.14,4163,6.566,4164,5.961,4165,6.566,4166,5.82,4167,6.566,4168,5.82,4169,7.89]],["title/modules/VcdComponentsModule.html",[2076,1.496,4170,3.43]],["body/modules/VcdComponentsModule.html",[3,0.116,4,0.093,5,0.082,19,0.008,26,0.116,60,1.275,63,1.767,78,0.108,150,0.005,151,0.006,152,0.005,216,0.481,219,2.193,260,3.908,463,0.637,612,2.968,646,2.007,773,3.151,1017,2.528,1018,1.964,1150,1.923,1175,2.408,1706,2.145,2076,2.097,2117,4.085,2733,6.17,2734,2.885,2735,2.885,2736,2.885,2737,3.151,2738,2.593,2739,4.131,2744,5.623,2745,3.833,2748,3.151,2749,4.525,2750,3.057,2751,3.151,2752,3.151,2753,3.151,2754,3.151,2755,3.151,2758,3.956,2762,4.809,3072,6.17,3502,3.48,4090,6.511,4149,6.17,4155,5.642,4156,6.17,4161,6.17,4162,6.17,4166,5.642,4168,5.642,4170,7.183,4171,5.642,4172,5.642,4173,6.511,4174,5.878,4175,6.366,4176,6.366,4177,5.642,4178,6.366,4179,6.366,4180,6.366,4181,6.366,4182,5.165,4183,6.366]],["title/modules/VcdDataExporterModule.html",[2076,1.496,4173,3.227]],["body/modules/VcdDataExporterModule.html",[3,0.125,4,0.1,5,0.088,19,0.008,26,0.125,60,1.378,78,0.117,150,0.006,151,0.007,152,0.006,216,0.471,217,2.268,463,0.688,612,3.209,646,2.17,657,3.607,863,2.319,1150,2.079,1175,2.603,1450,1.993,1706,2.319,1929,4.055,2076,2.268,2117,4.417,2310,6.1,2734,3.119,2735,3.119,2736,3.91,2737,3.407,2738,2.804,2739,4.271,2745,4.017,2747,3.762,2748,3.407,2749,4.892,2750,3.305,2751,3.407,2752,3.407,2753,3.407,2754,3.407,2755,3.407,2756,4.6,2757,3.517,2758,4.146,2759,5.466,2760,4.781,2761,4.6,4173,6.613,4184,6.1,4185,6.1,4186,6.1,4187,6.883]],["title/modules/VcdDatagridModule.html",[2076,1.496,3072,3.058]],["body/modules/VcdDatagridModule.html",[3,0.105,4,0.084,5,0.074,19,0.008,26,0.105,63,1.608,73,0.333,78,0.098,150,0.005,151,0.006,152,0.005,210,0.903,216,0.487,217,1.908,222,0.818,260,3.556,405,1.31,463,0.579,612,2.7,646,1.826,654,2.805,659,2.538,661,3.19,663,2.139,665,3.047,666,2.139,667,3.344,668,3.047,692,2.114,693,2.507,773,2.867,863,1.951,959,2.042,987,5.133,1017,2.301,1018,1.787,1022,3.604,1150,1.749,1175,2.191,1450,1.677,1453,2.867,1531,3.916,1706,1.951,1823,4.158,2076,1.908,2734,2.625,2735,2.625,2736,3.625,2737,2.867,2738,2.975,2739,3.96,2744,5.428,2745,3.615,2747,3.992,2748,2.867,2749,4.117,2750,2.781,2751,2.867,2752,2.867,2753,2.867,2754,2.867,2755,2.867,2756,4.14,2757,2.959,2758,3.731,2759,4.92,2760,4.303,2761,4.14,2762,4.376,3072,6.504,3409,5.956,3410,4.92,3835,5.191,4095,5.926,4149,5.956,4156,5.956,4164,5.518,4174,5.674,4177,5.133,4182,4.7,4188,5.133,4189,5.133,4190,5.133,4191,5.133,4192,4.7,4193,7.304,4194,5.133,4195,5.792,4196,5.792,4197,5.792,4198,5.792,4199,5.792,4200,8.4,4201,5.792,4202,5.792,4203,5.792]],["title/classes/VcdDatagridWidgetObject.html",[78,0.077,983,3.43]],["body/classes/VcdDatagridWidgetObject.html",[3,0.091,4,0.073,5,0.064,8,0.507,12,0.185,13,0.563,14,0.791,18,0.323,19,0.008,25,2.026,26,0.091,34,0.884,35,1.541,47,2.235,57,1.303,59,0.901,66,1.652,71,1.866,73,0.547,78,0.085,81,1.696,109,0.714,129,2.45,131,0.563,134,1.231,139,1.842,147,2.201,150,0.004,151,0.007,152,0.004,154,1.358,156,1.961,165,0.907,170,2.635,174,0.876,176,1.658,177,0.813,179,0.908,183,0.529,195,1.12,208,1.983,210,1.162,216,0.381,222,0.486,232,0.494,271,3.077,276,1.085,288,2.752,294,2.034,309,1.724,312,0.96,386,2.604,394,3.598,402,3.577,403,3.626,407,3.626,410,2.773,411,4.61,416,4.163,421,2.397,444,2.397,452,2.007,458,2.397,470,3.209,472,2.636,473,0.902,475,4.486,510,3.126,521,2.328,522,1.595,524,2.887,535,2.471,575,1.76,578,3.807,597,2.047,603,1.126,605,1.375,606,1.558,629,3.862,659,1.358,696,1.962,707,4.696,708,4.073,709,4.258,710,4.258,711,4.258,715,3.363,716,2.471,717,1.415,718,2.729,719,1.682,720,2.636,721,3.363,722,2.471,723,3.626,724,2.047,725,3.626,726,2.702,727,4.056,728,3.934,729,2.818,730,2.729,731,2.987,732,3.363,733,2.729,734,3.363,735,3.093,736,2.729,737,3.363,738,2.846,739,2.397,740,2.729,741,3.363,742,2.551,743,3.363,744,1.609,745,2.784,746,2.729,747,2.729,748,3.363,749,2.729,750,2.729,751,3.363,752,2.551,753,3.503,754,2.636,755,2.729,756,2.471,757,2.551,758,2.729,759,1.682,760,3.284,761,3.626,762,3.363,763,1.415,764,2.729,983,5.012,985,4.051,990,5.296,1004,2.186,1061,2.571,1102,2.622,1447,4.073,4204,7.036,4205,4.425,4206,7.451,4207,4.993,4208,4.993,4209,4.993,4210,4.993,4211,4.993,4212,4.993,4213,4.993,4214,6.634,4215,4.993,4216,4.993,4217,4.993]],["title/modules/VcdErrorBannerModule.html",[2076,1.496,4161,3.058]],["body/modules/VcdErrorBannerModule.html",[3,0.125,4,0.101,5,0.088,19,0.008,26,0.125,78,0.117,150,0.006,151,0.007,152,0.006,216,0.465,217,2.274,306,1.53,463,0.69,612,3.218,646,2.176,671,3.808,1150,2.085,1175,2.61,1450,1.998,1706,2.325,1969,3.912,2076,2.274,2734,3.127,2735,3.127,2736,3.915,2737,3.416,2738,2.811,2739,4.276,2745,4.023,2747,3.772,2748,3.416,2750,3.314,2751,3.416,2752,3.416,2753,3.416,2754,3.416,2755,3.416,2756,4.607,2757,3.526,2758,4.152,2760,4.788,2761,4.607,2899,5.6,4161,6.27,4164,6.14,4218,6.117,4219,6.117,4220,6.117,4221,6.902,4222,6.902]],["title/modules/VcdFormModule.html",[2076,1.496,4174,2.913]],["body/modules/VcdFormModule.html",[3,0.114,4,0.092,5,0.08,19,0.008,26,0.114,78,0.106,131,0.533,150,0.005,151,0.006,152,0.005,216,0.478,217,2.068,222,0.612,463,0.628,612,2.927,646,1.98,674,3.553,675,2.502,677,3.553,682,2.045,685,3.469,688,3.389,698,3.469,863,2.115,1150,1.896,1175,2.374,1450,1.817,1706,2.115,1969,3.558,2076,2.068,2518,4.029,2734,2.845,2735,2.845,2736,4.017,2737,3.107,2738,3.379,2739,4.106,2745,3.801,2747,3.431,2748,3.107,2750,3.014,2751,3.107,2752,3.107,2753,3.107,2754,3.107,2755,3.107,2756,4.352,2757,3.207,2758,3.923,2759,5.172,2760,4.523,2761,4.352,3169,4.743,3208,4.743,3299,4.743,3395,4.229,3396,5.172,3603,6.076,3604,5.564,3605,4.462,4095,6.23,4174,6.174,4223,5.564,4224,5.564,4225,6.278,4226,5.564,4227,5.094,4228,6.278]],["title/interfaces/VcdFormlyFieldConfig.html",[0,0.074,4229,3.43]],["body/interfaces/VcdFormlyFieldConfig.html",[0,0.123,2,1.213,3,0.11,4,0.088,5,0.078,8,0.361,9,2.085,12,0.224,13,0.638,14,0.803,18,0.325,19,0.008,26,0.155,27,1.791,50,1.003,66,1.342,73,0.469,96,0.981,109,1.074,115,0.926,131,0.638,143,2.588,150,0.005,151,0.006,152,0.005,177,0.754,183,0.523,206,2.598,216,0.463,222,0.59,271,3.163,405,1.699,455,2.185,595,1.342,603,1.386,606,1.675,613,2.268,647,1.342,675,2.174,679,3.015,680,2.405,681,3.015,682,2.337,683,3.015,803,3.568,804,3.886,818,3.966,1032,2.135,1132,2.669,1451,3.139,1452,2.598,1538,2.908,2185,4.079,2444,3.717,2445,3.433,2490,4.079,2518,3.886,3218,4.079,3346,4.914,3347,4.914,3366,3.886,3367,3.886,3378,4.304,3379,4.575,3380,4.575,3396,5.059,3605,4.304,3627,4.914,4229,6.628,4230,4.079,4231,4.304,4232,7.564,4233,7.776,4234,7.564,4235,7.564,4236,6.755,4237,7.255,4238,6.094,4239,6.656,4240,4.914,4241,4.914,4242,4.914,4243,5.367,4244,4.914,4245,7.235,4246,6.094,4247,4.304,4248,4.914,4249,4.914,4250,4.914]],["title/modules/VcdFormlyModule.html",[2076,1.496,4251,3.43]],["body/modules/VcdFormlyModule.html",[3,0.112,4,0.09,5,0.079,8,0.369,9,2.388,14,0.556,18,0.217,19,0.008,25,2.07,26,0.112,50,0.685,78,0.105,85,0.847,99,1.142,107,6.178,115,0.864,131,0.526,134,1.065,150,0.005,151,0.006,152,0.005,165,0.847,174,0.587,176,1.166,177,0.572,195,0.755,216,0.479,217,2.04,222,0.603,232,0.41,359,3.27,463,0.619,606,1.215,612,2.887,646,1.953,679,3.32,680,3.024,681,3.32,682,2.028,683,3.32,863,2.086,1150,1.87,1175,2.342,1480,2.729,1706,2.086,1969,3.51,2076,2.04,2144,6.178,2520,6.178,2734,2.806,2735,2.806,2736,3.736,2737,3.065,2738,3.101,2739,3.769,2745,3.769,2747,4.162,2748,3.065,2750,2.973,2751,3.065,2752,3.065,2753,3.065,2754,3.065,2755,3.065,2756,4.316,2757,3.163,2758,4.212,2759,5.129,2761,4.316,3077,5.488,3366,4.886,3367,3.974,3378,4.401,3396,5.129,3605,4.401,4174,5.769,4182,5.024,4230,5.129,4238,7.39,4240,5.024,4241,5.024,4242,5.024,4247,5.86,4251,7.139,4252,5.488,4253,5.488,4254,6.192,4255,5.024,4256,6.192,4257,7.614,4258,6.192,4259,8.245,4260,7.614,4261,6.192,4262,7.614,4263,6.192,4264,6.192,4265,6.178,4266,6.192]],["title/interfaces/VcdFormlyTemplateOptions.html",[0,0.074,4236,3.43]],["body/interfaces/VcdFormlyTemplateOptions.html",[0,0.118,2,1.142,3,0.104,4,0.083,5,0.073,8,0.34,9,1.583,12,0.211,13,0.614,14,0.859,18,0.33,19,0.008,26,0.152,27,1.686,50,0.99,52,1.303,66,1.603,73,0.525,96,1.151,109,1.034,115,0.901,131,0.709,143,3.035,150,0.005,151,0.006,152,0.005,177,0.733,183,0.509,206,2.446,216,0.457,222,0.556,271,3.078,405,1.636,455,2.057,595,1.603,603,1.348,606,1.639,613,2.399,647,1.603,675,2.299,679,2.933,680,2.265,681,2.933,682,2.434,683,2.933,803,4.92,804,5.36,818,3.819,1032,2.01,1132,2.513,1451,3.49,1452,2.446,1538,3.472,2185,5.626,2444,4.134,2445,3.232,2490,5.626,2518,3.659,3218,5.626,3346,6.777,3347,6.777,3366,3.659,3367,3.659,3378,4.053,3379,6.31,3380,6.31,3396,4.871,3605,4.053,3627,6.777,4229,5.463,4230,3.841,4231,4.053,4232,6.409,4233,7.402,4234,5.054,4235,5.054,4236,6.31,4237,6.444,4238,5.868,4239,7.039,4240,4.627,4241,4.627,4242,4.627,4243,6.409,4244,4.627,4245,7.039,4246,5.868,4247,4.053,4248,4.627,4249,4.627,4250,4.627]],["title/modules/VcdLoadingIndicatorModule.html",[2076,1.496,4162,3.058]],["body/modules/VcdLoadingIndicatorModule.html",[3,0.125,4,0.101,5,0.088,19,0.008,26,0.125,78,0.117,150,0.006,151,0.007,152,0.006,216,0.465,217,2.274,323,2.176,463,0.69,612,3.218,646,2.176,686,3.808,1150,2.085,1175,2.61,1450,1.998,1706,2.325,1969,3.912,2076,2.274,2734,3.127,2735,3.127,2736,3.915,2737,3.416,2738,2.811,2739,4.276,2745,4.023,2747,3.772,2748,3.416,2750,3.314,2751,3.416,2752,3.416,2753,3.416,2754,3.416,2755,3.416,2756,4.607,2757,3.526,2758,4.152,2760,4.788,2761,4.607,3542,4.905,4162,6.27,4164,6.14,4267,6.117,4268,6.117,4269,6.117,4270,6.902,4271,6.902]],["title/interfaces/WidgetDriver.html",[0,0.074,388,3.058]],["body/interfaces/WidgetDriver.html",[0,0.058,2,0.706,3,0.064,4,0.051,5,0.045,8,0.526,12,0.13,14,0.803,18,0.317,19,0.008,26,0.094,38,3.003,58,3.209,71,1.546,73,0.556,77,2.927,78,0.06,81,2.062,85,1.228,87,1.443,96,0.89,98,3.087,101,1.474,102,2.245,109,1.228,111,2.014,123,5.176,139,1.443,150,0.003,151,0.004,152,0.003,154,1.853,159,0.901,165,0.711,174,0.848,176,1.692,177,0.825,179,0.882,195,1.089,208,2.065,209,5.147,210,1.063,216,0.18,228,2.845,231,1.188,232,0.592,271,2.014,288,3.334,309,1.421,312,1.61,315,3.695,343,2.859,386,2.71,388,6.268,389,3.502,392,2.947,393,3.927,394,2.356,395,5.147,396,3.59,397,3.927,400,3.927,401,3.927,402,2.496,403,2.841,405,1.176,406,3.927,407,2.841,414,4.664,416,4.58,417,4.664,419,4.664,421,2.964,423,4.664,425,4.664,427,3.962,428,3.488,429,3.596,431,5.147,432,2.392,433,4.664,439,5.147,440,4.664,442,4.664,444,2.964,446,4.664,448,2.664,452,2.071,453,4.664,455,2.227,456,4.664,458,2.964,459,5.742,461,4.664,510,2.295,547,4.388,605,1.739,613,1.57,722,2.573,731,1.791,739,3.271,745,2.821,752,2.656,763,1.474,887,2.664,888,7.289,889,1.999,890,3.126,891,3.126,911,3.336,912,4.607,913,3.372,914,3.502,915,6.964,916,3.59,917,4.607,918,3.336,919,3.695,920,3.598,921,4.218,922,2.656,923,4.607,924,4.218,925,4.607,926,6.038,927,1.891,928,2.656,929,4.607,930,3.126,931,3.126,932,3.126,933,3.126,934,3.126,935,3.126,936,3.126,937,3.126,938,3.126,939,3.126,940,3.126,941,3.126,942,3.126,943,3.126,944,3.126,945,3.126,946,3.126,3761,3.126,3767,3.126,4272,3.126,4273,3.527,4274,3.527,4275,3.126,4276,3.527,4277,3.527,4278,3.527,4279,3.527,4280,3.527,4281,3.527,4282,3.527,4283,3.527,4284,3.527,4285,3.527,4286,3.527,4287,3.527]],["title/classes/WidgetFinder.html",[78,0.077,3062,2.787]],["body/classes/WidgetFinder.html",[0,0.121,3,0.066,4,0.053,5,0.047,8,0.318,12,0.135,13,0.453,14,0.622,18,0.317,19,0.008,20,1.089,25,0.992,26,0.14,34,0.646,35,1.126,41,2.341,50,0.919,52,0.569,57,2.279,59,0.873,66,1.535,71,1.845,73,0.516,77,1.202,78,0.107,81,2.123,85,1.24,87,1.748,91,1.943,99,0.983,109,0.522,113,1.752,114,0.992,115,0.605,129,2.137,131,0.31,139,2.306,147,1.608,149,0.793,150,0.003,151,0.006,152,0.003,154,0.992,156,1.834,161,1.21,165,0.861,171,1.387,174,0.754,176,1.387,177,0.639,179,0.63,182,1.38,183,0.541,190,1.056,195,0.898,208,3.155,210,0.982,216,0.322,222,0.843,228,1.126,232,0.559,271,2.683,272,2.894,276,0.793,288,1.347,294,2.565,306,0.809,309,1.604,312,1.21,334,1.525,343,1.645,359,1.927,386,2.496,392,2.068,394,2.415,396,2.981,402,1.752,409,3.925,410,3.65,411,4.42,413,4.951,416,3.988,421,1.752,427,2.341,428,3.988,429,3.428,432,3.078,444,1.752,452,1.961,458,1.752,463,0.365,464,1.994,465,2.149,466,1.994,468,2.913,470,2.908,471,2.458,472,1.927,473,0.659,475,4.062,477,2.913,488,4.241,489,3.59,490,4.241,491,2.458,492,3.42,493,2.458,497,2.458,499,2.458,510,3.067,512,2.786,515,2.458,517,3.785,518,3.325,519,4.251,520,2.737,521,2.936,522,2.1,523,4.041,524,2.854,525,4.041,530,1.836,531,3.42,532,3.42,533,2.184,534,3.42,535,3.428,536,3.42,539,2.065,540,4.722,541,3.234,543,5.226,544,3.14,545,3.42,546,2.24,549,3.42,550,2.065,551,3.42,552,2.341,555,2.341,556,2.149,557,3.865,558,2.341,559,4.175,560,3.865,561,3.709,562,2.24,563,2.341,564,2.341,565,2.341,566,2.341,567,1.565,568,2.341,569,4.041,570,1.486,573,2.341,574,2.24,575,2.597,576,2.24,577,2.341,578,2.723,579,2.341,580,2.341,581,4.041,582,0.777,583,2.171,584,2.24,585,2.341,586,2.341,587,1.653,588,2.341,589,2.341,590,1.927,591,2.341,592,2.341,597,2.137,598,2.065,603,0.619,605,1.278,707,2.723,708,1.994,716,3.428,717,1.785,718,1.994,719,1.229,720,1.927,722,1.806,723,2.913,724,1.645,725,2.913,726,2.171,727,3.538,728,3.325,729,2.382,730,1.994,731,2.737,733,1.994,735,2.485,736,1.994,738,2.287,739,1.752,740,1.994,744,1.176,745,1.229,746,1.994,747,1.994,749,1.994,750,1.994,752,1.864,753,2.814,754,1.927,755,1.994,756,1.806,757,1.864,758,1.994,759,1.229,760,2.638,761,2.913,763,1.034,764,1.994,782,2.068,789,1.414,854,1.229,889,2.068,908,4.724,911,2.341,913,1.806,918,2.341,950,1.486,1070,1.056,1078,1.864,1085,2.333,1093,1.653,1110,2.287,1116,1.525,1122,1.653,1261,1.525,1459,1.608,1494,1.752,1503,1.752,1507,1.701,1765,2.016,1873,2.068,1946,3.217,1999,2.341,2024,2.458,2065,3.709,2109,2.458,2366,1.864,2790,2.458,3062,4.251,3095,5.098,3096,2.593,3097,2.593,3098,2.593,3099,2.593,3100,2.593,3101,3.788,3102,2.593,3103,2.593,3104,2.593,3105,2.593,3106,4.475,3107,2.458,3108,2.593,3109,2.593,3110,4.475,3111,2.593,3112,2.458,3113,2.593,3114,2.458,3115,2.593,3116,2.593,3117,2.593,3118,2.593,3119,3.788,3120,2.593,3121,2.458,3122,2.593,3123,2.593,3124,2.593,3125,2.593,3126,2.593,3127,2.458,3128,2.593,3129,2.593,3130,2.593,3131,2.593,3132,2.593,3133,2.458,3134,2.593,3135,3.788,3136,3.788,3137,2.593,3138,4.475,3139,2.593,3140,4.475,3141,2.593,3142,2.593,3143,2.593,3144,2.458,3145,2.593,3146,2.593,3147,2.593,3148,2.593,3149,2.593,3150,2.593,3151,3.788,3152,2.149,3153,2.458,3154,2.593,3155,2.593,3156,2.593,3157,2.24,3158,2.593,3159,2.593,3160,2.593,3161,2.593,3162,3.788,3163,2.593,3164,2.593,3165,2.593,3166,2.341,4288,3.649,4289,3.649,4290,3.649,4291,3.649]],["title/classes/WidgetObject.html",[78,0.077,707,2.319]],["body/classes/WidgetObject.html",[0,0.113,3,0.057,4,0.045,5,0.04,8,0.45,12,0.115,13,0.402,14,0.729,18,0.316,19,0.008,20,0.636,25,0.847,26,0.132,34,0.838,35,1.461,41,3.039,50,0.881,52,0.486,57,2.183,59,0.903,66,1.672,71,1.946,73,0.538,77,1.026,78,0.097,81,2.109,85,1.213,87,1.315,91,1.976,99,0.874,109,0.677,113,2.274,114,1.288,115,0.537,129,2.398,131,0.487,134,1.054,139,2.291,147,2.526,149,0.676,150,0.003,151,0.006,152,0.003,154,0.847,156,1.955,161,0.599,165,0.875,171,1.366,174,0.803,176,1.499,177,0.75,179,0.847,182,1.791,183,0.571,190,1.371,195,1.032,208,2.736,210,1.131,216,0.293,222,0.815,228,0.961,232,0.547,271,3.011,272,2.395,276,1.029,288,2.116,294,2.334,306,0.69,309,1.573,312,1.102,334,1.301,343,1.768,359,2.5,386,2.552,392,2.684,394,3.287,396,2.811,402,3.074,403,2.588,407,2.588,408,2.526,409,3.904,410,3.662,411,4.581,413,4.602,416,4.178,421,2.274,428,3.307,429,2.836,432,2.669,444,2.274,452,2.014,458,2.274,463,0.311,464,1.702,465,1.834,466,1.702,468,2.588,470,3.143,471,2.097,472,2.5,473,0.563,475,4.418,477,2.588,488,3.86,489,3.19,490,3.86,491,2.097,492,3.039,493,2.097,497,2.097,499,2.097,510,3.124,512,2.744,515,2.097,517,3.132,518,2.5,519,2.907,520,2.373,521,2.985,522,1.813,523,1.998,524,2.669,525,1.998,530,1.073,531,1.998,532,1.998,533,2.019,534,1.998,535,3.591,536,1.998,540,3.931,543,4.839,544,1.834,545,1.998,546,1.911,549,1.998,550,1.207,551,1.998,552,1.998,555,1.998,556,1.834,557,3.518,558,1.998,559,3.904,560,3.518,561,3.376,562,1.911,563,1.998,564,1.998,565,1.998,566,1.998,567,1.336,568,1.998,569,4.109,570,1.268,573,1.998,574,1.911,575,2.557,576,1.911,577,1.998,578,2.419,579,1.998,580,1.998,581,3.677,582,0.663,583,1.929,584,1.911,585,1.998,586,1.998,587,1.411,588,1.998,589,1.998,590,1.644,591,1.998,592,1.998,597,2.327,598,2.221,603,0.529,605,1.391,707,2.928,708,3.5,709,3.039,710,3.039,711,3.039,716,3.733,717,2.138,718,3.132,719,1.931,720,3.026,722,2.344,723,3.5,724,1.976,725,3.5,726,2.608,727,3.97,728,3.831,729,2.744,730,2.588,731,2.948,733,2.588,735,2.985,736,2.588,738,2.747,739,2.274,740,2.588,742,1.591,744,1.526,745,1.595,746,2.588,747,2.588,749,2.588,750,2.588,752,2.419,753,3.381,754,2.5,755,2.588,756,2.344,757,2.419,758,2.588,759,1.595,760,3.169,761,3.5,763,1.342,764,2.588,782,2.684,789,1.207,854,1.049,889,1.765,911,1.998,913,2.344,918,3.039,950,1.268,1070,0.901,1078,2.419,1085,2.157,1093,1.411,1110,2.459,1116,1.301,1122,1.411,1261,1.301,1459,2.087,1494,2.274,1503,2.274,1507,1.452,1765,1.791,1873,2.684,1946,3.706,1999,1.998,2024,3.19,2065,4.274,2109,2.097,2366,2.419,2790,2.097,3062,3.518,3095,5.37,3096,2.213,3097,3.366,3098,3.366,3099,3.366,3100,3.366,3101,4.551,3102,3.366,3103,3.366,3104,3.366,3105,3.366,3106,4.896,3107,3.19,3108,3.366,3109,3.366,3110,5.156,3111,3.366,3112,3.19,3113,3.366,3114,3.19,3115,3.366,3116,3.366,3117,3.366,3118,3.366,3119,4.551,3120,3.366,3121,3.19,3122,3.366,3123,3.366,3124,3.366,3125,3.366,3126,3.366,3127,3.19,3128,3.366,3129,3.366,3130,3.366,3131,2.213,3132,2.213,3133,2.097,3134,2.213,3135,3.366,3136,3.366,3137,2.213,3138,4.073,3139,2.213,3140,4.073,3141,2.213,3142,2.213,3143,2.213,3144,2.097,3145,2.213,3146,2.213,3147,2.213,3148,2.213,3149,2.213,3150,2.213,3151,3.366,3152,1.834,3153,2.097,3154,2.213,3155,2.213,3156,2.213,3157,1.911,3158,2.213,3159,2.213,3160,2.213,3161,2.213,3162,2.213,3163,2.213,3164,2.213,3165,2.213,3166,1.998,4272,2.76,4275,2.76,4292,3.114,4293,3.114,4294,3.114,4295,3.114,4296,3.114,4297,3.114,4298,3.114,4299,3.114,4300,3.114]],["title/contributing.html",[2351,2.226,4301,3.349,4302,3.349]],["body/contributing.html",[4,0.087,19,0.007,20,1.215,47,2.002,87,2.061,111,2.303,117,4.823,129,2.291,150,0.005,151,0.006,152,0.005,210,0.927,266,2.789,273,4.004,322,3.297,324,4.49,343,2.498,469,2.771,473,1.608,530,2.048,533,1.874,570,3.297,587,3.364,606,1.588,682,1.583,724,2.746,727,3.793,735,2.771,789,2.877,842,2.484,851,1.583,869,3.814,913,2.942,1056,2.55,1083,2.002,1087,3.138,1093,2.693,1110,2.55,1175,2.248,1176,3.249,1247,3.037,1321,2.854,1322,2.693,1374,4.225,1378,5.608,1402,3.502,1426,3.814,1459,2.62,1565,3.249,1571,3.215,1734,3.249,1898,4.823,1946,3.793,2055,4.823,2119,4.823,2138,3.674,2143,4.823,2162,5.754,2200,4.225,2208,4.823,2398,5,2582,4.49,2608,4.49,2622,5.268,2671,4.823,2714,4.823,3152,4.373,3333,5.268,3407,4.823,3589,6.023,3855,5.268,3885,5.268,4144,6.568,4302,5.268,4303,5.268,4304,5.944,4305,5.944,4306,7.423,4307,5.944,4308,5.944,4309,5.944,4310,8.478,4311,7.423,4312,5.944,4313,5.944,4314,5.944,4315,7.423,4316,7.423,4317,5.944,4318,5.944,4319,5.944,4320,5.944,4321,5.944,4322,5.944,4323,6.579,4324,7.514,4325,8.726,4326,5.944,4327,8.301,4328,7.423,4329,7.734,4330,5.944,4331,5.944,4332,8.002,4333,5.944,4334,5.944,4335,5.944,4336,5.944,4337,5.944,4338,5.944,4339,5.944,4340,5.944,4341,8.095,4342,5.944,4343,5.944,4344,8.095,4345,5.268,4346,5.944,4347,5.944,4348,5.944,4349,5.944,4350,5.944,4351,8.478,4352,6.579,4353,7.423,4354,7.423,4355,5.944,4356,5.944,4357,7.423,4358,7.423,4359,5.944,4360,8.334,4361,5.944,4362,5.944,4363,7.423,4364,6.579,4365,8.095,4366,8.095,4367,5.944,4368,6.579,4369,5.268,4370,7.423,4371,5.268,4372,7.423,4373,6.579,4374,5.944,4375,5.944,4376,7.423,4377,5.944,4378,5.944,4379,5.944,4380,5.944,4381,5.944,4382,5.944,4383,6.579,4384,5.944,4385,7.423,4386,7.423,4387,5.944,4388,5.944,4389,5.944,4390,5.944,4391,5.944,4392,6.579,4393,5.944,4394,5.944]],["title/coverage.html",[3152,3.665]],["body/coverage.html",[0,0.156,1,1.576,5,0.042,6,3.502,7,3.502,18,0.115,19,0.008,52,1.427,58,1.993,69,1.53,73,0.34,75,1.408,78,0.157,131,0.279,145,2.373,150,0.003,151,0.004,152,0.003,153,2.663,155,5.01,156,1.366,157,3.998,158,4.47,160,2.015,183,0.582,187,1.272,196,2.211,210,1.099,220,2.333,223,2.663,258,2.015,259,4.544,260,4.037,261,4.47,274,2.333,285,1.864,305,2.333,317,1.576,318,2.909,384,2.333,385,4.47,386,2.433,387,4.674,388,2.211,405,1.338,428,1.576,429,1.625,467,2.333,473,0.593,516,4.674,548,2.333,582,1.989,593,2.479,594,1.013,599,3.998,600,3.998,648,2.074,651,1.058,654,0.991,657,1.241,659,0.892,661,1.184,663,2.734,665,1.131,666,2.185,667,1.241,668,1.131,669,1.272,671,1.304,673,1.337,674,1.241,675,2.143,677,1.241,679,1.212,681,1.212,682,2.225,683,1.212,685,1.212,686,1.304,688,1.184,689,1.337,690,1.013,692,0.95,693,0.93,695,1.272,698,1.212,701,1.184,704,2.663,705,3.998,706,3.998,707,1.677,779,2.106,780,3.998,781,3.998,793,2.479,864,3.354,866,2.015,869,2.106,887,2.479,888,3.998,889,4.579,947,5.01,948,4.47,949,1.408,957,1.013,959,1.157,960,2.106,964,1.677,968,2.479,969,1.157,975,2.479,979,2.663,980,3.998,983,2.479,990,2.333,1001,4.415,1002,4.415,1016,1.625,1018,2.493,1020,1.272,1021,1.212,1024,1.157,1035,1.337,1040,1.86,1042,1.86,1046,1.86,1052,1.86,1100,1.933,1124,2.663,1125,4.747,1126,2.106,1152,3.998,1201,3.319,1202,4.131,1225,2.909,1226,2.909,1233,4.579,1234,4.927,1257,2.479,1430,1.733,1431,4.485,1453,2.929,1455,1.241,1457,1.157,1460,1.733,1462,1.733,1463,1.733,1464,4.324,1469,1.733,1472,1.733,1475,1.733,1484,1.677,1487,1.733,1495,1.733,1500,1.733,1514,1.733,1518,1.733,1520,1.733,1527,1.733,1531,1.53,1533,1.733,1706,1.106,1823,1.576,1847,2.909,1848,3.998,1864,3.723,1865,3.723,1875,2.909,1876,2.909,1926,3.486,1927,2.333,1929,4.847,1930,5.592,1931,5.592,1934,2.663,1966,4.367,1983,2.663,2021,2.479,2022,5.01,2023,2.333,2049,2.479,2114,2.663,2116,2.479,2117,4.22,2118,4.47,2128,2.479,2281,2.663,2282,2.909,2320,3.958,2321,4.747,2379,2.333,2408,4.184,2409,1.677,2423,2.211,2437,2.211,2444,1.625,2446,1.625,2449,2.211,2479,2.211,2498,2.333,2548,2.479,2554,2.333,2556,2.333,2567,2.479,2583,2.479,2600,2.479,2612,2.479,2613,2.479,2614,2.909,2633,3.998,2701,2.479,2736,2.233,2765,5.336,2766,5.336,2824,2.663,2826,2.663,2831,2.663,2899,2.663,2900,2.909,2935,3.723,2936,3.723,3010,2.663,3055,5.336,3056,5.336,3062,2.015,3074,2.663,3086,2.663,3092,2.663,3095,4.75,3152,1.933,3166,2.106,3168,4.747,3169,2.479,3170,2.663,3208,4.47,3209,5.068,3258,8.296,3299,2.479,3300,3.998,3316,2.479,3317,2.909,3344,2.909,3377,2.909,3378,2.333,3393,2.479,3395,4.43,3399,2.909,3408,3.502,3409,2.211,3410,2.211,3411,2.909,3412,2.909,3419,2.663,3445,2.479,3446,3.998,3447,3.998,3488,2.909,3489,2.909,3500,2.333,3501,4.477,3502,4.317,3503,4.674,3505,2.211,3511,2.333,3513,2.106,3542,2.333,3543,2.479,3594,4.968,3603,2.211,3706,3.998,3707,3.998,3710,2.663,3717,2.211,3718,4.968,3719,4.968,3730,2.663,3731,2.663,3747,2.663,3748,2.909,3791,2.479,3839,2.663,3841,2.663,3842,4.367,3952,2.909,3953,2.909,3974,2.479,3975,3.998,3976,3.998,4072,3.998,4080,2.663,4100,2.663,4128,2.909,4129,2.909,4192,5.336,4204,2.909,4205,2.909,4227,2.663,4229,2.479,4230,4.43,4231,4.205,4236,2.479,4247,2.333,4255,2.663,4265,2.663,4395,2.909,4396,3.282,4397,5.244,4398,3.282,4399,3.282,4400,2.909,4401,9.315,4402,2.909,4403,3.282,4404,9.299,4405,8.642,4406,3.282,4407,3.282,4408,7.048,4409,3.282,4410,3.282,4411,3.282,4412,4.928,4413,3.282,4414,3.282,4415,8.355,4416,3.282,4417,2.909,4418,5.916,4419,3.282,4420,7.048,4421,5.916,4422,2.909,4423,2.909,4424,2.909,4425,6.576,4426,3.282,4427,3.282,4428,3.282,4429,4.928,4430,3.282,4431,4.928,4432,8.228,4433,8.228,4434,6.576,4435,3.282,4436,3.282,4437,3.282,4438,3.282,4439,3.282,4440,4.928,4441,3.282,4442,3.282,4443,3.282,4444,3.282,4445,3.282,4446,3.282,4447,4.928,4448,2.909,4449,4.928,4450,4.928,4451,3.282,4452,4.928,4453,3.282,4454,2.909,4455,2.909,4456,3.282,4457,3.282,4458,3.282,4459,3.282,4460,4.928,4461,4.928,4462,3.282,4463,3.282,4464,2.909,4465,2.909,4466,2.909,4467,2.909,4468,2.909,4469,3.282,4470,3.282,4471,3.282,4472,3.282,4473,3.282,4474,3.282,4475,3.282,4476,3.282,4477,4.928,4478,4.928,4479,4.928,4480,3.282,4481,3.282,4482,3.282,4483,2.909,4484,6.56,4485,3.282,4486,3.282,4487,2.909,4488,2.909,4489,2.909,4490,2.909,4491,2.909,4492,3.282,4493,3.282,4494,3.282,4495,3.282,4496,4.928,4497,4.928,4498,3.282,4499,3.282,4500,3.282,4501,3.282,4502,3.282,4503,3.282]],["title/dependencies.html",[2735,2.477,4504,3.779]],["body/dependencies.html",[13,0.56,19,0.008,48,6.021,150,0.005,151,0.007,152,0.005,390,4.683,463,0.791,465,5.175,466,4.802,647,1.461,863,2.664,1450,2.289,1452,2.827,1878,5.973,2735,3.583,2757,4.039,3152,3.882,3366,4.228,3367,4.228,3868,6.415,3869,6.415,4194,7.008,4505,7.907,4506,9.302,4507,7.907,4508,8.785,4509,6.589,4510,7.907,4511,7.907,4512,6.589,4513,6.589,4514,6.589,4515,5.84,4516,6.589,4517,6.589,4518,6.589,4519,6.589,4520,6.589,4521,6.589,4522,6.589,4523,6.589,4524,6.589,4525,5.84,4526,6.589,4527,6.589,4528,6.589,4529,6.589,4530,6.589,4531,6.589,4532,5.84,4533,6.589,4534,6.589,4535,6.589,4536,6.589,4537,6.589,4538,6.589,4539,6.589,4540,6.589,4541,6.589,4542,6.589,4543,6.589,4544,6.589,4545,6.589,4546,6.589,4547,6.589,4548,6.589,4549,6.589,4550,6.589,4551,6.589,4552,6.589,4553,5.84,4554,9.302]],["title/miscellaneous/enumerations.html",[4555,2.32,4556,4.846]],["body/miscellaneous/enumerations.html",[6,4.092,7,5.957,12,0.213,15,3.248,18,0.202,19,0.008,20,1.177,24,5.904,25,1.978,27,2.359,28,3.717,30,1.938,34,1.484,37,5.904,42,2.764,44,5.904,49,4.671,63,2.02,73,0.418,75,2.47,87,2.02,93,2.764,102,2.397,109,1.04,119,2.764,128,3.091,132,2.625,136,2.538,142,3.717,143,1.984,144,3.842,145,2.625,146,3.091,147,2.538,148,3.717,149,1.251,150,0.005,151,0.006,152,0.005,179,0.972,206,2.47,210,0.898,285,1.632,405,1.646,582,1.226,601,1.856,606,1.13,613,1.739,666,2.687,675,1.667,680,2.287,691,1.856,735,2.684,920,3.842,1001,3.147,1002,4.581,1004,2.397,1008,4.286,1010,3.392,1018,2.462,1025,3.122,1026,3.147,1028,4.124,1029,3.842,1030,3.717,1032,2.812,1033,3.193,1043,4.286,1044,2.708,1104,4.212,1132,3.207,1150,1.739,1233,3.264,1234,5.12,1238,3.207,1239,5.145,1243,4.901,1244,4.349,1245,3.297,1246,4.349,1247,3.717,1248,4.349,1249,3.977,1250,4.349,1251,6.027,1252,4.671,1253,6.027,1254,4.671,1255,4.671,1431,2.941,1458,3.977,1477,3.977,1480,3.207,1482,3.949,1491,3.147,1492,3.977,1929,3.392,2117,3.695,2118,5.497,2139,5.904,2140,5.904,2141,5.904,2142,5.904,2320,3.207,2408,4.024,2519,5.904,2568,4.349,2588,5.172,2595,4.092,2596,4.349,3168,3.878,3169,4.349,3170,5.904,3181,6.449,3203,5.103,3542,4.092,3543,5.497,3563,6.449,4230,3.878,4231,5.172,4237,5.904,4244,4.671,4246,5.904,4555,3.534,4556,5.103,4557,6.027,4558,7.07,4559,5.103,4560,6.53,4561,5.103,4562,5.497,4563,5.757,4564,5.103,4565,5.757]],["title/miscellaneous/functions.html",[3080,4.13,4555,2.32]],["body/miscellaneous/functions.html",[1,2.016,8,0.494,9,1.166,10,1.958,12,0.155,14,0.841,17,2.985,18,0.322,19,0.008,20,1.392,35,1.819,36,0.931,40,1.48,47,2.294,52,1.258,58,2.294,59,0.838,60,0.841,63,1.166,69,1.958,73,0.511,83,1.324,87,1.636,90,1.627,96,1.105,99,0.775,109,1.153,112,2.83,115,0.838,123,2.695,131,0.578,134,1.087,143,2.68,145,1.515,147,1.851,149,1.28,150,0.003,151,0.005,152,0.003,155,2.985,165,0.931,171,1.11,176,1.762,177,0.864,179,0.934,183,0.473,195,1.149,210,1.258,222,0.574,228,2.102,276,1.604,288,3.215,290,1.636,292,2.031,307,2.695,309,1.229,311,1.802,312,1.592,327,2.078,340,3.132,366,3.407,386,1.743,387,4.189,405,1.873,428,2.016,432,1.627,452,0.912,468,2.295,469,1.958,520,2.031,533,1.324,539,2.861,548,4.189,550,2.284,561,2.474,567,2.529,570,2.401,587,2.671,595,1.307,647,0.931,654,1.78,655,1.71,663,2.177,665,1.447,666,2.515,668,1.447,673,2.401,682,1.967,716,2.078,724,1.296,738,1.802,742,3.479,763,1.19,783,3.011,790,3.341,820,1.48,842,2.463,869,2.695,889,3.341,913,3.655,919,2.985,927,2.443,947,4.189,948,4.453,949,2.529,950,1.71,951,1.383,952,2.205,953,2.463,954,1.859,957,1.819,959,2.401,963,2.414,964,2.145,968,4.453,969,2.603,975,4.453,976,3.407,980,4.782,988,3.407,989,2.985,990,2.985,991,1.515,1001,2.295,1002,3.222,1018,2.279,1021,3.25,1024,2.078,1030,2.145,1033,2.515,1055,2.217,1056,1.802,1060,1.447,1065,1.627,1070,1.216,1081,2.38,1085,1.415,1092,1.668,1108,3.371,1109,2.83,1110,2.529,1111,2.474,1112,1.802,1113,3.112,1114,2.598,1115,1.802,1116,2.463,1117,3.011,1118,3.112,1119,3.011,1120,3.112,1121,3.112,1122,2.671,1123,2.474,1150,1.268,1233,2.38,1234,4.739,1279,5.578,1366,3.407,1367,5.991,1370,3.407,1373,3.407,1374,4.189,1402,2.474,1442,1.588,1453,2.078,1457,1.48,1480,1.851,1522,2.861,1528,1.71,1571,1.668,1929,2.474,1930,3.172,1931,5.875,1934,4.782,1936,5.578,1939,5.578,1943,6.893,1944,3.721,1945,3.407,1946,3.011,1947,6.545,1957,3.721,1961,3.721,1984,3.172,1985,3.721,1988,3.721,1989,3.721,1993,3.721,1994,6.545,1995,5.224,1996,3.721,1997,3.721,1998,3.721,1999,2.695,2000,3.407,2001,4.782,2002,3.721,2005,2.828,2016,3.721,2017,3.721,2018,3.721,2019,3.721,2022,2.985,2023,2.985,2051,5.224,2052,3.721,2053,3.721,2054,3.721,2055,3.407,2056,3.721,2065,2.474,2076,1.942,2138,2.078,2320,3.428,2321,3.97,2352,2.145,2402,3.172,2403,3.172,2404,2.828,2405,2.828,2406,3.172,2407,3.172,2408,4.059,2409,3.011,2479,3.97,2490,3.97,2548,4.453,2550,3.172,2571,4.782,2582,3.172,2583,4.453,2588,4.189,2598,3.172,2612,4.453,2664,3.172,3055,3.407,3056,5.991,3065,5.224,3074,5.526,3079,3.721,3080,4.453,3082,3.721,3083,3.721,3084,3.721,3085,3.721,3086,5.526,3087,3.721,3092,4.782,3095,2.695,3168,2.828,3208,3.172,3209,4.37,3265,3.721,3282,3.721,3283,3.721,3718,3.172,3719,4.453,3738,3.721,3745,3.721,3746,3.721,4397,6.036,4400,5.224,4402,5.224,4417,5.224,4422,5.224,4423,5.224,4424,5.224,4448,5.224,4454,5.224,4455,5.224,4464,5.224,4465,5.224,4466,5.224,4483,5.224,4555,2.578,4557,4.453,4559,5.224,4560,6.092,4562,5.145,4566,5.894,4567,5.526,4568,6.545,4569,4.199,4570,3.721,4571,3.721,4572,4.199,4573,4.199,4574,4.199,4575,4.199,4576,4.199,4577,4.199,4578,4.199,4579,4.199,4580,4.199,4581,4.199,4582,4.199,4583,4.199,4584,4.199,4585,4.199,4586,4.199,4587,4.199]],["title/index.html",[12,0.14,2351,2.226,4301,3.349]],["body/index.html",[4,0.103,5,0.091,19,0.006,47,2.385,84,2.137,111,3.197,118,1.563,131,0.601,150,0.005,151,0.006,152,0.005,177,0.654,183,0.546,206,2.366,217,1.817,268,5.906,273,5.266,302,3.92,322,3.7,343,2.413,390,6.205,392,3.126,473,0.997,550,2.137,587,3.738,595,1.968,606,1.534,609,4.543,682,1.885,724,2.546,735,2.571,817,3.92,822,2.499,854,2.634,991,1.989,1054,2.366,1056,2.366,1083,2.385,1088,2.246,1092,2.19,1117,3.617,1175,2.086,1195,2.366,1258,4.166,1277,4.166,1321,3.754,1402,4.86,1426,3.539,1502,2.73,1504,3.014,1522,2.137,1555,3.738,1571,2.19,1736,3.014,1897,5.906,1946,3.994,2136,4.474,2162,5.032,2398,5.881,2404,4.768,2405,5.557,2549,6.445,2595,5.863,2734,2.499,2735,2.499,2750,2.648,3121,3.714,3127,3.714,3250,6.929,3257,4.887,3327,8.051,3468,4.474,3856,6.274,3861,4.887,3868,4.474,3869,4.474,3887,4.887,3916,6.929,3927,4.887,3942,4.887,3949,4.887,4144,5.744,4303,6.274,4323,6.274,4324,6.274,4327,4.887,4329,7.561,4332,6.274,4345,7.311,4352,4.887,4360,7.561,4364,4.887,4368,6.929,4369,6.274,4371,4.887,4373,4.887,4383,4.887,4392,4.887,4395,4.887,4515,4.887,4525,7.561,4532,4.887,4553,4.887,4588,8.73,4589,8.73,4590,7.818,4591,5.514,4592,5.514,4593,5.514,4594,5.514,4595,5.514,4596,7.079,4597,5.514,4598,7.079,4599,7.079,4600,8.249,4601,8.531,4602,5.514,4603,5.514,4604,5.514,4605,5.514,4606,8.993,4607,5.514,4608,5.514,4609,5.514,4610,5.514,4611,7.079,4612,8.249,4613,5.514,4614,5.514,4615,5.514,4616,5.514,4617,5.514,4618,5.514,4619,5.514,4620,5.514,4621,7.818,4622,8.73,4623,5.514,4624,5.514,4625,5.514,4626,5.514,4627,5.514,4628,5.514,4629,5.514,4630,5.514,4631,5.514,4632,8.249,4633,7.079,4634,5.514,4635,5.514,4636,5.514,4637,5.514,4638,5.514,4639,5.514,4640,5.514,4641,8.73,4642,5.514,4643,5.514,4644,7.818,4645,7.079,4646,5.514,4647,5.514,4648,5.514,4649,5.514,4650,5.514,4651,5.514,4652,5.514,4653,5.514,4654,5.514,4655,7.079,4656,7.079,4657,8.249,4658,7.079,4659,7.079,4660,7.079,4661,7.079,4662,7.079,4663,7.079,4664,7.079,4665,8.249,4666,5.514,4667,5.514,4668,5.514,4669,5.514,4670,7.079,4671,8.249,4672,7.079,4673,5.514,4674,5.514,4675,5.514,4676,5.514,4677,5.514,4678,5.514,4679,5.514,4680,5.514]],["title/modules.html",[2734,2.819]],["body/modules.html",[19,0.007,150,0.006,151,0.007,152,0.006,466,5.244,1076,4.229,2733,4.782,2734,3.217,2744,4.358,3072,4.782,3835,5.045,4090,5.045,4149,4.782,4156,4.782,4161,4.782,4162,4.782,4170,5.363,4173,5.045,4174,4.555,4251,5.363,4681,9.594,4682,9.594]],["title/overview.html",[4683,5.514]],["body/overview.html",[2,1.028,19,0.008,48,3.648,150,0.004,151,0.006,152,0.004,154,1.396,187,3.383,594,2.694,595,1.138,612,2.393,646,1.618,651,2.813,654,2.637,657,3.302,659,2.374,661,2.725,665,2.603,667,2.857,668,2.603,669,3.383,671,3.467,674,3.39,677,3.39,679,2.79,681,2.79,683,2.79,685,3.31,686,3.467,688,3.233,690,2.694,692,1.486,693,2.141,695,3.383,698,3.31,701,3.149,1150,1.55,1152,4.165,1175,1.941,1928,3.877,2076,1.691,2733,6.27,2734,2.326,2735,2.326,2736,2.326,2737,2.541,2738,2.091,2739,2.541,2740,4.549,2741,4.549,2742,4.549,2743,4.549,2744,5.633,2745,3.344,3072,6.47,3409,5.088,3410,3.457,3603,5.088,3717,5.088,3835,6.37,3836,4.549,3837,4.549,3838,4.549,3970,4.549,3971,4.549,3972,4.549,4090,6.37,4091,4.549,4092,4.549,4093,4.549,4149,6.244,4150,4.549,4151,4.549,4153,4.549,4156,6.314,4157,4.549,4158,4.549,4159,4.549,4160,4.549,4161,6.093,4162,6.093,4170,6.932,4171,4.549,4172,4.549,4173,6.37,4174,6.116,4184,4.549,4185,4.549,4186,4.549,4188,4.549,4189,4.549,4190,4.549,4191,4.549,4218,4.549,4219,4.549,4220,4.549,4223,4.549,4224,4.549,4226,4.549,4251,6.834,4252,4.549,4253,4.549,4267,4.549,4268,4.549,4269,4.549,4468,4.549,4683,4.549,4684,5.133,4685,5.133,4686,5.133]],["title/miscellaneous/typealiases.html",[4555,2.32,4687,5.467]],["body/miscellaneous/typealiases.html",[6,4.901,7,5.774,12,0.255,18,0.323,19,0.008,51,5.595,52,1.347,53,4.15,58,2.909,73,0.467,96,0.901,113,3.311,115,0.782,131,0.733,150,0.007,151,0.007,152,0.006,156,1.994,179,0.69,196,4.645,217,2.272,219,2.376,617,4.275,666,3,969,2.431,1018,2.507,1023,3,1109,3.311,1233,3.909,1234,5.213,1363,6.591,1451,2.882,1521,3.311,1864,5.209,1865,6.137,2320,3.039,2408,3.9,2498,4.901,2500,6.591,2935,5.209,2936,6.137,2988,7.2,3114,4.645,3501,3.909,3502,3.769,3542,4.901,3543,6.137,3556,7.2,3845,6.137,4100,6.591,4555,4.233,4557,5.209,4560,5.209,4561,6.111,4562,5.209,4567,5.595,4688,6.895,4689,6.895,4690,6.895,4691,6.111,4692,6.895,4693,6.895,4694,6.895]],["title/miscellaneous/variables.html",[4555,2.32,4695,4.846]],["body/miscellaneous/variables.html",[5,0.048,12,0.138,17,2.655,18,0.327,19,0.008,30,1.7,38,1.646,50,0.413,59,0.93,71,1.358,73,0.5,74,1.646,79,1.521,83,1.178,85,0.741,87,1.505,101,1.537,102,1.786,103,3.031,108,1.317,109,0.534,113,2.603,115,0.724,131,0.721,134,1.323,136,1.646,145,2.682,149,1.685,150,0.003,151,0.005,152,0.003,155,2.655,156,0.862,157,3.031,158,4.096,177,0.687,179,0.944,183,0.409,190,1.569,210,0.583,222,0.724,223,4.399,224,3.31,228,2.578,232,0.554,283,2.266,290,1.037,309,1.131,312,0.718,322,1.521,326,1.231,343,1.153,386,2.07,387,3.853,452,1.615,473,1.153,516,3.853,517,2.042,520,1.868,530,1.287,533,1.71,550,2.101,582,1.49,587,1.693,597,1.153,606,1.064,627,1.569,645,1.972,648,2.012,654,1.128,661,1.348,662,1.944,663,2.357,665,1.287,667,1.413,668,1.287,674,1.413,675,2.153,677,1.413,679,2.002,681,2.002,682,1.7,683,2.002,685,1.379,688,1.348,692,1.569,693,1.059,696,2.199,698,1.379,701,1.348,729,2.051,731,2.413,742,1.908,744,2.257,745,1.258,780,3.031,781,4.399,788,1.521,790,2.117,795,3.57,851,1.444,864,3.969,871,3.31,927,1.772,952,1.537,953,1.561,960,2.397,1018,2.393,1033,2.002,1044,1.928,1059,2.153,1060,1.287,1061,1.447,1075,2.117,1083,1.826,1099,2.2,1102,1.673,1103,1.956,1105,1.908,1132,1.646,1150,2.343,1179,1.972,1195,2.326,1202,1.603,1233,2.117,1234,4.095,1236,2.117,1237,3.031,1238,2.39,1239,5.335,1243,3.652,1244,4.821,1245,3.173,1246,5.29,1247,3.26,1248,5.29,1249,2.963,1250,5.29,1256,3.031,1257,4.096,1258,2.822,1259,3.031,1260,3.031,1261,1.561,1262,3.918,1263,3.031,1264,3.031,1265,1.741,1266,4.399,1267,3.031,1268,3.26,1269,5.178,1270,3.031,1271,3.652,1272,3.031,1273,3.031,1274,3.031,1275,2.822,1276,3.031,1277,2.822,1278,1.908,1279,2.822,1280,3.031,1281,3.031,1282,3.031,1283,3.031,1284,5.178,1285,4.399,1286,3.031,1287,4.399,1288,3.031,1289,4.399,1290,2.397,1291,3.031,1292,5.178,1293,3.031,1294,3.031,1295,3.031,1296,4.399,1297,4.399,1298,3.031,1299,5.178,1300,2.655,1301,3.031,1302,3.031,1303,3.031,1304,3.031,1305,3.031,1306,4.399,1307,3.031,1308,3.031,1309,3.031,1310,5.681,1311,3.031,1312,3.031,1313,4.399,1314,3.031,1315,4.399,1316,3.031,1317,3.031,1318,3.031,1319,3.031,1320,3.031,1321,2.603,1322,1.693,1323,3.031,1324,3.031,1325,4.399,1326,3.031,1327,4.399,1328,5.681,1329,4.399,1330,2.457,1331,4.399,1332,1.849,1333,4.399,1334,3.031,1335,2.822,1336,3.031,1337,2.655,1338,3.031,1339,3.031,1340,3.031,1341,3.031,1342,3.031,1343,2.516,1344,3.031,1345,2.655,1346,2.822,1347,3.031,1348,3.031,1349,3.031,1350,4.399,1351,5.178,1352,4.096,1353,3.031,1354,3.031,1355,3.031,1356,3.031,1357,4.399,1358,5.681,1359,2.655,1360,2.655,1361,2.655,1362,2.655,1425,3.031,1426,2.397,1427,2.266,1428,3.031,1429,3.031,1431,1.908,1451,1.561,1459,2.39,1460,3.37,1461,2.042,1462,2.863,1463,1.972,1464,1.908,1465,1.908,1466,1.793,1467,2.963,1468,2.77,1469,2.863,1470,2.042,1471,2.042,1472,2.863,1473,2.042,1474,2.042,1475,2.863,1476,2.042,1531,2.528,1823,2.603,1883,2.2,1897,4.096,1929,2.2,1930,2.822,1931,4.096,1970,3.031,1983,4.399,2005,2.516,2022,3.853,2023,3.853,2082,3.031,2114,4.399,2320,2.39,2321,3.652,2366,1.908,2376,2.822,2377,2.822,2378,2.822,2379,3.853,2380,2.822,2408,2.603,2410,2.516,2412,2.516,2446,1.849,2454,2.516,2553,4.096,2554,2.655,2556,2.655,2736,3.173,2765,3.031,2766,5.681,2824,4.399,2825,3.31,2826,4.399,2827,3.31,2831,4.399,2832,3.31,2935,2.822,2936,4.096,3010,4.399,3011,4.805,3012,4.805,3013,4.805,3014,4.805,3015,3.31,3016,3.31,3107,2.516,3209,3.479,3393,4.821,3395,2.516,3409,2.516,3410,3.652,3501,2.117,3502,2.042,3503,3.853,3511,3.853,3512,2.822,3594,2.822,3613,3.31,3706,3.031,3707,4.399,3708,4.805,3709,4.805,3710,4.399,3711,4.805,3712,3.31,3713,3.31,3714,3.31,3715,3.31,3716,3.31,3717,2.516,3718,2.822,3719,4.821,3730,4.399,3731,4.399,3839,3.031,4192,3.031,4227,3.031,4230,3.652,4231,3.853,4247,3.853,4248,3.031,4249,3.031,4250,3.031,4255,4.399,4265,4.399,4467,4.805,4484,3.31,4487,4.805,4488,4.805,4489,4.805,4490,4.805,4491,4.805,4555,2.293,4557,2.822,4558,6.59,4560,4.096,4562,4.096,4564,4.805,4567,3.031,4568,3.31,4570,4.805,4571,4.805,4691,3.31,4695,3.31,4696,7.435,4697,6.382,4698,3.735,4699,3.735,4700,7.002,4701,3.735,4702,3.735,4703,3.735,4704,5.421,4705,3.735,4706,3.735,4707,3.735,4708,3.735,4709,3.735]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":582,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.2",{"_index":4519,"title":{},"body":{"dependencies.html":{}}}],["0.0.25",{"_index":4524,"title":{},"body":{"dependencies.html":{}}}],["0.0.7",{"_index":4516,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":4531,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":4552,"title":{},"body":{"dependencies.html":{}}}],["0.38.1",{"_index":4548,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3585,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"classes/Percent.html":{}}}],["0.6.2",{"_index":4527,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":4404,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4470,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4446,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4462,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":149,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["1).pop",{"_index":2728,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["1.0.2",{"_index":4537,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":4545,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":4535,"title":{},"body":{"dependencies.html":{}}}],["1.1.20150312",{"_index":4529,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":4550,"title":{},"body":{"dependencies.html":{}}}],["1.17.1",{"_index":4541,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":4542,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":4514,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":4539,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":4401,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":4461,"title":{},"body":{"coverage.html":{}}}],["1/19",{"_index":4481,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":4433,"title":{},"body":{"coverage.html":{}}}],["1/22",{"_index":4477,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":4440,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":4431,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2884,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{}}}],["10/10",{"_index":4445,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":4495,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":4436,"title":{},"body":{"coverage.html":{}}}],["10/22",{"_index":4444,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1202,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1179,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":1252,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["11/13",{"_index":4411,"title":{},"body":{"coverage.html":{}}}],["11/23",{"_index":4442,"title":{},"body":{"coverage.html":{}}}],["11/30",{"_index":4439,"title":{},"body":{"coverage.html":{}}}],["11/32",{"_index":4497,"title":{},"body":{"coverage.html":{}}}],["115",{"_index":4709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/12",{"_index":4414,"title":{},"body":{"coverage.html":{}}}],["12/18",{"_index":4409,"title":{},"body":{"coverage.html":{}}}],["12/24",{"_index":4437,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":4684,"title":{},"body":{"overview.html":{}}}],["13/18",{"_index":4456,"title":{},"body":{"coverage.html":{}}}],["13rem",{"_index":2732,"title":{},"body":{"components/DropdownComponent.html":{}}}],["14/17",{"_index":4428,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1461,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["150",{"_index":2832,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["15px",{"_index":3297,"title":{},"body":{"components/FormInputComponent.html":{}}}],["16",{"_index":3234,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["16/21",{"_index":4450,"title":{},"body":{"coverage.html":{}}}],["17/24",{"_index":4473,"title":{},"body":{"coverage.html":{}}}],["18/18",{"_index":4482,"title":{},"body":{"coverage.html":{}}}],["18x18",{"_index":3567,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["1st",{"_index":2889,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["2",{"_index":1150,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/Hertz.html":{},"interfaces/MockRecord.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":4521,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":4533,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":4432,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":4460,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":4419,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1463,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["200px",{"_index":1254,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["2019",{"_index":2749,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{}}}],["2020",{"_index":1969,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/ErrorBannerComponent.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["23",{"_index":4685,"title":{},"body":{"overview.html":{}}}],["23/39",{"_index":4426,"title":{},"body":{"coverage.html":{}}}],["24/28",{"_index":4399,"title":{},"body":{"coverage.html":{}}}],["24/31",{"_index":4453,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":2934,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["25",{"_index":1201,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["25/43",{"_index":4457,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":3584,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["255",{"_index":3587,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["27",{"_index":1100,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["2d",{"_index":1940,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["2nd",{"_index":2885,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["3",{"_index":48,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/Bytes.html":{},"dependencies.html":{},"overview.html":{}}}],["3.1.3",{"_index":4508,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":4403,"title":{},"body":{"coverage.html":{}}}],["3/11",{"_index":4451,"title":{},"body":{"coverage.html":{}}}],["3/15",{"_index":4463,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":4405,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":4421,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":4471,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2554,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":2380,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":4468,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["33",{"_index":4418,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":4496,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":4438,"title":{},"body":{"coverage.html":{}}}],["36x36",{"_index":3571,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["37",{"_index":1473,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["38/42",{"_index":4486,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1152,"title":{},"body":{"classes/Bytes.html":{},"coverage.html":{},"overview.html":{}}}],["4/4",{"_index":4415,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":4493,"title":{},"body":{"coverage.html":{}}}],["4/8",{"_index":4435,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1470,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["400px",{"_index":1255,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["44",{"_index":4498,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":4443,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":4441,"title":{},"body":{"coverage.html":{}}}],["49/68",{"_index":4430,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":4480,"title":{},"body":{"coverage.html":{}}}],["5.6.1",{"_index":4512,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":4479,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1464,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":1390,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["52",{"_index":4458,"title":{},"body":{"coverage.html":{}}}],["53",{"_index":4686,"title":{},"body":{"overview.html":{}}}],["54",{"_index":4500,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":4425,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":3289,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["6.5.5",{"_index":4546,"title":{},"body":{"dependencies.html":{}}}],["6/11",{"_index":4501,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":4434,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2556,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":3591,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["64",{"_index":4475,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":4408,"title":{},"body":{"coverage.html":{}}}],["6px",{"_index":3292,"title":{},"body":{"components/FormInputComponent.html":{}}}],["7/12",{"_index":4452,"title":{},"body":{"coverage.html":{}}}],["7/22",{"_index":4469,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":4416,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":4407,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":4413,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":4472,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":4478,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":4429,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":4420,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":4449,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":4412,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1966,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{}}}],["8.3.20",{"_index":4677,"title":{},"body":{"index.html":{}}}],["8/12",{"_index":4474,"title":{},"body":{"coverage.html":{}}}],["8/18",{"_index":4499,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":4492,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":4427,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":4494,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":4410,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":4398,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":4406,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":4554,"title":{},"body":{"dependencies.html":{}}}],["9.1.9",{"_index":4506,"title":{},"body":{"dependencies.html":{}}}],["9/12",{"_index":4447,"title":{},"body":{"coverage.html":{}}}],["9/14",{"_index":4476,"title":{},"body":{"coverage.html":{}}}],["9/17",{"_index":4459,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":4485,"title":{},"body":{"coverage.html":{}}}],["999",{"_index":4672,"title":{},"body":{"index.html":{}}}],["999].[0",{"_index":4671,"title":{},"body":{"index.html":{}}}],["_actions",{"_index":162,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_columns",{"_index":1549,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_config",{"_index":2328,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["_dropdownitemcontents",{"_index":2639,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["_errormessage",{"_index":2904,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["_height",{"_index":1655,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_isrequestpending",{"_index":2214,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_items",{"_index":2640,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["_multiplier",{"_index":1135,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_open",{"_index":2204,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["_pagination",{"_index":1653,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_progress",{"_index":2216,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_searchcriteria",{"_index":3881,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["_selectedentities",{"_index":163,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["_selectiontype",{"_index":1647,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_size",{"_index":3548,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["_unit",{"_index":2484,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["_unitname",{"_index":1136,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_unitoptions",{"_index":2485,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["a.b.c",{"_index":3724,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["abort",{"_index":3926,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["above",{"_index":47,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["absolute",{"_index":1290,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["absolutely",{"_index":2838,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["abstract",{"_index":334,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["abstractcontrol",{"_index":2131,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["abstraction",{"_index":3115,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["acc",{"_index":3938,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["accepts",{"_index":2329,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{}}}],["access",{"_index":535,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["accessors",{"_index":170,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["achieved",{"_index":4340,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["action.actiontype",{"_index":1595,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["action.availability",{"_index":252,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.availability(this._selectedentities",{"_index":253,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.disabled",{"_index":257,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.disabled(this._selectedentities",{"_index":256,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.handler",{"_index":1582,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["action.handler(this._selectedentities",{"_index":240,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.handlerdata",{"_index":241,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["action.istranslatable",{"_index":2730,"title":{},"body":{"components/DropdownComponent.html":{}}}],["action.textkey",{"_index":239,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/DropdownComponent.html":{}}}],["action.textkey.tolowercase().includes(searchcriteria",{"_index":236,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["actionbar",{"_index":1804,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiondisplayconfig",{"_index":1,"title":{"interfaces/ActionDisplayConfig.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["actionhandler",{"_index":1581,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandler(selectedentities",{"_index":1584,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandlerresponse",{"_index":1583,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionhandlertype",{"_index":53,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem",{"_index":69,"title":{"interfaces/ActionItem.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["actionitem.handler",{"_index":51,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem.textkey",{"_index":125,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["actionmenu.contextualfeaturedactions",{"_index":1685,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenucomponent",{"_index":651,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{},"overview.html":{}}}],["actionmenus",{"_index":1679,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenus.foreach(actionmenu",{"_index":1683,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenus.length",{"_index":1680,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionmenusinrow(actionmenus",{"_index":1678,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionreporter",{"_index":1667,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions",{"_index":10,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["actions(actions",{"_index":225,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions.map(action",{"_index":1580,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actionsearchprovider",{"_index":153,"title":{"classes/ActionSearchProvider.html":{}},"body":{"classes/ActionSearchProvider.html":{},"coverage.html":{}}}],["actionstyling",{"_index":24,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype",{"_index":28,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype.static",{"_index":1597,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiontype.static_featured",{"_index":1596,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activate",{"_index":1396,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["activated",{"_index":2354,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["active",{"_index":1530,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activites",{"_index":1665,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activity",{"_index":285,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["activityindicatortype",{"_index":1492,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["activitypromiseresolver",{"_index":258,"title":{"classes/ActivityPromiseResolver.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activitypromiseresolver.monitoractivities",{"_index":356,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activitypromiseresolver.monitoractivity",{"_index":351,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter",{"_index":317,"title":{"classes/ActivityReporter.html":{}},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activityreporter:21",{"_index":635,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:27",{"_index":633,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:33",{"_index":634,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:38",{"_index":631,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:53",{"_index":632,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:73",{"_index":630,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromise",{"_index":300,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromises",{"_index":287,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresponse",{"_index":305,"title":{"interfaces/ActivityResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["acts",{"_index":1877,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["actual_component",{"_index":703,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["add",{"_index":1571,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["addcolumn",{"_index":1632,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addcolumn(col",{"_index":1691,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["added",{"_index":80,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["adding",{"_index":1819,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addition",{"_index":2520,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"modules/VcdFormlyModule.html":{}}}],["additional",{"_index":107,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"modules/VcdFormlyModule.html":{}}}],["additionaldata",{"_index":95,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["adds",{"_index":3064,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["addwildcard",{"_index":2585,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["addwildcard(input",{"_index":2587,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["after(date",{"_index":2965,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["aftercontentinit",{"_index":2772,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["afterviewinit",{"_index":1438,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["again",{"_index":2797,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["against",{"_index":1996,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["age",{"_index":2553,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["alert",{"_index":362,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["alert').nativeelement.textcontent",{"_index":778,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["alertclosable",{"_index":2907,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["alerttype",{"_index":2908,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["aliases",{"_index":4688,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":3593,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["all(...conditions",{"_index":3034,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["all(conditions",{"_index":2968,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["allow",{"_index":1230,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{}}}],["allowed",{"_index":1466,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":989,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{}}}],["allresults",{"_index":3936,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["allresults.indexof(this.selecteditem",{"_index":3941,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["along",{"_index":3456,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"interfaces/SearchSection.html":{},"classes/SubscriptionTracker.html":{}}}],["alongside",{"_index":3872,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["alternatives",{"_index":4347,"title":{},"body":{"contributing.html":{}}}],["alto",{"_index":3713,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":31,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{}}}],["amend",{"_index":4376,"title":{},"body":{"contributing.html":{}}}],["analyzer",{"_index":4612,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":4616,"title":{},"body":{"index.html":{}}}],["ancestor",{"_index":557,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ancestor).queryall(by.css(query",{"_index":564,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["and().or",{"_index":2943,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(...conditions",{"_index":3021,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(conditions",{"_index":2972,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["angular",{"_index":390,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":4505,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2757,"title":{},"body":{"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"pipes/NestedPropertyPipe.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":4507,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":463,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":464,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["angular/forms",{"_index":863,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"modules/DropdownModule.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":465,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/router",{"_index":4194,"title":{},"body":{"modules/VcdDatagridModule.html":{},"dependencies.html":{}}}],["angularwidgetdriver",{"_index":384,"title":{"classes/AngularWidgetDriver.html":{}},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{}}}],["angularwidgetdriver(this.fixture",{"_index":572,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["angularwidgetfinder",{"_index":467,"title":{"classes/AngularWidgetFinder.html":{}},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{}}}],["angularwidgetfinder(this.fixture).find>(params",{"_index":474,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["another",{"_index":1637,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any(...conditions",{"_index":3036,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any(conditions",{"_index":2975,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any).href",{"_index":1708,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any).organizer.resize",{"_index":1846,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any).popoverinstance.removescrolleventlisteners",{"_index":2853,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["anychoice",{"_index":2558,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["anychoice.display",{"_index":2584,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["api",{"_index":720,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["app",{"_index":3250,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["appear",{"_index":3888,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["appears",{"_index":841,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["appended",{"_index":923,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["appends",{"_index":3518,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["application",{"_index":3887,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["application's",{"_index":4620,"title":{},"body":{"index.html":{}}}],["applied",{"_index":918,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["approval",{"_index":4660,"title":{},"body":{"index.html":{}}}],["area",{"_index":2825,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["arg",{"_index":528,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["args",{"_index":827,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CommonUtil.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{}}}],["argument",{"_index":112,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["arguments",{"_index":1122,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["around",{"_index":2010,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{}}}],["array",{"_index":1077,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["array.from(classes",{"_index":4050,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["arrow",{"_index":2295,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["arrowup",{"_index":758,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["artifacts",{"_index":4627,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":1183,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["aside",{"_index":3291,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assert",{"_index":2024,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assert(expectation",{"_index":2029,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["assertions",{"_index":3117,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assign",{"_index":3259,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assigned",{"_index":2339,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{}}}],["assigning",{"_index":2363,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["assignvalue",{"_index":1887,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["assignvalue(config",{"_index":1899,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["associated",{"_index":857,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["associating",{"_index":2453,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["assumed",{"_index":296,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["asterisk",{"_index":853,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["async",{"_index":330,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressWidgetDriver.html":{},"components/FilterTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["attaches",{"_index":1882,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attaching",{"_index":1911,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attachrenderer",{"_index":1888,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attempt",{"_index":3927,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["attribute",{"_index":3230,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["auto",{"_index":816,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["automatically",{"_index":3468,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"index.html":{}}}],["autosquash",{"_index":4380,"title":{},"body":{"contributing.html":{}}}],["availability",{"_index":94,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["available",{"_index":84,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{}}}],["availableheight",{"_index":1805,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["availableunits",{"_index":1171,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["avoid",{"_index":1088,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["avoiding",{"_index":3102,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["await",{"_index":369,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{},"components/FilterTestHostComponent.html":{},"interfaces/SearchSection.html":{}}}],["b",{"_index":1127,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["back",{"_index":3519,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["background",{"_index":3582,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["backing",{"_index":791,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["bail",{"_index":2061,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["banner",{"_index":601,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["banner'},{'name",{"_index":672,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["banner.component",{"_index":4222,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banner.component.html",{"_index":2903,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.scss",{"_index":2902,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts",{"_index":2900,"title":{},"body":{"components/ErrorBannerComponent.html":{},"coverage.html":{}}}],["banner.component.ts:17",{"_index":2925,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:19",{"_index":2926,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:24",{"_index":2921,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:29",{"_index":2917,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:36",{"_index":2916,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:41",{"_index":2911,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:46",{"_index":2928,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:54",{"_index":2922,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:59",{"_index":2924,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.module",{"_index":4166,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["banner.module.ts",{"_index":4221,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banneractivityreportercomponent",{"_index":594,"title":{"components/BannerActivityReporterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["banneractivityreporterwidgetobject",{"_index":704,"title":{"classes/BannerActivityReporterWidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["bar",{"_index":1587,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["base",{"_index":469,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CypressWidgetDriver.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":1322,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["baseformcontrol",{"_index":779,"title":{"classes/BaseFormControl.html":{}},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["baseformcontrol:105",{"_index":3190,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:109",{"_index":3191,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:113",{"_index":3192,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:117",{"_index":3193,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:21",{"_index":3196,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:26",{"_index":3198,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:31",{"_index":3199,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:36",{"_index":3194,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:41",{"_index":3189,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:46",{"_index":3188,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:52",{"_index":3185,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:57",{"_index":3187,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:62",{"_index":3186,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:67",{"_index":3195,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:72",{"_index":3197,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseunit",{"_index":4118,"title":{},"body":{"classes/Unit.html":{}}}],["basevalue",{"_index":1222,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["basewidgetobject",{"_index":887,"title":{"classes/BaseWidgetObject.html":{}},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"coverage.html":{}}}],["basically",{"_index":3857,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["batch",{"_index":92,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["become",{"_index":1049,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["becomes",{"_index":2425,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/DomUtil.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["before",{"_index":851,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["before(date",{"_index":2977,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["before/aftereach",{"_index":589,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["beforeeach",{"_index":3079,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beforeeach(function(this",{"_index":3083,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beginning",{"_index":2725,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["begins",{"_index":626,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["behavior",{"_index":360,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/DomUtil.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["being",{"_index":717,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["belong",{"_index":1497,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["belongs",{"_index":1675,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["below",{"_index":842,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["benefit",{"_index":4680,"title":{},"body":{"index.html":{}}}],["best",{"_index":1174,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["bestformat",{"_index":4131,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(1000000",{"_index":4136,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(value",{"_index":4133,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestunit",{"_index":1218,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["bestvalue",{"_index":3633,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["between",{"_index":321,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["betweennumbers",{"_index":2951,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["betweennumbers(values",{"_index":2979,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["binding",{"_index":3873,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["bl",{"_index":1250,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":1938,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["blob([csvfile",{"_index":1967,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["block",{"_index":2630,"title":{},"body":{"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["blocking",{"_index":3544,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["body",{"_index":1791,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["bold",{"_index":655,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer",{"_index":975,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer(textextractor",{"_index":4572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boldtextrenderercomponent",{"_index":654,"title":{"components/BoldTextRendererComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["boldtextrendererconfig",{"_index":964,"title":{"interfaces/BoldTextRendererConfig.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrendererwidgetobject",{"_index":979,"title":{"classes/BoldTextRendererWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":2737,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["boston",{"_index":3715,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":138,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Percent.html":{}}}],["bottom",{"_index":1249,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":2919,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["box",{"_index":1027,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["br",{"_index":1248,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":4324,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["break",{"_index":1335,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":843,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["breaks",{"_index":1568,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["browse",{"_index":4682,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":466,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{},"modules.html":{}}}],["bsd",{"_index":2754,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["bubbles",{"_index":492,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["buckets",{"_index":49,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["bug",{"_index":1565,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["bugs",{"_index":4393,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":3856,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["build:components",{"_index":4625,"title":{},"body":{"index.html":{}}}],["build:i18n",{"_index":4626,"title":{},"body":{"index.html":{}}}],["builder",{"_index":2448,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["builder.is(\"created\").before(userinputdate",{"_index":2944,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.is(\"uptime\").greaterthan(user",{"_index":2945,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts",{"_index":2936,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:106",{"_index":2969,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:126",{"_index":3007,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:160",{"_index":2976,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:180",{"_index":3009,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:190",{"_index":2992,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:198",{"_index":3005,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:206",{"_index":3001,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:214",{"_index":3003,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:222",{"_index":2995,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:230",{"_index":2997,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:238",{"_index":2978,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:246",{"_index":2966,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:256",{"_index":2980,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:270",{"_index":2990,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:282",{"_index":2986,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:291",{"_index":2985,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:39",{"_index":2964,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:40",{"_index":2963,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:41",{"_index":2962,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:52",{"_index":2999,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:62",{"_index":2993,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:72",{"_index":2973,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders",{"_index":3046,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders.push(new",{"_index":3047,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["buildpartial",{"_index":2952,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builds",{"_index":4652,"title":{},"body":{"index.html":{}}}],["button",{"_index":75,"title":{"interfaces/Button.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["buttonconfig",{"_index":1052,"title":{"interfaces/ButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["buttonconfig.inactivedisplaymode",{"_index":1012,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["buttoncontents",{"_index":141,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["buttons",{"_index":128,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["by.all",{"_index":514,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["by.css(cssselector",{"_index":513,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["by.css(selector",{"_index":3135,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["by.directive(selector",{"_index":3136,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["bytes",{"_index":1124,"title":{"classes/Bytes.html":{}},"body":{"classes/Bytes.html":{},"coverage.html":{}}}],["bytes(1",{"_index":1145,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes(1024",{"_index":1147,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.b",{"_index":1154,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.gb",{"_index":1157,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.kb",{"_index":1155,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.mb",{"_index":1156,"title":{},"body":{"classes/Bytes.html":{}}}],["c",{"_index":539,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"classes/WidgetFinder.html":{},"miscellaneous/functions.html":{}}}],["ca",{"_index":2410,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":1634,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculate",{"_index":189,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculated",{"_index":1031,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["calculatepagesize",{"_index":1792,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculateposition(rect",{"_index":1348,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["calculates",{"_index":1173,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["calculating",{"_index":1673,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["california",{"_index":2411,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["call",{"_index":113,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["callback",{"_index":823,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["called",{"_index":114,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["caller",{"_index":1060,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["callers",{"_index":3112,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["calling",{"_index":182,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["canbereadonly",{"_index":793,"title":{"interfaces/CanBeReadOnly.html":{}},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["cancel",{"_index":2167,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["canceltext",{"_index":2168,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["care",{"_index":531,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["case",{"_index":88,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["catch",{"_index":2854,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["catch(error",{"_index":314,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["caused",{"_index":1269,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["causes",{"_index":1841,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["causing",{"_index":4350,"title":{},"body":{"contributing.html":{}}}],["cd",{"_index":4661,"title":{},"body":{"index.html":{}}}],["cell",{"_index":953,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cell's",{"_index":1993,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cell_tag",{"_index":4487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cellelement",{"_index":997,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["cells",{"_index":1065,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["cellvalue",{"_index":1994,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cellvalue.tolocalestring",{"_index":2006,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cellvalue.tostring",{"_index":2004,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["center",{"_index":1346,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["certificate",{"_index":4309,"title":{},"body":{"contributing.html":{}}}],["certifies",{"_index":4313,"title":{},"body":{"contributing.html":{}}}],["cfg",{"_index":4585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cfr",{"_index":1892,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["chai",{"_index":2078,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["chain",{"_index":4586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chain.then(resolvepromise",{"_index":2075,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["chainable",{"_index":2051,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["chance",{"_index":1280,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":822,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["changed",{"_index":1883,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["changedetectorref",{"_index":1439,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["changes",{"_index":724,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["changing",{"_index":1843,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["character",{"_index":1943,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["characters",{"_index":3232,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["check",{"_index":392,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["check(cssselector",{"_index":414,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["checkbox",{"_index":920,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox'},{'name",{"_index":676,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["checkbox.component",{"_index":4228,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["checkbox.component.html",{"_index":3171,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts",{"_index":3170,"title":{},"body":{"components/FormCheckboxComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox.component.ts:34",{"_index":3184,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:39",{"_index":3183,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:44",{"_index":3180,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:49",{"_index":3178,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:51",{"_index":3201,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:53",{"_index":3176,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox/form",{"_index":3169,"title":{},"body":{"components/FormCheckboxComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox:nth",{"_index":2316,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["checkboxelement",{"_index":479,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["checkboxelement.checked",{"_index":481,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["checkboxelement.dispatchevent(new",{"_index":482,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["checkboxes",{"_index":2309,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["checkboxstyling",{"_index":3181,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["checkboxstyling.checkbox",{"_index":3182,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checked",{"_index":921,"title":{},"body":{"classes/BaseWidgetObject.html":{},"directives/MinMaxValidator.html":{},"interfaces/WidgetDriver.html":{}}}],["checkout",{"_index":4361,"title":{},"body":{"contributing.html":{}}}],["checkposition",{"_index":2610,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["checks",{"_index":919,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["child",{"_index":914,"title":{},"body":{"classes/BaseWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/WidgetDriver.html":{}}}],["children",{"_index":123,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["choice",{"_index":2081,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["chrome",{"_index":1970,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"miscellaneous/variables.html":{}}}],["ci",{"_index":4369,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ci/cd",{"_index":4643,"title":{},"body":{"index.html":{}}}],["city",{"_index":3708,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["clarity",{"_index":118,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["claritymodule",{"_index":2760,"title":{},"body":{"modules/DropdownModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["clashes",{"_index":2079,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["class",{"_index":78,"title":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"classes/DomUtil.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["classes",{"_index":154,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"overview.html":{}}}],["classes(cssselector",{"_index":417,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["classlist.js",{"_index":4528,"title":{},"body":{"dependencies.html":{}}}],["classname",{"_index":559,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["classselector",{"_index":2617,"title":{},"body":{"classes/DomUtil.html":{}}}],["clause",{"_index":2755,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["cleanup",{"_index":2066,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["clear",{"_index":2953,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["cleared",{"_index":924,"title":{},"body":{"classes/BaseWidgetObject.html":{},"components/ErrorBannerComponent.html":{},"interfaces/WidgetDriver.html":{}}}],["clearhidetimeout",{"_index":1316,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clearing",{"_index":925,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["clearinputvalue",{"_index":393,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["clearinputvalue(cssselector",{"_index":419,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["clears",{"_index":928,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{}}}],["clearselectioninformation",{"_index":1749,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["cleartimeout(tip.hidetimeout",{"_index":1317,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":4525,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["click",{"_index":394,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["click(cssselector",{"_index":421,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clickcancel",{"_index":2283,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox",{"_index":2284,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox(index",{"_index":2292,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumndropdown",{"_index":2285,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicked",{"_index":105,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["clickexport",{"_index":2286,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicks",{"_index":722,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["client",{"_index":267,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{}}}],["clientheight",{"_index":1467,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["clientrect",{"_index":1349,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clipped",{"_index":1018,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clipping",{"_index":2830,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["cliptext",{"_index":1101,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{}}}],["cliptextconfig",{"_index":1016,"title":{"interfaces/CliptextConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{}}}],["clone",{"_index":4637,"title":{},"body":{"index.html":{}}}],["cloning",{"_index":4636,"title":{},"body":{"index.html":{}}}],["closable",{"_index":2913,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["close",{"_index":2489,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["closed",{"_index":2905,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["closer",{"_index":3516,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["closes",{"_index":620,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["closing",{"_index":3244,"title":{},"body":{"components/FormInputComponent.html":{}}}],["closure",{"_index":3913,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["closures",{"_index":592,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cloud",{"_index":4588,"title":{},"body":{"index.html":{}}}],["clr",{"_index":696,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["clr/angular",{"_index":1450,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["clr/angular/data/datagrid/interfaces/filter.interface",{"_index":2373,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clr/core",{"_index":4509,"title":{},"body":{"dependencies.html":{}}}],["clr/icons",{"_index":4510,"title":{},"body":{"dependencies.html":{}}}],["clr/ui",{"_index":4511,"title":{},"body":{"dependencies.html":{}}}],["clrdatagrid",{"_index":1447,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatagridcssclass",{"_index":1649,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridfilter",{"_index":2335,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["clrdatagridfilterinterface",{"_index":2327,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clrdatagridpagination",{"_index":1448,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridstateinterface",{"_index":1449,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridwidgetobject",{"_index":990,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["clrdatagridwidgetobject(this.fixture",{"_index":4216,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatarowcssclassgetter(row",{"_index":1718,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdgcolumnclassname",{"_index":1107,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["clrdropdown",{"_index":2133,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{}}}],["clrdropdownmenu",{"_index":2823,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["clrposition",{"_index":2661,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["cluster_dropdownmodule",{"_index":2740,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_declarations",{"_index":2741,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_exports",{"_index":2743,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_imports",{"_index":2742,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_pipesmodule",{"_index":3836,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_declarations",{"_index":3837,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_exports",{"_index":3838,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule",{"_index":3970,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_declarations",{"_index":3971,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_exports",{"_index":3972,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule",{"_index":4091,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_declarations",{"_index":4092,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_exports",{"_index":4093,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule",{"_index":4150,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_declarations",{"_index":4151,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_exports",{"_index":4153,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_imports",{"_index":4152,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["cluster_vcdactivityreportermodule",{"_index":4157,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_declarations",{"_index":4158,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_exports",{"_index":4160,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_imports",{"_index":4159,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule",{"_index":4171,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule_exports",{"_index":4172,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule",{"_index":4184,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_declarations",{"_index":4185,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_exports",{"_index":4186,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule",{"_index":4188,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_declarations",{"_index":4189,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_exports",{"_index":4191,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_imports",{"_index":4190,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule",{"_index":4218,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_declarations",{"_index":4219,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_exports",{"_index":4220,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule",{"_index":4252,"title":{},"body":{"modules/VcdFormlyModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule_declarations",{"_index":4253,"title":{},"body":{"modules/VcdFormlyModule.html":{},"overview.html":{}}}],["cluster_vcdformlymodule_imports",{"_index":4254,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["cluster_vcdformmodule",{"_index":4223,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_declarations",{"_index":4224,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_exports",{"_index":4225,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["cluster_vcdformmodule_providers",{"_index":4226,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule",{"_index":4267,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_declarations",{"_index":4268,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_exports",{"_index":4269,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cmd+space",{"_index":3850,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["co",{"_index":3674,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["co.value",{"_index":3675,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["code",{"_index":1946,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["codecov.io",{"_index":4530,"title":{},"body":{"dependencies.html":{}}}],["col",{"_index":1692,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["col.displayname",{"_index":1701,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["colindex",{"_index":1693,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["collect",{"_index":110,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["color",{"_index":3286,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["cols",{"_index":1552,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column",{"_index":952,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["column.displayname",{"_index":1702,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.fieldname",{"_index":2280,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["column.filter",{"_index":1836,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.filter.config.queryfield",{"_index":1837,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.hideable",{"_index":1772,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface",{"_index":971,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface.ts",{"_index":1002,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["column.queryfieldname",{"_index":1835,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.renderer",{"_index":1827,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column_css_selector",{"_index":4488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["column_selector",{"_index":4489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columnbubbles",{"_index":2288,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncheckboxes",{"_index":2289,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncomponentrendererspec",{"_index":968,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec(componentrendererspec",{"_index":1123,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec({type",{"_index":1111,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columnconfig",{"_index":1826,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldcolumnrendererspec",{"_index":1831,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldname",{"_index":1832,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldrenderer",{"_index":1829,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfiginternal",{"_index":1430,"title":{"interfaces/ColumnConfigInternal.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["columndropdown",{"_index":2156,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columndropdown(columndropdown",{"_index":2155,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columnrendererspec",{"_index":969,"title":{"interfaces/ColumnRendererSpec.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["columnrendererspec#type",{"_index":1868,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["columnrendererspec).config",{"_index":1830,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnrendererspec.config",{"_index":1881,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["columns",{"_index":956,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns(cols",{"_index":1550,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns.map(column",{"_index":1825,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsconfig",{"_index":1545,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsupdated",{"_index":1631,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["combination",{"_index":308,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["combooption",{"_index":3621,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptions",{"_index":3629,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptionunitmap",{"_index":3632,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions",{"_index":3642,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.disable",{"_index":3683,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.enable",{"_index":3685,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.setvalue(this.bestunit.getmultiplier",{"_index":3687,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["commands",{"_index":4666,"title":{},"body":{"index.html":{}}}],["commas",{"_index":1989,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["comment",{"_index":4382,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":4327,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commits",{"_index":4325,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":4144,"title":{},"body":{"injectables/UnitFormatter.html":{},"contributing.html":{},"index.html":{}}}],["common/activity",{"_index":773,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["common/error/error",{"_index":4178,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/interfaces",{"_index":218,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/MinMaxValidator.html":{}}}],["common/interfaces/action",{"_index":1014,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["common/interfaces/select",{"_index":2445,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["common/loading/loading",{"_index":4179,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/pipes/pipes.module",{"_index":4196,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["common/subscription",{"_index":1456,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["commonmodule",{"_index":2756,"title":{},"body":{"modules/DropdownModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["commonutil",{"_index":220,"title":{"classes/CommonUtil.html":{}},"body":{"classes/ActionSearchProvider.html":{},"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["commonutil.isfunction(action.disabled",{"_index":255,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["commonutil.roundto(inputunit.getoutputvalue(value",{"_index":4146,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["community",{"_index":4307,"title":{},"body":{"contributing.html":{}}}],["compared",{"_index":3815,"title":{},"body":{"classes/Percent.html":{}}}],["compatibility",{"_index":3467,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["compilecomponents",{"_index":3078,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["complete",{"_index":1654,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["completed",{"_index":3925,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["completes",{"_index":2053,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["complex",{"_index":2939,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["comply",{"_index":4098,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["compodoc",{"_index":4544,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":183,"title":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["component's",{"_index":521,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["component(filtertesthostcomponent",{"_index":4574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component({@link",{"_index":3081,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["component_template",{"_index":650,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["componentconstructor",{"_index":549,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfactory",{"_index":1917,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfactoryresolver",{"_index":1893,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfixture",{"_index":409,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture#detectchanges",{"_index":3131,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture).componentref",{"_index":553,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["componentinstance",{"_index":3977,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["componentref",{"_index":1885,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentrenderer",{"_index":949,"title":{"interfaces/ComponentRenderer.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentrenderer#config",{"_index":1058,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["componentrenderer.config",{"_index":972,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["componentrendererconstructor",{"_index":1023,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["componentrendereroutletdirective",{"_index":693,"title":{"directives/ComponentRendererOutletDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["componentrendereroutletdirective#assignvalue",{"_index":2384,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["componentrendererspec",{"_index":1024,"title":{"interfaces/ComponentRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentroots",{"_index":563,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentroots.map",{"_index":565,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["components",{"_index":595,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["components.git",{"_index":4675,"title":{},"body":{"index.html":{}}}],["components/master",{"_index":4659,"title":{},"body":{"index.html":{}}}],["componenttype",{"_index":1886,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["compound",{"_index":3919,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["computebestunitandvalue(value",{"_index":3664,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["concurrent",{"_index":328,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["condition",{"_index":82,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["condition(operator",{"_index":2987,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.buildpartial",{"_index":3033,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.clear",{"_index":3038,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions",{"_index":2971,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.foreach(condition",{"_index":3032,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.length",{"_index":3022,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.shift",{"_index":3030,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["config",{"_index":963,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["config(config",{"_index":1382,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config(context",{"_index":1922,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["config(record",{"_index":977,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config(val",{"_index":2385,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["config.disabled",{"_index":1387,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.mouseoutdelay",{"_index":1383,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.options.foreach(option",{"_index":2460,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.options.map(option",{"_index":2457,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.size",{"_index":1385,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.text",{"_index":962,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config.unit",{"_index":2533,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config.unitoptions",{"_index":2532,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["configoption",{"_index":4238,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["configs",{"_index":4584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configurable",{"_index":4244,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["configuration",{"_index":9,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/functions.html":{}}}],["configurationcomponentrenderer",{"_index":1924,"title":{},"body":{"interfaces/ComponentRendererSpec.html":{}}}],["configuration{@link",{"_index":1871,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["configured",{"_index":3866,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["configures",{"_index":2599,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["configuretestingmodule",{"_index":3074,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["conjunct",{"_index":2974,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["considered",{"_index":4348,"title":{},"body":{"contributing.html":{}}}],["consists",{"_index":754,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["console.error('clarity",{"_index":2855,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["const",{"_index":222,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["constelement",{"_index":4214,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["constelement.componentinstance",{"_index":4217,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["construct",{"_index":1211,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["constructed",{"_index":3628,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["constructor",{"_index":171,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["constructor(@inject(activitypromiseresolver",{"_index":4079,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(@inject(locale_id",{"_index":3732,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["constructor(@self",{"_index":3205,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["constructor(arg",{"_index":526,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["constructor(componentconstructor",{"_index":3162,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["constructor(controldirective",{"_index":3175,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{}}}],["constructor(destroyable",{"_index":3473,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["constructor(driver",{"_index":892,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["constructor(element",{"_index":2027,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["constructor(elref",{"_index":2788,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["constructor(filtercontainer",{"_index":2334,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["constructor(fixture",{"_index":408,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/WidgetObject.html":{}}}],["constructor(host",{"_index":3955,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["constructor(multiplier",{"_index":3822,"title":{},"body":{"classes/Percent.html":{},"classes/Unit.html":{}}}],["constructor(ngcontrol",{"_index":809,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormSelectComponent.html":{}}}],["constructor(parent",{"_index":2961,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["constructor(prefix",{"_index":3491,"title":{},"body":{"classes/IdGenerator.html":{}}}],["constructor(private",{"_index":231,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/BaseWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"interfaces/WidgetDriver.html":{}}}],["constructor(promiseresolver",{"_index":338,"title":{},"body":{"classes/ActivityReporter.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(translationservice",{"_index":615,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(ts",{"_index":172,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["constructor(viewcontainerref",{"_index":1890,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructors",{"_index":1879,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructs",{"_index":3470,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["contain",{"_index":4338,"title":{},"body":{"contributing.html":{}}}],["contained",{"_index":315,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/WidgetDriver.html":{}}}],["container",{"_index":1261,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":1056,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["content",{"_index":744,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["content/dimensions",{"_index":1323,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["content_area_selector",{"_index":2824,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contentareaelement",{"_index":2775,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect",{"_index":2871,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.bottom",{"_index":2898,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.left",{"_index":2880,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.right",{"_index":2877,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentarearect.top",{"_index":2873,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentchild",{"_index":2820,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contentchild(clrdropdownmenu",{"_index":2839,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["contents",{"_index":74,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":33,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/SearchSection.html":{}}}],["context(.modal",{"_index":3588,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["context(.modal):not(.adjust",{"_index":3296,"title":{},"body":{"components/FormInputComponent.html":{}}}],["contextual",{"_index":15,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextual_featured",{"_index":44,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactionposition",{"_index":1458,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactionposition.row",{"_index":1630,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualactionposition.top",{"_index":1627,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualactions",{"_index":1600,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualbutton",{"_index":1042,"title":{"interfaces/ContextualButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["contextualbutton.ids",{"_index":1925,"title":{},"body":{"interfaces/ContextualButtonConfig.html":{}}}],["contextualbutton.id}s",{"_index":1048,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["contextualbuttonconfig",{"_index":1046,"title":{"interfaces/ContextualButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["contextualbuttonposition",{"_index":1043,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextualfeaturedactions",{"_index":1684,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["continue",{"_index":3931,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["contract",{"_index":320,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["contributing",{"_index":4302,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":4316,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":4306,"title":{},"body":{"contributing.html":{}}}],["contributor's",{"_index":4320,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":790,"title":{},"body":{"classes/BaseFormControl.html":{},"injectables/CsvExporterService.html":{},"components/DatagridNumericFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["control's",{"_index":3325,"title":{},"body":{"classes/FormValidators.html":{}}}],["control.ts",{"_index":781,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control.ts:105",{"_index":829,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:109",{"_index":831,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:113",{"_index":834,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:117",{"_index":837,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:21",{"_index":815,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:26",{"_index":821,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:31",{"_index":824,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:36",{"_index":812,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:41",{"_index":852,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:46",{"_index":850,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:52",{"_index":840,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:57",{"_index":848,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:62",{"_index":845,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:67",{"_index":813,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:72",{"_index":811,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:85",{"_index":856,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:91",{"_index":859,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:98",{"_index":861,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.value",{"_index":3343,"title":{},"body":{"classes/FormValidators.html":{}}}],["controldirective",{"_index":3177,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["controlling",{"_index":3874,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["controls",{"_index":1228,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["controlvalueaccessor",{"_index":792,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["conventions",{"_index":4386,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2569,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["convert",{"_index":1210,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["converted",{"_index":1177,"title":{},"body":{"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["converts",{"_index":2150,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["copy",{"_index":4581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["copy/paste",{"_index":1282,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["copyright",{"_index":2748,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["correct",{"_index":1777,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["correctly",{"_index":568,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["corresponding",{"_index":1071,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["correspondingformctrl",{"_index":2464,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["correspondingformctrl.setvalue(true",{"_index":2469,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["count",{"_index":1516,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["cover",{"_index":2888,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["coverage",{"_index":3152,"title":{"coverage.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{}}}],["covering",{"_index":3745,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["create",{"_index":1083,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createcsv",{"_index":1932,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["createcsv(rows",{"_index":1935,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["created",{"_index":550,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createdatagridfiltertesthelper",{"_index":3086,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelper(filtertype",{"_index":4573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder",{"_index":3092,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder(filtertype",{"_index":4575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createformgroup",{"_index":2330,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["createid",{"_index":3511,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createnullsafevalidator",{"_index":3320,"title":{},"body":{"classes/FormValidators.html":{}}}],["createnullsafevalidator(validator",{"_index":3322,"title":{},"body":{"classes/FormValidators.html":{}}}],["creates",{"_index":340,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":1110,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["creation",{"_index":2125,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["criteria",{"_index":185,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SpotlightSearchProvider.html":{}}}],["css",{"_index":77,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cssselector",{"_index":416,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cssselector).invoke('text')).then((texts",{"_index":2105,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["cssselector).map(elem",{"_index":502,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["cssselector).val",{"_index":2108,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["cssseletor",{"_index":4283,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["csv",{"_index":1939,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["csvexporterservice",{"_index":1927,"title":{"injectables/CsvExporterService.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["csvfile",{"_index":1953,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["current",{"_index":916,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"interfaces/WidgetDriver.html":{}}}],["currentaction",{"_index":243,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction.istranslatable",{"_index":248,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction.textkey",{"_index":249,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentaction?.children?.length",{"_index":244,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["currentdirective",{"_index":1270,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currenthost",{"_index":1273,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":326,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["currentoperator",{"_index":2950,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["currentselection.map((selected",{"_index":1743,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentvalue",{"_index":2248,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["customfiql",{"_index":2571,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"miscellaneous/functions.html":{}}}],["cy",{"_index":2114,"title":{},"body":{"classes/CypressWidgetFinder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cycle",{"_index":3268,"title":{},"body":{"components/FormInputComponent.html":{}}}],["cypress",{"_index":2023,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cypress.off('fail",{"_index":2070,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["cypress.on('fail",{"_index":2074,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["cypress.promise((resolve",{"_index":2057,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["cypresswidgetdriver",{"_index":2021,"title":{"classes/CypressWidgetDriver.html":{}},"body":{"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"coverage.html":{}}}],["cypresswidgetdriver(ancestor.get(query",{"_index":2115,"title":{},"body":{"classes/CypressWidgetFinder.html":{}}}],["cypresswidgetfinder",{"_index":2049,"title":{"classes/CypressWidgetFinder.html":{}},"body":{"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"coverage.html":{}}}],["cypresswidgetfinder().find>(params",{"_index":2085,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["danger",{"_index":2914,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["data",{"_index":60,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"miscellaneous/functions.html":{}}}],["data.id",{"_index":3536,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.order",{"_index":3527,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.provider",{"_index":3540,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.section",{"_index":3541,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.ts",{"_index":3707,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataexportercomponent",{"_index":657,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["dataexporterwidgetobject",{"_index":2281,"title":{"classes/DataExporterWidgetObject.html":{}},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["dataexportrequest",{"_index":2209,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dataexportrequestevent",{"_index":2116,"title":{"interfaces/DataExportRequestEvent.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["dataexportrequestevent.exportdata",{"_index":2210,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["datagrid",{"_index":1102,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["datagrid'},{'name",{"_index":660,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["datagrid.component",{"_index":4197,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["datagrid.component.html",{"_index":1541,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.component.scss",{"_index":1543,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.wo",{"_index":985,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts",{"_index":4205,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["datagrid.wo.ts:14",{"_index":4207,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:19",{"_index":4209,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:26",{"_index":4211,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.component",{"_index":4212,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.module",{"_index":4181,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["datagrid/mock",{"_index":3073,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["datagridcomponent",{"_index":659,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"overview.html":{}}}],["datagridcomponent.gridrefresh",{"_index":1526,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter",{"_index":1457,"title":{"classes/DatagridFilter.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridfilter#config",{"_index":2396,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["datagridfilter.queryfield",{"_index":1834,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter:107",{"_index":2435,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:112",{"_index":2429,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:117",{"_index":2436,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:122",{"_index":2431,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:127",{"_index":2432,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:132",{"_index":2433,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:137",{"_index":2428,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:59",{"_index":2442,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:60",{"_index":2443,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:71",{"_index":2440,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:72",{"_index":2417,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:87",{"_index":2441,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:89",{"_index":2434,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:99",{"_index":2430,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridmultiselectfilter",{"_index":2479,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridmultiselectfilter(options",{"_index":4576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridmultiselectfiltercomponent",{"_index":661,"title":{"components/DatagridMultiSelectFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridmultiselectfiltercomponent.options",{"_index":2451,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridmultiselectfilterconfig",{"_index":2423,"title":{"interfaces/DatagridMultiSelectFilterConfig.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["datagridnumericfilter",{"_index":2548,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridnumericfilter(value",{"_index":4577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridnumericfiltercomponent",{"_index":665,"title":{"components/DatagridNumericFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridnumericfiltercomponent.close",{"_index":3245,"title":{},"body":{"components/FormInputComponent.html":{}}}],["datagridnumericfilterconfig",{"_index":2498,"title":{"interfaces/DatagridNumericFilterConfig.html":{}},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datagridnumericfiltervalue",{"_index":2500,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/typealiases.html":{}}}],["datagridselectfilter",{"_index":2583,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridselectfilter(options",{"_index":4578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridselectfiltercomponent",{"_index":667,"title":{"components/DatagridSelectFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridselectfiltercomponent#getvalue",{"_index":2570,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselectfilterconfig",{"_index":2567,"title":{"interfaces/DatagridSelectFilterConfig.html":{}},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{}}}],["datagridselection",{"_index":1620,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridstringfilter",{"_index":2612,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridstringfilter(wildcardposition",{"_index":4579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridstringfiltercomponent",{"_index":668,"title":{"components/DatagridStringFilterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridstringfilterconfig",{"_index":2600,"title":{"interfaces/DatagridStringFilterConfig.html":{}},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{}}}],["datarow",{"_index":1715,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["date",{"_index":2005,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":3512,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["date(getformatteddatevalue(value)).toisostring",{"_index":3274,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date(value",{"_index":3276,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.getfullyear",{"_index":3277,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.toisostring",{"_index":3045,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["date_object_class",{"_index":3731,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datepipe",{"_index":3727,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datepipe(this.localeid).transform(returnvalue",{"_index":3744,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datetime",{"_index":3211,"title":{},"body":{"components/FormInputComponent.html":{}}}],["deactivate",{"_index":1412,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["debounce_time_for_grid_filter_changes",{"_index":2379,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["debouncetime",{"_index":2374,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["debugelement",{"_index":411,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["debugelements",{"_index":3109,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["decides",{"_index":2657,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["decimal",{"_index":1862,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["decimalpipe",{"_index":3728,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decimalpipe(this.localeid).transform(returnvalue",{"_index":3743,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decisions",{"_index":785,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["declarations",{"_index":2736,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["declare",{"_index":2050,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{}}}],["decorators",{"_index":2504,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/FormInputComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["deep",{"_index":2550,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":134,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_action_search_section_header_prefix",{"_index":223,"title":{},"body":{"classes/ActionSearchProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_pagination_translation_key",{"_index":1475,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size",{"_index":1460,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size_options",{"_index":1462,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":139,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defaultspinnersize",{"_index":3549,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["define",{"_index":4117,"title":{},"body":{"classes/Unit.html":{}}}],["defined",{"_index":174,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defines",{"_index":1818,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["definition",{"_index":1717,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["delay",{"_index":1236,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":2377,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":2723,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["depend",{"_index":1039,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependencies",{"_index":2735,"title":{"dependencies.html":{}},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependends",{"_index":1041,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependent",{"_index":46,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["depends",{"_index":1054,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["derived",{"_index":2361,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["descibes",{"_index":1045,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["described",{"_index":2622,"title":{},"body":{"classes/DomUtil.html":{},"contributing.html":{}}}],["describes",{"_index":146,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["describing",{"_index":3507,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":4343,"title":{},"body":{"contributing.html":{}}}],["deselect",{"_index":2160,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["desired",{"_index":1609,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["destroy",{"_index":1300,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["destroyable",{"_index":4111,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["destroyable.ngondestroy",{"_index":3475,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["destroyed",{"_index":3469,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["detaching",{"_index":1910,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detachrenderer",{"_index":1889,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detail",{"_index":1513,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailcomponent",{"_index":1642,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailpane",{"_index":1520,"title":{"interfaces/DetailPane.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailpaneconfig",{"_index":1518,"title":{"interfaces/DetailPaneConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailrowconfig",{"_index":1514,"title":{"interfaces/DetailRowConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["details",{"_index":1897,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["detectchanges",{"_index":524,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["detects",{"_index":723,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["determine",{"_index":1013,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["determined",{"_index":2869,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["determining",{"_index":116,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["dev",{"_index":4607,"title":{},"body":{"index.html":{}}}],["developer",{"_index":3855,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["developers",{"_index":4599,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1537,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["development",{"_index":4650,"title":{},"body":{"index.html":{}}}],["dg",{"_index":662,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["di",{"_index":2837,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dialog",{"_index":2148,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogheader",{"_index":2164,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogs",{"_index":3545,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["didn't",{"_index":2273,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["different",{"_index":1032,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["differentiate",{"_index":1434,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differentiating",{"_index":1821,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differently",{"_index":3814,"title":{},"body":{"classes/Percent.html":{}}}],["digits",{"_index":1855,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["dimensions",{"_index":1347,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":534,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["direction",{"_index":1343,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":648,"title":{"directives/ComponentRendererOutletDirective.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directives",{"_index":692,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["directives/component",{"_index":4198,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":4624,"title":{},"body":{"index.html":{}}}],["directly",{"_index":3110,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["director",{"_index":4589,"title":{},"body":{"index.html":{}}}],["directory",{"_index":4629,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1030,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["disabled",{"_index":98,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/CypressWidgetDriver.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/WidgetDriver.html":{}}}],["disabled(cssselector",{"_index":423,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["disabled(disabled",{"_index":4036,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["disables",{"_index":1481,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["disjunct",{"_index":3008,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["dismissed",{"_index":2909,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["dismisses",{"_index":2920,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["display",{"_index":34,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["displayability",{"_index":1038,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["displaycombounit",{"_index":3697,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayed",{"_index":30,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["displaying",{"_index":62,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["displayname",{"_index":958,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["displays",{"_index":1377,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["displaytext",{"_index":238,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["displayunit",{"_index":3698,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayvalue",{"_index":3688,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["dist",{"_index":4628,"title":{},"body":{"index.html":{}}}],["div",{"_index":4062,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["div2",{"_index":4064,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["dividing",{"_index":1809,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["docs",{"_index":3869,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["document",{"_index":2790,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["document.body.appendchild(link",{"_index":1980,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.appendchild(tip.container",{"_index":1294,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.body.removechild(link",{"_index":1982,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.removechild(tip.container",{"_index":1301,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.createelement('a",{"_index":1974,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.createelement('div",{"_index":1285,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.queryselector('.tooltip.vcd",{"_index":4058,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["document.queryselectorall('.tooltip.vcd",{"_index":4053,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["documentation",{"_index":4395,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":4336,"title":{},"body":{"contributing.html":{}}}],["doesn't",{"_index":3615,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["dom",{"_index":597,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["domrect",{"_index":2809,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["domutil",{"_index":2613,"title":{"classes/DomUtil.html":{}},"body":{"classes/DomUtil.html":{},"interfaces/SearchSection.html":{},"coverage.html":{}}}],["don't",{"_index":530,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":3157,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["dosearch",{"_index":3902,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["dot",{"_index":1080,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["double",{"_index":2007,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["doubled",{"_index":2008,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["down",{"_index":2768,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"directives/MinMaxValidator.html":{}}}],["download",{"_index":1952,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadcsvfile",{"_index":1933,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloadcsvfile(csvfile",{"_index":1948,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloaddata(data",{"_index":2266,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloaded",{"_index":1954,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloading",{"_index":2194,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadingmessage",{"_index":2195,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downs",{"_index":2636,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["dr",{"_index":1471,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["drive",{"_index":912,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["driver",{"_index":547,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/WidgetDriver.html":{}}}],["driver.ts",{"_index":387,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["driver.ts:100",{"_index":2042,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:102",{"_index":462,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:104",{"_index":2043,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:106",{"_index":449,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:110",{"_index":436,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["driver.ts:114",{"_index":438,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["driver.ts:119",{"_index":2039,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:124",{"_index":2041,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:128",{"_index":2030,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:16",{"_index":412,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:23",{"_index":430,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:27",{"_index":422,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:32",{"_index":418,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:36",{"_index":415,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:41",{"_index":2028,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:43",{"_index":434,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:44",{"_index":2036,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:47",{"_index":454,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:48",{"_index":2035,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:52",{"_index":2048,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:54",{"_index":457,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:56",{"_index":2044,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:60",{"_index":2034,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:61",{"_index":460,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:64",{"_index":2032,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:68",{"_index":420,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["driver.ts:72",{"_index":451,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["driver.ts:76",{"_index":2037,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:78",{"_index":445,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:80",{"_index":2045,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:82",{"_index":447,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:84",{"_index":2046,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:86",{"_index":441,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:89",{"_index":2047,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:90",{"_index":443,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:94",{"_index":426,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["driver.ts:96",{"_index":2033,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["driver.ts:98",{"_index":424,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["drop",{"_index":2635,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/MinMaxValidator.html":{}}}],["dropdown",{"_index":145,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["dropdown'},{'name",{"_index":670,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["dropdown.component",{"_index":2763,"title":{},"body":{"modules/DropdownModule.html":{}}}],["dropdown.component.html",{"_index":2638,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdown.component.scss",{"_index":2637,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdown/dropdown.module",{"_index":4155,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{}}}],["dropdown[vcddynamicdropdown",{"_index":2774,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdown[vcddynamicdropdown]'},{'name",{"_index":697,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["dropdownbtn",{"_index":2791,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowncomponent",{"_index":669,"title":{"components/DropdownComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["dropdownitem",{"_index":2701,"title":{"interfaces/DropdownItem.html":{}},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["dropdownitemcontents",{"_index":2646,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdownitemcontents(texticon",{"_index":2702,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdownmenu",{"_index":2785,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenu(dropdown",{"_index":2840,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenuelement",{"_index":2776,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenuheight",{"_index":2866,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect",{"_index":2777,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.bottom",{"_index":2867,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.height",{"_index":2876,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.top",{"_index":2868,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmenurect.width",{"_index":2879,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdownmodule",{"_index":2733,"title":{"modules/DropdownModule.html":{}},"body":{"modules/DropdownModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["dropdownposition",{"_index":2647,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdowns",{"_index":2675,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdowntriggerbtnicon",{"_index":2648,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdowntriggerbtntxt",{"_index":2649,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdowntriggerbuttonclassname",{"_index":2650,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["dropdowntriggerelement",{"_index":2778,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerheight",{"_index":2863,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect",{"_index":2779,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.bottom",{"_index":2864,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.left",{"_index":2878,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["dropdowntriggerrect.top",{"_index":2865,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["due",{"_index":1563,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dumb",{"_index":2634,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["duplicate",{"_index":3114,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["duplication",{"_index":3103,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["during",{"_index":1659,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dynamic",{"_index":1878,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1867,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["dynamicdropdownpositiondirective",{"_index":695,"title":{"directives/DynamicDropdownPositionDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["e",{"_index":1364,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/ShowClippedTextDirective.html":{}}}],["e.g",{"_index":2355,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e2e",{"_index":4634,"title":{},"body":{"index.html":{}}}],["each",{"_index":1212,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["earlier",{"_index":4378,"title":{},"body":{"contributing.html":{}}}],["edit",{"_index":1229,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["edited",{"_index":1944,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["editing",{"_index":1231,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["el",{"_index":742,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DomUtil.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["el.addeventlistener('mouseenter",{"_index":1368,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.addeventlistener('mouseleave",{"_index":1369,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.getboundingclientrect",{"_index":1326,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.innerhtml",{"_index":1342,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.nativeelement.textcontent.trim",{"_index":3155,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["el.queryselector(classselector",{"_index":2628,"title":{},"body":{"classes/DomUtil.html":{}}}],["el.removeeventlistener('mouseenter",{"_index":1371,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.removeeventlistener('mouseleave",{"_index":1372,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["elem.nativeelement.textcontent.trim",{"_index":503,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["elem.nativeelement.value",{"_index":505,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["element",{"_index":452,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":1422,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element.innerhtml",{"_index":3812,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["element.invoke('keyup",{"_index":2099,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["element.nativeelement.dispatchevent(new",{"_index":498,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["element.nativeelement.value",{"_index":496,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["elementref",{"_index":1240,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["elements",{"_index":739,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["elementtoscroll",{"_index":2627,"title":{},"body":{"classes/DomUtil.html":{}}}],["elementtoscroll.scrollintoview",{"_index":2629,"title":{},"body":{"classes/DomUtil.html":{}}}],["ellipsis",{"_index":1404,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/ShowClippedTextDirective.html":{}}}],["elref",{"_index":2624,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["elref.nativeelement",{"_index":2626,"title":{},"body":{"classes/DomUtil.html":{}}}],["emission",{"_index":2349,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["emits",{"_index":1623,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitted",{"_index":1525,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitting",{"_index":2378,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":294,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["emptycolumnplaceholder",{"_index":1091,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["emptygridplaceholder",{"_index":1652,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["encoded",{"_index":1995,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encodes",{"_index":1959,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue",{"_index":4422,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodevalue(cell",{"_index":1991,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue(cellvalue",{"_index":2002,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encourage",{"_index":3111,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["end",{"_index":2595,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/SearchSection.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enforce",{"_index":783,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["enough",{"_index":2769,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["ensure",{"_index":3924,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ensurefirstsectionisloaded",{"_index":3920,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["enter",{"_index":756,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["enterclicked",{"_index":3222,"title":{},"body":{"components/FormInputComponent.html":{}}}],["entered",{"_index":186,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["entire",{"_index":728,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["entities",{"_index":215,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entity",{"_index":39,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entrycomponents",{"_index":4164,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["enum",{"_index":27,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4556,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":4707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eq",{"_index":3015,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":2577,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["equals",{"_index":3673,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["equalto",{"_index":2954,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equalto(value",{"_index":2991,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equivalent",{"_index":3746,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":306,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"modules/VcdErrorBannerModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error('clarity",{"_index":2857,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["error('could",{"_index":4088,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["error('query",{"_index":2400,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["error('the",{"_index":2576,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["error('unsubscribing",{"_index":3483,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["error(`a",{"_index":2466,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["error(`did",{"_index":584,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error(`expected",{"_index":585,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error/error",{"_index":4165,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["errorbannercomponent",{"_index":671,"title":{"components/ErrorBannerComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{},"overview.html":{}}}],["errorkeys",{"_index":808,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["errorlabels",{"_index":803,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["errormessage",{"_index":2901,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessage(val",{"_index":2930,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessagechange",{"_index":2910,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errors",{"_index":325,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["errortext",{"_index":361,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["escape",{"_index":757,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["escapeclicked",{"_index":3223,"title":{},"body":{"components/FormInputComponent.html":{}}}],["essential",{"_index":2067,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["etc",{"_index":759,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["evaluator",{"_index":4523,"title":{},"body":{"dependencies.html":{}}}],["event",{"_index":731,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["event('change",{"_index":483,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["event('input",{"_index":499,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["event.preventdefault",{"_index":3895,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["eventemitter",{"_index":1440,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["eventemitter(false",{"_index":3256,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["eventhandler",{"_index":1363,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/typealiases.html":{}}}],["events",{"_index":345,"title":{},"body":{"classes/ActivityReporter.html":{},"components/ErrorBannerComponent.html":{}}}],["everywhere",{"_index":3851,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ex",{"_index":1197,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["examine",{"_index":3929,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["example",{"_index":276,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":2404,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["excluding",{"_index":1739,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["execute",{"_index":4632,"title":{},"body":{"index.html":{}}}],["executed",{"_index":104,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["executing",{"_index":3413,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["exist",{"_index":2468,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["existing",{"_index":1734,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["exists",{"_index":395,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["exists(cssselector",{"_index":425,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["expand",{"_index":1646,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expanded",{"_index":1644,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expectation",{"_index":2031,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["experience",{"_index":2800,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"interfaces/SearchSection.html":{}}}],["explain",{"_index":4341,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["export.csv",{"_index":2163,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportalltext",{"_index":2170,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportcolumn",{"_index":2128,"title":{"interfaces/ExportColumn.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["exportdata",{"_index":2120,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportdata(records",{"_index":2256,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exported",{"_index":1984,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["exporter",{"_index":2151,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["exporter'},{'name",{"_index":658,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["exporter.component",{"_index":2310,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"modules/VcdDataExporterModule.html":{}}}],["exporter.component.html",{"_index":2152,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.scss",{"_index":2153,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.ts",{"_index":2118,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exporter.module",{"_index":4180,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["exporter.module.ts",{"_index":4187,"title":{},"body":{"modules/VcdDataExporterModule.html":{}}}],["exporter.service",{"_index":2134,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.service.ts",{"_index":1931,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter.service.ts:21",{"_index":1937,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:29",{"_index":1956,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:38",{"_index":1950,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.title",{"_index":2166,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.wo.ts",{"_index":2282,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["exporter.wo.ts:13",{"_index":2290,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:18",{"_index":2301,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:25",{"_index":2305,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:32",{"_index":2308,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:40",{"_index":2299,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:48",{"_index":2293,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:55",{"_index":2291,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:62",{"_index":2297,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:69",{"_index":2294,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter/csv",{"_index":1930,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter/data",{"_index":2117,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exports",{"_index":2739,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["exportstage",{"_index":2217,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporttext",{"_index":2174,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["expose",{"_index":3107,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["exposed",{"_index":1494,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["expresses",{"_index":319,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["expression",{"_index":2967,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["expressionchangedafterithasbeencheckederror",{"_index":1842,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expressions",{"_index":2940,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["extend",{"_index":891,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["extended",{"_index":2322,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["extends",{"_index":603,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extension",{"_index":3125,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extra",{"_index":1820,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["extract",{"_index":3631,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["extracting",{"_index":3720,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["extremely",{"_index":4639,"title":{},"body":{"index.html":{}}}],["fa",{"_index":4669,"title":{},"body":{"index.html":{}}}],["fails",{"_index":2055,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":304,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/ObjectAndResponse.html":{}}}],["failures",{"_index":2060,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["false",{"_index":101,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":2566,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["fast",{"_index":4353,"title":{},"body":{"contributing.html":{}}}],["fb",{"_index":2559,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{},"directives/MinMaxValidator.html":{}}}],["fb.result",{"_index":3019,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["feature",{"_index":4362,"title":{},"body":{"contributing.html":{}}}],["featurebe",{"_index":4381,"title":{},"body":{"contributing.html":{}}}],["featured",{"_index":120,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredcount",{"_index":133,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["featureif",{"_index":4377,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":1524,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureupdating",{"_index":4367,"title":{},"body":{"contributing.html":{}}}],["female",{"_index":3716,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":2119,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["fetched",{"_index":2123,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fetching",{"_index":1556,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["field",{"_index":818,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["field:after",{"_index":3285,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["fieldcolumnrendererspec",{"_index":1435,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldgroup",{"_index":4234,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["fieldname",{"_index":1436,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldrenderer",{"_index":1437,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fields",{"_index":1942,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{}}}],["fieldtype",{"_index":3345,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filed",{"_index":1833,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filename",{"_index":1949,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["files",{"_index":3121,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["fills",{"_index":1611,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter",{"_index":927,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter'},{'name",{"_index":664,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["filter(action",{"_index":235,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["filter(formcontrol",{"_index":2472,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component",{"_index":4200,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["filter.component.html",{"_index":2415,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component.scss",{"_index":2483,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filter.component.ts",{"_index":2408,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["filter.component.ts:101",{"_index":2419,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:102",{"_index":2563,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:105",{"_index":2427,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:115",{"_index":2420,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:120",{"_index":2496,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:122",{"_index":2421,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:128",{"_index":2494,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:129",{"_index":2422,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:132",{"_index":2497,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2593,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:36",{"_index":2586,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2508,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:42",{"_index":2506,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:43",{"_index":2510,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:48",{"_index":2503,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:49",{"_index":2493,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:55",{"_index":2512,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:57",{"_index":2594,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:58",{"_index":2565,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:62",{"_index":2502,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:63",{"_index":2492,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:64",{"_index":2590,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:67",{"_index":2560,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:69",{"_index":2416,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:70",{"_index":2515,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:73",{"_index":2495,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:76",{"_index":2561,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:77",{"_index":2438,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:78",{"_index":2491,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:79",{"_index":2418,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:80",{"_index":2564,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:84",{"_index":2499,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:87",{"_index":2424,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:89",{"_index":2501,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:98",{"_index":2562,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.getvalue",{"_index":1763,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter.ts",{"_index":2321,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter.ts:107",{"_index":2359,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:112",{"_index":2346,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:117",{"_index":2365,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:122",{"_index":2350,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:127",{"_index":2353,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:132",{"_index":2356,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:137",{"_index":2344,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:147",{"_index":2372,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:59",{"_index":2343,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:60",{"_index":2336,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:71",{"_index":2338,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:72",{"_index":2367,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:80",{"_index":2369,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:87",{"_index":2341,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:89",{"_index":2357,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:99",{"_index":2348,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter_selector",{"_index":4490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterable/sortable",{"_index":1074,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["filterbuilder",{"_index":2446,"title":{"classes/FilterBuilder.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbuilder().any(...selectedfilters).getstring",{"_index":2476,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is('').and(...builders",{"_index":3050,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.queryfield",{"_index":2540,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder().is(this.queryfield).equalto(selectedoption",{"_index":2475,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is(this.result).condition(operators.ge",{"_index":3048,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.result).condition(operators.le",{"_index":3049,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder(this",{"_index":3018,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder.betweennumbers([from",{"_index":2545,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.equalto(value).getstring",{"_index":2581,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder.greaterthan(from).getstring",{"_index":2543,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.lessthan(to).getstring",{"_index":2544,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filtercolumn",{"_index":3058,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtercomponentrendererspec",{"_index":2409,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec(componentrendererspec",{"_index":2407,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec({type",{"_index":2403,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filterconfig",{"_index":1020,"title":{"interfaces/FilterConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["filtercontainer",{"_index":2337,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercontainer.setfilter(this",{"_index":2383,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtered",{"_index":2381,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtering",{"_index":1062,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filtering/sorting/paging",{"_index":1660,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filterrendererspec",{"_index":1021,"title":{"interfaces/FilterRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filters",{"_index":1531,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filters/datagrid",{"_index":1022,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{}}}],["filterselect",{"_index":2572,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["filtertesthostcomponent",{"_index":673,"title":{"components/FilterTestHostComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtertesthostcomponent.filtercolumn",{"_index":3066,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtertext",{"_index":2601,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filtertype",{"_index":3065,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["find",{"_index":396,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["find(item",{"_index":3803,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["find(params",{"_index":427,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{}}}],["find>(params",{"_index":576,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findablewidget",{"_index":429,"title":{"interfaces/FindableWidget.html":{}},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["findbestunit",{"_index":1140,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findbestunit(value",{"_index":1170,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findcolumnindex(col",{"_index":1699,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["findelement",{"_index":708,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelement(selector",{"_index":733,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelements",{"_index":709,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["findelements(selector",{"_index":736,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finder",{"_index":468,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetDriver.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["finder.detectchanges",{"_index":3094,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.find(clrdatagridwidgetobject",{"_index":3089,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.hostcomponent.setfilter(filtertype",{"_index":3090,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.ts",{"_index":516,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["finder.ts:20",{"_index":529,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{}}}],["finder.ts:25",{"_index":527,"title":{},"body":{"classes/AngularWidgetFinder.html":{}}}],["finder.ts:41",{"_index":542,"title":{},"body":{"classes/AngularWidgetFinder.html":{}}}],["finder.ts:65",{"_index":538,"title":{},"body":{"classes/AngularWidgetFinder.html":{}}}],["finder.ts:77",{"_index":537,"title":{},"body":{"classes/AngularWidgetFinder.html":{}}}],["findparams",{"_index":428,"title":{"interfaces/FindParams.html":{}},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["findparams).woconstructor",{"_index":3165,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finds",{"_index":208,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets",{"_index":525,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets(params",{"_index":541,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/WidgetFinder.html":{}}}],["finished",{"_index":2127,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fiql",{"_index":1528,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["fired",{"_index":103,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/variables.html":{}}}],["fires",{"_index":2206,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["firetiptransitionendfortests",{"_index":4467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["first",{"_index":35,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["first.buildpartial",{"_index":3031,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["first.clear",{"_index":3037,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["firstitem",{"_index":1534,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fix",{"_index":2856,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"components/FormInputComponent.html":{}}}],["fixes",{"_index":4349,"title":{},"body":{"contributing.html":{}}}],["fixture",{"_index":413,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture's",{"_index":3096,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.componentinstance",{"_index":472,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.debugelement",{"_index":471,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixup",{"_index":4379,"title":{},"body":{"contributing.html":{}}}],["flag",{"_index":3906,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["flat",{"_index":3935,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["flatactionlist",{"_index":245,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatactionlist.concat(this.getflatlistofavailableactions(currentaction.children",{"_index":246,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatactionlist.push",{"_index":251,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatlistofavailableactions",{"_index":164,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["flatten",{"_index":2711,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["flattenitemswithsinglechild",{"_index":2644,"title":{},"body":{"components/DropdownComponent.html":{}}}],["flattenitemswithsinglechild(items",{"_index":2679,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["flattennesteditemswithsinglechild",{"_index":2645,"title":{},"body":{"components/DropdownComponent.html":{}}}],["flattennesteditemswithsinglechild(items",{"_index":2681,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["flex",{"_index":3293,"title":{},"body":{"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["float",{"_index":1860,"title":{},"body":{"classes/CommonUtil.html":{}}}],["floating",{"_index":1858,"title":{},"body":{"classes/CommonUtil.html":{}}}],["flow",{"_index":4317,"title":{},"body":{"contributing.html":{}}}],["focused",{"_index":4705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":4640,"title":{},"body":{"index.html":{}}}],["follow",{"_index":4385,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":1402,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["font",{"_index":974,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["footer",{"_index":1499,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footer').offsetheight",{"_index":1801,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footerheight",{"_index":1799,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["force",{"_index":4365,"title":{},"body":{"contributing.html":{}}}],["forcedropdownopen",{"_index":2205,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fork",{"_index":4330,"title":{},"body":{"contributing.html":{}}}],["form",{"_index":675,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["form.scss",{"_index":3255,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form.scss,./form",{"_index":3213,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form/form.module",{"_index":4182,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormlyModule.html":{}}}],["form/number",{"_index":3394,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["format",{"_index":2138,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"classes/Percent.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["format(1000",{"_index":4143,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["format(value",{"_index":4140,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formats",{"_index":3817,"title":{},"body":{"classes/Percent.html":{}}}],["formatted",{"_index":1529,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["formatter",{"_index":3604,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{}}}],["formatter.ts",{"_index":4129,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["formatter.ts:15",{"_index":4132,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:29",{"_index":4142,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:46",{"_index":4134,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatting",{"_index":2582,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["formbuilder",{"_index":2517,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["formcheckboxcomponent",{"_index":674,"title":{"components/FormCheckboxComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":806,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["formcontrol(false",{"_index":2462,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formcontrol(null",{"_index":2530,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formcontrol(true",{"_index":2220,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["formcontrol.value",{"_index":3207,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["formcontrol.value:min.tostring():max",{"_index":3284,"title":{},"body":{"components/FormInputComponent.html":{}}}],["formcontrolname",{"_index":814,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formcontrolnamedirective",{"_index":794,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formfields",{"_index":2519,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/enumerations.html":{}}}],["formfields.from",{"_index":2529,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formfields.to",{"_index":2531,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formgroup",{"_index":2132,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formgroup(controls",{"_index":2252,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["forminputcomponent",{"_index":677,"title":{"components/FormInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["forminputcomponent.enterclicked",{"_index":3348,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.errorlabels",{"_index":3365,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.escapeclicked",{"_index":3350,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.hintposition",{"_index":3362,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.max",{"_index":3356,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.min",{"_index":3353,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["forminputcomponent.type",{"_index":3359,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["formly",{"_index":680,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["formly.config",{"_index":4264,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly.config.ts",{"_index":4231,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["formly.module.ts",{"_index":4255,"title":{},"body":{"modules/VcdFormlyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formly.module.ts:37",{"_index":4258,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly/core",{"_index":3367,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["formly/core/select",{"_index":4263,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formly_config",{"_index":4260,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlyfieldconfig",{"_index":4233,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formlyform.fields",{"_index":4232,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formlyinputcomponent",{"_index":679,"title":{"components/FormlyInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlymodule",{"_index":4261,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlymodule.forchild(vcd_formly_config",{"_index":4266,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlynumberwithunitinputcomponent",{"_index":681,"title":{"components/FormlyNumberWithUnitInputComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlyselectcomponent",{"_index":683,"title":{"components/FormlySelectComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formlyselectmodule",{"_index":4262,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["formlytemplateoptions",{"_index":4239,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["formselectcomponent",{"_index":685,"title":{"components/FormSelectComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formsmodule",{"_index":4095,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["formvalidators",{"_index":3316,"title":{"classes/FormValidators.html":{}},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["formvalidators.createnullsafevalidator((control",{"_index":3339,"title":{},"body":{"classes/FormValidators.html":{}}}],["formvalidators.isnumberinrange",{"_index":3637,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["formvalidators.isnumberinrange(this.min",{"_index":3635,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["forroot",{"_index":4256,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["forroot(configoption",{"_index":4257,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["forward",{"_index":4354,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":575,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["four",{"_index":4592,"title":{},"body":{"index.html":{}}}],["framework",{"_index":391,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["friendly",{"_index":2180,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlyfieldscontrol",{"_index":2235,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynames",{"_index":2141,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["friendlynamescheckboxlabel",{"_index":2181,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynameshint",{"_index":2186,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynamesinfomessage",{"_index":2183,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["frmctrl",{"_index":2467,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["frominput",{"_index":2486,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["full",{"_index":1378,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{}}}],["function",{"_index":52,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1569,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["functionrenderer",{"_index":1035,"title":{"interfaces/FunctionRenderer.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["functionrendererpipe",{"_index":3409,"title":{"pipes/FunctionRendererPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":3080,"title":{"miscellaneous/functions.html":{}},"body":{"components/FilterTestHostComponent.html":{},"pipes/FunctionRendererPipe.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":4601,"title":{},"body":{"index.html":{}}}],["furthur",{"_index":2886,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["gave",{"_index":310,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["gb",{"_index":1128,"title":{},"body":{"classes/Bytes.html":{},"injectables/UnitFormatter.html":{}}}],["ge",{"_index":3012,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["gender",{"_index":3709,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":273,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"contributing.html":{},"index.html":{}}}],["generated",{"_index":817,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"index.html":{}}}],["generates",{"_index":302,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["generator",{"_index":867,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["generator.ts",{"_index":3489,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["generator.ts:10",{"_index":3494,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:15",{"_index":3495,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:17",{"_index":3492,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator/id",{"_index":866,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["generic",{"_index":1003,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["generics",{"_index":1121,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["getactions",{"_index":166,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getactions(searchcriteria",{"_index":192,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getallunittypes",{"_index":1137,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/ThousandsUnit.html":{}}}],["getbasevalue",{"_index":1141,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getbasevalue(value",{"_index":1187,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getboldtext(row",{"_index":996,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["getchecked",{"_index":397,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getchecked(cssselector",{"_index":433,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getclrdatagrid",{"_index":4210,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getcolumnbubbles",{"_index":2304,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckboxes",{"_index":2307,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumnsconfig(columns",{"_index":1824,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getconfig",{"_index":2368,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getdebouncetimems",{"_index":2331,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getdebugelement",{"_index":398,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["getdebugelement(cssselector",{"_index":435,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["getdebugelements",{"_index":399,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["getdebugelements(parentcssselector",{"_index":437,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["getdeepcopyofactionitems",{"_index":4400,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getdeepcopyofactionitems(actions",{"_index":4580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getdefaultactiondisplayconfig",{"_index":4402,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getdefaultactiondisplayconfig(cfg",{"_index":4583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getdetailpanerenderspec(record",{"_index":1713,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdetailrowrenderspec(record",{"_index":1711,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaynameforfield(fieldname",{"_index":2279,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["getdisplayvalue",{"_index":3771,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getdropdownitemcontents",{"_index":2693,"title":{},"body":{"components/DropdownComponent.html":{}}}],["getelement",{"_index":2025,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["getelement(cssselector",{"_index":2038,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["getelements",{"_index":2026,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["getelements(parentcssselector",{"_index":2040,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["geterrorkeys",{"_index":860,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["geterrorlabels",{"_index":3363,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["geterrortext",{"_index":767,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getflatlistofavailableactions",{"_index":167,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getflatlistofavailableactions(actions",{"_index":197,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["getformatteddatevalue",{"_index":4454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getformatteddatevalue(value",{"_index":3265,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["getformcontrol",{"_index":855,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getgridheader",{"_index":4208,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gethintposition",{"_index":3360,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getinputvalue",{"_index":400,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getinputvalue(cssselector",{"_index":440,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getinputvalues",{"_index":401,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getinputvalues(parentcssselector",{"_index":442,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getischeckbox",{"_index":3200,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["getisloopingprogressbar",{"_index":2300,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getistooltipvisible",{"_index":4016,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getisunitdropdowndisplayed",{"_index":3786,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getitems",{"_index":2696,"title":{},"body":{"components/DropdownComponent.html":{}}}],["getloadingtext",{"_index":771,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getmax",{"_index":3354,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getmin",{"_index":3351,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getmultiplier",{"_index":1142,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getnativeelement",{"_index":3749,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnativeelement(cssselector",{"_index":3762,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnodetext",{"_index":710,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["getnodetext(el",{"_index":740,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getoutputvalue",{"_index":1143,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["getoutputvalue(value",{"_index":1190,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getpagesize",{"_index":1783,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpagesizeoptions",{"_index":1786,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpaginationtranslation(paginationdata",{"_index":1778,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpositionleft",{"_index":2818,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["getpositiontop",{"_index":2816,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["getqueryfield",{"_index":2371,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getreadonlytext",{"_index":3773,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getregisteredproviders",{"_index":3538,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["getrunning",{"_index":765,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["gets",{"_index":117,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"contributing.html":{}}}],["getselectedoption",{"_index":3305,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["getselectedunit",{"_index":3782,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getselectedunitdisplayvalue",{"_index":3784,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getselectoptions",{"_index":3402,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["getshowerrors",{"_index":858,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["getshowunlimitedoption",{"_index":3388,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getsingleunitdisplaytext",{"_index":3788,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getsize",{"_index":3575,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["getspinner",{"_index":4081,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getstring",{"_index":2955,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["getsucesstext",{"_index":769,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getter",{"_index":3496,"title":{},"body":{"classes/IdGenerator.html":{}}}],["gettext",{"_index":402,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettext(cssselector",{"_index":444,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettexts",{"_index":403,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetObject.html":{}}}],["gettexts(cssselector",{"_index":747,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettexts(parentcssselector",{"_index":446,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["getting",{"_index":2351,"title":{"contributing.html":{},"index.html":{}},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gettooltip",{"_index":4028,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcontent",{"_index":4026,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcount",{"_index":4022,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipposition",{"_index":4020,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipsize",{"_index":4014,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltiptext",{"_index":4018,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipvisibility",{"_index":4024,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettype",{"_index":3357,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["getunit",{"_index":2514,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunitformcontrol",{"_index":3780,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunitname",{"_index":1144,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitnametranslationkey",{"_index":1138,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitoptions",{"_index":2511,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunlimitedformcontrol",{"_index":3776,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunlimitedvalue",{"_index":3391,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["getvalue",{"_index":2332,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getvalueformcontrol",{"_index":3778,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvaluewithunittranslationkey",{"_index":1139,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getwrapcharacter(inputposition",{"_index":2609,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["getwrapcharacter(position",{"_index":2606,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["gfm",{"_index":4389,"title":{},"body":{"contributing.html":{}}}],["ghpages",{"_index":4526,"title":{},"body":{"dependencies.html":{}}}],["ghz",{"_index":1198,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["git",{"_index":4360,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git@github.com:vmware/vmware",{"_index":4674,"title":{},"body":{"index.html":{}}}],["github",{"_index":4383,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":312,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":745,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":29,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["globalbutton",{"_index":1040,"title":{"interfaces/GlobalButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["globalbuttons",{"_index":1053,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["go",{"_index":1522,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["goes",{"_index":1521,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["going",{"_index":1096,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["good",{"_index":2799,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["greater",{"_index":2982,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan",{"_index":2956,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan(value",{"_index":2994,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto",{"_index":2957,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto(value",{"_index":2996,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["grid",{"_index":1004,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["grid's",{"_index":3082,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["grid.getfilter(filtertype",{"_index":3091,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["grid.parentnode.clientheight",{"_index":1795,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.datagrid",{"_index":1797,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.vcd",{"_index":1806,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('clr",{"_index":1800,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumn",{"_index":957,"title":{"interfaces/GridColumn.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.filter",{"_index":2324,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gridcolumn.filterrendererspec",{"_index":2406,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.renderer",{"_index":1115,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["gridcolumnhideable",{"_index":1025,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridcolumnhideable.never",{"_index":1773,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddata",{"_index":3059,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["griddata(result",{"_index":1557,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddatafetchresult",{"_index":1484,"title":{"interfaces/GridDataFetchResult.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridheader",{"_index":4206,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gridheight",{"_index":1794,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridrefresh",{"_index":1661,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grids",{"_index":1095,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["gridselectiontype",{"_index":1477,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridselectiontype.multi",{"_index":1727,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.none",{"_index":1648,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.single",{"_index":1720,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridstate",{"_index":1527,"title":{"interfaces/GridState.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridstatechanged(state",{"_index":1755,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gropued",{"_index":3863,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["group",{"_index":3290,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["group.hide",{"_index":3295,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["grouped",{"_index":121,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["groups",{"_index":1220,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["grow",{"_index":3294,"title":{},"body":{"components/FormInputComponent.html":{}}}],["gt",{"_index":3011,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":4679,"title":{},"body":{"index.html":{}}}],["h",{"_index":519,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["handle",{"_index":3243,"title":{},"body":{"components/FormInputComponent.html":{}}}],["handled",{"_index":3813,"title":{},"body":{"classes/Percent.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handleitem(item",{"_index":3946,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["handler",{"_index":67,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handlerdata",{"_index":56,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["happen",{"_index":3457,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["happens",{"_index":4642,"title":{},"body":{"index.html":{}}}],["hasangularfinder",{"_index":593,"title":{"interfaces/HasAngularFinder.html":{}},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{}}}],["hascontextualactions",{"_index":1598,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hasdgstringfilter",{"_index":3084,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["hasfinder",{"_index":3166,"title":{"interfaces/HasFinder.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["haspotentialinjection",{"_index":1934,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(row",{"_index":1985,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(rows",{"_index":1955,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["hasstaticactions",{"_index":1593,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["head",{"_index":4667,"title":{},"body":{"index.html":{}}}],["header",{"_index":1061,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["header').offsetheight",{"_index":1798,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["header.offsetheight",{"_index":1807,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["headerheight",{"_index":1796,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heading",{"_index":1066,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["headless",{"_index":4706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":1332,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["height(height",{"_index":1612,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heightcssvalue",{"_index":1614,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["help",{"_index":2405,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["helper.ts",{"_index":3976,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["helper.ts:102",{"_index":4025,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:106",{"_index":4000,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:110",{"_index":4027,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:114",{"_index":4029,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:126",{"_index":4066,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:127",{"_index":4068,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:128",{"_index":4069,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:13",{"_index":3992,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:130",{"_index":4070,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:131",{"_index":4071,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:132",{"_index":4067,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:16",{"_index":3993,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:18",{"_index":3995,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:20",{"_index":3997,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:22",{"_index":3999,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:24",{"_index":4007,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:28",{"_index":4009,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:44",{"_index":4011,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:49",{"_index":4013,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:54",{"_index":4015,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:58",{"_index":4003,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:62",{"_index":4004,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:66",{"_index":4005,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:70",{"_index":4001,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:74",{"_index":4002,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:78",{"_index":4017,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:82",{"_index":4019,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:86",{"_index":4021,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:98",{"_index":4023,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helps",{"_index":1112,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["hence",{"_index":3865,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["here",{"_index":1507,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["here;(created=lt=datetime,uptime=gt=3600000",{"_index":2949,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["hertz",{"_index":3419,"title":{"classes/Hertz.html":{}},"body":{"classes/Hertz.html":{},"coverage.html":{}}}],["hertz(1",{"_index":3425,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e12",{"_index":3431,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e3",{"_index":3427,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e6",{"_index":3429,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e9",{"_index":3423,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.ghz",{"_index":3436,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.hz",{"_index":3433,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.khz",{"_index":3434,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.mhz",{"_index":3435,"title":{},"body":{"classes/Hertz.html":{}}}],["hidden",{"_index":102,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["hidden(cssselector",{"_index":448,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["hidden(cssseletor",{"_index":917,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["hide",{"_index":1029,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["hideable",{"_index":1068,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["hidedelay",{"_index":3978,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hides",{"_index":4076,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["hidetimeout",{"_index":1267,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hidetooltip(delay",{"_index":1309,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hiding",{"_index":1266,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hint",{"_index":2185,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["hintposition",{"_index":3218,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["hook",{"_index":3269,"title":{},"body":{"components/FormInputComponent.html":{}}}],["horizontal",{"_index":2662,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["host",{"_index":520,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressWidgetFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["host(.site",{"_index":3315,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["hostbinding",{"_index":1441,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostbinding('class.fill",{"_index":1618,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostcomponent",{"_index":523,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["hostelement",{"_index":1393,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["hostlistener",{"_index":2821,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["hostlisteners",{"_index":2783,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["hostposition",{"_index":3985,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hostposition(quadrant",{"_index":4032,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hosttext",{"_index":3986,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hosttext(text",{"_index":4038,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hover",{"_index":1281,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["href",{"_index":1707,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["html",{"_index":647,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["htmlbaseelement",{"_index":489,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlelement",{"_index":1262,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlelements",{"_index":3108,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlinputelement",{"_index":3141,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmltextareaelement",{"_index":3142,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["http://localhost:4200",{"_index":4609,"title":{},"body":{"index.html":{}}}],["https://github.com/vmware/clarity/issues/2265",{"_index":1566,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["https://github.com/vmware/vmware",{"_index":4638,"title":{},"body":{"index.html":{}}}],["https://jira.eng.vmware.com/browse/vducc",{"_index":1099,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/59055154/typescript",{"_index":1120,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["hz",{"_index":3420,"title":{},"body":{"classes/Hertz.html":{}}}],["i.e",{"_index":3909,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["i18n",{"_index":70,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["i18nmodule",{"_index":2761,"title":{},"body":{"modules/DropdownModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["icon",{"_index":119,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["icon_and_text",{"_index":4565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["icons",{"_index":2692,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["iconshape",{"_index":3172,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["id",{"_index":795,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/DomUtil.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["idcounter",{"_index":3490,"title":{},"body":{"classes/IdGenerator.html":{}}}],["identifier",{"_index":1706,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{}}}],["identifiers",{"_index":2135,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["identify",{"_index":1082,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["identifying",{"_index":4245,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["idgenerator",{"_index":864,"title":{"classes/IdGenerator.html":{}},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idgenerator#id",{"_index":3499,"title":{},"body":{"classes/IdGenerator.html":{}}}],["idgenerator('base",{"_index":871,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["idgenerator('vcd",{"_index":2454,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["idgenerator.generate",{"_index":874,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["idgenerator.idcounter",{"_index":3498,"title":{},"body":{"classes/IdGenerator.html":{}}}],["ids",{"_index":2452,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ie",{"_index":1971,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["ignore",{"_index":3151,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ignored",{"_index":2345,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["ime",{"_index":3251,"title":{},"body":{"components/FormInputComponent.html":{}}}],["immediate",{"_index":926,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["immediately",{"_index":725,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implement",{"_index":518,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/CanBeReadOnly.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementation",{"_index":3097,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementations",{"_index":3122,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implemented",{"_index":1866,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["implements",{"_index":159,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/WidgetDriver.html":{}}}],["implies",{"_index":1227,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["import",{"_index":216,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["imports",{"_index":2747,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["inactive",{"_index":1010,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivebuttondisplaymode",{"_index":1008,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivedisplaymode",{"_index":1005,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["inc",{"_index":2751,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["include",{"_index":3589,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["included",{"_index":2984,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["including",{"_index":4618,"title":{},"body":{"index.html":{}}}],["indefinite",{"_index":2302,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["indeterminate",{"_index":2145,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexofsubscription",{"_index":3481,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["indicate",{"_index":2129,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicates",{"_index":97,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicating",{"_index":2143,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["indicator",{"_index":628,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator'},{'name",{"_index":687,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator.component",{"_index":4271,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicator.component.html",{"_index":3547,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.scss",{"_index":3546,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts",{"_index":3543,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indicator.component.ts:27",{"_index":3574,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:38",{"_index":3560,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:43",{"_index":3552,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:49",{"_index":3554,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:55",{"_index":3553,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:62",{"_index":3557,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:73",{"_index":3576,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.module",{"_index":4168,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["indicator.module.ts",{"_index":4270,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicators",{"_index":1491,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["indicatortype",{"_index":1640,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["indices",{"_index":2719,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["infer",{"_index":567,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["inference",{"_index":1118,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["information",{"_index":991,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["inheritdoc",{"_index":2397,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["inherited",{"_index":629,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["initial",{"_index":820,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["initialize",{"_index":2347,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialized",{"_index":181,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["initializing",{"_index":1872,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["initially",{"_index":2382,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialvalue",{"_index":796,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["initiate",{"_index":2124,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["inject",{"_index":639,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"pipes/NestedPropertyPipe.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inject(activitypromiseresolver",{"_index":640,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["inject(document",{"_index":2858,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["injectable",{"_index":1926,"title":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["injectables",{"_index":1928,"title":{},"body":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"overview.html":{}}}],["injection",{"_index":1947,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["inline",{"_index":144,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["inner",{"_index":1263,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innerheight",{"_index":1351,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innervalue",{"_index":2003,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innervalue.replace(/\"/g",{"_index":2009,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innerwidth",{"_index":1350,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":109,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input'},{'name",{"_index":678,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input('vcdshowclippedtext",{"_index":1381,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["input.component",{"_index":3396,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["input.component.html",{"_index":3215,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.scss",{"_index":3214,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts",{"_index":3209,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input.component.ts:104",{"_index":3249,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:121",{"_index":3247,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:127",{"_index":3246,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:37",{"_index":3352,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:38",{"_index":3600,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.component.ts:39",{"_index":3381,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts:40",{"_index":3238,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts:43",{"_index":3355,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:45",{"_index":3383,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:46",{"_index":3236,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:49",{"_index":3358,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:51",{"_index":3385,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:52",{"_index":3229,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:55",{"_index":3361,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:57",{"_index":3240,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:61",{"_index":3364,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:62",{"_index":3239,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:63",{"_index":3389,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:67",{"_index":3231,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{}}}],["input.component.ts:72",{"_index":3227,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["input.component.ts:75",{"_index":3349,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["input.component.ts:77",{"_index":3225,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:82",{"_index":3254,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:88",{"_index":3241,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:93",{"_index":3224,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.disable",{"_index":3682,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.enable",{"_index":3684,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.setvalue(0",{"_index":3647,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.setvalue(null",{"_index":3661,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.setvalue(this.bestvalue",{"_index":3686,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.value",{"_index":3646,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.widget",{"_index":3748,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["input/form",{"_index":3208,"title":{},"body":{"components/FormInputComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["input/formly",{"_index":3378,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{}}}],["input/number",{"_index":3395,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["input[max",{"_index":3598,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input[max]'},{'name",{"_index":700,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input[min],vcd",{"_index":699,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inputchanged",{"_index":3217,"title":{},"body":{"components/FormInputComponent.html":{}}}],["inputposition",{"_index":2611,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["inputs",{"_index":613,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/enumerations.html":{}}}],["inputs/input/formly",{"_index":4240,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputs/number",{"_index":4241,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputs/select/formly",{"_index":4242,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["inputunit",{"_index":3691,"title":{},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{}}}],["inputunit.findbestunit(value",{"_index":4148,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["inputvalue",{"_index":3648,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["inputvalueunit",{"_index":3627,"title":{},"body":{"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["insert",{"_index":3526,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["insertindex",{"_index":3522,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["inside",{"_index":951,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["inspired",{"_index":3847,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["installed",{"_index":4619,"title":{},"body":{"index.html":{}}}],["instance",{"_index":716,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["instancecount",{"_index":1380,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["instanceof",{"_index":1828,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["instances",{"_index":517,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/CliptextConfig.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["instancetype",{"_index":540,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instantiate",{"_index":2439,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiated",{"_index":1901,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiating",{"_index":3126,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instead",{"_index":590,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BaseFormControl.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["insures",{"_index":3886,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["intellij",{"_index":3852,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["interact",{"_index":3129,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"overview.html":{}}}],["interfaces/can",{"_index":868,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["interfaces/component",{"_index":966,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["interfaces/datagrid",{"_index":970,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["internal",{"_index":2852,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["internalization",{"_index":4602,"title":{},"body":{"index.html":{}}}],["internally",{"_index":2450,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["internalregistrationdata",{"_index":3500,"title":{"interfaces/InternalRegistrationData.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["internals",{"_index":3101,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["internalsetinputvalue",{"_index":404,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["internalsetinputvalue(element",{"_index":450,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["interrupt",{"_index":2269,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["invoking",{"_index":3722,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["irrespective",{"_index":32,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["is(\"isvapptemplate\").equalto(true",{"_index":2941,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(\"vcd\").equalto(vcdid",{"_index":2942,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(property",{"_index":2998,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["isactionavailable",{"_index":168,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactionavailable(action",{"_index":199,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactiondisabled",{"_index":169,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactiondisabled(action",{"_index":201,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["isactive",{"_index":1006,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ischeckbox",{"_index":3174,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["iscolumnhideable(column",{"_index":1771,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isdisabled",{"_index":835,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["isdropdowndisabled",{"_index":2651,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["isdropdownopen",{"_index":2223,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isexportenabled",{"_index":2237,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isfindparamsobject",{"_index":548,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfindparamsobject(params",{"_index":561,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["isfinite(control.value",{"_index":3342,"title":{},"body":{"classes/FormValidators.html":{}}}],["isfirstdropdowntrigger",{"_index":2874,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["isfunction",{"_index":1849,"title":{},"body":{"classes/CommonUtil.html":{}}}],["isfunction(value",{"_index":1851,"title":{},"body":{"classes/CommonUtil.html":{}}}],["isinsidemodal",{"_index":2780,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["isitemdisabledcb",{"_index":2652,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["isloading",{"_index":1656,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["isloopingprogressbar",{"_index":2287,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["ismouseover",{"_index":1272,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["isn't",{"_index":1722,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isnan(parsefloat(control.value",{"_index":3341,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnesteddropdown",{"_index":2653,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["isnullorundefined",{"_index":4417,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(item[property",{"_index":3741,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnullorundefined(value",{"_index":3738,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(value[nestedprop",{"_index":3739,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnumber",{"_index":3340,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange",{"_index":3321,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange(min",{"_index":3329,"title":{},"body":{"classes/FormValidators.html":{}}}],["isodatevalue",{"_index":3273,"title":{},"body":{"components/FormInputComponent.html":{}}}],["isoverflowing",{"_index":1420,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["isreadonly",{"_index":804,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["isrequestpending",{"_index":2212,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isrowexpanded",{"_index":1645,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isspinnerspinning",{"_index":4082,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["issue",{"_index":4351,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":4392,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["istanbul",{"_index":3156,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["istooltipvisible",{"_index":3987,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["istranslatable",{"_index":126,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/SelectOption.html":{}}}],["isubscriptiontracker",{"_index":3445,"title":{"interfaces/ISubscriptionTracker.html":{}},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["isunitdropdowndisplayed",{"_index":3759,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["isvapptemplate==true;vcd==some",{"_index":2947,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["it's",{"_index":1059,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":64,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{}}}],["item.children",{"_index":2713,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["item.children.length",{"_index":2720,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["item.getmultiplier",{"_index":3804,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["item.handler",{"_index":3947,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["item.interface",{"_index":1015,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["item.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["item.object",{"_index":378,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item.response.error",{"_index":380,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item[property",{"_index":3742,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["itemclicked(item",{"_index":3891,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["itemindex",{"_index":1746,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["items",{"_index":283,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["items(items",{"_index":2707,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["items.foreach((item",{"_index":2718,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["items.foreach(item",{"_index":2710,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["items.splice(singlechilditemindex",{"_index":2727,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["items.unshift(singlechilditem.children[0",{"_index":2729,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["itemsperpage",{"_index":1498,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["itself",{"_index":2623,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{}}}],["jan",{"_index":1968,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["jasmine",{"_index":2080,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["job",{"_index":4662,"title":{},"body":{"index.html":{}}}],["js",{"_index":4518,"title":{},"body":{"dependencies.html":{}}}],["js/ts",{"_index":3118,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["json",{"_index":2136,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"index.html":{}}}],["justify",{"_index":3592,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["karma",{"_index":4532,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["kb",{"_index":1129,"title":{},"body":{"classes/Bytes.html":{}}}],["kbdshortcut",{"_index":4101,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["keep",{"_index":4678,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2098,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["keyboard",{"_index":753,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent",{"_index":3894,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["keyboardevent('keydown",{"_index":491,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent('keyup",{"_index":493,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keydow",{"_index":755,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyof",{"_index":3578,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["keys",{"_index":847,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["khz",{"_index":3421,"title":{},"body":{"classes/Hertz.html":{}}}],["kinds",{"_index":1822,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["know",{"_index":272,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["known",{"_index":1564,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["knows",{"_index":389,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"interfaces/WidgetDriver.html":{}}}],["label",{"_index":137,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["label:first",{"_index":3313,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["label:nth",{"_index":2314,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["labels",{"_index":846,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["lap",{"_index":2887,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["last",{"_index":1268,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["lastitem",{"_index":1535,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["later",{"_index":3260,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["latest",{"_index":3916,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazy",{"_index":3861,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazystring",{"_index":617,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["le",{"_index":3014,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char",{"_index":1983,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char.test(encodevalue(cell",{"_index":1987,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leading_control_char.test(value",{"_index":2020,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leaks",{"_index":3116,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["leaky",{"_index":591,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["lease",{"_index":4366,"title":{},"body":{"contributing.html":{}}}],["leave",{"_index":2770,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["left",{"_index":1245,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":646,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["lengthy",{"_index":2147,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["less",{"_index":1178,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["lessthan",{"_index":2958,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthan(value",{"_index":3000,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto",{"_index":2959,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto(value",{"_index":3002,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["level",{"_index":1094,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["levels",{"_index":2715,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["lg",{"_index":1104,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["lg(large",{"_index":3572,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["lib/directives",{"_index":2699,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["lib/directives/show",{"_index":1017,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["library",{"_index":268,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["license",{"_index":2753,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["life",{"_index":3267,"title":{},"body":{"components/FormInputComponent.html":{}}}],["limit",{"_index":130,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/MinMaxValidator.html":{}}}],["limited",{"_index":3640,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line",{"_index":2109,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["line:directive",{"_index":3606,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line:triple",{"_index":3672,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["line:typedef",{"_index":993,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["lines",{"_index":2013,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["link.click",{"_index":1981,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('download",{"_index":1978,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('href",{"_index":1977,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.style.visibility",{"_index":1979,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["list",{"_index":20,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["listed",{"_index":1485,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listen",{"_index":1689,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listeners",{"_index":1548,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["lit",{"_index":4534,"title":{},"body":{"dependencies.html":{}}}],["literal",{"_index":17,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["live",{"_index":3868,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["load",{"_index":1090,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["loaded",{"_index":1736,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["loading",{"_index":323,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["loading/loading",{"_index":4167,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["loadingindicatorcomponent",{"_index":686,"title":{"components/LoadingIndicatorComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{}}}],["loadingmessage",{"_index":614,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["loadingtext",{"_index":713,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["loadingtextkey",{"_index":3550,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["loads",{"_index":2077,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["local",{"_index":3212,"title":{},"body":{"components/FormInputComponent.html":{}}}],["locale_id",{"_index":3729,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localeid",{"_index":3733,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localized",{"_index":4130,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["logic",{"_index":1433,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["logical",{"_index":4326,"title":{},"body":{"contributing.html":{}}}],["long",{"_index":1277,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1379,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["look",{"_index":3867,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["looks",{"_index":4322,"title":{},"body":{"contributing.html":{}}}],["looping",{"_index":2303,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["lower",{"_index":2981,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lt",{"_index":3013,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":2412,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":3848,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["made",{"_index":1092,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["magic",{"_index":1508,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["magically",{"_index":1839,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["main",{"_index":41,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["make",{"_index":789,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["makes",{"_index":1117,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["making",{"_index":1113,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["male",{"_index":3714,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":718,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manipulate",{"_index":536,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manual",{"_index":4346,"title":{},"body":{"contributing.html":{}}}],["manually",{"_index":645,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":127,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["map",{"_index":3630,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["map(action",{"_index":237,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["map(selectedoption",{"_index":2474,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["mapped",{"_index":1737,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["mapselectedrecords(currentselection",{"_index":1741,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["margin",{"_index":2552,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{}}}],["marginleft",{"_index":2881,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["mark",{"_index":124,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/SearchSection.html":{}}}],["marked",{"_index":2833,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["marks",{"_index":2912,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["massachusetts",{"_index":2413,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["master",{"_index":4364,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["match",{"_index":209,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/BaseWidgetObject.html":{},"classes/FilterBuilder.html":{},"interfaces/WidgetDriver.html":{}}}],["matching",{"_index":151,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.hostelement.getboundingclientrect().width",{"_index":1424,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["math.floor(availableheight",{"_index":1810,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(contextualfeaturedactions.length",{"_index":1686,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(default_size",{"_index":1811,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["matter",{"_index":3068,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["max",{"_index":1682,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["max_header_height",{"_index":1469,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maxfeaturedactionsonrow",{"_index":1674,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["maximum",{"_index":1465,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":3219,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["maxnumberlength",{"_index":2487,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["mb",{"_index":1130,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["md",{"_index":1253,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["md(medium",{"_index":3568,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mean",{"_index":297,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["means",{"_index":3517,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["measure",{"_index":3570,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["measures",{"_index":3566,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["medium",{"_index":3569,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["members",{"_index":4335,"title":{},"body":{"contributing.html":{}}}],["menu",{"_index":42,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["menu'},{'name",{"_index":652,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["menu.component",{"_index":1454,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{}}}],["menu.component.ts",{"_index":4397,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["menu.module",{"_index":4195,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["menu.module.ts",{"_index":4154,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu/action",{"_index":1453,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["menu/index",{"_index":4176,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["menu_buffer_space",{"_index":2831,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menus",{"_index":1676,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["merge",{"_index":4352,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["message",{"_index":266,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["messageformat",{"_index":4536,"title":{},"body":{"dependencies.html":{}}}],["messages",{"_index":4328,"title":{},"body":{"contributing.html":{}}}],["messaging",{"_index":3334,"title":{},"body":{"classes/FormValidators.html":{}}}],["metadata",{"_index":604,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["method",{"_index":290,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":165,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["mhz",{"_index":1199,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["milliseconds",{"_index":2376,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1964,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["min",{"_index":3220,"title":{},"body":{"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["minimum",{"_index":3237,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["minmaxvalidator",{"_index":698,"title":{"directives/MinMaxValidator.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":4704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4555,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":988,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/functions.html":{}}}],["mockdata",{"_index":3710,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrecord",{"_index":960,"title":{"interfaces/MockRecord.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocktranslationservice",{"_index":3071,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["modal",{"_index":2828,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"components/LoadingIndicatorComponent.html":{}}}],["mode",{"_index":849,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["modifiers(eg",{"_index":1688,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modify",{"_index":1690,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["module",{"_index":2076,"title":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}},"body":{"classes/CypressWidgetDriver.html":{},"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["modules",{"_index":2734,"title":{"modules.html":{}},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":4259,"title":{},"body":{"modules/VcdFormlyModule.html":{}}}],["monitor",{"_index":344,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["monitoredit",{"_index":331,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitoredit(activityresolutionpromise",{"_index":347,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget",{"_index":332,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget(activityresolutionpromise",{"_index":352,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall",{"_index":333,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall(activityresolutionpromises",{"_index":354,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitors",{"_index":349,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monorepo",{"_index":4591,"title":{},"body":{"index.html":{}}}],["more",{"_index":3949,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["morevalues",{"_index":2989,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.foreach(val",{"_index":3052,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.length",{"_index":3051,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["mouse",{"_index":1237,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mouseevent",{"_index":1365,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["mouseevent('mouseenter",{"_index":4042,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mouseevent('mouseleave",{"_index":4045,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mousein",{"_index":1367,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["mouseout",{"_index":1279,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mouseoutdelay",{"_index":1105,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mousetrap",{"_index":4538,"title":{},"body":{"dependencies.html":{}}}],["movemouseoffhost",{"_index":3980,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseofftooltip",{"_index":3981,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoverhost",{"_index":3982,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoversecondhost",{"_index":3983,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseovertooltip",{"_index":3984,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["multi",{"_index":1480,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdFormlyModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["multiple",{"_index":91,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetFinder.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["multiplier",{"_index":1184,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["multiselect",{"_index":663,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["multiselection",{"_index":1658,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["multiselectoption",{"_index":2449,"title":{"interfaces/MultiSelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["multiselectoptioninternal",{"_index":2437,"title":{"interfaces/MultiSelectOptionInternal.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["name",{"_index":177,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3123,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["names",{"_index":1941,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["nativeelement",{"_index":488,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.click",{"_index":3139,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.dispatchevent(new",{"_index":490,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.value",{"_index":3143,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["navigate",{"_index":4608,"title":{},"body":{"index.html":{}}}],["navigator.mssaveblob",{"_index":1972,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["navigator.mssaveblob(blob",{"_index":1973,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["nbsp",{"_index":872,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nc",{"_index":2414,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["nearest",{"_index":2631,"title":{},"body":{"classes/DomUtil.html":{}}}],["need",{"_index":533,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":1073,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["needs",{"_index":1898,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["negative",{"_index":3525,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["neq",{"_index":3016,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ness",{"_index":787,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nested",{"_index":207,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{}}}],["nesteddropdownposition",{"_index":2654,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["nestedprop",{"_index":3737,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedproperty",{"_index":3723,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedpropertypipe",{"_index":3717,"title":{"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["never",{"_index":1028,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":473,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":1738,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords",{"_index":1742,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords.find",{"_index":1745,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["next",{"_index":854,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["nextdisabled",{"_index":1386,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["nextselection",{"_index":1728,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ng",{"_index":2549,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"index.html":{}}}],["ng_validators",{"_index":3596,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["ngaftercontentinit",{"_index":2781,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["ngafterviewinit",{"_index":1838,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ngcontrol",{"_index":810,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["ngcontrol.valueaccessor",{"_index":875,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["ngfortrackby",{"_index":2678,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["ngmodule",{"_index":2758,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["ngondestroy",{"_index":1411,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["ngoninit",{"_index":1395,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["ngx",{"_index":3366,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["nightly",{"_index":4651,"title":{},"body":{"index.html":{}}}],["no_scrolling_classname",{"_index":2826,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":729,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":749,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["non",{"_index":100,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["none",{"_index":1482,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["normal",{"_index":3314,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["normally",{"_index":1488,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["note",{"_index":1116,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["notequalto",{"_index":2960,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notequalto(value",{"_index":3004,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notext",{"_index":2178,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["notification",{"_index":4384,"title":{},"body":{"contributing.html":{}}}],["notifications",{"_index":1547,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["nowrap",{"_index":1409,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["npm",{"_index":4606,"title":{},"body":{"index.html":{}}}],["npm's",{"_index":4649,"title":{},"body":{"index.html":{}}}],["null",{"_index":228,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":3283,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":131,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number(math.round(number(value",{"_index":1863,"title":{},"body":{"classes/CommonUtil.html":{}}}],["number.max_safe_integer",{"_index":3228,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["number.max_safe_integer.tostring().length",{"_index":2507,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["number.min_safe_integer",{"_index":3235,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{}}}],["number_with_unit_input",{"_index":4246,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["numbers",{"_index":1861,"title":{},"body":{"classes/CommonUtil.html":{},"classes/FilterBuilder.html":{}}}],["numberwithunitforminputcomponent",{"_index":688,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["numberwithunitforminputcomponent.errorlabels",{"_index":3382,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.formcontrol",{"_index":3595,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["numberwithunitforminputcomponent.hintposition",{"_index":3387,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.max",{"_index":3386,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.min",{"_index":3384,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.showunlimitedoption",{"_index":3390,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputcomponent.unlimitedvalue",{"_index":3392,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["numberwithunitforminputwidgetobject",{"_index":3747,"title":{"classes/NumberWithUnitFormInputWidgetObject.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["numeric",{"_index":666,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["numerical",{"_index":3614,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["obj",{"_index":3721,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["object",{"_index":309,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign(defaults",{"_index":4034,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.assign(el.style",{"_index":1376,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["object.assign(this.host.style",{"_index":4035,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.keys(rec).map(key",{"_index":2262,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(records[0]).map(fieldname",{"_index":2258,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(sizes).indexof(size",{"_index":3580,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["object.keys(this.formcontrol.errors",{"_index":883,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["object.keys(this.formgroup.controls).foreach(control",{"_index":2458,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue",{"_index":2471,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue()).filter(frmctrl",{"_index":2477,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.getdebugelement(cssselector).nativeelement.classes",{"_index":478,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["object.keys(tooltipposition",{"_index":4051,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.ts",{"_index":889,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["object.ts:101",{"_index":4300,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:107",{"_index":4279,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:114",{"_index":4273,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:115",{"_index":4297,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:121",{"_index":4280,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:123",{"_index":4298,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:127",{"_index":4296,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:129",{"_index":4281,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:135",{"_index":893,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:138",{"_index":900,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:142",{"_index":899,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:146",{"_index":898,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:15",{"_index":3761,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["object.ts:150",{"_index":910,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:154",{"_index":906,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:158",{"_index":897,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:162",{"_index":895,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:166",{"_index":894,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:17",{"_index":3770,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:170",{"_index":901,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:173",{"_index":4288,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:174",{"_index":907,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:178",{"_index":908,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/WidgetFinder.html":{}}}],["object.ts:182",{"_index":909,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:186",{"_index":896,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:190",{"_index":904,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:192",{"_index":4291,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:194",{"_index":905,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:198",{"_index":902,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:20",{"_index":4276,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:202",{"_index":903,"title":{},"body":{"classes/BaseWidgetObject.html":{}}}],["object.ts:21",{"_index":3772,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:217",{"_index":4290,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:229",{"_index":4289,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:27",{"_index":4275,"title":{},"body":{"interfaces/WidgetDriver.html":{},"classes/WidgetObject.html":{}}}],["object.ts:28",{"_index":3774,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:32",{"_index":3777,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:34",{"_index":4282,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:36",{"_index":3779,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:40",{"_index":3781,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:41",{"_index":4287,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:42",{"_index":4292,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:44",{"_index":3765,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:45",{"_index":4294,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:48",{"_index":3767,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["object.ts:52",{"_index":3783,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:54",{"_index":4295,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:55",{"_index":4274,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:56",{"_index":3785,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:62",{"_index":4272,"title":{},"body":{"interfaces/WidgetDriver.html":{},"classes/WidgetObject.html":{}}}],["object.ts:65",{"_index":3769,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:69",{"_index":4277,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:72",{"_index":3768,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:73",{"_index":4293,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:76",{"_index":4284,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:77",{"_index":3763,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:81",{"_index":3787,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:83",{"_index":4285,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:87",{"_index":4299,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:88",{"_index":3789,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:92",{"_index":4286,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object.ts:99",{"_index":4278,"title":{},"body":{"interfaces/WidgetDriver.html":{}}}],["object_property_separator",{"_index":3730,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectandresponse",{"_index":274,"title":{"interfaces/ObjectAndResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["objects",{"_index":2673,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/SearchSection.html":{}}}],["objet",{"_index":1519,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["obs",{"_index":2390,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["observable",{"_index":1451,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable.subscribe(tosubscriber(observerornext",{"_index":3478,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observables",{"_index":3448,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observerornext",{"_index":3451,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["of(this.to.options",{"_index":3405,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["official",{"_index":4646,"title":{},"body":{"index.html":{}}}],["old",{"_index":3904,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onalertclosedchange",{"_index":2906,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onalertclosedchange(closed",{"_index":2923,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onarrowdown(event",{"_index":3893,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onarrowup(event",{"_index":3897,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onbeforesetconfig",{"_index":2333,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["onbeforesetconfig(config",{"_index":2358,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["once",{"_index":2126,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["onchange",{"_index":797,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["onclickexport",{"_index":2224,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["ondestroy",{"_index":1241,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["ondestroy.ngondestroy",{"_index":3472,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["one",{"_index":327,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["onenterclicked",{"_index":3346,"title":{},"body":{"components/FormlyInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["onenterkey(event",{"_index":3899,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onerrorclosed",{"_index":610,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ones",{"_index":3942,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["onescapeclicked",{"_index":3347,"title":{},"body":{"components/FormlyInputComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["oninit",{"_index":1242,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["onitemclickedcb",{"_index":2655,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["only.interface",{"_index":870,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["only.interface.ts",{"_index":1226,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["onmouseenter",{"_index":1305,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmousein",{"_index":1415,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onmouseleave",{"_index":1307,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmouseout",{"_index":1419,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onsuccessclosed",{"_index":611,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ontop",{"_index":1639,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ontouch",{"_index":798,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontouched",{"_index":832,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontransitionend",{"_index":1428,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["ontransitionend(e",{"_index":1318,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["opacity",{"_index":1292,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":2200,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["open(open",{"_index":3875,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["open(value",{"_index":2201,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["open/close",{"_index":2296,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["openchange",{"_index":2207,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["opened",{"_index":2158,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{}}}],["opening",{"_index":3885,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["opens",{"_index":2664,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["operation",{"_index":89,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["operator",{"_index":2970,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators",{"_index":3010,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["operators.and",{"_index":3029,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators.or",{"_index":3024,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["opposite",{"_index":1344,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":455,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{}}}],["option.display",{"_index":2481,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.istranslatable",{"_index":2480,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.ts",{"_index":3953,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["option.value",{"_index":2575,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{}}}],["option.value.tostring",{"_index":3309,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["optional",{"_index":14,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":143,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["options.indexof(this.pagesize",{"_index":1788,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.push(this.pagesize",{"_index":1789,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.sort((a",{"_index":1790,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["optionsformgroup",{"_index":2218,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["or(...conditions",{"_index":3035,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["or(conditions",{"_index":3006,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["order",{"_index":3252,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["ordered",{"_index":1047,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["origin",{"_index":4310,"title":{},"body":{"contributing.html":{}}}],["original",{"_index":2724,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["originalondestroy",{"_index":3474,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["originalondestroy.call(destroyable",{"_index":3477,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["osx",{"_index":3849,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["otherwise",{"_index":2608,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"contributing.html":{}}}],["out",{"_index":1175,"title":{},"body":{"classes/Bytes.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["outlet",{"_index":1896,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive",{"_index":4199,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["outlet.directive.ts",{"_index":1876,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["outlet.directive.ts:29",{"_index":1904,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:30",{"_index":1894,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:40",{"_index":1895,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:52",{"_index":1902,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:63",{"_index":1900,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:70",{"_index":1903,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outline",{"_index":4319,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":1442,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["outputnumber",{"_index":1223,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputs",{"_index":1538,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["outputunit",{"_index":1191,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["outputunit.multiplier",{"_index":1216,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputunit.unitname",{"_index":4135,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["outside",{"_index":2366,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["over",{"_index":1271,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/ExportColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["overflow",{"_index":1407,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflowing",{"_index":1405,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflows",{"_index":1421,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overlay",{"_index":3555,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["override",{"_index":269,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["overrides",{"_index":1011,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["overview",{"_index":4683,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwriting",{"_index":1636,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["p:first",{"_index":3298,"title":{},"body":{"components/FormInputComponent.html":{}}}],["package",{"_index":4504,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4621,"title":{},"body":{"index.html":{}}}],["pad",{"_index":4455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["pad(date.getdate",{"_index":3279,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.gethours",{"_index":3280,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getminutes",{"_index":3281,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getmonth",{"_index":3278,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(num",{"_index":3282,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["padding",{"_index":3288,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["page",{"_index":1459,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["page(they",{"_index":1505,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagenumber",{"_index":1496,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pages",{"_index":1503,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pagesize",{"_index":1509,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagesizeoptions",{"_index":1501,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagination",{"_index":1474,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["pagination(pagination",{"_index":1603,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationcallback",{"_index":1533,"title":{"interfaces/PaginationCallback.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationcomponent",{"_index":1664,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationconfiguration",{"_index":1500,"title":{"interfaces/PaginationConfiguration.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationdata.firstitem",{"_index":1780,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.lastitem",{"_index":1781,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.totalitems",{"_index":1782,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdropdowntext",{"_index":1651,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationtranslationkey",{"_index":1670,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionation",{"_index":1493,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionationinformation",{"_index":1495,"title":{"interfaces/PagionationInformation.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["palo",{"_index":3712,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pane",{"_index":1517,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["param",{"_index":85,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":295,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["parameters",{"_index":176,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":432,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params.tagname",{"_index":580,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params.woconstructor.tagname",{"_index":579,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent",{"_index":510,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(by.css(cssselector)).nativeelement",{"_index":3138,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(query",{"_index":3137,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.queryall(query",{"_index":515,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parentcssselector",{"_index":439,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["parentdropdown",{"_index":2792,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect",{"_index":2892,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect.left",{"_index":2896,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownmenurect.right",{"_index":2895,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parentdropdownwidth",{"_index":2894,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["parseint(triggercomputedstyles.marginleft",{"_index":2883,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["part",{"_index":1098,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["partial",{"_index":1375,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/FilterBuilder.html":{},"directives/ShowClippedTextDirective.html":{}}}],["partialobserver",{"_index":3452,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["pased",{"_index":3150,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pass",{"_index":727,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["passed",{"_index":66,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["passes",{"_index":3455,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["passing",{"_index":2144,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"modules/VcdFormlyModule.html":{}}}],["patch",{"_index":4315,"title":{},"body":{"contributing.html":{}}}],["pattern",{"_index":3098,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["peer",{"_index":4553,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["per",{"_index":1504,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["percent",{"_index":3791,"title":{"classes/Percent.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"coverage.html":{}}}],["percent(0.01",{"_index":3829,"title":{},"body":{"classes/Percent.html":{}}}],["percent(1",{"_index":3827,"title":{},"body":{"classes/Percent.html":{}}}],["percent.zero_to_1",{"_index":3807,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["percent.zero_to_100",{"_index":3806,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["perform",{"_index":2362,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["performed",{"_index":68,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["performer",{"_index":342,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivities(activityresolutionpromises",{"_index":375,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivity(activityresolutionpromise",{"_index":370,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["persist",{"_index":4582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["person",{"_index":3711,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pipe",{"_index":3408,"title":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"coverage.html":{}}}],["pipeline",{"_index":4644,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":3410,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["pipes/function",{"_index":4201,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["pipesmodule",{"_index":3835,"title":{"modules/PipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["pipetransform",{"_index":3417,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["pixels",{"_index":1468,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["placed",{"_index":1650,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["placeholder",{"_index":3221,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{}}}],["please",{"_index":1426,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plugin",{"_index":4598,"title":{},"body":{"index.html":{}}}],["point",{"_index":1859,"title":{},"body":{"classes/CommonUtil.html":{}}}],["popup",{"_index":1259,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":788,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["position.directive",{"_index":2764,"title":{},"body":{"modules/DropdownModule.html":{}}}],["position.directive.ts",{"_index":2766,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["position.directive.ts:101",{"_index":2817,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:134",{"_index":2819,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:188",{"_index":2803,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:198",{"_index":2794,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:57",{"_index":2807,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:58",{"_index":2811,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:59",{"_index":2808,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:60",{"_index":2812,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:61",{"_index":2810,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:63",{"_index":2813,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:66",{"_index":2815,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:84",{"_index":2793,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["position.directive.ts:94",{"_index":2801,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["positionleft",{"_index":2787,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["positiontop",{"_index":2786,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["possible",{"_index":147,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["possibly",{"_index":532,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["posts",{"_index":350,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["potential",{"_index":3113,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["potentially",{"_index":544,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pr",{"_index":4368,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pre",{"_index":1181,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["precision",{"_index":4141,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["predefined",{"_index":3694,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["prefer",{"_index":3128,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prefix",{"_index":3493,"title":{},"body":{"classes/IdGenerator.html":{}}}],["prefixed",{"_index":2000,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/IdGenerator.html":{},"miscellaneous/functions.html":{}}}],["prefixing",{"_index":2017,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["preid=dev",{"_index":4654,"title":{},"body":{"index.html":{}}}],["prerelease",{"_index":4653,"title":{},"body":{"index.html":{}}}],["present",{"_index":1740,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserving",{"_index":1635,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pressed",{"_index":1007,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["presses",{"_index":4102,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["prevent",{"_index":1945,"title":{},"body":{"injectables/CsvExporterService.html":{},"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/functions.html":{}}}],["prevents",{"_index":2016,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["previousvalue",{"_index":2250,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["previousvalue[currentvalue.fieldname",{"_index":2249,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["primitives",{"_index":2988,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["prismjs",{"_index":4540,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":161,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["process",{"_index":270,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processes",{"_index":275,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processrow",{"_index":4423,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["processrow(row",{"_index":1961,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["produce",{"_index":2946,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["produces",{"_index":3725,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["programmatically",{"_index":3696,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["progress",{"_index":2130,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["project",{"_index":4303,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["projects",{"_index":4594,"title":{},"body":{"index.html":{}}}],["projects/.../action",{"_index":4557,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../base",{"_index":4701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../bold",{"_index":4566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../component",{"_index":4689,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../csv",{"_index":4568,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../cypress",{"_index":4571,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../data",{"_index":4563,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../datagrid",{"_index":4560,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.component.ts",{"_index":4558,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.module.ts",{"_index":4700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../datagrid.wo.ts",{"_index":4696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../dynamic",{"_index":4697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../filter",{"_index":4567,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../form",{"_index":4559,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/.../form.module.ts",{"_index":4698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../loading",{"_index":4561,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../mock",{"_index":4702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../nested",{"_index":4570,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../number",{"_index":4703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../pipes.module.ts",{"_index":4699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../show",{"_index":4562,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../spotlight",{"_index":4691,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":4690,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../vcd",{"_index":4564,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../widget",{"_index":4569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects//package.json",{"_index":4656,"title":{},"body":{"index.html":{}}}],["projects/components",{"_index":4595,"title":{},"body":{"index.html":{}}}],["projects/components/src/action",{"_index":155,"title":{},"body":{"classes/ActionSearchProvider.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/activity",{"_index":259,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{}}}],["projects/components/src/common/error/error",{"_index":2899,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{}}}],["projects/components/src/common/interfaces/action",{"_index":6,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/interfaces/select",{"_index":3952,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["projects/components/src/common/loading/loading",{"_index":3542,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/pipes/nested",{"_index":3718,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/pipes/pipes.module.ts",{"_index":3839,"title":{},"body":{"modules/PipesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/subscription/subscription",{"_index":3446,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["projects/components/src/components.module.ts",{"_index":4175,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["projects/components/src/data",{"_index":1929,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.component.ts",{"_index":1431,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.module.ts",{"_index":4192,"title":{},"body":{"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/directives/component",{"_index":1875,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/filters/datagrid",{"_index":2320,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/interfaces/component",{"_index":1864,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/datagrid/interfaces/datagrid",{"_index":1001,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/datagrid/mock",{"_index":3706,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/pipes/function",{"_index":3411,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/renderers/bold",{"_index":947,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts",{"_index":2633,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:103",{"_index":2669,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:108",{"_index":2670,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:110",{"_index":2668,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:112",{"_index":2684,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:117",{"_index":2656,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:122",{"_index":2694,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:126",{"_index":2685,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:130",{"_index":2672,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:133",{"_index":2697,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:140",{"_index":2667,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:142",{"_index":2682,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:154",{"_index":2680,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:48",{"_index":2689,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:53",{"_index":2690,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:58",{"_index":2691,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:63",{"_index":2686,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:72",{"_index":2666,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:77",{"_index":2663,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:83",{"_index":2677,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:88",{"_index":2658,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:93",{"_index":2674,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.component.ts:98",{"_index":2676,"title":{},"body":{"components/DropdownComponent.html":{}}}],["projects/components/src/dropdown/dropdown.module.ts",{"_index":2746,"title":{},"body":{"modules/DropdownModule.html":{}}}],["projects/components/src/dropdown/dynamic",{"_index":2765,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/base",{"_index":780,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/form",{"_index":3168,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/form/form.module.ts",{"_index":4227,"title":{},"body":{"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/interfaces/can",{"_index":1225,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["projects/components/src/form/number",{"_index":3594,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/validators.ts",{"_index":3317,"title":{},"body":{"classes/FormValidators.html":{},"coverage.html":{}}}],["projects/components/src/form/validators.ts:17",{"_index":3323,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/form/validators.ts:32",{"_index":3331,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/formly/vcd/inputs/input/formly",{"_index":3344,"title":{},"body":{"components/FormlyInputComponent.html":{},"coverage.html":{}}}],["projects/components/src/formly/vcd/inputs/number",{"_index":3377,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"coverage.html":{}}}],["projects/components/src/formly/vcd/inputs/select/formly",{"_index":3399,"title":{},"body":{"components/FormlySelectComponent.html":{},"coverage.html":{}}}],["projects/components/src/formly/vcd/vcd",{"_index":4230,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/lib/directives/show",{"_index":1233,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/spotlight",{"_index":3501,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/common",{"_index":1847,"title":{},"body":{"classes/CommonUtil.html":{},"coverage.html":{}}}],["projects/components/src/utils/dom",{"_index":2614,"title":{},"body":{"classes/DomUtil.html":{},"coverage.html":{}}}],["projects/components/src/utils/filter",{"_index":2935,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/id",{"_index":3488,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/activity",{"_index":705,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/angular",{"_index":385,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/base",{"_index":888,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/cypress",{"_index":2022,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/test/datagrid/datagrid.wo.ts",{"_index":4484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/test/datagrid/filter",{"_index":3055,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/test/datagrid/vcd",{"_index":4204,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/widget",{"_index":3095,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/types.ts",{"_index":4692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/components/src/utils/unit/unit",{"_index":4128,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts",{"_index":1125,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts:105",{"_index":4116,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:109",{"_index":3441,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:11",{"_index":4120,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:110",{"_index":3439,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:111",{"_index":3426,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:112",{"_index":3428,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:113",{"_index":3430,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:114",{"_index":3424,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:115",{"_index":3432,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:116",{"_index":3437,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:118",{"_index":3442,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:12",{"_index":4119,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:122",{"_index":3444,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:126",{"_index":3443,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:132",{"_index":1162,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:133",{"_index":1160,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:134",{"_index":1146,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:135",{"_index":1149,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:136",{"_index":1151,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:137",{"_index":1148,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:138",{"_index":1153,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:139",{"_index":1158,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:141",{"_index":1167,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:145",{"_index":1169,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:149",{"_index":1168,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:162",{"_index":3826,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:163",{"_index":3823,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:171",{"_index":3828,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:172",{"_index":3830,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:174",{"_index":3834,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:178",{"_index":3833,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:188",{"_index":3832,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:24",{"_index":4123,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:28",{"_index":4125,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:37",{"_index":4124,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:45",{"_index":4122,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:54",{"_index":4127,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:61",{"_index":4126,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:71",{"_index":4121,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:89",{"_index":4115,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/examples",{"_index":4604,"title":{},"body":{"index.html":{}}}],["projects/i18n",{"_index":4603,"title":{},"body":{"index.html":{}}}],["projects/route",{"_index":4613,"title":{},"body":{"index.html":{}}}],["promise",{"_index":58,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"interfaces/WidgetDriver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["promise(resolve",{"_index":2268,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["promiseresolver",{"_index":346,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["promisify",{"_index":4483,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["promisify(chain",{"_index":2056,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["promisify(element.invoke('keydown",{"_index":2097,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector",{"_index":2087,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).check",{"_index":2093,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).clear",{"_index":2101,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).click",{"_index":2092,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).invoke('classes",{"_index":2091,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).invoke('text')).then((text",{"_index":2102,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).invoke('val",{"_index":2107,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).select(option",{"_index":2095,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).should(expectation",{"_index":2113,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelement(cssselector).type(value",{"_index":2100,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["promisify(this.getelements(parentcssselector",{"_index":2104,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["proper",{"_index":3333,"title":{},"body":{"classes/FormValidators.html":{},"contributing.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["property",{"_index":1070,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["property.pipe",{"_index":3840,"title":{},"body":{"modules/PipesModule.html":{}}}],["property.pipe.ts",{"_index":3719,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["property.pipe.ts:32",{"_index":3726,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["property.split(object_property_separator",{"_index":3735,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["protected",{"_index":470,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["protractor",{"_index":4635,"title":{},"body":{"index.html":{}}}],["provide",{"_index":359,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["provided",{"_index":1085,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/DomUtil.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["providedin",{"_index":1958,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["provider",{"_index":3510,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["provider/action",{"_index":157,"title":{},"body":{"classes/ActionSearchProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":2738,"title":{},"body":{"modules/DropdownModule.html":{},"components/FilterTestHostComponent.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["provides",{"_index":2149,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["providing",{"_index":1873,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prs",{"_index":4355,"title":{},"body":{"contributing.html":{}}}],["public",{"_index":522,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["public/exported",{"_index":4334,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":4664,"title":{},"body":{"index.html":{}}}],["published",{"_index":4668,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":4641,"title":{},"body":{"index.html":{}}}],["pull",{"_index":4332,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pure",{"_index":3414,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["purpose",{"_index":3100,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["push",{"_index":4329,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pushed",{"_index":2897,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["pushes",{"_index":1546,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["put",{"_index":1051,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["px",{"_index":1328,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quad",{"_index":1358,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quadrant",{"_index":1345,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":3104,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["query",{"_index":512,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetFinder.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["queryfield",{"_index":2326,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["queryfieldname",{"_index":1079,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["querying",{"_index":1078,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["querylist",{"_index":1443,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["quotes",{"_index":1998,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["r",{"_index":55,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["range",{"_index":3332,"title":{},"body":{"classes/FormValidators.html":{}}}],["rbradford",{"_index":4543,"title":{},"body":{"dependencies.html":{}}}],["re",{"_index":3134,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reactiveformsmodule",{"_index":2759,"title":{},"body":{"modules/DropdownModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{}}}],["read",{"_index":869,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["readme",{"_index":4600,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":786,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["readonlytext",{"_index":3754,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["reads",{"_index":3775,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["ready",{"_index":2208,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["really",{"_index":3915,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["rebase",{"_index":4363,"title":{},"body":{"contributing.html":{}}}],["rec",{"_index":1036,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["rec[key",{"_index":2263,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["recalculate",{"_index":2796,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["recalculating",{"_index":1812,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["receive",{"_index":730,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["receiving",{"_index":1392,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["recent",{"_index":4374,"title":{},"body":{"contributing.html":{}}}],["recommended",{"_index":3120,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["record",{"_index":90,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["record.name",{"_index":961,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["records",{"_index":86,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["records.map(rec",{"_index":2261,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["rect",{"_index":1325,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.height",{"_index":1333,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.left",{"_index":1329,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.top",{"_index":1327,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.width",{"_index":1331,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter",{"_index":1353,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.x",{"_index":1356,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.y",{"_index":1357,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["red",{"_index":3287,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["reduce",{"_index":2937,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["reduce((flatactionlist",{"_index":242,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["redundant",{"_index":1909,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["refer",{"_index":2660,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["references",{"_index":4388,"title":{},"body":{"contributing.html":{}}}],["referencing",{"_index":4391,"title":{},"body":{"contributing.html":{}}}],["reflects",{"_index":1086,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["refs/tags",{"_index":4676,"title":{},"body":{"index.html":{}}}],["register",{"_index":3515,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["registered",{"_index":3508,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeredproviders",{"_index":3505,"title":{"interfaces/RegisteredProviders.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["registering",{"_index":3534,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeronchange",{"_index":799,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registeronchange(onchange",{"_index":826,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched",{"_index":800,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched(ontouched",{"_index":830,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerprovider",{"_index":4104,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["registerprovider(provider",{"_index":3520,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registration",{"_index":3523,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata",{"_index":3521,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata.id",{"_index":3530,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationid",{"_index":3533,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrations",{"_index":3514,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["regular",{"_index":3159,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reject",{"_index":2058,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["reject(error",{"_index":2073,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["rejectpromise",{"_index":2071,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["rejectpromise(error",{"_index":2072,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["rejects",{"_index":2054,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["related",{"_index":4373,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["relative",{"_index":1716,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["relatively",{"_index":2804,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["release",{"_index":4655,"title":{},"body":{"index.html":{}}}],["released",{"_index":3242,"title":{},"body":{"components/FormInputComponent.html":{}}}],["releases",{"_index":4647,"title":{},"body":{"index.html":{}}}],["reload",{"_index":4610,"title":{},"body":{"index.html":{}}}],["remember",{"_index":3903,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["remote",{"_index":4657,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1427,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["removecolumn",{"_index":1633,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(col",{"_index":1697,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(index",{"_index":2298,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["removed",{"_index":1232,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["render",{"_index":1515,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rendered",{"_index":1034,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer",{"_index":959,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer'},{'name",{"_index":656,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["renderer(item",{"_index":3418,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.component",{"_index":987,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"modules/VcdDatagridModule.html":{}}}],["renderer.component.ts",{"_index":948,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.component.ts:41",{"_index":965,"title":{},"body":{"components/BoldTextRendererComponent.html":{}}}],["renderer.context",{"_index":1915,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.interface",{"_index":967,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer.interface.ts",{"_index":1865,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["renderer.pipe",{"_index":4202,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["renderer.pipe.ts",{"_index":3412,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["renderer.pipe.ts:17",{"_index":3416,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.rendererspec.type",{"_index":1908,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.wo.ts",{"_index":980,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.wo.ts:28",{"_index":981,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer.wo.ts:30",{"_index":982,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer2",{"_index":2789,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["renderers",{"_index":1823,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["renderers/bold",{"_index":4203,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["rendererspec",{"_index":955,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"directives/ComponentRendererOutletDirective.html":{}}}],["rendering",{"_index":950,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["repeat",{"_index":2714,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"contributing.html":{}}}],["replace",{"_index":1687,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["repo",{"_index":4590,"title":{},"body":{"index.html":{}}}],["repo(vmware/vmware",{"_index":4673,"title":{},"body":{"index.html":{}}}],["reported",{"_index":2836,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["reporter",{"_index":341,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter'},{'name",{"_index":653,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component",{"_index":4169,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.component.html",{"_index":608,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts",{"_index":600,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["reporter.component.ts:20",{"_index":637,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:21",{"_index":636,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:22",{"_index":638,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:27",{"_index":4074,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:28",{"_index":616,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:36",{"_index":4078,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:40",{"_index":625,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:44",{"_index":4075,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:49",{"_index":622,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:52",{"_index":4077,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:57",{"_index":623,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:67",{"_index":619,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:74",{"_index":621,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:83",{"_index":624,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.module",{"_index":4177,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["reporter.module.ts",{"_index":4163,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.ts",{"_index":318,"title":{},"body":{"classes/ActivityReporter.html":{},"coverage.html":{}}}],["reporter.ts:13",{"_index":339,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:21",{"_index":365,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:27",{"_index":358,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:33",{"_index":364,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:38",{"_index":353,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:53",{"_index":355,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:73",{"_index":348,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.wo.ts",{"_index":706,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter.wo.ts:10",{"_index":714,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:11",{"_index":4083,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:12",{"_index":766,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:13",{"_index":4085,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:16",{"_index":768,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:17",{"_index":4086,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:20",{"_index":770,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:24",{"_index":772,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:33",{"_index":4084,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter/activity",{"_index":260,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{}}}],["reporter/banner",{"_index":599,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter/spinner",{"_index":4072,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporterror",{"_index":335,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporterror(errortext",{"_index":357,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporting",{"_index":324,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["reportsuccess",{"_index":336,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reportsuccess(successmessage",{"_index":363,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reposition",{"_index":2798,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["repositions",{"_index":2767,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["repository",{"_index":4311,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":602,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/Percent.html":{}}}],["representation",{"_index":1483,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["represented",{"_index":3816,"title":{},"body":{"classes/Percent.html":{}}}],["representing",{"_index":2700,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"classes/FilterBuilder.html":{}}}],["represents",{"_index":911,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["request",{"_index":2162,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["requested",{"_index":1275,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":4344,"title":{},"body":{"contributing.html":{}}}],["require",{"_index":106,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["required",{"_index":61,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["requirements",{"_index":4333,"title":{},"body":{"contributing.html":{}}}],["requires",{"_index":3133,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["res",{"_index":3336,"title":{},"body":{"classes/FormValidators.html":{}}}],["reset",{"_index":612,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"modules/DropdownModule.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["resetposition",{"_index":2782,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resetposition(element",{"_index":2802,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resets",{"_index":1774,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resettopageone",{"_index":1775,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resize",{"_index":2795,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["resolve",{"_index":2052,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"miscellaneous/functions.html":{}}}],["resolve(csvfile",{"_index":2277,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["resolve(value",{"_index":2069,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["resolveactivities",{"_index":277,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolveactivities(activityresolutionpromises",{"_index":279,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity",{"_index":278,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity(activityresolutionpromise",{"_index":298,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolvepromise(value",{"_index":2068,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["resolver",{"_index":301,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["resolver.ts",{"_index":261,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["resolver.ts:51",{"_index":299,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolver.ts:71",{"_index":281,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resource",{"_index":383,"title":{},"body":{"interfaces/ActivityResponse.html":{}}}],["respect",{"_index":2659,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["response",{"_index":265,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"injectables/UnitFormatter.html":{}}}],["response.length",{"_index":379,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.map(item",{"_index":377,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.object",{"_index":374,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.response.error",{"_index":371,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["responsible",{"_index":1869,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["rest",{"_index":1840,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["restitem",{"_index":1874,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["result",{"_index":150,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.items",{"_index":1560,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.search(/[\",\\n]/g",{"_index":2014,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["result.totalitems",{"_index":1562,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.ts",{"_index":4100,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["result[0",{"_index":316,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resulting",{"_index":2146,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["results",{"_index":152,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":746,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["return",{"_index":232,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":311,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/RegisteredProviders.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":195,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["returnvalue",{"_index":376,"title":{},"body":{"classes/ActivityReporter.html":{},"pipes/NestedPropertyPipe.html":{}}}],["reusable",{"_index":4597,"title":{},"body":{"index.html":{}}}],["reused",{"_index":3099,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reverse",{"_index":1490,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["reversed",{"_index":1489,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["review",{"_index":4370,"title":{},"body":{"contributing.html":{}}}],["rgba(250",{"_index":3583,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["rgba(255",{"_index":3586,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["right",{"_index":1247,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rightlabel",{"_index":3173,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["risk",{"_index":1957,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":410,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["root.componentinstance",{"_index":573,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["rough",{"_index":4318,"title":{},"body":{"contributing.html":{}}}],["roughly",{"_index":4394,"title":{},"body":{"contributing.html":{}}}],["rounds",{"_index":1857,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto",{"_index":1850,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto(value",{"_index":1854,"title":{},"body":{"classes/CommonUtil.html":{}}}],["route",{"_index":4611,"title":{},"body":{"index.html":{}}}],["routermodule",{"_index":4193,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["routes",{"_index":4617,"title":{},"body":{"index.html":{}}}],["row",{"_index":1033,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["row.map(cell",{"_index":1990,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row.some(cell",{"_index":1986,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row_height",{"_index":1472,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["row_tag",{"_index":4491,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rowheight",{"_index":1510,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows",{"_index":1479,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows.map(row",{"_index":1960,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rows.some(haspotentialinjection",{"_index":1963,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rules",{"_index":3105,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["run",{"_index":3327,"title":{},"body":{"classes/FormValidators.html":{},"index.html":{}}}],["runner",{"_index":2062,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["running",{"_index":609,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/FormValidators.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"index.html":{}}}],["rxjs",{"_index":1452,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"dependencies.html":{}}}],["rxjs/internal",{"_index":3466,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["rxjs/operators",{"_index":2375,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["safe",{"_index":2084,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["safety",{"_index":1109,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["same",{"_index":738,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["sanitize",{"_index":2142,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["sanitizecheckboxhint",{"_index":2190,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecheckboxlabel",{"_index":2188,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecontrol",{"_index":2233,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizeinfomessage",{"_index":2192,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizestring",{"_index":4424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizestring(result",{"_index":2015,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["sanitizestring(value",{"_index":2019,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["saving",{"_index":1536,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["scaffolding",{"_index":4623,"title":{},"body":{"index.html":{}}}],["screen",{"_index":23,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["scroll",{"_index":2621,"title":{},"body":{"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["scrolling",{"_index":2827,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["scrolls",{"_index":2619,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrolltoelement",{"_index":2615,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrolltoelement(elref",{"_index":2616,"title":{},"body":{"classes/DomUtil.html":{}}}],["scrollwidth",{"_index":1423,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["search",{"_index":156,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["search(criteria",{"_index":203,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SpotlightSearchProvider.html":{}}}],["search.component",{"_index":4096,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.component.html",{"_index":3870,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.scss",{"_index":3871,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.ts",{"_index":3842,"title":{},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["search.module",{"_index":4183,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["search.module.ts",{"_index":4094,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.provider",{"_index":3506,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["search.provider.ts",{"_index":158,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SpotlightSearchProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.provider.ts:14",{"_index":191,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:16",{"_index":4097,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["search.provider.ts:19",{"_index":180,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:20",{"_index":212,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:28",{"_index":188,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:29",{"_index":214,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:32",{"_index":175,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:40",{"_index":204,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:52",{"_index":193,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:61",{"_index":198,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:75",{"_index":200,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.provider.ts:79",{"_index":202,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["search.service",{"_index":3846,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.service.ts",{"_index":3503,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.service.ts:44",{"_index":4109,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:53",{"_index":4107,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:87",{"_index":4108,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:98",{"_index":4106,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search/spotlight",{"_index":3502,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["searchcriteria",{"_index":194,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SearchSection.html":{}}}],["searchcriteria(value",{"_index":3879,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searches",{"_index":205,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["searchid",{"_index":3884,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searching",{"_index":184,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["searchinput",{"_index":3883,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection",{"_index":3841,"title":{"interfaces/SearchSection.html":{}},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["searchsection.isloading",{"_index":3908,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.provider.search(this.searchcriteria",{"_index":3912,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results",{"_index":3917,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results.length",{"_index":3951,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.section",{"_index":3950,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsections",{"_index":3889,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchservice",{"_index":3877,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["secondhost",{"_index":3979,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["section",{"_index":43,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["section.isloading",{"_index":3930,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["section.results[0",{"_index":3932,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["sections",{"_index":3864,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["see",{"_index":2398,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{},"contributing.html":{},"index.html":{}}}],["select",{"_index":405,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["select'},{'name",{"_index":684,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["select(option",{"_index":453,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["select.component",{"_index":3605,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["select.component.html",{"_index":3302,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.scss",{"_index":3301,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts",{"_index":3300,"title":{},"body":{"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"coverage.html":{}}}],["select.component.ts:23",{"_index":3304,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:27",{"_index":3401,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["select.component.ts:29",{"_index":3306,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:31",{"_index":3403,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["select/form",{"_index":3299,"title":{},"body":{"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{},"coverage.html":{}}}],["selectall",{"_index":2140,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectallcontrol",{"_index":2231,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumn(column",{"_index":2245,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumnstext",{"_index":2172,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selected",{"_index":40,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["selectedcolumns",{"_index":2121,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectedcombounit",{"_index":3670,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedentities",{"_index":54,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectedentities(entities",{"_index":229,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["selectedfilters",{"_index":2470,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["selectedindex",{"_index":1744,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selecteditem",{"_index":3890,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecteditemindex",{"_index":3940,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectedoption",{"_index":3303,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.display",{"_index":3312,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.istranslatable",{"_index":3311,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedunit",{"_index":3677,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectedunit(value",{"_index":3701,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunit.getoutputvalue(value",{"_index":3679,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunitdisplayvalue",{"_index":3758,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectelement",{"_index":485,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["selectelement.dispatchevent(new",{"_index":487,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["selectelement.value",{"_index":486,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["selectfirst(ensurefirstsectionisloaded",{"_index":3922,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecting",{"_index":1478,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selection",{"_index":93,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectionchanged",{"_index":1624,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype",{"_index":1578,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype(selectiontype",{"_index":1576,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectnext(down",{"_index":3933,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectoption",{"_index":2444,"title":{"interfaces/SelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"components/FormlySelectComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/SelectOption.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{}}}],["selectoption.display",{"_index":3954,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["selectoptions",{"_index":3400,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["selector",{"_index":605,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["selectors",{"_index":929,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["selects",{"_index":922,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"interfaces/WidgetDriver.html":{}}}],["selectunit",{"_index":3750,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectunit(unit",{"_index":3764,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["self",{"_index":3202,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["semantic",{"_index":4648,"title":{},"body":{"index.html":{}}}],["sending",{"_index":2161,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sendkeyboardevent",{"_index":711,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["sendkeyboardevent(key",{"_index":750,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sendkeyboardkey",{"_index":406,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["sendkeyboardkey(key",{"_index":456,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["sends",{"_index":752,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["separate",{"_index":4593,"title":{},"body":{"index.html":{}}}],["separated",{"_index":1081,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["serve",{"_index":3616,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["server",{"_index":1502,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["serves",{"_index":1880,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["service",{"_index":3504,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["set",{"_index":36,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["setactions(actions",{"_index":211,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["setconfig(config",{"_index":3969,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["setconfig(val",{"_index":2370,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["setdisabled(disabled",{"_index":4010,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setdisabledstate",{"_index":801,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":833,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["setdropdownitemcontents(texticon",{"_index":2695,"title":{},"body":{"components/DropdownComponent.html":{}}}],["setdropdownmenu(dropdown",{"_index":2814,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["seterrormessage(val",{"_index":2927,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["setfilter",{"_index":3060,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["setfilter(filtertype",{"_index":3061,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["sethostposition(quadrant",{"_index":4008,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["sethosttext(text",{"_index":4012,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setinputvalue",{"_index":407,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetObject.html":{}}}],["setinputvalue(value",{"_index":458,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setinputvalueunit",{"_index":3751,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setinputvalueunit(unit",{"_index":3766,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setitems(items",{"_index":2698,"title":{},"body":{"components/DropdownComponent.html":{}}}],["sets",{"_index":763,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["setselectedentities(entities",{"_index":213,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["setsize(size",{"_index":3577,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["setstyle",{"_index":4464,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setstyle(el",{"_index":1373,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["setstyle(this.hostelement",{"_index":1406,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["setstyle(tip.container",{"_index":1289,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setstyle(tip.content",{"_index":1336,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setter",{"_index":2360,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{}}}],["settimeout",{"_index":1265,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":1870,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setunit(val",{"_index":2516,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptions(val",{"_index":2513,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptionstonone",{"_index":3752,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setunitoptionstopercent",{"_index":3753,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setvalue",{"_index":2325,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(value",{"_index":2364,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(values",{"_index":2426,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["setvcdcomponentrendereroutlet(renderer",{"_index":1905,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["setwidth(width",{"_index":4006,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["shape",{"_index":3179,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["share",{"_index":588,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["shared",{"_index":1260,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["shift",{"_index":2829,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["shift+shift",{"_index":3853,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["shortcut",{"_index":4103,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["shouldappend",{"_index":459,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["shoulddisplaycontextualactionsinrow",{"_index":1629,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shoulddisplaycontextualactionsontop",{"_index":1625,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldfillparent",{"_index":1619,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldsanitize",{"_index":1936,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["shouldsanitize)).join",{"_index":1992,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldsanitize)).join('\\n",{"_index":1962,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldshowactionbarontop",{"_index":1588,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowbubbles",{"_index":2241,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["shouldshowicon",{"_index":2641,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["shouldshowpagenumberinput",{"_index":1512,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagesizeselector",{"_index":1511,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowtext",{"_index":2642,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["shouldshowtooltip",{"_index":2643,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["show",{"_index":627,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["show/hide",{"_index":1770,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["showasterisk",{"_index":805,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["showcases",{"_index":4605,"title":{},"body":{"index.html":{}}}],["showclippedtextdirective",{"_index":701,"title":{"directives/ShowClippedTextDirective.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["showclippedtextdirective.instancecount",{"_index":1397,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["showclippedtextdirectivemodule",{"_index":2744,"title":{"modules/ShowClippedTextDirectiveModule.html":{}},"body":{"modules/DropdownModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["showclippedtextdirectivetesthelper",{"_index":3974,"title":{"classes/ShowClippedTextDirectiveTestHelper.html":{}},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["showclippedtextdirectivetesthostcomponent",{"_index":689,"title":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["showerrors",{"_index":807,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["showing",{"_index":1089,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["shown",{"_index":132,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/enumerations.html":{}}}],["shows",{"_index":21,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["showsectiontitle(searchsection",{"_index":3948,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["showspinner",{"_index":3551,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["showunlimitedoption",{"_index":3379,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["side",{"_index":1951,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["signature",{"_index":3407,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{},"contributing.html":{}}}],["signed",{"_index":4312,"title":{},"body":{"contributing.html":{}}}],["signpost",{"_index":3226,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["simplifying",{"_index":1432,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["simply",{"_index":4375,"title":{},"body":{"contributing.html":{}}}],["single",{"_index":87,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CypressWidgetFinder.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["singlechilditem",{"_index":2726,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["singlechilditemindices",{"_index":2717,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["singlechilditemindices.foreach(singlechilditemindex",{"_index":2722,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["singlechilditemindices.push(index",{"_index":2721,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["singleselected",{"_index":1657,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["singleton",{"_index":1256,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["singleunitdisplaytext",{"_index":3760,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sit",{"_index":1638,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["site",{"_index":1119,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["sixty",{"_index":2557,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["size",{"_index":1103,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["size(size",{"_index":3579,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sized",{"_index":3558,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizes",{"_index":3563,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sizes.md",{"_index":3573,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizing",{"_index":3565,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["skip",{"_index":3928,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["skipself",{"_index":2822,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["sm",{"_index":1251,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["sm(small",{"_index":3564,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["smaller",{"_index":1506,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["smooth",{"_index":2632,"title":{},"body":{"classes/DomUtil.html":{}}}],["somerecord.property",{"_index":1067,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["something",{"_index":3132,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sortable",{"_index":1106,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sortcolumn",{"_index":1532,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorted",{"_index":1182,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["sortedcolumn",{"_index":1487,"title":{"interfaces/SortedColumn.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["sorting",{"_index":1063,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorting/filtering",{"_index":1072,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sound",{"_index":1641,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"modules/DropdownModule.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"modules/VcdLoadingIndicatorModule.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["space",{"_index":844,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["spaces",{"_index":1997,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["spdx",{"_index":2752,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["spec",{"_index":1710,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["special",{"_index":2018,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["specific",{"_index":271,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["specification",{"_index":1055,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["specifications",{"_index":2402,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["specified",{"_index":2401,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{}}}],["specifies",{"_index":1643,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["specify",{"_index":3613,"title":{},"body":{"directives/MinMaxValidator.html":{},"miscellaneous/variables.html":{}}}],["specs",{"_index":545,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["spinner",{"_index":691,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractivityreportercomponent",{"_index":690,"title":{"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["spinneractivityreporterwidgetobject",{"_index":4080,"title":{"classes/SpinnerActivityReporterWidgetObject.html":{}},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["spinners",{"_index":3561,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["spinnersize",{"_index":3556,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/typealiases.html":{}}}],["splitproperty",{"_index":3734,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["splitproperty.length",{"_index":3736,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["spotlight",{"_index":219,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchcomponent",{"_index":187,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"coverage.html":{},"overview.html":{}}}],["spotlightsearchmodule",{"_index":4090,"title":{"modules/SpotlightSearchModule.html":{}},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["spotlightsearchprovider",{"_index":160,"title":{"interfaces/SpotlightSearchProvider.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["spotlightsearchprovider}spotlightsearchprovider",{"_index":3860,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["spotlightsearchresult",{"_index":196,"title":{"interfaces/SpotlightSearchResult.html":{}},"body":{"classes/ActionSearchProvider.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchresulttype",{"_index":3845,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchservice",{"_index":3513,"title":{"injectables/SpotlightSearchService.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["spotlightsearchservice}spotlightsearchservice",{"_index":3859,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["squash",{"_index":4372,"title":{},"body":{"contributing.html":{}}}],["stackblitz/sdk",{"_index":4513,"title":{},"body":{"dependencies.html":{}}}],["stale",{"_index":1735,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["start",{"_index":735,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["startactivity",{"_index":337,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["started",{"_index":4301,"title":{"contributing.html":{},"index.html":{}},"body":{}}],["starting",{"_index":366,"title":{},"body":{"classes/ActivityReporter.html":{},"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["starts",{"_index":1999,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["start}${input}${end",{"_index":2607,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["state",{"_index":190,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["state.filters",{"_index":1760,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.filters.map((filter",{"_index":1762,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page",{"_index":1757,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.current",{"_index":1758,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.size",{"_index":1759,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort",{"_index":1764,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.by",{"_index":1766,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.reverse",{"_index":1768,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["statements",{"_index":4396,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":25,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["static/featured",{"_index":11,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["static_featured",{"_index":37,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["staticactionstyling",{"_index":16,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["statically",{"_index":4615,"title":{},"body":{"index.html":{}}}],["status",{"_index":286,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["staying",{"_index":4356,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":4345,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["still",{"_index":3153,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["stop",{"_index":2063,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["store",{"_index":819,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["stored",{"_index":3257,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["strictmetadataemit",{"_index":2835,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["strictnullchecks",{"_index":3154,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["string",{"_index":73,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(index",{"_index":1709,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["string(value",{"_index":497,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["strings",{"_index":2306,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["striving",{"_index":4339,"title":{},"body":{"contributing.html":{}}}],["structure",{"_index":1258,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":1374,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DomUtil.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":1403,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["styleurls",{"_index":1542,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["styling",{"_index":135,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/FormCheckboxComponent.html":{}}}],["sub",{"_index":45,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["subclass",{"_index":569,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subclasses",{"_index":3106,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subject",{"_index":2340,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["submit",{"_index":4331,"title":{},"body":{"contributing.html":{}}}],["subscribable",{"_index":3464,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe",{"_index":2059,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe(observable",{"_index":3450,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribes",{"_index":3454,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription",{"_index":3458,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription.unsubscribe",{"_index":3480,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptions",{"_index":3463,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptiontracker",{"_index":1455,"title":{"classes/SubscriptionTracker.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["subscriptiontracker(this",{"_index":1672,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["substracting",{"_index":1803,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["subtext",{"_index":2551,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["subtracker",{"_index":1671,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["succeeded",{"_index":293,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["succeeds",{"_index":291,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["success",{"_index":289,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/CypressWidgetDriver.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["successmessage",{"_index":280,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["sucesss",{"_index":303,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["sucesstext",{"_index":712,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["such",{"_index":2082,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"directives/DynamicDropdownPositionDirective.html":{},"miscellaneous/variables.html":{}}}],["super(controldirective",{"_index":3206,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["super(filtercontainer",{"_index":2455,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["super(ngcontrol",{"_index":3307,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["super(promiseresolver",{"_index":641,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["supply",{"_index":1602,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["support",{"_index":1076,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"modules.html":{}}}],["supported",{"_index":329,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["supports",{"_index":3210,"title":{},"body":{"components/FormInputComponent.html":{}}}],["suppress",{"_index":2834,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["sure",{"_index":570,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":4681,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2568,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sync",{"_index":4357,"title":{},"body":{"contributing.html":{}}}],["syntax",{"_index":4390,"title":{},"body":{"contributing.html":{}}}],["system",{"_index":3509,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["t",{"_index":57,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tab",{"_index":2001,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":4503,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4502,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4665,"title":{},"body":{"index.html":{}}}],["tag(npm",{"_index":4663,"title":{},"body":{"index.html":{}}}],["tagname",{"_index":578,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagname`on",{"_index":3158,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagnameon",{"_index":3167,"title":{},"body":{"interfaces/FindableWidget.html":{}}}],["take",{"_index":263,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"directives/MinMaxValidator.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{}}}],["takes",{"_index":282,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["task",{"_index":2270,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tb",{"_index":1131,"title":{},"body":{"classes/Bytes.html":{}}}],["tbase",{"_index":995,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["team",{"_index":4304,"title":{},"body":{"contributing.html":{}}}],["technically",{"_index":3149,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["template",{"_index":596,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["templateoptions",{"_index":4235,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["templateref",{"_index":1084,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["templates",{"_index":4243,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["templateurl",{"_index":607,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["test",{"_index":2065,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["test:components",{"_index":4630,"title":{},"body":{"index.html":{}}}],["test:i18n",{"_index":4631,"title":{},"body":{"index.html":{}}}],["testbed",{"_index":546,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testbed.configuretestingmodule",{"_index":3075,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testbed.createcomponent(arg",{"_index":554,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["testbed.createcomponent(componentconstructor",{"_index":3163,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testhostcomponent",{"_index":3057,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testing",{"_index":913,"title":{},"body":{"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/DataExporterWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["testinput",{"_index":3087,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":587,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tests's",{"_index":551,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["text",{"_index":210,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["text').length",{"_index":4054,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["text.directive",{"_index":1019,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["text.directive.module",{"_index":2762,"title":{},"body":{"modules/DropdownModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["text.directive.module.ts",{"_index":3973,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{}}}],["text.directive.test",{"_index":3975,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["text.directive.ts",{"_index":1234,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["text.directive.ts:222",{"_index":3964,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:225",{"_index":3957,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:244",{"_index":3965,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:245",{"_index":3968,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:246",{"_index":3963,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:251",{"_index":3956,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:255",{"_index":3962,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:261",{"_index":3958,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:274",{"_index":3961,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:280",{"_index":3959,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:288",{"_index":3966,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:299",{"_index":3967,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:303",{"_index":3960,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.trim",{"_index":2103,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["text/csv;charset=utf",{"_index":1965,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["text2",{"_index":4059,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textarea",{"_index":764,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textcontent",{"_index":3148,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textextractor",{"_index":976,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"miscellaneous/functions.html":{}}}],["textextractor(record",{"_index":978,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["texticon",{"_index":142,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["texticon.icon",{"_index":2687,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["texticon.text",{"_index":2683,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["texting",{"_index":4065,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textinput",{"_index":3216,"title":{},"body":{"components/FormInputComponent.html":{}}}],["textkey",{"_index":76,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["textoverflow",{"_index":1410,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["texts.map(text",{"_index":2106,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["then(result",{"_index":313,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["thing",{"_index":2012,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["thirty",{"_index":2555,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this._actions",{"_index":226,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns",{"_index":1551,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.push(col",{"_index":1696,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.splice(colindex",{"_index":1698,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns[colindex",{"_index":1695,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._config",{"_index":2387,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.queryfield",{"_index":2399,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.value",{"_index":2388,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._dropdownitemcontents",{"_index":2706,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this._errormessage",{"_index":2929,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this._height",{"_index":1613,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._isrequestpending",{"_index":2213,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._items",{"_index":2708,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this._multiplier",{"_index":1213,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._open",{"_index":2202,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this._pagination",{"_index":1604,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.pagesizeoptions",{"_index":1605,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagenumberinput",{"_index":1607,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagesizeselector",{"_index":1606,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._progress",{"_index":2215,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._searchcriteria",{"_index":3878,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this._selectedentities",{"_index":230,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this._selectiontype",{"_index":1577,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._size",{"_index":3581,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this._unit",{"_index":2528,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this._unitname",{"_index":1214,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._unitoptions",{"_index":2522,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.actionreporter",{"_index":1585,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actionreporter.monitorget(actionhandlerresponse",{"_index":1586,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.filter",{"_index":1601,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.length",{"_index":1589,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.some",{"_index":1594,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.activate",{"_index":1389,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.addwildcard(value",{"_index":2605,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.assert('be.checked",{"_index":2094,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.assert('be.disabled",{"_index":2090,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.assert('be.visible",{"_index":2088,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.assert('not.be.visible",{"_index":2089,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.assignvalue(renderer.rendererspec.config",{"_index":1914,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.attachrenderer",{"_index":1913,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.bestunit",{"_index":3665,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestunit.getmultiplier",{"_index":3643,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestvalue",{"_index":3641,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.buildpartial",{"_index":3020,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.calculatepagesize",{"_index":1785,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.cfr.resolvecomponentfactory(this.componenttype",{"_index":1918,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.changedetectorref.detectchanges",{"_index":1574,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["this.changes.next",{"_index":2395,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.clearinputvalue(cssselector",{"_index":494,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/CypressWidgetDriver.html":{}}}],["this.clearselectioninformation",{"_index":1579,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.click('.cancel",{"_index":2317,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.dropdown",{"_index":2319,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.export",{"_index":2318,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click(`.column",{"_index":2313,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.closed",{"_index":2931,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.clrdatagrid.getcell(row",{"_index":998,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.column.filter",{"_index":3093,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["this.columns",{"_index":2239,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.filter(col",{"_index":2243,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.findindex(column",{"_index":1700,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columns.reduce((previousvalue",{"_index":2247,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columnsconfig",{"_index":1704,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columnsupdated.emit",{"_index":1554,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.combooptions.find",{"_index":3671,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptions.push(combooption",{"_index":3626,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(displaycombounit",{"_index":3699,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(selectedcombounit",{"_index":3678,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(this.unitdropdown.selectedoption",{"_index":3692,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.set(combooption",{"_index":3624,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.component.displayvalue",{"_index":3793,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.errortext",{"_index":775,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.formcontrol",{"_index":3792,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions",{"_index":3797,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions').value",{"_index":3801,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('limited",{"_index":3796,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('unlimited",{"_index":3795,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.inputvalueunit",{"_index":3800,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.running",{"_index":774,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.selectedunit",{"_index":3798,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.successmessage",{"_index":776,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.component.unitoptions",{"_index":3802,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.componentinstance.directive.mouseoutdelay",{"_index":3994,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.disabled",{"_index":4037,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div.nativeelement",{"_index":3996,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div2.nativeelement",{"_index":3998,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.text",{"_index":4039,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentref",{"_index":1912,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance",{"_index":1920,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance.config",{"_index":1921,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componenttype",{"_index":1907,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.computebestunitandvalue(this.initialvalue",{"_index":3638,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.computebestunitandvalue(value",{"_index":3662,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.condition(operators.eq",{"_index":3039,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.ge",{"_index":3044,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.gt",{"_index":3043,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.le",{"_index":3042,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.lt",{"_index":3041,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.neq",{"_index":3040,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.config",{"_index":2603,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.config.customfiql",{"_index":2579,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.options.find(option",{"_index":2574,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.wildcardposition",{"_index":2604,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.contentareaelement",{"_index":2861,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.contentareaelement.getboundingclientrect",{"_index":2872,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.contextualactionposition",{"_index":1626,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.contextualactions.length",{"_index":1599,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.createformgroup",{"_index":2342,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.csvexporterservice.createcsv(data",{"_index":2274,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.csvexporterservice.downloadcsvfile(csvfile",{"_index":2275,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.currentoperator",{"_index":3023,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.dataexportrequest.emit",{"_index":2227,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.datagrid",{"_index":1750,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.change.subscribe",{"_index":1844,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.items.displayed.length",{"_index":1845,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows",{"_index":1732,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows.notifyonchanges",{"_index":1733,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selected",{"_index":1751,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.clearselection",{"_index":1725,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.current",{"_index":1622,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.currentsingle",{"_index":1621,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.setselected(found",{"_index":1726,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.updatecurrent(nextselection",{"_index":1731,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.singleselected",{"_index":1752,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection.length",{"_index":1628,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.deactivate",{"_index":1388,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.defaultspinnersize",{"_index":3559,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this.detachrenderer",{"_index":1916,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.detailcomponent",{"_index":1712,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detailpane.component",{"_index":1714,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detectchanges",{"_index":3140,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.disabled",{"_index":886,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.dismissed.next",{"_index":2933,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.document.body.classlist.contains(no_scrolling_classname",{"_index":2860,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.document.body.queryselector(content_area_selector",{"_index":2862,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dosearch",{"_index":3880,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.downloaddata(rows",{"_index":2264,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.downloadingmessage",{"_index":2226,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.driver.check(cssselector",{"_index":937,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.classes(cssselector",{"_index":936,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.clearinputvalue(cssselector",{"_index":942,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.click(cssselector",{"_index":935,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.disabled(cssselector",{"_index":932,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.exists(cssselector",{"_index":931,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.find(params",{"_index":930,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.getchecked(cssselector",{"_index":938,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.getinputvalue(cssselector",{"_index":945,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.getinputvalues(parentcssselector",{"_index":946,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.gettext(cssselector",{"_index":943,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.gettexts(parentcssselector",{"_index":944,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.hidden(cssselector",{"_index":934,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.select(option",{"_index":939,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.sendkeyboardkey(key",{"_index":940,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.setinputvalue(value",{"_index":941,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.driver.visible(cssselector",{"_index":933,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["this.dropdownitemcontents",{"_index":2688,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.dropdownmenuelement",{"_index":2843,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdownmenuelement.getboundingclientrect",{"_index":2848,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdownmenurect",{"_index":2847,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement",{"_index":2841,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.getboundingclientrect",{"_index":2846,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.queryselector('button.first",{"_index":2875,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerelement.queryselector('clr",{"_index":2844,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.dropdowntriggerrect",{"_index":2845,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.element",{"_index":2086,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.element.get(cssselector",{"_index":2111,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.elref.nativeelement",{"_index":2842,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.errorlabels",{"_index":882,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errorlabels.length",{"_index":881,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errormessagechange.emit",{"_index":2932,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.errortext",{"_index":644,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.exists(cssselector",{"_index":508,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.exportdata.bind(this",{"_index":2228,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.exportstage",{"_index":2225,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fb.group",{"_index":2573,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.filename",{"_index":2276,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.filter",{"_index":3085,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["this.filtercontainer.open",{"_index":2547,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.findcolumnindex(col",{"_index":1694,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.findelement('.progress.loop",{"_index":2311,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.findelement('.spinner",{"_index":4087,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.findelement('clr",{"_index":777,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.findelement('strong').nativeelement.textcontent",{"_index":1000,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.findelement(clrdatagridwidgetobject.tagname",{"_index":4215,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.findelement(cssselector",{"_index":3144,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findelement(cssselector).nativeelement",{"_index":3809,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.findelements(cssselector).map(el",{"_index":3146,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findwidgets(params",{"_index":577,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture",{"_index":552,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.componentinstance",{"_index":556,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.debugelement",{"_index":558,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.destroy",{"_index":4056,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.fixture.detectchanges",{"_index":477,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.flatlistofavailableactions",{"_index":227,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.flattenitemswithsinglechild(items",{"_index":2712,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.flattennesteditemswithsinglechild(item.children",{"_index":2716,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.flattennesteditemswithsinglechild(items",{"_index":2709,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.forcedropdownopen",{"_index":2255,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.format(value",{"_index":4147,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.formcontrol.enabled",{"_index":878,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.pristine",{"_index":879,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.valid",{"_index":880,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.value.tostring",{"_index":3310,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.formcontrolnamedirective",{"_index":876,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrolnamedirective.control",{"_index":877,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formgroup",{"_index":2251,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.addcontrol(option.value",{"_index":2461,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.controls[col.fieldname].value",{"_index":2244,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(selected",{"_index":2246,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(true",{"_index":2254,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].value",{"_index":2240,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.get('combounitoptions",{"_index":3659,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').disable",{"_index":3657,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').enable",{"_index":3704,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(value",{"_index":3702,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').value",{"_index":3676,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('filterselect').value",{"_index":2580,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.formgroup.get('filtertext').value",{"_index":2602,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.get('limited",{"_index":3645,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').disable",{"_index":3658,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').enable",{"_index":3705,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').value",{"_index":3669,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited",{"_index":3655,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').setvalue(false",{"_index":3660,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').value",{"_index":3656,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get(formcontrol).value",{"_index":2473,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(formfields.from).setvalue(null",{"_index":2536,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).setvalue(values[0",{"_index":2535,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).value",{"_index":2541,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(null",{"_index":2539,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(values[1",{"_index":2538,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).value",{"_index":2542,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(frmctrl",{"_index":2465,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(frmctrl).value).length",{"_index":2478,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.removecontrol(control",{"_index":2459,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.setvalue",{"_index":2578,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.valuechanges",{"_index":2393,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.formgroup.valuechanges.pipe(debouncetime(this.getdebouncetimems",{"_index":2392,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.friendlyfieldscontrol.value",{"_index":2259,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getactions(criteria.tolowercase",{"_index":234,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.getallunittypes",{"_index":1180,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getbasevalue(value",{"_index":1215,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getcolumnsconfig(this.columns",{"_index":1705,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdebouncetimems",{"_index":2391,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.getdebugelement(cssselector",{"_index":506,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement",{"_index":480,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement.checked",{"_index":484,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement.click",{"_index":476,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement.disabled",{"_index":507,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement.textcontent.trim",{"_index":500,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelement(cssselector).nativeelement.value",{"_index":504,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdebugelements(parentcssselector",{"_index":501,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.getdisplaynameforfield(fieldname",{"_index":2260,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getelement(cssselector",{"_index":2096,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.getelement(parentcssselector).children(cssselector",{"_index":2112,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["this.getflatlistofavailableactions(this._actions",{"_index":233,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.getnativeelement('.combo",{"_index":3810,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnativeelement('.single",{"_index":3811,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnodetext(el",{"_index":3147,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(element",{"_index":3145,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(this.findelement('strong",{"_index":999,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.getpagesize",{"_index":1815,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getpagesizeoptions",{"_index":1817,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getspinner",{"_index":4089,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.gettext('.readonly",{"_index":3794,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.gettext('h3",{"_index":4213,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.gettexts('.column",{"_index":2312,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.gridrefresh.emit(vcddgstate",{"_index":1769,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.handleitem(item",{"_index":3892,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleitem(this.selecteditem",{"_index":3901,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleopen(open",{"_index":3876,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.hascontextualactions",{"_index":1591,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.hasstaticactions",{"_index":1590,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height",{"_index":1615,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height}px",{"_index":1616,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.host.dispatchevent(new",{"_index":4041,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.nativeelement",{"_index":1394,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.host.style.position",{"_index":4033,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.style.width",{"_index":4031,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.hostcomponent",{"_index":555,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.id",{"_index":873,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.initialvalue",{"_index":3261,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit",{"_index":3680,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.findbestunit(value",{"_index":3666,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.getoutputvalue(value",{"_index":3667,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.internalsetinputvalue(this.getdebugelement(cssselector",{"_index":495,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.isactionavailable(currentaction",{"_index":247,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.isactiondisabled(action",{"_index":254,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.isdropdownopen",{"_index":2159,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.isinsidemodal",{"_index":2859,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.isloading",{"_index":1558,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isoverflowing",{"_index":1416,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.isreadonly",{"_index":3695,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.isrequestpending",{"_index":2238,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.items",{"_index":1559,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items).filter(item",{"_index":1730,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items)[0",{"_index":1724,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords([current",{"_index":1723,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords(current",{"_index":1729,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.max",{"_index":3610,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.maxfeaturedactionsonrow",{"_index":1681,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.min",{"_index":3608,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.mouseoutdelay",{"_index":1384,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.multiplier",{"_index":1217,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.multiselection",{"_index":1754,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement",{"_index":1793,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement.style.setproperty",{"_index":1617,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.onbeforesetconfig(val",{"_index":2386,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.onchange",{"_index":884,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.onchange(inputvalue",{"_index":3650,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.onchange(isodatevalue",{"_index":3275,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(parsefloat(value",{"_index":3272,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(this.value",{"_index":3653,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.onchange(value",{"_index":3271,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onmousein",{"_index":1400,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.onmouseout",{"_index":1401,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.ontouch",{"_index":885,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.ontransitionend",{"_index":1304,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.open",{"_index":2257,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this.openchange.emit(this._open",{"_index":3945,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.openchange.emit(value",{"_index":2203,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.options",{"_index":2456,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.options.find(option",{"_index":3308,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.optionsformgroup.get(useroptions.friendlynames",{"_index":2236,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.sanitize",{"_index":2234,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.selectall",{"_index":2232,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.pagesize",{"_index":1814,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagesizeoptions",{"_index":1816,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesize",{"_index":1784,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesizeoptions.map(size",{"_index":1787,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.rowheight",{"_index":1802,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.paginationcomponent.currentpage",{"_index":1776,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.parent",{"_index":3017,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.buildpartial()}${this.result",{"_index":3054,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.clear",{"_index":3053,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.currentoperator",{"_index":3025,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.result",{"_index":3026,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parentdropdown",{"_index":2891,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.parentdropdown.dropdownmenuelement.getboundingclientrect",{"_index":2893,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.positionleft",{"_index":2851,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.positiontop",{"_index":2850,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.prefix",{"_index":3497,"title":{},"body":{"classes/IdGenerator.html":{}}}],["this.promiseresolver",{"_index":368,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.registrations.findindex(data",{"_index":3524,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.map(data",{"_index":3539,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.push(registrationdata",{"_index":3529,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(index",{"_index":3537,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(insertindex",{"_index":3528,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.reporterror(item.response.error",{"_index":381,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reporterror(response.response.error",{"_index":372,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response.response.success",{"_index":373,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response[0].response.success",{"_index":382,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.resetposition(this.dropdownmenuelement",{"_index":2849,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["this.result",{"_index":3027,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.root",{"_index":475,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.root.query(by.css(cssselector",{"_index":509,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.root.query(by.css(parentcssselector",{"_index":511,"title":{},"body":{"classes/AngularWidgetDriver.html":{}}}],["this.running",{"_index":642,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.sanitizecontrol.value",{"_index":2265,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.searchcriteria",{"_index":3911,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchid",{"_index":3905,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.focus",{"_index":3943,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.select",{"_index":3944,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections",{"_index":3923,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach(async",{"_index":3910,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach(searchsection",{"_index":3907,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.reduce((acc",{"_index":3937,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.secondhost.dispatchevent(new",{"_index":4043,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.selectallcontrol.value",{"_index":2242,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedcolumns",{"_index":2230,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selecteditem",{"_index":3900,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectedunit",{"_index":3805,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.selectfirst(false",{"_index":3934,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectfirst(true",{"_index":3918,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(false",{"_index":3898,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(true",{"_index":3896,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.setvalue(this._config.value",{"_index":2389,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.shoulddisplaycontextualactionsontop",{"_index":1592,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldshowactionbarontop",{"_index":1808,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldshowicon",{"_index":2703,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.shouldshowtext",{"_index":2704,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.shouldshowtooltip",{"_index":2705,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["this.showunlimitedoption",{"_index":3639,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.singleselected",{"_index":1753,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.startactivity",{"_index":367,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.styling",{"_index":3204,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["this.subscriptions",{"_index":3487,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.foreach(subscription",{"_index":3486,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.indexof(subscription",{"_index":3482,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.push(subscription",{"_index":3479,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.splice(indexofsubscription",{"_index":3485,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptiontracker.subscribe(columndropdown.toggleservice.openchange",{"_index":2157,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.subscriptiontracker.subscribe(obs",{"_index":2394,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.subscriptiontracker.subscribe(this.selectallcontrol.valuechanges",{"_index":2253,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.successmessage",{"_index":643,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.textinput",{"_index":3262,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.textinput.nativeelement.value",{"_index":3266,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.to.errorlabels",{"_index":3372,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{}}}],["this.to.hintposition",{"_index":3371,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.max",{"_index":3369,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.min",{"_index":3368,"title":{},"body":{"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.onenterclicked",{"_index":3373,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onenterclicked(this.field",{"_index":3374,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onescapeclicked",{"_index":3375,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.onescapeclicked(this.field",{"_index":3376,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.options",{"_index":3404,"title":{},"body":{"components/FormlySelectComponent.html":{}}}],["this.to.showunlimitedoption",{"_index":3397,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.to.type",{"_index":3370,"title":{},"body":{"components/FormlyInputComponent.html":{}}}],["this.to.unlimitedvalue",{"_index":3398,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{}}}],["this.tooltip",{"_index":4046,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.dispatchevent(new",{"_index":4044,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.queryselector('.tooltip",{"_index":4057,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.style.opacity",{"_index":4047,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.classlist",{"_index":4049,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.innertext",{"_index":4048,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.offsetwidth",{"_index":4040,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.style.visibility",{"_index":4055,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipsize",{"_index":1338,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.totalitems",{"_index":1561,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(itemindex",{"_index":1747,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(selectedindex",{"_index":1748,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.tracker.subscribe(this.formgroup.get('combounitoptions').valuechanges",{"_index":3652,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('limited').valuechanges",{"_index":3654,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('unlimited').valuechanges",{"_index":3644,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.unsubscribeall",{"_index":3703,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate('unlimited",{"_index":3689,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate(outputunit.getvaluewithunittranslationkey",{"_index":4145,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.translationservice.translateasync('vcd.cc.cancel",{"_index":2169,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.data",{"_index":2165,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export",{"_index":2175,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export.all",{"_index":2171,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.downloading",{"_index":2196,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.writing",{"_index":2199,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.hint",{"_index":2187,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.info",{"_index":2184,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.question",{"_index":2182,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.loading",{"_index":618,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.translationservice.translateasync('vcd.cc.no",{"_index":2179,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.hint",{"_index":2191,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.info",{"_index":2193,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.question",{"_index":2189,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.select.columns",{"_index":2173,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.yes",{"_index":2177,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync(this.paginationtranslationkey",{"_index":1779,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.ts.translate(currentaction.textkey",{"_index":250,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["this.type",{"_index":3264,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.unit",{"_index":2523,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.unitdropdown",{"_index":3690,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformattter.bestformat(value",{"_index":3693,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformcontrol.setvalue(this.component.unitoptions[0].getmultiplier",{"_index":3808,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.unitoptions",{"_index":2524,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions.foreach(unitoption",{"_index":3620,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitoptions.length",{"_index":2525,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions[0",{"_index":2526,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unlimitedvalue",{"_index":3668,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unsubscribeall",{"_index":3476,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.updatecolumnsconfig",{"_index":1553,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updatepagination",{"_index":1608,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateprogress.bind(this",{"_index":2229,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.updateselecteditems",{"_index":1575,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateuidisabledstate(inputvalue",{"_index":3651,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.updateuidisabledstate(value",{"_index":3663,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.value",{"_index":3649,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.viewcontainerref.createcomponent(componentfactory",{"_index":1919,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewcontainerref.remove",{"_index":1923,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewinitted",{"_index":1573,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.wrap",{"_index":3028,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.writevalue(this.initialvalue",{"_index":3270,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.writingmessage",{"_index":2267,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["those",{"_index":2323,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{}}}],["thousands",{"_index":1221,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["thousandsunit",{"_index":1126,"title":{"classes/ThousandsUnit.html":{}},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["thousandsunit:105",{"_index":1185,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:11",{"_index":1163,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:12",{"_index":1164,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:24",{"_index":1189,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:28",{"_index":1193,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:37",{"_index":1192,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:45",{"_index":1188,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:54",{"_index":1200,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:61",{"_index":1194,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:71",{"_index":1186,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:89",{"_index":1172,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["three",{"_index":3562,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["through",{"_index":206,"title":{},"body":{"classes/ActionSearchProvider.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["throw",{"_index":583,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thrown",{"_index":2211,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["throws",{"_index":574,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thz",{"_index":3422,"title":{},"body":{"classes/Hertz.html":{}}}],["time",{"_index":1235,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["timer",{"_index":1264,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":3130,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tip",{"_index":1257,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tip.clearhidetimeout",{"_index":1306,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container",{"_index":1284,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.appendchild(tip.content",{"_index":1293,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.classlist.add('tooltip",{"_index":1286,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.opacity",{"_index":1313,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.visibility",{"_index":1319,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content",{"_index":1287,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.addeventlistener('transitionend",{"_index":1298,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add('tooltip",{"_index":1288,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add(tip.calculateposition(rect",{"_index":1340,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.remove(tl",{"_index":1339,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.innerhtml",{"_index":1341,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.removeeventlistener('transitionend",{"_index":1303,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.opacity",{"_index":1314,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.visibility",{"_index":1320,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.create",{"_index":1398,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.currentdirective",{"_index":1315,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.hostelement",{"_index":1274,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.mouseoutdelay",{"_index":1283,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.tooltipsize",{"_index":1276,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currenthost",{"_index":1324,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.destroy",{"_index":1414,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetimeout",{"_index":1310,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.hidetooltip(this.mouseoutdelay",{"_index":1418,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetooltip(tip.mouseoutdelay",{"_index":1308,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ismouseover",{"_index":1312,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseenter",{"_index":1296,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseleave",{"_index":1297,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend",{"_index":1299,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend(event",{"_index":1429,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.update",{"_index":1417,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["title",{"_index":136,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tl",{"_index":1244,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["to]).getstring",{"_index":2546,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["todo",{"_index":1075,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/variables.html":{}}}],["together",{"_index":3854,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["toggle",{"_index":1026,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["toggler",{"_index":1069,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toggleswitch",{"_index":3203,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":1064,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toinput",{"_index":2488,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["tooltip",{"_index":1239,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipcontent",{"_index":3991,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipcount",{"_index":3989,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipposition",{"_index":1243,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.bl",{"_index":1360,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.br",{"_index":1362,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tl",{"_index":1359,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tr",{"_index":1361,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition[key",{"_index":4052,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipsize",{"_index":1238,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipsize.md",{"_index":1391,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tooltiptext",{"_index":3988,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipvisibility",{"_index":3990,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["top",{"_index":1044,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":4323,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["topmost",{"_index":3921,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["tosubscriber",{"_index":3465,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["total",{"_index":1050,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["totalitems",{"_index":1486,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["touch",{"_index":825,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["tr",{"_index":1246,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["trackby",{"_index":1567,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trackbyfunction",{"_index":1444,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["tracker",{"_index":3471,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"classes/SubscriptionTracker.html":{}}}],["tracker.ts",{"_index":3447,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["tracker.ts:18",{"_index":3453,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:28",{"_index":3460,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:33",{"_index":3462,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:40",{"_index":4110,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:53",{"_index":4112,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:64",{"_index":4113,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:74",{"_index":4114,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["transform",{"_index":2805,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{},"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transform(item",{"_index":3415,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transformed",{"_index":1057,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["transitionend",{"_index":4708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":2482,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["translated",{"_index":72,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["translatex/y",{"_index":2806,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["translating",{"_index":1669,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["translation",{"_index":1195,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["translationkey",{"_index":3330,"title":{},"body":{"classes/FormValidators.html":{}}}],["translationservice",{"_index":173,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["translationservice.translate",{"_index":4693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["translationservice.translateasync",{"_index":4694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tree",{"_index":598,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tried",{"_index":2271,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tries",{"_index":1721,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trigger",{"_index":760,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["triggercomputedstyles",{"_index":2882,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["triggered",{"_index":761,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["true",{"_index":99,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdFormlyModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":1087,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"contributing.html":{}}}],["trying",{"_index":1219,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["ts",{"_index":178,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["tsdoc",{"_index":4337,"title":{},"body":{"contributing.html":{}}}],["tsickle",{"_index":4547,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":4549,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":992,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["tslint:enable:directive",{"_index":3607,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["turn",{"_index":264,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["turned",{"_index":1988,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["turns",{"_index":284,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["two",{"_index":2918,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/FormlyInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(${index",{"_index":2315,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["typealiases",{"_index":4687,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":2110,"title":{},"body":{"classes/CypressWidgetDriver.html":{}}}],["typeof",{"_index":1765,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["types",{"_index":1132,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":566,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["typically",{"_index":3127,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["typing",{"_index":4099,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["u00a0",{"_index":839,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ui",{"_index":322,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unamed",{"_index":3406,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{}}}],["undefined",{"_index":292,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":122,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["underneath",{"_index":2890,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["understand",{"_index":973,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["understands",{"_index":262,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["unique",{"_index":79,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":682,"title":{"classes/Unit.html":{}},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unit(val",{"_index":2527,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["unit.gb",{"_index":4139,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.getmultiplier",{"_index":3799,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unit.kb",{"_index":4137,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.mb",{"_index":4138,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit:11",{"_index":1165,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:12",{"_index":1166,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:24",{"_index":1205,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:28",{"_index":1207,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:37",{"_index":1206,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:45",{"_index":1204,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:54",{"_index":1209,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:61",{"_index":1208,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:71",{"_index":1203,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unitdropdown",{"_index":3618,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformatter",{"_index":3603,"title":{"injectables/UnitFormatter.html":{}},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{}}}],["unitformattter",{"_index":3634,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformcontrol",{"_index":3757,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unitlist",{"_index":3831,"title":{},"body":{"classes/Percent.html":{}}}],["unitname",{"_index":1196,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["unitnametranslationkeyprefix",{"_index":1133,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["unitoption",{"_index":3625,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getmultiplier",{"_index":3623,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getunitname",{"_index":3622,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions",{"_index":2490,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/functions.html":{}}}],["unitoptions(unitoptions",{"_index":3619,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions(val",{"_index":2521,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["units",{"_index":1176,"title":{},"body":{"classes/Bytes.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["unittranslationkey",{"_index":3820,"title":{},"body":{"classes/Percent.html":{}}}],["unittypes",{"_index":1224,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["unknown",{"_index":828,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{}}}],["unless",{"_index":1570,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unlimited",{"_index":3393,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unlimitedformcontrol",{"_index":3755,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unlimitedvalue",{"_index":3380,"title":{},"body":{"components/FormlyNumberWithUnitInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["unregister",{"_index":3531,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider",{"_index":4105,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider(registrationid",{"_index":3535,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregistration",{"_index":3532,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unset",{"_index":140,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unspecificed",{"_index":1610,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unsubscribe",{"_index":2064,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribe(subscription",{"_index":3459,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribeall",{"_index":3449,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribes",{"_index":3461,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["until",{"_index":4073,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["untracked",{"_index":3484,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unwatchevents",{"_index":4465,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(el",{"_index":1370,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(this.hostelement",{"_index":1413,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["unwatchevents(tip.container",{"_index":1302,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":22,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["update",{"_index":1321,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["updatecolumnsconfig",{"_index":1703,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updated",{"_index":726,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["updatepagination",{"_index":1813,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateprogress",{"_index":2122,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updateprogress(progress",{"_index":2278,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updates",{"_index":1544,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateselecteditems",{"_index":1719,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateuidisabledstate(value",{"_index":3681,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["updating",{"_index":1572,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["upon",{"_index":1555,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["upper",{"_index":2983,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["upstream",{"_index":4358,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1975,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["url.createobjecturl(blob",{"_index":1976,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["urn",{"_index":2948,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["usage",{"_index":954,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":343,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":3076,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["used",{"_index":115,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/AngularWidgetFinder.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":3597,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["user",{"_index":108,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/variables.html":{}}}],["useroptions",{"_index":2139,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["useroptions.friendlynames",{"_index":2221,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.sanitize",{"_index":2222,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.selectall",{"_index":2219,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["users",{"_index":2771,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["uses",{"_index":915,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/WidgetDriver.html":{}}}],["usevalue",{"_index":3077,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdFormlyModule.html":{}}}],["using",{"_index":111,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/WidgetDriver.html":{},"contributing.html":{},"index.html":{}}}],["utf",{"_index":3233,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["util",{"_index":3844,"title":{},"body":{"interfaces/SearchSection.html":{},"injectables/UnitFormatter.html":{}}}],["util.ts",{"_index":1848,"title":{},"body":{"classes/CommonUtil.html":{},"classes/DomUtil.html":{},"coverage.html":{}}}],["util.ts:12",{"_index":1856,"title":{},"body":{"classes/CommonUtil.html":{}}}],["util.ts:19",{"_index":2618,"title":{},"body":{"classes/DomUtil.html":{}}}],["util.ts:22",{"_index":1852,"title":{},"body":{"classes/CommonUtil.html":{}}}],["utility",{"_index":1108,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":221,"title":{},"body":{"classes/ActionSearchProvider.html":{}}}],["utils.ts",{"_index":3056,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["utils.ts:102",{"_index":3069,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:110",{"_index":3067,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:112",{"_index":3070,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:119",{"_index":3063,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils/dom",{"_index":3843,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["utils/filter",{"_index":2447,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/id",{"_index":865,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/test",{"_index":3790,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["utils/test/datagrid/vcd",{"_index":984,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["utils/test/widget",{"_index":986,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{}}}],["utils/unit/unit",{"_index":2518,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{}}}],["ux",{"_index":784,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["v",{"_index":1114,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["v.results",{"_index":3939,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["v[0",{"_index":4670,"title":{},"body":{"index.html":{}}}],["val",{"_index":838,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{}}}],["validate",{"_index":3599,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validate(control",{"_index":3601,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validates",{"_index":3324,"title":{},"body":{"classes/FormValidators.html":{}}}],["validation",{"_index":862,"title":{},"body":{"classes/BaseFormControl.html":{},"directives/MinMaxValidator.html":{}}}],["validationerrors",{"_index":3602,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validations",{"_index":3319,"title":{},"body":{"classes/FormValidators.html":{}}}],["validator",{"_index":3326,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validator(control",{"_index":3338,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorfn",{"_index":3328,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators",{"_index":3318,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators.compose(validators)(control",{"_index":3612,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.max(this.max",{"_index":3611,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.min(this.min",{"_index":3609,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.required(control",{"_index":3337,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorunlimited",{"_index":3636,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value",{"_index":179,"title":{},"body":{"classes/ActionSearchProvider.html":{},"classes/AngularWidgetDriver.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":3700,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value.tostring(10",{"_index":3263,"title":{},"body":{"components/FormInputComponent.html":{}}}],["value[nestedprop",{"_index":3740,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["valueformcontrol",{"_index":3756,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["values",{"_index":2352,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"pipes/FunctionRendererPipe.html":{},"miscellaneous/functions.html":{}}}],["values.foreach(frmctrl",{"_index":2463,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["values[0",{"_index":2534,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["values[1",{"_index":2537,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["valuewithunittranslationkey",{"_index":3821,"title":{},"body":{"classes/Percent.html":{}}}],["valuewithunittranslationkeyprefix",{"_index":1134,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["var",{"_index":649,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["variable",{"_index":3258,"title":{},"body":{"components/FormInputComponent.html":{},"coverage.html":{}}}],["variables",{"_index":4695,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1523,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcd",{"_index":606,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.action.menu.actions",{"_index":2665,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{}}}],["vcd.cc.action.provider.section.title",{"_index":224,"title":{},"body":{"classes/ActionSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.cpu.speed.unit",{"_index":3440,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.display.percent",{"_index":3825,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.filesize.unit",{"_index":1161,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.grid.default.pagination",{"_index":1476,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.units.bytes",{"_index":1159,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.units.hertz",{"_index":3438,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.units.percent",{"_index":3824,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.warning.numrange",{"_index":3335,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["vcd/i18n",{"_index":217,"title":{},"body":{"classes/ActionSearchProvider.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"modules/DropdownModule.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["vcd/route",{"_index":4614,"title":{},"body":{"index.html":{}}}],["vcd/ui",{"_index":4596,"title":{},"body":{"index.html":{}}}],["vcd_formly_config",{"_index":4247,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"modules/VcdFormlyModule.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["vcd_formly_input_components",{"_index":4265,"title":{},"body":{"modules/VcdFormlyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["vcdactionmenumodule",{"_index":4149,"title":{"modules/VcdActionMenuModule.html":{}},"body":{"modules/VcdActionMenuModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdactivityreportermodule",{"_index":4156,"title":{"modules/VcdActivityReporterModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdcomponentrendereroutlet",{"_index":1884,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet(renderer",{"_index":1906,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet]'},{'name",{"_index":694,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["vcdcomponentsmodule",{"_index":4170,"title":{"modules/VcdComponentsModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddataexportermodule",{"_index":4173,"title":{"modules/VcdDataExporterModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridmodule",{"_index":3072,"title":{"modules/VcdDatagridModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridwidgetobject",{"_index":983,"title":{"classes/VcdDatagridWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["vcddgstate",{"_index":1756,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.filters",{"_index":1761,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.sortcolumn",{"_index":1767,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcderrorbannermodule",{"_index":4161,"title":{"modules/VcdErrorBannerModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformlyfieldconfig",{"_index":4229,"title":{"interfaces/VcdFormlyFieldConfig.html":{}},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{}}}],["vcdformlyinputtypes",{"_index":4237,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/enumerations.html":{}}}],["vcdformlyinputtypes.input",{"_index":4248,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlyinputtypes.number_with_unit_input",{"_index":4250,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlyinputtypes.select",{"_index":4249,"title":{},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"miscellaneous/variables.html":{}}}],["vcdformlymodule",{"_index":4251,"title":{"modules/VcdFormlyModule.html":{}},"body":{"modules/VcdFormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformlytemplateoptions",{"_index":4236,"title":{"interfaces/VcdFormlyTemplateOptions.html":{}},"body":{"interfaces/VcdFormlyFieldConfig.html":{},"interfaces/VcdFormlyTemplateOptions.html":{},"coverage.html":{}}}],["vcdformmodule",{"_index":4174,"title":{"modules/VcdFormModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdloadingindicatormodule",{"_index":4162,"title":{"modules/VcdLoadingIndicatorModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdshowclippedtext",{"_index":702,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/FormlyInputComponent.html":{},"components/FormlyNumberWithUnitInputComponent.html":{},"components/FormlySelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["verbosity",{"_index":2938,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["verifies",{"_index":1853,"title":{},"body":{"classes/CommonUtil.html":{}}}],["verify",{"_index":3914,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["version",{"_index":4622,"title":{},"body":{"index.html":{}}}],["versioning",{"_index":4645,"title":{},"body":{"index.html":{}}}],["very",{"_index":2083,"title":{},"body":{"classes/CypressWidgetDriver.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["via",{"_index":4633,"title":{},"body":{"index.html":{}}}],["view",{"_index":1539,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["view's",{"_index":2625,"title":{},"body":{"classes/DomUtil.html":{}}}],["viewable",{"_index":2137,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild",{"_index":1445,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('actionreporter",{"_index":1666,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('div",{"_index":4061,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('div2",{"_index":4063,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('from",{"_index":2505,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('searchinput",{"_index":3882,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["viewchild('textinput",{"_index":3253,"title":{},"body":{"components/FormInputComponent.html":{}}}],["viewchild('to",{"_index":2509,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('unitdropdown",{"_index":3617,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["viewchild(clrdatagrid",{"_index":1662,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdatagridpagination",{"_index":1663,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdropdown",{"_index":2154,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild(showclippedtextdirective",{"_index":4060,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchildren",{"_index":1446,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchildren('actionmenuinrow",{"_index":1677,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewcontainerref",{"_index":1891,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["viewinitted",{"_index":1668,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewport",{"_index":2620,"title":{},"body":{"classes/DomUtil.html":{}}}],["visibility",{"_index":1337,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":38,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/CypressWidgetDriver.html":{},"classes/DomUtil.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/WidgetDriver.html":{},"miscellaneous/variables.html":{}}}],["visible(cssselector",{"_index":461,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["visual",{"_index":3858,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["vm.actions",{"_index":2773,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["vmw/ng",{"_index":4515,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["vmw/plain",{"_index":4517,"title":{},"body":{"dependencies.html":{}}}],["vmware",{"_index":2750,"title":{},"body":{"modules/DropdownModule.html":{},"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{}}}],["vmware/master",{"_index":4359,"title":{},"body":{"contributing.html":{}}}],["vmware/vmware",{"_index":4658,"title":{},"body":{"index.html":{}}}],["void",{"_index":59,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActionSearchProvider.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/DomUtil.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"directives/DynamicDropdownPositionDirective.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["vs",{"_index":2671,"title":{},"body":{"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"contributing.html":{}}}],["w",{"_index":431,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{}}}],["wait",{"_index":1278,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":129,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["warning",{"_index":2915,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["watchevents",{"_index":4466,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["watchevents(el",{"_index":1366,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["watchevents(this.hostelement",{"_index":1399,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["watchevents(tip.container",{"_index":1295,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["way",{"_index":1009,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{}}}],["ways",{"_index":148,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["we're",{"_index":1425,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["webcomponents/webcomponentsjs",{"_index":4520,"title":{},"body":{"dependencies.html":{}}}],["welcomes",{"_index":4305,"title":{},"body":{"contributing.html":{}}}],["wessberg/ts",{"_index":4522,"title":{},"body":{"dependencies.html":{}}}],["whenever",{"_index":719,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["whether",{"_index":83,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":2731,"title":{},"body":{"components/DropdownComponent.html":{},"components/FormSelectComponent.html":{}}}],["whitespace",{"_index":1408,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["whole",{"_index":2011,"title":{},"body":{"injectables/CsvExporterService.html":{},"directives/DynamicDropdownPositionDirective.html":{}}}],["whose",{"_index":1037,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["widget",{"_index":386,"title":{},"body":{"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["widgetdriver",{"_index":388,"title":{"interfaces/WidgetDriver.html":{}},"body":{"classes/AngularWidgetDriver.html":{},"classes/BaseWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"interfaces/WidgetDriver.html":{},"coverage.html":{}}}],["widgetfinder",{"_index":3062,"title":{"classes/WidgetFinder.html":{}},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetfinder#find",{"_index":3161,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder#findwidgets",{"_index":3160,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder(filtertesthostcomponent",{"_index":3088,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["widgetobject",{"_index":707,"title":{"classes/WidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetobject:101",{"_index":762,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:115",{"_index":743,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:123",{"_index":748,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:127",{"_index":741,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:42",{"_index":715,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:45",{"_index":732,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:54",{"_index":734,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:62",{"_index":737,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:73",{"_index":721,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:87",{"_index":751,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobjects",{"_index":890,"title":{},"body":{"classes/BaseWidgetObject.html":{},"interfaces/WidgetDriver.html":{}}}],["widgets",{"_index":543,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets.length",{"_index":581,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets[0",{"_index":586,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["width",{"_index":1330,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["width(width",{"_index":4030,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["wildcardcharacter",{"_index":2589,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wildcardposition",{"_index":2588,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.end",{"_index":2598,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.start",{"_index":2597,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["window",{"_index":1352,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/DynamicDropdownPositionDirective.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window.innerheight",{"_index":2870,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["window.requestanimationframe",{"_index":2272,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["window.settimeout",{"_index":1311,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window:resize",{"_index":2784,"title":{},"body":{"directives/DynamicDropdownPositionDirective.html":{}}}],["wired",{"_index":1540,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["withgridboldrenderer",{"_index":4448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["withgridboldrenderer(base",{"_index":4587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withgridboldrenderer>>(base",{"_index":994,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["within",{"_index":81,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/AngularWidgetFinder.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["without",{"_index":307,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/CypressWidgetDriver.html":{},"components/DropdownComponent.html":{},"interfaces/DropdownItem.html":{},"interfaces/ObjectAndResponse.html":{},"miscellaneous/functions.html":{}}}],["wo.ts",{"_index":3124,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor",{"_index":560,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor(new",{"_index":571,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/HasAngularFinder.html":{}}}],["woconstructor(this.fixture",{"_index":3164,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor.tagname",{"_index":562,"title":{},"body":{"classes/AngularWidgetFinder.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasAngularFinder.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wordbreak",{"_index":1334,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":1093,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["worked",{"_index":1097,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["workflow",{"_index":4321,"title":{},"body":{"contributing.html":{}}}],["working",{"_index":4308,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":3862,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["wrap",{"_index":2596,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["wrapcharacter",{"_index":2592,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wrapped",{"_index":3119,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wrapper",{"_index":782,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wraps",{"_index":2591,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["write",{"_index":4387,"title":{},"body":{"contributing.html":{}}}],["writevalue",{"_index":802,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(val",{"_index":836,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(value",{"_index":3248,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["writing",{"_index":2197,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["writingmessage",{"_index":2198,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["written",{"_index":4342,"title":{},"body":{"contributing.html":{}}}],["wrote",{"_index":4314,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":1354,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":1355,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":288,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/AngularWidgetDriver.html":{},"classes/AngularWidgetFinder.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/CypressWidgetDriver.html":{},"classes/CypressWidgetFinder.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DomUtil.html":{},"interfaces/ExportColumn.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"interfaces/WidgetDriver.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["yestext",{"_index":2176,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["you'll",{"_index":4371,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["z",{"_index":3590,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["zero_to_1",{"_index":3819,"title":{},"body":{"classes/Percent.html":{}}}],["zero_to_100",{"_index":3818,"title":{},"body":{"classes/Percent.html":{}}}],["zindex",{"_index":1291,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["zone.js",{"_index":4551,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2745,"title":{},"body":{"modules/DropdownModule.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdFormlyModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionDisplayConfig.html":{"url":"interfaces/ActionDisplayConfig.html","title":"interface - ActionDisplayConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionDisplayConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of actions that are not static/featured\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextual\n                                \n                                \n                                            Optional\n                                        staticActionStyling\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextual\n                                    \n                                \n                                \n                                    \n                                        contextual:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the contextual actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        staticActionStyling\n                                    \n                                \n                                \n                                    \n                                        staticActionStyling:         ActionStyling\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionStyling\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the static actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[], additionalData?: any) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: any;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActionItem.html":{"url":"interfaces/ActionItem.html","title":"interface - ActionItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Data required for displaying an action item in a menu.\nT is the type of custom data passed to action handler\nR is the type of selected entity on which the action will be performed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        action\n                                \n                                \n                                            Optional\n                                        actionType\n                                \n                                \n                                            Optional\n                                        availability\n                                \n                                \n                                            Optional\n                                        children\n                                \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        handler\n                                \n                                \n                                            Optional\n                                        handlerData\n                                \n                                \n                                            Optional\n                                        icon\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                            Optional\n                                        textKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The key that will be fired with the action.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionType\n                                    \n                                \n                                \n                                    \n                                        actionType:         ActionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for determining where in the action menu this action gets displayed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        availability\n                                    \n                                \n                                \n                                    \n                                        availability:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Condition whether or not the action is available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:         ActionItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionItem[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of actions that will be grouped under this action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The css class the button should have.\nMust be unique among all added actions within an action list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if an action that is available should be disabled. If true, a non available action is disabled.\nIf false, a non-available action is hidden\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         ActionHandlerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionHandlerType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The function to be executed when the button is clicked.\nActions that require additional user input can collect it using handlerData which will be passed as an argument\nto the handler call\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlerData\n                                    \n                                \n                                \n                                    \n                                        handlerData:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom data that will be passed when handler is called\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    To mark if the #ActionItem.textKey has to be translated or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textKey\n                                    \n                                \n                                \n                                    \n                                        textKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The i18n key or a translated string for contents of a action button\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[], additionalData?: any) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: any;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActionSearchProvider.html":{"url":"classes/ActionSearchProvider.html","title":"class - ActionSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActionSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/action-search-provider/action-search.provider.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            SpotlightSearchProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _actions\n                            \n                            \n                                    Private\n                                _selectedEntities\n                            \n                            \n                                    Private\n                                flatListOfAvailableActions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getActions\n                            \n                            \n                                    Private\n                                getFlatListOfAvailableActions\n                            \n                            \n                                    Private\n                                isActionAvailable\n                            \n                            \n                                    Private\n                                isActionDisabled\n                            \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                                \n                                    selectedEntities\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ts: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/action-search-provider/action-search.provider.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ts\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:19\n                            \n                        \n\n                \n                    \n                        Initialized by the calling component and is used for searching of the search criteria entered in SpotlightSearchComponent\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _selectedEntities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     R[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:28\n                            \n                        \n\n                \n                    \n                        Used in isActionDisabled to calculate disabled state of actions  and also in action handler\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            flatListOfAvailableActions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getActions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActions(searchCriteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchCriteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpotlightSearchResult[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFlatListOfAvailableActions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlatListOfAvailableActions(actions: ActionItem[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isActionAvailable\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActionAvailable(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isActionDisabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActionDisabled(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:40\n                \n            \n\n\n            \n                \n                    Searches through nested actions and finds all the actions that match with entered search text on the\nSpotlightSearchComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpotlightSearchResult[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n\n                \n                    \n                        setactions(actions: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            actions\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedEntities\n                    \n                \n\n\n                \n                    \n                        setselectedEntities(entities: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-search-provider/action-search.provider.ts:29\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            entities\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { TranslationService } from '@vcd/i18n';\nimport { ActionItem } from '../common/interfaces';\nimport { SpotlightSearchProvider, SpotlightSearchResult } from '../spotlight-search';\nimport { CommonUtil } from '../utils';\n\nexport const DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX = 'vcd.cc.action.provider.section.title';\n\nexport class ActionSearchProvider implements SpotlightSearchProvider {\n    private flatListOfAvailableActions: ActionItem[];\n\n    /**\n     * Initialized by the calling component and is used for searching of the search criteria entered in {@link SpotlightSearchComponent}\n     */\n    private _actions: ActionItem[] = [];\n    set actions(actions: ActionItem[]) {\n        this._actions = actions;\n        this.flatListOfAvailableActions = null;\n    }\n\n    /**\n     * Used in {@link isActionDisabled} to calculate disabled state of actions  and also in action handler\n     */\n    private _selectedEntities: R[] = [];\n    set selectedEntities(entities: R[]) {\n        this._selectedEntities = entities;\n        this.flatListOfAvailableActions = null;\n    }\n\n    constructor(private ts: TranslationService) {}\n\n    /**\n     * Searches through nested actions and finds all the actions that match with entered search text on the\n     * {@link SpotlightSearchComponent}\n     */\n    search(criteria: string): SpotlightSearchResult[] {\n        if (!criteria) {\n            return [];\n        }\n\n        if (this.flatListOfAvailableActions == null) {\n            this.flatListOfAvailableActions = this.getFlatListOfAvailableActions(this._actions);\n        }\n\n        return this.getActions(criteria.toLowerCase());\n    }\n\n    private getActions(searchCriteria: string): SpotlightSearchResult[] {\n        return this.flatListOfAvailableActions\n            .filter(action => action.textKey.toLowerCase().includes(searchCriteria))\n            .map(action => ({\n                displayText: action.textKey,\n                handler: () => action.handler(this._selectedEntities, action.handlerData),\n            }));\n    }\n\n    private getFlatListOfAvailableActions(actions: ActionItem[]): ActionItem[] {\n        return actions\n            .reduce((flatActionList, currentAction) => {\n                if (currentAction?.children?.length) {\n                    flatActionList = flatActionList.concat(this.getFlatListOfAvailableActions(currentAction.children));\n                } else if (this.isActionAvailable(currentAction)) {\n                    const textKey = currentAction.isTranslatable === false ? currentAction.textKey :\n                        this.ts.translate(currentAction.textKey);\n                    flatActionList.push({ ...currentAction, textKey });\n                }\n                return flatActionList;\n            }, []);\n    }\n\n    private isActionAvailable(action: ActionItem): boolean {\n        return (!action.availability || action.availability(this._selectedEntities)) && !this.isActionDisabled(action);\n    }\n\n    private isActionDisabled(action: ActionItem): boolean {\n        return CommonUtil.isFunction(action.disabled) ? action.disabled(this._selectedEntities) : action.disabled;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityPromiseResolver.html":{"url":"classes/ActivityPromiseResolver.html","title":"class - ActivityPromiseResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityPromiseResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A class that understands how to take a promise and turn it into some response message for display.\nA client of this library will override ActivityPromiseResolver to process their specific type of promise.\nThis override will know how to generate a ObjectAndResponse from the type of promise it processes.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolveActivities\n                            \n                            \n                                resolveActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivities\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivities(activityResolutionPromises: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:71\n                \n            \n\n\n            \n                \n                    Takes a Promise of many items and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivity\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivity(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:51\n                \n            \n\n\n            \n                \n                    Takes a Promise and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The activity that this resolver will generate a response from. It generates\neither a sucesss or a failure condition.\n\n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityReporter.html":{"url":"classes/ActivityReporter.html","title":"class - ActivityReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Expresses the contract between a activity status and the UI displaying a loading message, reporting\nsuccess or errors\nCurrently, only one concurrent activity is supported.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:13\n                            \n                        \n\n                \n                    \n                            Creates this reporter with the performer that it will use to monitor events.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:27\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:33\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ActivityPromiseResolver } from './activity-promise-resolver';\n\n/**\n * Expresses the contract between a activity status and the UI displaying a loading message, reporting\n * success or errors\n * Currently, only one concurrent activity is supported.\n */\nexport abstract class ActivityReporter {\n    /**\n     * Creates this reporter with the performer that it will use to monitor events.\n     */\n    constructor(private promiseResolver: ActivityPromiseResolver) {}\n    /*\n     * Override this method to provide custom error activity starting behavior.\n     */\n    abstract startActivity(): void;\n    /**\n     * Override this method to provide custom error reporting behavior.\n     *\n     *  @param errorText The text to display in the error alert.\n     */\n    abstract reportError(errorText: string): void;\n    /**\n     * Override this method to provide custom success reporting behavior.\n     *\n     * @param successMessage A message to display to the user.\n     */\n    abstract reportSuccess(successMessage: string): void;\n\n    /**\n     * Monitors a promise that returns an entity using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorGet(activityResolutionPromise: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n\n    /**\n     * Monitors a promise that returns many entities using {@link ActivityPromiseResolver.monitorActivities}.\n     */\n    async monitorGetAll(activityResolutionPromises: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivities(activityResolutionPromises);\n        const returnValue = response.map(item => item.object);\n        if (response.length) {\n            for (const item of response) {\n                if (item.response.error) {\n                    this.reportError(item.response.error);\n                    return returnValue;\n                }\n            }\n            this.reportSuccess(response[0].response.success);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Monitors a promise that returns an entity and posts a successMessage using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorEdit(activityResolutionPromise: Promise, successMessage?: string): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise, successMessage);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActivityResponse.html":{"url":"interfaces/ActivityResponse.html","title":"interface - ActivityResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActivityResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                The response that was given with some resource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The error message, if any, from the activity.\nA response without an error is assumed to have succeeded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The response message, if any, from the activity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularWidgetDriver.html":{"url":"classes/AngularWidgetDriver.html","title":"class - AngularWidgetDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularWidgetDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/angular-widget-driver.ts\n        \n\n            \n                Description\n            \n            \n                A WidgetDriver that knows how to interface with the Angular framework.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WidgetDriver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                check\n                            \n                            \n                                    Async\n                                classes\n                            \n                            \n                                    Async\n                                clearInputValue\n                            \n                            \n                                    Async\n                                click\n                            \n                            \n                                    Async\n                                disabled\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                getChecked\n                            \n                            \n                                    Private\n                                getDebugElement\n                            \n                            \n                                    Private\n                                getDebugElements\n                            \n                            \n                                    Async\n                                getInputValue\n                            \n                            \n                                    Async\n                                getInputValues\n                            \n                            \n                                    Async\n                                getText\n                            \n                            \n                                    Async\n                                getTexts\n                            \n                            \n                                    Async\n                                hidden\n                            \n                            \n                                    Private\n                                internalSetInputValue\n                            \n                            \n                                    Async\n                                select\n                            \n                            \n                                    Async\n                                sendKeyboardKey\n                            \n                            \n                                    Async\n                                setInputValue\n                            \n                            \n                                    Async\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture, root: DebugElement, component: T)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/angular-widget-driver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        root\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        component\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            check\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    check(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            classes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    classes(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            disabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disabled(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exists(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(params: FindParams> | FindableWidget)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:23\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            FindParams> | FindableWidget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     W\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChecked\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChecked(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getDebugElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebugElement(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getDebugElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebugElements(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getInputValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInputValues(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hidden(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            internalSetInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    internalSetInputValue(element: DebugElement, value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            select\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    select(option: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendKeyboardKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardKey(key: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shouldAppend\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            visible\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    visible(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-driver.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularWidgetFinder } from './angular-widget-finder';\nimport { WidgetDriver } from './base-widget-object';\nimport { FindableWidget, FindParams } from './widget-object';\n\n/**\n * A WidgetDriver that knows how to interface with the Angular framework.\n */\nexport class AngularWidgetDriver implements WidgetDriver {\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        protected component: T = fixture.componentInstance\n    ) {}\n\n    find(params: FindParams> | FindableWidget): W {\n        return new AngularWidgetFinder(this.fixture).find>(params, this.root);\n    }\n\n    async click(cssSelector?: string): Promise {\n        this.getDebugElement(cssSelector).nativeElement.click();\n        this.fixture.detectChanges();\n    }\n\n    async classes(cssSelector?: string): Promise {\n        return Object.keys(this.getDebugElement(cssSelector).nativeElement.classes);\n    }\n\n    async check(cssSelector?: string): Promise {\n        const checkboxElement = this.getDebugElement(cssSelector).nativeElement;\n        checkboxElement.checked = !checkboxElement.checked;\n        checkboxElement.dispatchEvent(new Event('change'));\n        this.fixture.detectChanges();\n    }\n\n    async getChecked(cssSelector?: string): Promise {\n        return this.getDebugElement(cssSelector).nativeElement.checked;\n    }\n\n    async select(option: string, cssSelector?: string): Promise {\n        const selectElement = this.getDebugElement(cssSelector).nativeElement;\n        selectElement.value = option;\n        selectElement.dispatchEvent(new Event('change'));\n        this.fixture.detectChanges();\n    }\n\n    async sendKeyboardKey(key: string, cssSelector?: string): Promise {\n        const nativeElement: HTMLBaseElement = this.getDebugElement(cssSelector).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.fixture.detectChanges();\n    }\n\n    async setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise {\n        if (!shouldAppend) {\n            this.clearInputValue(cssSelector);\n        }\n        return this.internalSetInputValue(this.getDebugElement(cssSelector), value);\n    }\n\n    async clearInputValue(cssSelector?: string): Promise {\n        return this.internalSetInputValue(this.getDebugElement(cssSelector), '');\n    }\n\n    private internalSetInputValue(element: DebugElement, value: string): void {\n        element.nativeElement.value = String(value);\n        element.nativeElement.dispatchEvent(new Event('input'));\n        this.fixture.detectChanges();\n    }\n\n    async getText(cssSelector?: string): Promise {\n        return this.getDebugElement(cssSelector).nativeElement.textContent.trim();\n    }\n\n    async getTexts(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.getDebugElements(parentCssSelector, cssSelector).map(elem => elem.nativeElement.textContent.trim());\n    }\n\n    async getInputValue(cssSelector?: string): Promise {\n        return this.getDebugElement(cssSelector).nativeElement.value;\n    }\n\n    async getInputValues(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.getDebugElements(parentCssSelector, cssSelector).map(elem => elem.nativeElement.value);\n    }\n\n    async exists(cssSelector?: string): Promise {\n        return !!this.getDebugElement(cssSelector);\n    }\n\n    async disabled(cssSelector?: string): Promise {\n        return this.getDebugElement(cssSelector).nativeElement.disabled;\n    }\n\n    async visible(cssSelector?: string): Promise {\n        return this.exists(cssSelector);\n    }\n\n    async hidden(cssSelector?: string): Promise {\n        return !(await this.exists(cssSelector));\n    }\n\n    private getDebugElement(cssSelector?: string): DebugElement {\n        return cssSelector ? this.root.query(By.css(cssSelector)) : this.root;\n    }\n\n    private getDebugElements(parentCssSelector?: string, cssSelector?: string): DebugElement[] {\n        const parent = parentCssSelector ? this.root.query(By.css(parentCssSelector)) : this.root;\n        const query = cssSelector ? By.css(cssSelector) : By.all();\n        return parent.queryAll(query);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularWidgetFinder.html":{"url":"classes/AngularWidgetFinder.html","title":"class - AngularWidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularWidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/angular-widget-finder.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                findWidgets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/angular-widget-finder.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/angular-widget-finder.ts:20\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/angular-widget-finder.ts:25\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-finder.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-finder.ts:65\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findWidgets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWidgets(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/angular-widget-finder.ts:41\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds widgets within a fixture\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType[]\n\n                    \n                    \n                        A Potentially empty list of widgets matching the given specs\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularWidgetDriver } from './angular-widget-driver';\nimport { FindableWidget, FindParams, isFindParamsObject } from './widget-object';\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class AngularWidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(arg: Type | ComponentFixture) {\n        this.fixture = (arg as ComponentFixture).componentRef\n            ? (arg as ComponentFixture)\n            : TestBed.createComponent(arg as Type);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(new AngularWidgetDriver(this.fixture, root, root.componentInstance))\n        );\n        return widgets as InstanceType[];\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T, parent?: DebugElement): InstanceType {\n        const widgets = this.findWidgets(params, parent);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasAngularFinder {\n    finder: AngularWidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BannerActivityReporterComponent.html":{"url":"components/BannerActivityReporterComponent.html","title":"component - BannerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BannerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Shows a banner to the user to represent the state of an activity.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-banner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./banner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorText\n                            \n                            \n                                running\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onErrorClosed\n                            \n                            \n                                onSuccessClosed\n                            \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                reset\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                loadingMessage\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService, promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        loadingMessage\n                    \n                \n                \n                    \n                        Type :         LazyString\n\n                    \n                \n                \n                    \n                        Default value : this.translationService.translateAsync('vcd.cc.loading')\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n                \n                    \n                        The translated message that is displayed to the user while loading.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onErrorClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonErrorClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:67\n                \n            \n\n\n            \n                \n                    Closes the error message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSuccessClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonSuccessClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:74\n                \n            \n\n\n            \n                \n                    Closes the success message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:49\n                \n            \n\n\n            \n                \n                    Shows the given {@param errorText} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:57\n                \n            \n\n\n            \n                \n                    Shows the given {@param successMessage} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:40\n                \n            \n\n\n            \n                \n                    Begins to show the banner with a loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            successMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject, Input } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { LazyString } from '@vcd/i18n';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Shows a banner to the user to represent the state of an activity.\n */\n@Component({\n    selector: 'vcd-banner-activity-reporter',\n    templateUrl: './banner-activity-reporter.component.html',\n})\nexport class BannerActivityReporterComponent extends ActivityReporter {\n    running = false;\n    errorText: string;\n    successMessage: string;\n\n    /**\n     * The translated message that is displayed to the user while loading.\n     */\n    @Input()\n    loadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.loading');\n\n    constructor(\n        private translationService: TranslationService,\n        @Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver\n    ) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the banner with a loading indicator.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.successMessage = null;\n        this.errorText = null;\n    }\n\n    /**\n     * Shows the given {@param errorText} to the user.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Shows the given {@param successMessage} to the user.\n     */\n    reportSuccess(successMessage: string): void {\n        if (successMessage) {\n            this.successMessage = successMessage;\n        }\n        this.running = false;\n    }\n\n    /**\n     * Closes the error message if displayed.\n     */\n    onErrorClosed(): void {\n        this.errorText = null;\n    }\n\n    /**\n     * Closes the success message if displayed.\n     */\n    onSuccessClosed(): void {\n        this.successMessage = null;\n    }\n\n    /*\n     * Reset the banner activity state manually.\n     *\n     * Call it when banner should be reset to its default state.\n     */\n    reset(): void {\n        this.running = false;\n        this.errorText = null;\n        this.successMessage = null;\n    }\n}\n\n    \n\n    \n        \n    {{ loadingMessage | lazyString }}\n\n\n\n    \n        \n            {{ errorText }}\n        \n    \n\n\n\n    \n        \n            {{ successMessage }}\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ loadingMessage | lazyString }}                        {{ errorText }}                                    {{ successMessage }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BannerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannerActivityReporterWidgetObject.html":{"url":"classes/BannerActivityReporterWidgetObject.html","title":"class - BannerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                                \n                                    sucessText\n                                \n                                \n                                    loadingText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-banner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sucessText\n                    \n                \n\n                \n                    \n                        getsucessText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadingText\n                    \n                \n\n                \n                    \n                        getloadingText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BannerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class BannerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-banner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    get sucessText(): string {\n        return this.component.successMessage;\n    }\n\n    get loadingText(): string {\n        return this.findElement('clr-alert').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormControl.html":{"url":"classes/BaseFormControl.html","title":"class - BaseFormControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/base-form-control.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\nthe form control backing a form control name directive available to sub classes.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ControlValueAccessor\n                            CanBeReadOnly\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    showErrors\n                                \n                                \n                                    errorKeys\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:67\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:21\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:26\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:31\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:52\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:62\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:57\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:46\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:41\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:85\n                                \n                            \n                    \n                        \n                                The FormControl associated with the FormControlName directive\n\n\n                                \n                                    Returns :         FormControl\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showErrors\n                    \n                \n\n                \n                    \n                        getshowErrors()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorKeys\n                    \n                \n\n                \n                    \n                        geterrorKeys()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:98\n                                \n                            \n                    \n                        \n                                Errors from the form control validation\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, Type } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { IdGenerator } from '../utils/id-generator/id-generator';\nimport { CanBeReadOnly } from './interfaces/can-be-read-only.interface';\n\nconst idGenerator = new IdGenerator('base-form-control-id');\n\n/**\n * Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\n * the form control backing a form control name directive available to sub classes.\n */\nexport class BaseFormControl implements ControlValueAccessor, CanBeReadOnly {\n    /**\n     * Auto generated ID for the input field.\n     */\n    id: string;\n\n    /**\n     * Change callback.\n     */\n    onChange: (...args: unknown[]) => unknown;\n\n    /**\n     * Touch callback.\n     */\n    onTouch: (...args: unknown[]) => unknown;\n\n    /**\n     * Whether the control is disabled.\n     */\n    disabled = false;\n\n    /**\n     * Show the asterisk next to the control when true\n     */\n    @Input() showAsterisk = false;\n\n    /**\n     * The label that appears before the control\n     */\n    @Input() label: string;\n\n    /**\n     * The description that appears below the control\n     * \\u00A0 is &nbsp; (non-breaking space)\n     */\n    @Input() description = '\\u00A0';\n\n    /**\n     * Whether this component is in readonly mode\n     */\n    @Input() isReadOnly = false;\n\n    /**\n     * Error labels to be used instead of NgControl error keys\n     */\n    @Input() errorLabels: string[] = [];\n\n    /**\n     * FormControlName directive\n     */\n    formControlNameDirective: NgControl;\n\n    /**\n     * To store the initial value of the input form control.\n     */\n    protected initialValue: number | string | boolean;\n\n    constructor(ngControl: NgControl) {\n        this.id = idGenerator.generate();\n        if (ngControl) {\n            ngControl.valueAccessor = this;\n            this.formControlNameDirective = ngControl;\n        }\n    }\n\n    /**\n     * The FormControl associated with the FormControlName directive\n     */\n    get formControl(): FormControl {\n        return this.formControlNameDirective\n            ? (this.formControlNameDirective.control as FormControl)\n            : new FormControl('');\n    }\n\n    get showErrors(): boolean {\n        return this.formControl.enabled && !this.formControl.pristine && !this.formControl.valid;\n    }\n\n    /**\n     * Errors from the form control validation\n     */\n    get errorKeys(): string[] {\n        if (this.errorLabels.length) {\n            return this.errorLabels;\n        }\n        return Object.keys(this.formControl.errors || {});\n    }\n\n    registerOnChange(onChange: (...args: unknown[]) => unknown): void {\n        this.onChange = onChange;\n    }\n\n    registerOnTouched(onTouched: (...args: unknown[]) => unknown): void {\n        this.onTouch = onTouched;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: any): void {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseWidgetObject.html":{"url":"classes/BaseWidgetObject.html","title":"class - BaseWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/base-widget-object.ts\n        \n\n            \n                Description\n            \n            \n                An object that all other WidgetObjects should extend.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WidgetDriver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                classes\n                            \n                            \n                                clearInputValue\n                            \n                            \n                                click\n                            \n                            \n                                disabled\n                            \n                            \n                                exists\n                            \n                            \n                                find\n                            \n                            \n                                getChecked\n                            \n                            \n                                getInputValue\n                            \n                            \n                                getInputValues\n                            \n                            \n                                getText\n                            \n                            \n                                getTexts\n                            \n                            \n                                hidden\n                            \n                            \n                                select\n                            \n                            \n                                sendKeyboardKey\n                            \n                            \n                                setInputValue\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(driver: WidgetDriver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/base-widget-object.ts:135\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        driver\n                                                  \n                                                        \n                                                                        WidgetDriver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            classes\n                        \n                        \n                    \n                \n            \n            \n                \nclasses(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInputValue\n                        \n                        \n                    \n                \n            \n            \n                \nclearInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disabled\n                        \n                        \n                    \n                \n            \n            \n                \ndisabled(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \nexists(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(params: FindParams> | FindableWidget)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:138\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            FindParams> | FindableWidget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     W\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChecked\n                        \n                        \n                    \n                \n            \n            \n                \ngetChecked(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValues\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValues(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \ngetText(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \ngetTexts(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hidden\n                        \n                        \n                    \n                \n            \n            \n                \nhidden(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(option: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendKeyboardKey\n                        \n                        \n                    \n                \n            \n            \n                \nsendKeyboardKey(key: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValue(value: string, shouldAppend?: boolean, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shouldAppend\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            visible\n                        \n                        \n                    \n                \n            \n            \n                \nvisible(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FindableWidget, FindParams } from './widget-object';\n\n/**\n * Represents an object that knows how to drive testing for a specific testing type.\n */\nexport interface WidgetDriver {\n    /**\n     * Finds a widget using the given params within this widget driver.\n     */\n    find(params: FindParams> | FindableWidget): W;\n\n    /**\n     * Says if any child elements exists that use this css selector.\n     */\n    exists(cssSelector?: string): Promise;\n\n    /**\n     * Says if the element is disabled.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    disabled(cssSelector?: string): Promise;\n\n    /**\n     * Says if the element is hidden.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    hidden(cssSeletor?: string): Promise;\n\n    /**\n     * Says if the element is visible.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    visible(cssSelector?: string): Promise;\n\n    /**\n     * Gives the CSS classes applied to the element\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    classes(cssSelector?: string): Promise;\n\n    /**\n     * Clicks the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    click(cssSelector?: string): Promise;\n\n    /**\n     * Checks the checkbox contained in the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    check(cssSelector?: string): Promise;\n\n    /**\n     * Says if the checkbox is checked within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getChecked(cssSelector?: string): Promise;\n\n    /**\n     * Selects the given option within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    select(option: string, cssSelector?: string): Promise;\n\n    /**\n     * Sends a single key event to the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    sendKeyboardKey(key: string, cssSelector?: string): Promise;\n\n    /**\n     * Sets the input value of the element to the given value.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     * @param shouldAppend if the value should be appended to the current input value or if the input should be cleared.\n     *                     defaults to clearing the input (false).\n     */\n    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise;\n\n    /**\n     * Gives the value of the input.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getInputValue(cssSelector?: string): Promise;\n\n    /**\n     * Gives the value of all inputs that match the given css selector.\n     *\n     * @param parentCssSelector the CSS selector of the immediate parent of the children.\n     * @param cssSelector the CSS selector to filter the children by.\n     */\n    getInputValues(parentCssSelector?: string, cssSelector?: string): Promise;\n\n    /**\n     * Clears the input value of the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    clearInputValue(cssSelector?: string): Promise;\n\n    /**\n     * Gives the text within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getText(cssSelector?: string): Promise;\n\n    /**\n     * Gives the text of all elements that match the given CSS selectors.\n     *\n     * @param parentCssSelector the CSS selector of the immediate parent of the children.\n     * @param cssSelector the CSS selector to filter the children by.\n     */\n    getTexts(parentCssSelector?: string, cssSelector?: string): Promise;\n}\n\n/**\n * An object that all other WidgetObjects should extend.\n */\nexport class BaseWidgetObject implements WidgetDriver {\n    constructor(private driver: WidgetDriver) {}\n\n    find(params: FindParams> | FindableWidget): W {\n        return this.driver.find(params);\n    }\n\n    exists(cssSelector?: string): Promise {\n        return this.driver.exists(cssSelector);\n    }\n\n    disabled(cssSelector?: string): Promise {\n        return this.driver.disabled(cssSelector);\n    }\n\n    visible(cssSelector?: string): Promise {\n        return this.driver.visible(cssSelector);\n    }\n\n    hidden(cssSelector?: string): Promise {\n        return this.driver.hidden(cssSelector);\n    }\n\n    click(cssSelector?: string): Promise {\n        return this.driver.click(cssSelector);\n    }\n\n    classes(cssSelector?: string): Promise {\n        return this.driver.classes(cssSelector);\n    }\n\n    check(cssSelector?: string): Promise {\n        return this.driver.check(cssSelector);\n    }\n\n    getChecked(cssSelector?: string): Promise {\n        return this.driver.getChecked(cssSelector);\n    }\n\n    select(option: string, cssSelector?: string): Promise {\n        return this.driver.select(option, cssSelector);\n    }\n\n    sendKeyboardKey(key: string, cssSelector?: string): Promise {\n        return this.driver.sendKeyboardKey(key, cssSelector);\n    }\n\n    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise {\n        return this.driver.setInputValue(value, shouldAppend, cssSelector);\n    }\n\n    clearInputValue(cssSelector?: string): Promise {\n        return this.driver.clearInputValue(cssSelector);\n    }\n\n    getText(cssSelector?: string): Promise {\n        return this.driver.getText(cssSelector);\n    }\n\n    getTexts(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.driver.getTexts(parentCssSelector, cssSelector);\n    }\n\n    getInputValue(cssSelector?: string): Promise {\n        return this.driver.getInputValue(cssSelector);\n    }\n\n    getInputValues(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.driver.getInputValues(parentCssSelector, cssSelector);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoldTextRendererComponent.html":{"url":"components/BoldTextRendererComponent.html","title":"component - BoldTextRendererComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoldTextRendererComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n\n\n    \n        Description\n    \n    \n        A ComponentRenderer component that is used for rendering a bold text inside a column cell template\n\n    \n\n\n    \n        Implements\n    \n    \n                    ComponentRenderer\n    \n\n    \n        Example\n    \n    \n                \n                    Example usage with RendererSpec:\ncolumns: GridColumn[] = [\n{\ndisplayName: 'Component Renderer',\nrenderer: RendererSpec(\n  BoldTextRendererComponent,\n  (record: MockRecord) => ({text: record.name})\n)\n}\n];\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-bold-text-renderer\n            \n\n\n\n            \n                template\n                {{ config.text }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :         BoldTextRendererConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ config.text }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BoldTextRendererComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoldTextRendererConfig.html":{"url":"interfaces/BoldTextRendererConfig.html","title":"interface - BoldTextRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoldTextRendererConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n        \n\n            \n                Description\n            \n            \n                ComponentRenderer.config type that the BoldTextRendererComponent can understand\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be displayed in bold font\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoldTextRendererWidgetObject.html":{"url":"classes/BoldTextRendererWidgetObject.html","title":"class - BoldTextRendererWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoldTextRendererWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for the bold text renderer.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    text\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-bold-text-renderer'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n\n                \n                    \n                        gettext()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { VcdDatagridWidgetObject } from '../../utils/test/datagrid/vcd-datagrid.wo';\nimport { WidgetObject } from '../../utils/test/widget-object';\nimport { BoldTextRendererComponent } from './bold-text-renderer.component';\n\n/**\n * Mixin that allows {@link ClrDatagridWidgetObject} to read information from {@link BoldTextRendererComponent}\n */\n// tslint:disable-next-line:typedef\nexport function WithGridBoldRenderer>>(Base: TBase) {\n    return class extends Base {\n        getBoldText(row: number, column: number): string {\n            const cellElement = this.clrDatagrid.getCell(row, column);\n            return this.getNodeText(this.findElement('strong', cellElement));\n        }\n    };\n}\n\n/**\n * Widget Object for the bold text renderer.\n */\nexport class BoldTextRendererWidgetObject extends WidgetObject {\n    static tagName = 'vcd-bold-text-renderer';\n\n    get text(): string {\n        return this.findElement('strong').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Button.html":{"url":"interfaces/Button.html","title":"interface - Button","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Button\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A generic interface for a button that can be displayed on the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        class\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                                \n                                        isActive\n                                \n                                \n                                        label\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The css class the button should have.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way this button should be shown when inactive.\nOverrides ButtonConfig.inactiveDisplayMode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translated text of the button.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonConfig.html":{"url":"interfaces/ButtonConfig.html","title":"interface - ButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that describes the type of buttons to put on the top of the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextualButtonConfig\n                                \n                                \n                                        globalButtons\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextualButtonConfig\n                                    \n                                \n                                \n                                    \n                                        contextualButtonConfig:     ContextualButtonConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButtonConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The buttons whose displayability depends on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        globalButtons\n                                    \n                                \n                                \n                                    \n                                        globalButtons:     GlobalButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GlobalButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The buttons whose displayability does not depend on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way buttons should be shown when inactive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bytes.html":{"url":"classes/Bytes.html","title":"class - Bytes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bytes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                B\n                            \n                            \n                                    Static\n                                GB\n                            \n                            \n                                    Static\n                                KB\n                            \n                            \n                                    Static\n                                MB\n                            \n                            \n                                    Static\n                                TB\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            B\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1, 'B')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 3, 'GB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:137\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            KB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024, 'KB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:135\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 2, 'MB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:136\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            TB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 4, 'TB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:138\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Bytes.B, Bytes.KB, Bytes.MB, Bytes.GB]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:139\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.bytes.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:133\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.filesize.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Bytes[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CanBeReadOnly.html":{"url":"interfaces/CanBeReadOnly.html","title":"interface - CanBeReadOnly","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CanBeReadOnly\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/interfaces/can-be-read-only.interface.ts\n        \n\n            \n                Description\n            \n            \n                Components that can be made readonly should implement this interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isReadOnly\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This being true implies that any controls that may edit data will not allow editing or be removed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CanBeReadOnly {\n    /**\n     * This being true implies that any controls that may edit data will not allow editing or be removed\n     */\n    isReadOnly: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CliptextConfig.html":{"url":"interfaces/CliptextConfig.html","title":"interface - CliptextConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CliptextConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                The configuration information for the cliptext within the cells of the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        mouseoutDelay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the cliptext should be disabled.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouseoutDelay\n                                    \n                                \n                                \n                                    \n                                        mouseoutDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The time delay from mouse off to hide the cliptext.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         TooltipSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TooltipSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The size of the tooltip to be displayed in the cell.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnConfigInternal.html":{"url":"interfaces/ColumnConfigInternal.html","title":"interface - ColumnConfigInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnConfigInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                For simplifying logic inside the HTML template to differentiate between different GridColumn.renderer\ntypes.\n\n            \n\n            \n                Extends\n            \n            \n                        GridColumn\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldColumnRendererSpec\n                                \n                                \n                                            Optional\n                                        fieldName\n                                \n                                \n                                            Optional\n                                        fieldRenderer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldColumnRendererSpec\n                                    \n                                \n                                \n                                    \n                                        fieldColumnRendererSpec:         ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnRendererSpec\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldRenderer\n                                    \n                                \n                                \n                                    \n                                        fieldRenderer:         FunctionRenderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FunctionRenderer\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnRendererSpec.html":{"url":"interfaces/ColumnRendererSpec.html","title":"interface - ColumnRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that creates a config object required for the configuration of component that will be rendered in the column\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonUtil.html":{"url":"classes/CommonUtil.html","title":"class - CommonUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/common-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFunction\n                            \n                            \n                                    Static\n                                roundTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isFunction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isFunction(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:22\n                \n            \n\n\n            \n                \n                    Verifies if the passed value is of type Function\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            roundTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    roundTo(value: number, digits: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:12\n                \n            \n\n\n            \n                \n                    Rounds number to given floating point, 2 by default.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        number from float data type\n\n                                    \n                                \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        how many numbers will be shown after decimal point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class CommonUtil {\n    /**\n     * Rounds number to given floating point, 2 by default.\n     * @param value number from float data type\n     * @param digits how many numbers will be shown after decimal point\n     */\n    static roundTo(value: number, digits: number = 2): number {\n        if (!value) {\n            value = 0;\n        }\n        return Number(Math.round(Number(value + 'e' + digits)) + 'e-' + digits);\n    }\n\n    /**\n     * Verifies if the passed value is of type Function\n     */\n    static isFunction(value: any): value is (...args: unknown[]) => unknown {\n        return typeof value === 'function';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRenderer.html":{"url":"interfaces/ComponentRenderer.html","title":"interface - ComponentRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                Implemented by all the component renderers. The components that have to be rendered dynamically.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object used by the component renderers inside their HTML template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ComponentRendererOutletDirective.html":{"url":"directives/ComponentRendererOutletDirective.html","title":"directive - ComponentRendererOutletDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ComponentRendererOutletDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n        \n\n            \n                Description\n            \n            \n                Component that acts as a host element for dynamic rendering of component constructors.\nIt takes ComponentRendererSpec and also 'context' as input in case of a ColumnRendererSpec that serves as argument for\nColumnRendererSpec.config method. Attaches the component to be rendered to the view container of host element\nand updates it's configuration whenever changed.\nExample usage:\n\n\n\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdComponentRendererOutlet]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                componentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assignValue\n                            \n                            \n                                    Private\n                                attachRenderer\n                            \n                            \n                                    Private\n                                detachRenderer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdComponentRendererOutlet\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    vcdComponentRendererOutlet\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                            \n                        \n                \n                    \n                        Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            assignValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assignValue(config:  | T, context: R)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:63\n                \n            \n\n\n            \n                \n                    Updates the configuration of instantiated component\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                             | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            R\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            attachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:52\n                \n            \n\n\n            \n                \n                    Attaches the passed component type to the view of this directive host\n\n\n                    \n                        Returns :         ComponentRef>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            detachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRef>\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRendererConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n\n\n                \n                    \n                        setvcdComponentRendererOutlet(renderer: literal type)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                                \n                            \n                    \n                        \n                                Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderer\n                                                    \n                                                            \n                                                                        literal type\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ComponentFactoryResolver, ComponentRef, Directive, Input, ViewContainerRef } from '@angular/core';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {@link ComponentRendererSpec} and also 'context' as input in case of a {@link ColumnRendererSpec} that serves as argument for\n * {@link ColumnRendererSpec.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * \n *\n */\n@Directive({\n    selector: '[vcdComponentRendererOutlet]',\n})\nexport class ComponentRendererOutletDirective {\n    private componentRef: ComponentRef>;\n    private componentType: ComponentRendererConstructor;\n\n    constructor(private viewContainerRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {}\n\n    /**\n     * Sets the component that this outlet should render. Where rendererSpec is the\n     * {@link ComponentRendererSpec} that details how to render the component and context\n     * is any information that the component needs to render.\n     */\n    @Input()\n    set vcdComponentRendererOutlet(renderer: { rendererSpec: ComponentRendererSpec; context?: R }) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n\n    /**\n     * Attaches the passed component type to the view of this directive host\n     */\n    private attachRenderer(): ComponentRef> {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    /**\n     * Updates the configuration of instantiated component\n     */\n    private assignValue(config: ((r: R) => T) | T, context: R): void {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n\n    private detachRenderer(): void {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRendererSpec.html":{"url":"interfaces/ComponentRendererSpec.html","title":"interface - ComponentRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                An object that contains the constructor of a component of ComponentRenderer type that has to be rendered dynamically.\nComponentRendererOutletDirective uses this object to render the component. It is responsible for setting the\ncomponent's configurationComponentRenderer after dynamically initializing it. But the caller is responsible\nfor providing a config\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ComponentRenderer.config. In the case of a ColumnRendererSpec it is a function that takes a rest\nitem as input and returns an object of ComponentRenderer.config\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ComponentRendererConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Constructor of a specific type of component to be rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButton.html":{"url":"interfaces/ContextualButton.html","title":"interface - ContextualButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability dependends on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handler\n                                \n                                \n                                        icon\n                                \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButtonConfig.html":{"url":"interfaces/ContextualButtonConfig.html","title":"interface - ContextualButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A configuration that descibes all the information about the contextual buttons.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        buttonContents\n                                \n                                \n                                        buttons\n                                \n                                \n                                            Optional\n                                        featured\n                                \n                                \n                                            Optional\n                                        featuredCount\n                                \n                                \n                                        position\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buttonContents\n                                    \n                                \n                                \n                                    \n                                        buttonContents:         TextIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the title should be the button label, icon, or both\nDefaults to ICON if unset.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttons\n                                    \n                                \n                                \n                                    \n                                        buttons:     ContextualButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of all the contextual buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featured\n                                    \n                                \n                                \n                                    \n                                        featured:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An ordered list of ContextualButton.ids of buttons that should be in a featured position.\nOnly non-hidden buttons will be shown.\nIf featured is not set, all buttons will become featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featuredCount\n                                    \n                                \n                                \n                                    \n                                        featuredCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How many buttons should display on the featured section.\nUsed when you want to set a limit on the number of featured buttons shown.\nIf featuredCount is not set, it will default to the total number of buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         ContextualButtonPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ContextualButtonPosition\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Where the buttons should display on the grid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CsvExporterService.html":{"url":"injectables/CsvExporterService.html","title":"injectable - CsvExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CsvExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/csv-exporter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCsv\n                            \n                            \n                                    Public\n                                downloadCsvFile\n                            \n                            \n                                    Public\n                                hasPotentialInjection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(rows: any[][], shouldSanitize)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a string that can be used to create a Blob for a CSV\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            downloadCsvFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadCsvFile(csvFile: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:38\n                \n            \n\n\n            \n                \n                    Does a client side download\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    csvFile\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string contents of a CSV file to be downloaded\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the file to be downloaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPotentialInjection(rows: any[][])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:29\n                \n            \n\n\n            \n                \n                    Whether the CSV that would result from the export is at risk of code injection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nexport class CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param rows 2D array of data. First row is the names for the fields\n     * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n     * possible code injection\n     */\n    public createCsv(rows: any[][], shouldSanitize = false): string {\n        return rows.map(row => processRow(row, shouldSanitize)).join('\\n');\n    }\n\n    /**\n     * Whether the CSV that would result from the export is at risk of code injection\n     * @param rows 2D array of data. First row is the names for the fields\n     */\n    public hasPotentialInjection(rows: any[][]): boolean {\n        return rows.some(hasPotentialInjection);\n    }\n\n    /**\n     * Does a client side download\n     * @param csvFile The string contents of a CSV file to be downloaded\n     * @param filename The name of the file to be downloaded\n     */\n    public downloadCsvFile(csvFile: string, filename: string): void {\n        const mimeType = 'text/csv;charset=utf-8;';\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst LEADING_CONTROL_CHAR = /^[-+=@]/;\n\n/**\n * Whether the given row data is at risk of code injection when exported to CSV.\n */\nfunction hasPotentialInjection(row: unknown[]): boolean {\n    return row.some(cell => LEADING_CONTROL_CHAR.test(encodeValue(cell, false)));\n}\n\n/**\n * Returns a string\n * @param row A list of cells to be turned into a CSV string, separated by commas\n * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n * possible code injection\n */\nfunction processRow(row: unknown[], shouldSanitize: boolean): string {\n    return row.map(cell => encodeValue(cell, shouldSanitize)).join(',');\n}\n\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param cellValue Cell cellValue to be encoded\n * @param shouldSanitize If this cellValue starts with a control should it be\n * prefixed with the tab character\n */\nfunction encodeValue(cellValue: unknown, shouldSanitize: boolean): string {\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    let result = innerValue.replace(/\"/g, '\"\"');\n\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    if (shouldSanitize) {\n        return sanitizeString(result);\n    }\n    return result;\n}\n\n/**\n * Prevents CSV injection by prefixing with a tab character if the string contains a\n * special character.\n */\nfunction sanitizeString(value: string): string {\n    if (LEADING_CONTROL_CHAR.test(value)) {\n        return '\\t' + value;\n    }\n    return value;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CypressWidgetDriver.html":{"url":"classes/CypressWidgetDriver.html","title":"class - CypressWidgetDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CypressWidgetDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/cypress-widget-driver.ts\n        \n\n            \n                Description\n            \n            \n                A WidgetDriver that knows how to interface with the Cypress framework.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WidgetDriver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assert\n                            \n                            \n                                check\n                            \n                            \n                                classes\n                            \n                            \n                                clearInputValue\n                            \n                            \n                                click\n                            \n                            \n                                disabled\n                            \n                            \n                                exists\n                            \n                            \n                                find\n                            \n                            \n                                getChecked\n                            \n                            \n                                    Private\n                                getElement\n                            \n                            \n                                    Private\n                                getElements\n                            \n                            \n                                getInputValue\n                            \n                            \n                                getInputValues\n                            \n                            \n                                getText\n                            \n                            \n                                getTexts\n                            \n                            \n                                hidden\n                            \n                            \n                                select\n                            \n                            \n                                sendKeyboardKey\n                            \n                            \n                                    Async\n                                setInputValue\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/cypress-widget-driver.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            assert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assert(expectation: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expectation\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            classes\n                        \n                        \n                    \n                \n            \n            \n                \nclasses(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInputValue\n                        \n                        \n                    \n                \n            \n            \n                \nclearInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disabled\n                        \n                        \n                    \n                \n            \n            \n                \ndisabled(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \nexists(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(params: FindParams> | FindableWidget)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            FindParams> | FindableWidget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     W\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChecked\n                        \n                        \n                    \n                \n            \n            \n                \ngetChecked(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getElement(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getElements(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValues\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValues(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \ngetText(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \ngetTexts(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hidden\n                        \n                        \n                    \n                \n            \n            \n                \nhidden(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(option: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendKeyboardKey\n                        \n                        \n                    \n                \n            \n            \n                \nsendKeyboardKey(key: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shouldAppend\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            visible\n                        \n                        \n                    \n                \n            \n            \n                \nvisible(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-driver.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WidgetDriver } from './base-widget-object';\nimport { CypressWidgetFinder } from './cypress-widget-finder';\nimport { FindableWidget, FindParams } from './widget-object';\n\ndeclare const Cypress;\n\n/**\n * Given some Cypress Chainable, returns a promise that will resolve when that Chainable completes\n * and rejects when it fails.\n */\nexport function promisify(chain): Promise {\n    return new Cypress.Promise((resolve, reject) => {\n        // We must subscribe to failures and bail. Without this, the Cypress runner would never stop\n\n        // // unsubscribe from test failure on both success and failure. This cleanup is essential\n        function resolvePromise(value): any {\n            resolve(value);\n            Cypress.off('fail', rejectPromise);\n        }\n        function rejectPromise(error): any {\n            reject(error);\n            Cypress.off('fail', rejectPromise);\n        }\n        Cypress.on('fail', rejectPromise);\n\n        chain.then(resolvePromise);\n    });\n}\n\n// If we load the 'cypress' module into this file, it also loads Chai which clashes with Jasmine - our testing framework of choice.\n// As such, this class isn't very type safe\n\n/**\n * A WidgetDriver that knows how to interface with the Cypress framework.\n */\nexport class CypressWidgetDriver implements WidgetDriver {\n    constructor(private element) {}\n\n    find(params: FindParams> | FindableWidget): W {\n        return new CypressWidgetFinder().find>(params, this.element);\n    }\n\n    exists(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector));\n    }\n\n    visible(cssSelector?: string): Promise {\n        return this.assert('be.visible', cssSelector);\n    }\n\n    hidden(cssSelector?: string): Promise {\n        return this.assert('not.be.visible', cssSelector);\n    }\n\n    disabled(cssSelector?: string): Promise {\n        return this.assert('be.disabled', cssSelector);\n    }\n\n    classes(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).invoke('classes'));\n    }\n\n    click(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).click());\n    }\n\n    check(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).check());\n    }\n\n    getChecked(cssSelector?: string): Promise {\n        return this.assert('be.checked', cssSelector);\n    }\n\n    select(option: string, cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).select(option));\n    }\n\n    sendKeyboardKey(key: string, cssSelector?: string): Promise {\n        const element = this.getElement(cssSelector);\n        return promisify(element.invoke('keydown', key).then(() => element.invoke('keyup', key)));\n    }\n\n    async setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise {\n        if (!shouldAppend) {\n            await this.clearInputValue(cssSelector);\n        }\n        await promisify(this.getElement(cssSelector).type(value));\n    }\n\n    clearInputValue(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).clear());\n    }\n\n    getText(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).invoke('text')).then((text: string) => text.trim());\n    }\n\n    getTexts(parentCssSelector?: string, cssSelector?: string): Promise {\n        return promisify(this.getElements(parentCssSelector, cssSelector).invoke('text')).then((texts: string[]) =>\n            texts.map(text => text.trim())\n        );\n    }\n\n    getInputValue(cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).invoke('val'));\n    }\n\n    getInputValues(parentCssSelector?: string, cssSelector?: string): Promise {\n        return promisify(this.getElements(parentCssSelector, cssSelector).val());\n    }\n\n    // tslint:disable-next-line: typedef\n    private getElement(cssSelector?: string) {\n        return cssSelector ? this.element.get(cssSelector) : this.element;\n    }\n\n    // tslint:disable-next-line: typedef\n    private getElements(parentCssSelector?: string, cssSelector?: string) {\n        return this.getElement(parentCssSelector).children(cssSelector);\n    }\n\n    private assert(expectation: string, cssSelector?: string): Promise {\n        return promisify(this.getElement(cssSelector).should(expectation));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CypressWidgetFinder.html":{"url":"classes/CypressWidgetFinder.html","title":"class - CypressWidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CypressWidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/cypress-widget-finder.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T, parent?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/cypress-widget-finder.ts:20\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CypressWidgetDriver } from './cypress-widget-driver';\nimport { FindableWidget, FindParams, isFindParamsObject } from './widget-object';\n\ndeclare const cy;\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class CypressWidgetFinder {\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T, parent?: any): InstanceType {\n        const defaults = { className: '' };\n        const { woConstructor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n\n        const ancestor = parent || cy;\n        const widget = new woConstructor(new CypressWidgetDriver(ancestor.get(query)));\n        if (!widget) {\n            throw Error(`Did not find a `);\n        }\n        return widget as InstanceType;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataExportRequestEvent.html":{"url":"interfaces/DataExportRequestEvent.html","title":"interface - DataExportRequestEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataExportRequestEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Information passed to the caller so they can fetch the data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exportData\n                                \n                                \n                                        selectedColumns\n                                \n                                \n                                        updateProgress\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exportData\n                                    \n                                \n                                \n                                    \n                                        exportData:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this when all records have been fetched to initiate the CSV creation.\nThis should only be called once after all data fetching is finished\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedColumns\n                                    \n                                \n                                \n                                    \n                                        selectedColumns:         ExportColumn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportColumn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Columns selected by the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateProgress\n                                    \n                                \n                                \n                                    \n                                        updateProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this to indicate a new value to be displayed in the progress indicator.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataExporterWidgetObject.html":{"url":"classes/DataExporterWidgetObject.html","title":"class - DataExporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataExporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.wo.ts\n        \n\n            \n                Description\n            \n            \n                Testing Object for DataExporterComponent\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clickCancel\n                            \n                            \n                                clickColumnCheckbox\n                            \n                            \n                                clickColumnDropdown\n                            \n                            \n                                clickExport\n                            \n                            \n                                removeColumn\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLoopingProgressBar\n                                \n                                \n                                    columnBubbles\n                                \n                                \n                                    columnCheckboxes\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-data-exporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickCancel\n                        \n                        \n                    \n                \n            \n            \n                \nclickCancel()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:55\n                \n            \n\n\n            \n                \n                    Clicks the cancel button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnCheckbox\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnCheckbox(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:48\n                \n            \n\n\n            \n                \n                    Clicks the checkbox next to a given column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnDropdown\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnDropdown()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:69\n                \n            \n\n\n            \n                \n                    Click the arrow to open/close the column dropdown.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickExport\n                        \n                        \n                    \n                \n            \n            \n                \nclickExport()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:62\n                \n            \n\n\n            \n                \n                    Clicks the export button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeColumn\n                        \n                        \n                    \n                \n            \n            \n                \nremoveColumn(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:40\n                \n            \n\n\n            \n                \n                    Clicks the remove button for a column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLoopingProgressBar\n                    \n                \n\n                \n                    \n                        getisLoopingProgressBar()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:18\n                                \n                            \n                    \n                        \n                                Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnBubbles\n                    \n                \n\n                \n                    \n                        getcolumnBubbles()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:25\n                                \n                            \n                    \n                        \n                                The strings for the available column bubbles.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnCheckboxes\n                    \n                \n\n                \n                    \n                        getcolumnCheckboxes()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:32\n                                \n                            \n                    \n                        \n                                The strings for the available column checkboxes.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../utils/test/widget-object';\nimport { DataExporterComponent } from './data-exporter.component';\n\n/**\n * Testing Object for {@link DataExporterComponent}\n */\nexport class DataExporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-data-exporter';\n\n    /**\n     * Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n     */\n    get isLoopingProgressBar(): boolean {\n        return !!this.findElement('.progress.loop');\n    }\n\n    /**\n     * The strings for the available column bubbles.\n     */\n    get columnBubbles(): string[] {\n        return this.getTexts('.column-label');\n    }\n\n    /**\n     * The strings for the available column checkboxes.\n     */\n    get columnCheckboxes(): string[] {\n        return this.getTexts('.column-checkbox');\n    }\n\n    /**\n     * Clicks the remove button for a column\n     * @param index Index of column, 0 based\n     */\n    removeColumn(index: number): void {\n        this.click(`.column-label:nth-of-type(${index + 1}) clr-icon`);\n    }\n\n    /**\n     * Clicks the checkbox next to a given column\n     * @param index Index of column, 0 based\n     */\n    clickColumnCheckbox(index: number): void {\n        this.click(`.column-checkbox:nth-of-type(${index + 1}) input`);\n    }\n\n    /**\n     * Clicks the cancel button.\n     */\n    clickCancel(): void {\n        this.click('.cancel');\n    }\n\n    /**\n     * Clicks the export button.\n     */\n    clickExport(): void {\n        this.click('.export');\n    }\n\n    /**\n     * Click the arrow to open/close the column dropdown.\n     */\n    clickColumnDropdown(): void {\n        this.click('.dropdown-button');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatagridFilter.html":{"url":"classes/DatagridFilter.html","title":"class - DatagridFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatagridFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Extended by filter components used in DatagridComponent. Those components can only be used inside a\nclr-dg-filter component and are dynamically rendered by ComponentRendererOutletDirective using\nGridColumn.filter\nV is the type of filter input value that is passed into setValue method\nC extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            ClrDatagridFilterInterface\n                            ComponentRenderer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                                \n                                    queryField\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:71\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:87\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:137\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:112\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:99\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:122\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:127\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:107\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:117\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n                \n                    \n                        getconfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:80\n                                \n                            \n\n                \n                    \n                        setconfig(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        queryField\n                    \n                \n\n                \n                    \n                        getqueryField()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:147\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridMultiSelectFilterComponent.html":{"url":"components/DatagridMultiSelectFilterComponent.html","title":"component - DatagridMultiSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridMultiSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with list of checkboxes to select\nmultiple options\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'state',\n      queryFieldName: 'state',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridMultiSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 'CA',\n                  display: 'California'\n              }, {\n                  value: 'MA',\n                  display: 'Massachusetts'\n              }],\n              value: ['MA', 'NC'],\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-multiselect-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./datagrid-multiselect-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \nonBeforeSetConfig(config: DatagridMultiSelectFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:87\n                \n            \n\n\n            \n                \n                    Overrides the config property because, the formGroup controls are defined by the config set by the caller.\nValue of each option becomes a formControl name inside the formGroup.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridMultiSelectFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MultiSelectOptionInternal[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:77\n                            \n                        \n\n                \n                    \n                        Used inside the HTML to instantiate checkbox options\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                \n                    {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            {{ option.isTranslatable ? (option.display | translate) : option.display }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridMultiSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridMultiSelectFilterConfig.html":{"url":"interfaces/DatagridMultiSelectFilterConfig.html","title":"interface - DatagridMultiSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridMultiSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     MultiSelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MultiSelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridNumericFilterComponent.html":{"url":"components/DatagridNumericFilterComponent.html","title":"component - DatagridNumericFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridNumericFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-numeric-filter\n            \n\n            \n                styleUrls\n                datagrid-numeric-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                datagrid-numeric-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _unit\n                            \n                            \n                                    Private\n                                _unitOptions\n                            \n                            \n                                fromInput\n                            \n                            \n                                maxNumberLength\n                            \n                            \n                                toInput\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                unit\n                            \n                            \n                                unitOptions\n                            \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    unitOptions\n                                \n                                \n                                    unit\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n                \n                    \n                        Type :         Unit\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n                \n                    \n                        Type :         Unit[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: DatagridNumericFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridNumericFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: DatagridNumericFilterValue)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                DatagridNumericFilterValue\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:62\n                            \n                        \n\n                \n                    \n                        Base unit to which selected units are converted\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unitOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:48\n                            \n                        \n\n                \n                    \n                        Options for the select input of units\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('from')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxNumberLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Number.MAX_SAFE_INTEGER.toString().length\n\n                        \n                    \n                    \n                        \n                            Default value : Number.MAX_SAFE_INTEGER.toString().length\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('to')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n\n                \n                    \n                        getunitOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:55\n                                \n                            \n\n                \n                    \n                        setunitOptions(val: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n\n                \n                    \n                        getunit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:70\n                                \n                            \n\n                \n                    \n                        setunit(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n        \n        \n    \n\n    \n        \n        \n        \n    \n\n\n    \n\n    \n                \n                    datagrid-numeric-filter.component.scss\n                \n                vcd-form-input {\n    & ::ng-deep .clr-form-control,\n    & ::ng-deep .clr-subtext {\n        margin-top: 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridNumericFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridNumericFilterConfig.html":{"url":"interfaces/DatagridNumericFilterConfig.html","title":"interface - DatagridNumericFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridNumericFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        unit\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridSelectFilterComponent.html":{"url":"components/DatagridSelectFilterComponent.html","title":"component - DatagridSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with select input\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'age',\n      queryFieldName: 'age',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 30,\n                  display: 'Thirty'\n              }, {\n                  value: 60,\n                  display: 'sixty'\n              }],\n              value: 60,\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-select-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-select-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anyChoice\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anyChoice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SelectOption\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        value: '',\n        display: '',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:58\n                            \n                        \n\n                \n                    \n                        Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    {{ anyChoice.display }}\n                    {{\n                        option.isTranslatable ? (option.display | translate) : option.display\n                    }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            {{ anyChoice.display }}                    {{                        option.isTranslatable ? (option.display | translate) : option.display                    }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridSelectFilterConfig.html":{"url":"interfaces/DatagridSelectFilterConfig.html","title":"interface - DatagridSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                List of select options and initial value for the filter are passed through this\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        customFiql\n                                \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFiql\n                                    \n                                \n                                \n                                    \n                                        customFiql:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Switch to disable conversion of filter value to FIQL. Used by DatagridSelectFilterComponent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridStringFilterComponent.html":{"url":"components/DatagridStringFilterComponent.html","title":"component - DatagridStringFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridStringFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-string-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-string-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addWildCard\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addWildCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addWildCard(input: string, position: WildCardPosition, wildcardCharacter: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:64\n                \n            \n\n\n            \n                \n                    Wraps a string with a wrapCharacter in given position;\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    position\n                                    \n                                                WildCardPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    wildcardCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridStringFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridStringFilterConfig.html":{"url":"interfaces/DatagridStringFilterConfig.html","title":"interface - DatagridStringFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridStringFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Configures the '*' position in the FIQL string output\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        wildCardPosition\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        wildCardPosition\n                                    \n                                \n                                \n                                    \n                                        wildCardPosition:         WildCardPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WildCardPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPane.html":{"url":"interfaces/DetailPane.html","title":"interface - DetailPane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration objet used to create the detail pane on the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        header\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:         ComponentRendererConstructor>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The contents that go within this detail pane.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                    \n                                \n                                \n                                    \n                                        header:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header that goes on top of this detail pane.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPaneConfig.html":{"url":"interfaces/DetailPaneConfig.html","title":"interface - DetailPaneConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPaneConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail pane component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail pane should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailRowConfig.html":{"url":"interfaces/DetailRowConfig.html","title":"interface - DetailRowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailRowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail row component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        index\n                                \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The total number of rows in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index this detail row is in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail row should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DomUtil.html":{"url":"classes/DomUtil.html","title":"class - DomUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DomUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/dom-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                scrollToElement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            scrollToElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scrollToElement(elRef: ElementRef, classSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/dom-util.ts:19\n                \n            \n\n\n            \n                \n                    Scrolls view to a element so that the element becomes visible in the viewport.\nIf a css style selector is provided then the element to scroll is the html element\ndescribed by the css selector which parent is the provided element.\nId a css style selector is not provided then the element to scroll is the provided\nelement itself.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elRef\n                                    \n                                                ElementRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the view's element.\n\n                                    \n                                \n                                \n                                    classSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the css-style selector for the element to scroll to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ElementRef } from '@angular/core';\n\nexport class DomUtil {\n    /**\n     * Scrolls view to a element so that the element becomes visible in the viewport.\n     * If a css style selector is provided then the element to scroll is the html element\n     * described by the css selector which parent is the provided element.\n     * Id a css style selector is not provided then the element to scroll is the provided\n     * element itself.\n     *\n     * @param elRef the view's element.\n     * @param classSelector the css-style selector for the element to scroll to.\n     */\n    public static scrollToElement(elRef: ElementRef, classSelector?: string): void {\n        if (!elRef || !elRef.nativeElement) {\n            return;\n        }\n        const el: HTMLElement = elRef.nativeElement as HTMLElement;\n        const elementToScroll = classSelector ? el.querySelector(classSelector) : el;\n\n        if (elementToScroll) {\n            elementToScroll.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DropdownComponent.html":{"url":"components/DropdownComponent.html","title":"component - DropdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DropdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/dropdown/dropdown.component.ts\n\n\n    \n        Description\n    \n    \n        Dumb component used for displaying nested drop downs\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dropdown\n            \n\n            \n                styleUrls\n                ./dropdown.component.scss\n            \n\n\n\n            \n                templateUrl\n                dropdown.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _dropdownItemContents\n                            \n                            \n                                    Private\n                                _items\n                            \n                            \n                                clipTextConfig\n                            \n                            \n                                shouldShowIcon\n                            \n                            \n                                shouldShowText\n                            \n                            \n                                shouldShowTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                flattenItemsWithSingleChild\n                            \n                            \n                                    Private\n                                flattenNestedItemsWithSingleChild\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dropdownItemContents\n                            \n                            \n                                dropdownPosition\n                            \n                            \n                                dropdownTriggerBtnIcon\n                            \n                            \n                                dropdownTriggerBtnTxt\n                            \n                            \n                                dropdownTriggerButtonClassName\n                            \n                            \n                                isDropdownDisabled\n                            \n                            \n                                isItemDisabledCb\n                            \n                            \n                                isNestedDropdown\n                            \n                            \n                                items\n                            \n                            \n                                nestedDropdownPosition\n                            \n                            \n                                onItemClickedCb\n                            \n                            \n                                trackByFunction\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropdownItemContents\n                                \n                                \n                                    items\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dropdownItemContents\n                    \n                \n                \n                    \n                        Type :         TextIcon\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:117\n                            \n                        \n                \n                    \n                        Decides what goes into the action buttons\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropdownPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:88\n                            \n                        \n                \n                    \n                        The position the root dropdown with respect to root dropdown trigger button. Refer to clrPosition for it's values\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropdownTriggerBtnIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ellipsis-horizontal'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:77\n                            \n                        \n                \n                    \n                        Icon shown in the button that opens the root dropdown when clicked\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropdownTriggerBtnTxt\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'vcd.cc.action.menu.actions'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:72\n                            \n                        \n                \n                    \n                        Text Content of the button that opens the root dropdown when clicked\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropdownTriggerButtonClassName\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:140\n                            \n                        \n                \n                    \n                        Css class name added to the dropdown trigger buttons\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isDropdownDisabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:110\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        isItemDisabledCb\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:103\n                            \n                        \n                \n                    \n                        Method to calculate disabled state of an item\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isNestedDropdown\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:108\n                            \n                        \n                \n                    \n                        Used for displaying different button contents in the root dropdown trigger button vs nested dropdown trigger button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:130\n                            \n                        \n                \n                    \n                        Nested list of dropdown objects\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nestedDropdownPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'right-top'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:93\n                            \n                        \n                \n                    \n                        The position of all the nested dropdowns clrPosition. Default is 'bottom-left'\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        onItemClickedCb\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:98\n                            \n                        \n                \n                    \n                        Dropdown item click handler\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        trackByFunction\n                    \n                \n                \n                    \n                        Type :     TrackByFunction\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:83\n                            \n                        \n                \n                    \n                        The ngForTrackBy method used for rendering of a dropdown actions or for rendering nested drop downs\nNOTE: Without this, nested drop downs don't get rendered on the screen\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            flattenItemsWithSingleChild\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    flattenItemsWithSingleChild(items: T[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            flattenNestedItemsWithSingleChild\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    flattenNestedItemsWithSingleChild(items: T[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dropdown.component.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _dropdownItemContents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TextIcon\n\n                        \n                    \n                    \n                        \n                            Default value : TextIcon.TEXT\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clipTextConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CliptextConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        mouseoutDelay: 0,\n        size: TooltipSize.md,\n        disabled: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:63\n                            \n                        \n\n                \n                    \n                        Default configuration for vcdShowClippedText directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowIcon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : (TextIcon.ICON & this.dropdownItemContents) === TextIcon.ICON\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:48\n                            \n                        \n\n                \n                    \n                        If a icon should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : (TextIcon.TEXT & this.dropdownItemContents) === TextIcon.TEXT\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:53\n                            \n                        \n\n                \n                    \n                        If a text should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowTooltip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : this.dropdownItemContents === TextIcon.ICON\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:58\n                            \n                        \n\n                \n                    \n                        If the contextual buttons with icons should have a tooltip\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropdownItemContents\n                    \n                \n\n                \n                    \n                        getdropdownItemContents()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:122\n                                \n                            \n\n                \n                    \n                        setdropdownItemContents(textIcon)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:117\n                                \n                            \n                    \n                        \n                                Decides what goes into the action buttons\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            textIcon\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    An enum that describes the possible ways to display the button title\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n\n                \n                    \n                        getitems()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:133\n                                \n                            \n\n                \n                    \n                        setitems(items: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dropdown.component.ts:130\n                                \n                            \n                    \n                        \n                                Nested list of dropdown objects\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            items\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input, TrackByFunction } from '@angular/core';\nimport { TextIcon } from '../common/interfaces';\nimport { CliptextConfig, TooltipSize } from '../lib/directives';\n\n/**\n * Object representing an item of the dropdown\n */\ninterface DropdownItem> {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey: string;\n    /**\n     * List of items that will be grouped under this item\n     */\n    children?: T[];\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n    /**\n     * Css class of the dropdown item. Must be unique among all dropdown items within the dropdown items list\n     */\n    class: string;\n}\n\n/**\n * Dumb component used for displaying nested drop downs\n */\n@Component({\n    selector: 'vcd-dropdown',\n    templateUrl: 'dropdown.component.html',\n    styleUrls: ['./dropdown.component.scss'],\n})\nexport class DropdownComponent> {\n    /**\n     * If a icon should be displayed inside contextual buttons\n     */\n    shouldShowIcon: boolean = (TextIcon.ICON & this.dropdownItemContents) === TextIcon.ICON;\n\n    /**\n     * If a text should be displayed inside contextual buttons\n     */\n    shouldShowText: boolean = (TextIcon.TEXT & this.dropdownItemContents) === TextIcon.TEXT;\n\n    /**\n     * If the contextual buttons with icons should have a tooltip\n     */\n    shouldShowTooltip: boolean = this.dropdownItemContents === TextIcon.ICON;\n\n    /**\n     * Default configuration for vcdShowClippedText directive\n     */\n    clipTextConfig: CliptextConfig = {\n        mouseoutDelay: 0,\n        size: TooltipSize.md,\n        disabled: false,\n    };\n\n    /**\n     * Text Content of the button that opens the root dropdown when clicked\n     */\n    @Input() dropdownTriggerBtnTxt: string = 'vcd.cc.action.menu.actions';\n\n    /**\n     * Icon shown in the button that opens the root dropdown when clicked\n     */\n    @Input() dropdownTriggerBtnIcon: string = 'ellipsis-horizontal';\n\n    /**\n     * The {@link ngForTrackBy} method used for rendering of a dropdown actions or for rendering nested drop downs\n     * NOTE: Without this, nested drop downs don't get rendered on the screen\n     */\n    @Input() trackByFunction: TrackByFunction;\n\n    /**\n     * The position the root dropdown with respect to root dropdown trigger button. Refer to {@link clrPosition} for it's values\n     */\n    @Input() dropdownPosition: string;\n\n    /**\n     * The position of all the nested dropdowns {@link clrPosition}. Default is 'bottom-left'\n     */\n    @Input() nestedDropdownPosition: string = 'right-top';\n\n    /**\n     * Dropdown item click handler\n     */\n    @Input() onItemClickedCb: (item: T) => void;\n\n    /**\n     * Method to calculate disabled state of an item\n     */\n    @Input() isItemDisabledCb: (item: T) => boolean;\n\n    /**\n     * Used for displaying different button contents in the root dropdown trigger button vs nested dropdown trigger button\n     */\n    @Input() isNestedDropdown = false;\n\n    @Input() isDropdownDisabled: boolean;\n\n    private _dropdownItemContents: TextIcon = TextIcon.TEXT;\n    /**\n     * Decides what goes into the action buttons\n     * @param textIcon An enum that describes the possible ways to display the button title\n     */\n    @Input() set dropdownItemContents(textIcon: TextIcon) {\n        this.shouldShowIcon = (TextIcon.ICON & textIcon) === TextIcon.ICON;\n        this.shouldShowText = (TextIcon.TEXT & textIcon) === TextIcon.TEXT;\n        this.shouldShowTooltip = textIcon === TextIcon.ICON;\n    }\n    get dropdownItemContents(): TextIcon {\n        return this._dropdownItemContents;\n    }\n\n    private _items: T[];\n    /**\n     * Nested list of dropdown objects\n     */\n    @Input() set items(items: T[]) {\n        this._items = this.flattenNestedItemsWithSingleChild(items);\n    }\n    get items(): T[] {\n        return this._items;\n    }\n\n    /**\n     * Css class name added to the dropdown trigger buttons\n     */\n    @Input() dropdownTriggerButtonClassName: string;\n\n    private flattenNestedItemsWithSingleChild(items: T[]): T[] {\n        items.forEach(item => {\n            // Flatten out the dropdowns with single children at each level of dropdown\n            this.flattenItemsWithSingleChild(items);\n            if (item.children) {\n                // Repeat the same for other nested levels\n                this.flattenNestedItemsWithSingleChild(item.children);\n            }\n        });\n        return items;\n    }\n\n    private flattenItemsWithSingleChild(items: T[]): void {\n        const singleChildItemIndices: number[] = [];\n        items.forEach((item, index) => {\n            // Collect the indices of single child items\n            if (item.children && item.children.length === 1) {\n                singleChildItemIndices.push(index);\n            }\n        });\n        singleChildItemIndices.forEach(singleChildItemIndex => {\n            // Delete them from the original list and add their children to the beginning of the current list\n            const singleChildItem = items.splice(singleChildItemIndex, 1).pop();\n            items.unshift(singleChildItem.children[0]);\n        });\n    }\n}\n\n    \n\n    \n        \n    \n        \n            {{ dropdownTriggerBtnTxt | translate }}\n            \n        \n        \n    \n\n    \n        \n            \n                \n                    \n                    \n                \n\n                \n                    \n                        {{\n                            action.isTranslatable === false ? action.textKey : (action.textKey | translate)\n                        }}\n\n                        \n                            \n                            {{\n                                action.textKey | translate\n                            }}\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./dropdown.component.scss\n                \n                .nested-dropdown-menu ::ng-deep .nested-dropdown {\n    display: block;\n    white-space: nowrap;\n    max-width: 13rem;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ dropdownTriggerBtnTxt | translate }}                                                                                                                                                                                            {{                            action.isTranslatable === false ? action.textKey : (action.textKey | translate)                        }}                                                                                {{                                action.textKey | translate                            }}                                                                                    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DropdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownItem.html":{"url":"interfaces/DropdownItem.html","title":"interface - DropdownItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropdownItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown.component.ts\n        \n\n            \n                Description\n            \n            \n                Object representing an item of the dropdown\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        children\n                                \n                                \n                                        class\n                                \n                                \n                                            Optional\n                                        icon\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                        textKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of items that will be grouped under this item\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Css class of the dropdown item. Must be unique among all dropdown items within the dropdown items list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    To mark if the #ActionItem.textKey has to be translated or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textKey\n                                    \n                                \n                                \n                                    \n                                        textKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The i18n key or a translated string for contents of a action button\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, TrackByFunction } from '@angular/core';\nimport { TextIcon } from '../common/interfaces';\nimport { CliptextConfig, TooltipSize } from '../lib/directives';\n\n/**\n * Object representing an item of the dropdown\n */\ninterface DropdownItem> {\n    /**\n     * The i18n key or a translated string for contents of a action button\n     */\n    textKey: string;\n    /**\n     * List of items that will be grouped under this item\n     */\n    children?: T[];\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * To mark if the {@link #ActionItem.textKey} has to be translated or not\n     */\n    isTranslatable?: boolean;\n    /**\n     * Css class of the dropdown item. Must be unique among all dropdown items within the dropdown items list\n     */\n    class: string;\n}\n\n/**\n * Dumb component used for displaying nested drop downs\n */\n@Component({\n    selector: 'vcd-dropdown',\n    templateUrl: 'dropdown.component.html',\n    styleUrls: ['./dropdown.component.scss'],\n})\nexport class DropdownComponent> {\n    /**\n     * If a icon should be displayed inside contextual buttons\n     */\n    shouldShowIcon: boolean = (TextIcon.ICON & this.dropdownItemContents) === TextIcon.ICON;\n\n    /**\n     * If a text should be displayed inside contextual buttons\n     */\n    shouldShowText: boolean = (TextIcon.TEXT & this.dropdownItemContents) === TextIcon.TEXT;\n\n    /**\n     * If the contextual buttons with icons should have a tooltip\n     */\n    shouldShowTooltip: boolean = this.dropdownItemContents === TextIcon.ICON;\n\n    /**\n     * Default configuration for vcdShowClippedText directive\n     */\n    clipTextConfig: CliptextConfig = {\n        mouseoutDelay: 0,\n        size: TooltipSize.md,\n        disabled: false,\n    };\n\n    /**\n     * Text Content of the button that opens the root dropdown when clicked\n     */\n    @Input() dropdownTriggerBtnTxt: string = 'vcd.cc.action.menu.actions';\n\n    /**\n     * Icon shown in the button that opens the root dropdown when clicked\n     */\n    @Input() dropdownTriggerBtnIcon: string = 'ellipsis-horizontal';\n\n    /**\n     * The {@link ngForTrackBy} method used for rendering of a dropdown actions or for rendering nested drop downs\n     * NOTE: Without this, nested drop downs don't get rendered on the screen\n     */\n    @Input() trackByFunction: TrackByFunction;\n\n    /**\n     * The position the root dropdown with respect to root dropdown trigger button. Refer to {@link clrPosition} for it's values\n     */\n    @Input() dropdownPosition: string;\n\n    /**\n     * The position of all the nested dropdowns {@link clrPosition}. Default is 'bottom-left'\n     */\n    @Input() nestedDropdownPosition: string = 'right-top';\n\n    /**\n     * Dropdown item click handler\n     */\n    @Input() onItemClickedCb: (item: T) => void;\n\n    /**\n     * Method to calculate disabled state of an item\n     */\n    @Input() isItemDisabledCb: (item: T) => boolean;\n\n    /**\n     * Used for displaying different button contents in the root dropdown trigger button vs nested dropdown trigger button\n     */\n    @Input() isNestedDropdown = false;\n\n    @Input() isDropdownDisabled: boolean;\n\n    private _dropdownItemContents: TextIcon = TextIcon.TEXT;\n    /**\n     * Decides what goes into the action buttons\n     * @param textIcon An enum that describes the possible ways to display the button title\n     */\n    @Input() set dropdownItemContents(textIcon: TextIcon) {\n        this.shouldShowIcon = (TextIcon.ICON & textIcon) === TextIcon.ICON;\n        this.shouldShowText = (TextIcon.TEXT & textIcon) === TextIcon.TEXT;\n        this.shouldShowTooltip = textIcon === TextIcon.ICON;\n    }\n    get dropdownItemContents(): TextIcon {\n        return this._dropdownItemContents;\n    }\n\n    private _items: T[];\n    /**\n     * Nested list of dropdown objects\n     */\n    @Input() set items(items: T[]) {\n        this._items = this.flattenNestedItemsWithSingleChild(items);\n    }\n    get items(): T[] {\n        return this._items;\n    }\n\n    /**\n     * Css class name added to the dropdown trigger buttons\n     */\n    @Input() dropdownTriggerButtonClassName: string;\n\n    private flattenNestedItemsWithSingleChild(items: T[]): T[] {\n        items.forEach(item => {\n            // Flatten out the dropdowns with single children at each level of dropdown\n            this.flattenItemsWithSingleChild(items);\n            if (item.children) {\n                // Repeat the same for other nested levels\n                this.flattenNestedItemsWithSingleChild(item.children);\n            }\n        });\n        return items;\n    }\n\n    private flattenItemsWithSingleChild(items: T[]): void {\n        const singleChildItemIndices: number[] = [];\n        items.forEach((item, index) => {\n            // Collect the indices of single child items\n            if (item.children && item.children.length === 1) {\n                singleChildItemIndices.push(index);\n            }\n        });\n        singleChildItemIndices.forEach(singleChildItemIndex => {\n            // Delete them from the original list and add their children to the beginning of the current list\n            const singleChildItem = items.splice(singleChildItemIndex, 1).pop();\n            items.unshift(singleChildItem.children[0]);\n        });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DropdownModule.html":{"url":"modules/DropdownModule.html","title":"module - DropdownModule","body":"\n                   \n\n\n\n\n    Modules\n    DropdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_imports\n\n\n\ncluster_DropdownModule_exports\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDynamicDropdownPositionDirective\n\nDynamicDropdownPositionDirective\n\nDropdownModule -->\n\nDynamicDropdownPositionDirective->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\n\n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective  -->\n\nDropdownModule->DynamicDropdownPositionDirective \n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nDropdownModule -->\n\nShowClippedTextDirectiveModule->DropdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/dropdown/dropdown.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DropdownComponent\n                        \n                        \n                            DynamicDropdownPositionDirective\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DropdownComponent\n                        \n                        \n                            DynamicDropdownPositionDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DropdownComponent } from './dropdown.component';\nimport { DynamicDropdownPositionDirective } from './dynamic-dropdown-position.directive';\n\n@NgModule({\n    declarations: [DropdownComponent, DynamicDropdownPositionDirective],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule, ShowClippedTextDirectiveModule],\n    exports: [DropdownComponent, DynamicDropdownPositionDirective],\n})\nexport class DropdownModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DynamicDropdownPositionDirective.html":{"url":"directives/DynamicDropdownPositionDirective.html","title":"directive - DynamicDropdownPositionDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DynamicDropdownPositionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n        \n\n            \n                Description\n            \n            \n                Directive for ClrDropDown which repositions the drop-down menu dynamically based on the available space.\nIf there is not enough space to show the whole drop-down menu, then leave the default position which is bottom and\nusers have to scroll down to access it.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterContentInit\n            \n\n            \n                Example\n            \n            \n                        \n                            ```\n * \n *     \n *         {{ 'vm.actions' | translate }}\n *         \n *         \n *     \n *         Dropdown header\n *         Action 1\n *         Action 2\n *         \n *         Link 1\n *         Link 2\n *     \n * \n * ```\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        clr-dropdown[vcdDynamicDropdown]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                contentAreaElement\n                            \n                            \n                                    Private\n                                dropdownMenuElement\n                            \n                            \n                                    Private\n                                dropdownMenuRect\n                            \n                            \n                                    Private\n                                dropdownTriggerElement\n                            \n                            \n                                    Private\n                                dropdownTriggerRect\n                            \n                            \n                                    Private\n                                isInsideModal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterContentInit\n                            \n                            \n                                    Private\n                                resetPosition\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropdownMenu\n                                \n                                \n                                    positionTop\n                                \n                                \n                                    positionLeft\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, renderer: Renderer2, document: Document, dropDownBtn: ClrDropdown, parentDropdown: DynamicDropdownPositionDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:84\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        document\n                                                  \n                                                        \n                                                                    Document\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dropDownBtn\n                                                  \n                                                        \n                                                                    ClrDropdown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentDropdown\n                                                  \n                                                        \n                                                                    DynamicDropdownPositionDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:resize\n                        \n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:198\n                \n            \n\n\n            \n                \n                    On window resize, close the dropdown when it is open, otherwise we need to recalculate again its position\nand reposition it, which may not be a good user experience.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterContentInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterContentInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPosition(element: HTMLElement, top: number, left: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:188\n                \n            \n\n\n            \n                \n                    Reposition the dropdown element by setting top and left position.\nNote: The dropdown is position absolute by setting position, top and left properties AND then is position\nrelatively to itself by setting transform: translateX/Y property.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    left\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            contentAreaElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownMenuElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownMenuRect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownTriggerElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dropdownTriggerRect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInsideModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:63\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropdownMenu\n                    \n                \n\n\n                \n                    \n                        setdropdownMenu(dropdown)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:66\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            dropdown\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        positionTop\n                    \n                \n\n                \n                    \n                        getpositionTop()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:101\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        positionLeft\n                    \n                \n\n                \n                    \n                        getpositionLeft()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/dropdown/dynamic-dropdown-position.directive.ts:134\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    Optional,\n    Renderer2,\n    SkipSelf,\n} from '@angular/core';\nimport { ClrDropdown, ClrDropdownMenu } from '@clr/angular';\n\nconst CONTENT_AREA_SELECTOR = '.content-area';\nconst NO_SCROLLING_CLASSNAME = 'no-scrolling'; // Set by Clarity when a modal is opened\n// Extra space on the right and left of drop down menus to shift them left or right and prevent any clipping\nconst MENU_BUFFER_SPACE = 150;\n\n/**\n * Directive for ClrDropDown which repositions the drop-down menu dynamically based on the available space.\n *\n * If there is not enough space to show the whole drop-down menu, then leave the default position which is `bottom` and\n * users have to scroll down to access it.\n *\n * @example\n * ```\n * \n *     \n *         {{ 'vm.actions' | translate }}\n *         \n *         \n *     \n *         Dropdown header\n *         Action 1\n *         Action 2\n *         \n *         Link 1\n *         Link 2\n *     \n * \n * ```\n */\n/**\n * This component is marked as dynamic to suppress the '\"strictMetadataEmit\": true' error being reported on DI of Document\n */\n/** @dynamic */\n@Directive({\n    selector: 'clr-dropdown[vcdDynamicDropdown]',\n})\nexport class DynamicDropdownPositionDirective implements AfterContentInit {\n    private contentAreaElement: HTMLElement;\n    private dropdownTriggerElement: HTMLElement;\n    private dropdownMenuElement: HTMLElement;\n    private dropdownTriggerRect: DOMRect;\n    private dropdownMenuRect: DOMRect;\n    // Drop downs should be position absolutely to the window when they are in modal\n    private isInsideModal = false;\n\n    @ContentChild(ClrDropdownMenu, { static: false })\n    set dropdownMenu(dropdown: ClrDropdownMenu) {\n        if (dropdown) {\n            this.dropdownTriggerElement = this.elRef.nativeElement;\n            this.dropdownMenuElement = this.dropdownTriggerElement.querySelector('clr-dropdown-menu');\n            if (this.dropdownMenuElement) {\n                // Recalculate the dropdown position on open\n                this.dropdownTriggerRect = this.dropdownTriggerElement.getBoundingClientRect();\n                this.dropdownMenuRect = this.dropdownMenuElement.getBoundingClientRect();\n                this.resetPosition(this.dropdownMenuElement, this.positionTop, this.positionLeft);\n            }\n            try {\n                // Internal API\n                (dropdown as any).popoverInstance.removeScrollEventListeners();\n            } catch (e) {\n                console.error('Clarity has changed ClrDropdownMenu internal API. Please fix me!');\n                throw new Error('Clarity has changed ClrDropdownMenu internal API. Please fix me!');\n            }\n        }\n    }\n\n    constructor(\n        private elRef: ElementRef,\n        private renderer: Renderer2,\n        @Inject(DOCUMENT) private document: Document,\n        private dropDownBtn: ClrDropdown,\n        @Optional() @SkipSelf() private parentDropdown: DynamicDropdownPositionDirective\n    ) {}\n\n    ngAfterContentInit(): void {\n        this.isInsideModal = this.document.body.classList.contains(NO_SCROLLING_CLASSNAME);\n        if (!this.isInsideModal) {\n            this.contentAreaElement = this.document.body.querySelector(CONTENT_AREA_SELECTOR) as HTMLElement;\n        }\n    }\n\n    private get positionTop(): number {\n        const dropdownTriggerRect = this.dropdownTriggerRect;\n        const dropdownTriggerHeight = dropdownTriggerRect.bottom - dropdownTriggerRect.top;\n        const dropdownMenuRect = this.dropdownMenuRect;\n        const dropdownMenuHeight = dropdownMenuRect.bottom - dropdownMenuRect.top;\n\n        // When the dropdown is inside a modal and it's being clipped, its position is determined based on the window\n        if (this.isInsideModal && dropdownMenuRect.bottom > window.innerHeight) {\n            return -(dropdownMenuHeight + dropdownTriggerHeight + 1);\n        }\n        if (!this.contentAreaElement) {\n            return 0;\n        }\n        const contentAreaRect = this.contentAreaElement.getBoundingClientRect();\n        // When not in a modal, the position is relative to the `.content-area` element\n        if (dropdownMenuRect.bottom = contentAreaRect.top) {\n            // If the dropdown trigger is a dropdown item instead of a button, we shift it up by less number of pixels to avoid space\n            // between dropdown trigger and the dropdown menu\n            const isFirstDropdownTrigger = !!this.dropdownTriggerElement.querySelector('button.first-dropdown-toggle');\n            return isFirstDropdownTrigger ? -(dropdownTriggerHeight + dropdownMenuHeight) : -dropdownMenuHeight;\n        }\n        if (dropdownTriggerRect.top - dropdownMenuRect.height = contentAreaRect.right &&\n            dropdownTriggerRect.left - dropdownMenuRect.width >= contentAreaRect.left\n        ) {\n            const marginLeft = triggerComputedStyles ? parseInt(triggerComputedStyles.marginLeft, 10) : 0;\n            // If the dropdown being clipped is at the 2nd level, we want to shift it furthur left such that it would\n            // not over lap and cover the 1st level of dropdown underneath it\n            if (this.parentDropdown) {\n                const parentDropdownMenuRect = this.parentDropdown.dropdownMenuElement.getBoundingClientRect();\n                const parentDropdownWidth = parentDropdownMenuRect.right - parentDropdownMenuRect.left;\n                return -(parentDropdownWidth + dropdownMenuRect.width + marginLeft);\n            }\n            return -(dropdownMenuRect.width + marginLeft);\n        }\n        // if the dropdown is clipped at the bottom and if it is also being clipped at the top and pushed down, shift it to right\n        if (\n            dropdownMenuRect.bottom > contentAreaRect.bottom &&\n            dropdownTriggerRect.top - dropdownMenuRect.height \n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorBannerComponent.html":{"url":"components/ErrorBannerComponent.html","title":"component - ErrorBannerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ErrorBannerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/error/error-banner.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the error message only if a non empty errorMessage is passed in\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-error-banner\n            \n\n            \n                styleUrls\n                ./error-banner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./error-banner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorMessage\n                            \n                            \n                                closed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onAlertClosedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertClosable\n                            \n                            \n                                alertType\n                            \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dismissed\n                            \n                            \n                                errorMessageChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertClosable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:41\n                            \n                        \n                \n                    \n                        Marks clr-alert as closable or not\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        alertType\n                    \n                \n                \n                    \n                        Type :     \"danger\" | \"warning\" | \"info\" | \"success\"\n\n                    \n                \n                \n                    \n                        Default value : 'danger'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:36\n                            \n                        \n                \n                    \n                        Sets clr-alert type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:29\n                            \n                        \n                \n                    \n                        Two way bound errorMessage, will be cleared when the user dismisses the alert\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        dismissed\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:24\n                            \n                        \n                \n                    \n                        Emits events when the error banner is dismissed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessageChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:54\n                            \n                        \n                \n                    \n                        Emits an event when the error message is changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAlertClosedChange\n                        \n                        \n                    \n                \n            \n            \n                \nonAlertClosedChange(closed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/error/error-banner.component.ts:59\n                \n            \n\n\n            \n                \n                    Clears the error message when the alert is closed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    closed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n\n                \n                    \n                        seterrorMessage(val: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:46\n                                \n                            \n                    \n                        \n                                Sets the error message displayed by this error banner.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Component that displays the error message only if a non empty errorMessage is passed in\n */\n@Component({\n    selector: 'vcd-error-banner',\n    templateUrl: './error-banner.component.html',\n    styleUrls: ['./error-banner.component.scss'],\n})\nexport class ErrorBannerComponent {\n    private _errorMessage = '';\n\n    closed = true;\n\n    /**\n     * Emits events when the error banner is dismissed.\n     */\n    @Output() dismissed = new EventEmitter();\n\n    /**\n     * Two way bound errorMessage, will be cleared when the user dismisses the alert\n     */\n    @Input() get errorMessage(): string {\n        return this._errorMessage;\n    }\n\n    /**\n     * Sets clr-alert type\n     */\n    @Input() alertType: 'danger' | 'warning' | 'info' | 'success' = 'danger';\n\n    /**\n     * Marks clr-alert as closable or not\n     */\n    @Input() alertClosable = true;\n\n    /**\n     * Sets the error message displayed by this error banner.\n     */\n    set errorMessage(val: string) {\n        this._errorMessage = val;\n        this.closed = !val;\n    }\n\n    /**\n     * Emits an event when the error message is changed.\n     */\n    @Output() errorMessageChange = new EventEmitter();\n\n    /**\n     * Clears the error message when the alert is closed.\n     */\n    onAlertClosedChange(closed: boolean): void {\n        this._errorMessage = '';\n        this.errorMessageChange.emit('');\n        this.dismissed.next();\n    }\n}\n\n    \n\n    \n        \n    \n        {{ errorMessage }}\n    \n\n\n    \n\n    \n                \n                    ./error-banner.component.scss\n                \n                /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nclr-alert ::ng-deep .alert {\n    margin-left: 24px;\n    margin-right: 24px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ errorMessage }}    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ErrorBannerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExportColumn.html":{"url":"interfaces/ExportColumn.html","title":"interface - ExportColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExportColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Identifiers for each column that user is allowed to select\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        fieldName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Displayed in the list of columns\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the field in the JSON that is returned and converted to a viewable format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterBuilder.html":{"url":"classes/FilterBuilder.html","title":"class - FilterBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/filter-builder.ts\n        \n\n            \n                Description\n            \n            \n                Utility to reduce the verbosity required when creating complex query filter expressions.\nUsage:\nconst builder = new FilterBuilder();\nconst filter = builder\n          .is(\"isVappTemplate\").equalTo(true)\n          .and()\n          .is(\"vcd\").equalTo(vcdId)\n          .and().or(\n              builder.is(\"created\").before(userInputDate),\n              builder.is(\"uptime\").greaterThan(user)\n          );\nWill produce:\nisVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentOperator\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                    Private\n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                after\n                            \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                and\n                            \n                            \n                                    Public\n                                any\n                            \n                            \n                                    Public\n                                before\n                            \n                            \n                                    Public\n                                betweenNumbers\n                            \n                            \n                                    Private\n                                buildPartial\n                            \n                            \n                                    Private\n                                clear\n                            \n                            \n                                    Private\n                                condition\n                            \n                            \n                                    Public\n                                equalTo\n                            \n                            \n                                    Public\n                                getString\n                            \n                            \n                                    Public\n                                greaterThan\n                            \n                            \n                                    Public\n                                greaterThanOrEqualTo\n                            \n                            \n                                    Public\n                                is\n                            \n                            \n                                    Public\n                                lessThan\n                            \n                            \n                                    Public\n                                lessThanOrEqualTo\n                            \n                            \n                                    Public\n                                notEqualTo\n                            \n                            \n                                    Public\n                                or\n                            \n                            \n                                    Public\n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parent: FilterBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        FilterBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentOperator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            after\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    after(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:246\n                \n            \n\n\n            \n                \n                    Match a filter expression to be after a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            all\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    all(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:106\n                \n            \n\n\n            \n                \n                    Top level AND operator\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:72\n                \n            \n\n\n            \n                \n                    Conjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            any\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    any(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:160\n                \n            \n\n\n            \n                \n                    Top level OR operator\nconditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            before\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    before(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:238\n                \n            \n\n\n            \n                \n                    Match a filter expression to be before a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            betweenNumbers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    betweenNumbers(values: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:256\n                \n            \n\n\n            \n                \n                    Match a filter expression to be between two numbers.\nLower limit is greater or equal and upper limit is less or equal.\nIf for either of the limit is not provided value, the limit is not included in the filter expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            buildPartial\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPartial()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            condition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    condition(operator: string, value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            equalTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    equalTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:190\n                \n            \n\n\n            \n                \n                    Match a filter expression to be equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getString()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:62\n                \n            \n\n\n            \n                \n                    Create a string representing the filter parameter to be used in a query\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the filter expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:222\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:230\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            is\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    is(property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:52\n                \n            \n\n\n            \n                \n                    Initialize a filter expression\n  property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The created FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:206\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:214\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            notEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    notEqualTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:198\n                \n            \n\n\n            \n                \n                    Match a filter expression to be different to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:126\n                \n            \n\n\n            \n                \n                    Disjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:180\n                \n            \n\n\n            \n                \n                    Wrap the current expression in ()\n\n\n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const Operators: { [key: string]: string } = {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n};\n\nexport type Primitives = boolean | string | number;\n\n/**\n * Utility to reduce the verbosity required when creating complex query filter expressions.\n *\n * Usage:\n * const builder = new FilterBuilder();\n * const filter = builder\n *          .is(\"isVappTemplate\").equalTo(true)\n *          .and()\n *          .is(\"vcd\").equalTo(vcdId)\n *          .and().or(\n *              builder.is(\"created\").before(userInputDate),\n *              builder.is(\"uptime\").greaterThan(user)\n *          );\n *\n * Will produce:\n * isVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n */\nexport class FilterBuilder {\n    private result = '';\n    private parent: FilterBuilder;\n    private currentOperator: string;\n\n    constructor(parent: FilterBuilder = null) {\n        this.parent = parent;\n    }\n\n    /**\n     * Initialize a filter expression\n     *  property\n     * @returns The created FilterBuilder instance\n     */\n    public is(property: string): FilterBuilder {\n        const fb = new FilterBuilder(this);\n        fb.result = property;\n        return fb;\n    }\n\n    /**\n     * Create a string representing the filter parameter to be used in a query\n     * @returns the filter expression\n     */\n    public getString(): string {\n        const query = this.buildPartial();\n        return query;\n    }\n\n    /**\n     * Conjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public and(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.OR ||\n                (this.parent && this.parent.currentOperator === Operators.OR)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.AND;\n            }\n            this.result += Operators.AND;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level AND operator\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public all(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public or(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.AND ||\n                (this.parent && this.parent.currentOperator === Operators.AND)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.OR;\n            }\n            this.result += Operators.OR;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level OR operator\n     * conditions\n     * @returns The FilterBuilder instance\n     */\n    public any(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n            first.clear();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n                condition.clear();\n            });\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Wrap the current expression in ()\n     * @returns The FilterBuilder instance\n     */\n    public wrap(): FilterBuilder {\n        this.result = '(' + this.result + ')';\n        this.currentOperator = null;\n        return this;\n    }\n\n    /**\n     * Match a filter expression to be equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public equalTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.EQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be different to a value\n     * @returns The FilterBuilder instance\n     */\n    public notEqualTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.NEQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be less than a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThan(value: number): FilterBuilder {\n        return this.condition(Operators.LT, value);\n    }\n\n    /**\n     * Match a filter expression to be less than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.LE, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThan(value: number): FilterBuilder {\n        return this.condition(Operators.GT, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.GE, value);\n    }\n\n    /**\n     * Match a filter expression to be before a date\n     * @returns The FilterBuilder instance\n     */\n    public before(date: Date): FilterBuilder {\n        return this.condition(Operators.LT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be after a date\n     * @returns The FilterBuilder instance\n     */\n    public after(date: Date): FilterBuilder {\n        return this.condition(Operators.GT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be between two numbers.\n     * Lower limit is greater or equal and upper limit is less or equal.\n     * If for either of the limit is not provided value, the limit is not included in the filter expression.\n     * @returns The FilterBuilder instance\n     */\n    public betweenNumbers(values: number[]): FilterBuilder {\n        const builders: FilterBuilder[] = [];\n\n        if (typeof values[0] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.GE, values[0]));\n        }\n\n        if (typeof values[1] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.LE, values[1]));\n        }\n\n        return new FilterBuilder().is('').and(...builders);\n    }\n\n    private condition(operator: string, value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        const name = this.result;\n        this.result += (operator + value) as string;\n        if (moreValues.length) {\n            moreValues.forEach(val => {\n                this.result += (',' + name + operator + val) as string;\n            });\n            this.currentOperator = Operators.OR;\n        }\n        return this;\n    }\n\n    private clear(): void {\n        this.result = '';\n        this.currentOperator = '';\n        if (this.parent) {\n            this.parent.clear();\n            this.parent = null;\n        }\n    }\n\n    private buildPartial(): string {\n        if (this.parent) {\n            return `${this.parent.buildPartial()}${this.result}`;\n        } else {\n            return this.result;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterConfig.html":{"url":"interfaces/FilterConfig.html","title":"interface - FilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Properties required by all the grid filters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        queryField\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queryField\n                                    \n                                \n                                \n                                    \n                                        queryField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used as a query field for server side filtering of the grid column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     V\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     V\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Value with which grid data can be filtered before initially being rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterRendererSpec.html":{"url":"interfaces/FilterRendererSpec.html","title":"interface - FilterRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Config object required for the configuration of component that will be rendered in the column filter widget\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterTestHostComponent.html":{"url":"components/FilterTestHostComponent.html","title":"component - FilterTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FilterTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/utils/test/datagrid/filter-utils.ts\n\n\n    \n        Description\n    \n    \n        TestHostComponent that has only single column for filter testing.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                    Static\n                                filterColumn\n                            \n                            \n                                gridData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFilter\n                        \n                        \n                    \n                \n            \n            \n                \nsetFilter(filterType: Type>, finder: WidgetFinder, config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        V\n                        C\n                    \n                \n            \n\n            \n                \n                    Creates the filterRendererSpec and adds it to the grid column above\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n                                    \n                                                Type>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    finder\n                                    \n                                                WidgetFinder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            column\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterTestHostComponent.filterColumn\n\n                        \n                    \n                    \n                        \n                            Default value : FilterTestHostComponent.filterColumn\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:110\n                            \n                        \n\n                \n                    \n                        Used inside the html template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            filterColumn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GridColumn\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:102\n                            \n                        \n\n                \n                    \n                        Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\nvalue given in the column definition below\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridDataFetchResult\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        items: [],\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:112\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Type } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { MockTranslationService, TranslationService } from '@vcd/i18n';\nimport {\n    DatagridFilter,\n    FilterComponentRendererSpec,\n    GridColumn,\n    GridDataFetchResult,\n    VcdDatagridModule,\n} from '../../../datagrid';\nimport { MockRecord } from '../../../datagrid/mock-data';\nimport { IdGenerator } from '../../id-generator/id-generator';\nimport { WidgetFinder } from '../widget-object';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n */\nasync function configureTestingModule(): Promise {\n    await TestBed.configureTestingModule({\n        imports: [VcdDatagridModule],\n        declarations: [FilterTestHostComponent],\n        providers: [\n            {\n                provide: TranslationService,\n                useClass: MockTranslationService,\n            },\n            {\n                provide: IdGenerator,\n                useValue: new IdGenerator('vcd-id'),\n            },\n        ],\n    }).compileComponents();\n}\n\n/**\n * Used inside beforeEach functions of filter tests and it does the following:\n * - Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n * - Sets the filter on the column of host component({@link FilterTestHostComponent})\n * - Opens the filter and returns a component instance of the filter created\n *\n * @param filterType to be created in the test host component grid's column\n * @param config The configuration for the filter\n *\n * Example:\n * beforeEach(function(this: HasDgStringFilter): void {\n *     this.filter = createDatagridFilterTestHelper(\n *         DatagridStringFilterComponent,\n *         { wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n *     );\n * });\n */\nexport function createDatagridFilterTestHelper(\n    filterType: Type>,\n    config?: C\n): DatagridFilter {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return grid.getFilter(filterType);\n}\n\n/**\n * Same as the above function but used for tests which need finder\n */\nexport function createDatagridFilterTestHelperWithFinder(\n    filterType: Type>,\n    config?: C\n): { finder: WidgetFinder; filter: DatagridFilter } {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return { finder, filter: grid.getFilter(filterType) };\n}\n\n/**\n * TestHostComponent that has only single column for filter testing.\n */\n@Component({\n    template: `\n        \n    `,\n})\nexport class FilterTestHostComponent {\n    /**\n     * Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\n     * value given in the column definition below\n     */\n    static filterColumn: GridColumn = {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    };\n    /**\n     * Used inside the html template\n     */\n    column = FilterTestHostComponent.filterColumn;\n\n    gridData: GridDataFetchResult = {\n        items: [],\n    };\n\n    /**\n     * Creates the filterRendererSpec and adds it to the grid column above\n     */\n    setFilter(\n        filterType: Type>,\n        finder: WidgetFinder,\n        config: C\n    ): void {\n        this.column.filter = FilterComponentRendererSpec({ type: filterType, config });\n        finder.detectChanges();\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FilterTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindParams.html":{"url":"interfaces/FindParams.html","title":"interface - FindParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Arguments for WidgetFinder and WidgetFinder\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ancestor\n                                \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                        woConstructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ancestor\n                                    \n                                \n                                \n                                    \n                                        ancestor:         DebugElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DebugElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If provided, search starts from this container. It defaults to the fixture's root debugElement\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional CSS class name that can be used when there could be multiple instances of the object within the\nfixture tree\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        woConstructor\n                                    \n                                \n                                \n                                    \n                                        woConstructor:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The constructor of the widget to be found\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindableWidget.html":{"url":"interfaces/FindableWidget.html","title":"interface - FindableWidget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindableWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Subclasses should implement the FindableWidget interface so they can be found with WidgetFinder\nNote\nThis is done by creating a static property tagNameon your subclass, not a regular instance, since this\ninterface represents a constructor for a WidgetObject, not an instance.\n\n            \n\n            \n                Extends\n            \n            \n                        Type\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        tagName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tagName\n                                    \n                                \n                                \n                                    \n                                        tagName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormCheckboxComponent.html":{"url":"components/FormCheckboxComponent.html","title":"component - FormCheckboxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormCheckboxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a input HTML element of checkbox type. The label input from\nBaseFormControl is used for displaying a label on the left of a form field and the text input is used for\ndisplaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\nto display a checkbox or toggle switch on the UI.\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-checkbox\n            \n\n\n\n\n            \n                templateUrl\n                ./form-checkbox.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                iconShape\n                            \n                            \n                                rightLabel\n                            \n                            \n                                styling\n                            \n                            \n                                text\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isCheckbox\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        iconShape\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:49\n                            \n                        \n                \n                    \n                        A shape for the icon that appears next to the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rightLabel\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:44\n                            \n                        \n                \n                    \n                        Put the label text on the right.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        styling\n                    \n                \n                \n                    \n                        Type :         CheckBoxStyling\n\n                    \n                \n                \n                    \n                        Default value : CheckBoxStyling.CHECKBOX\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:39\n                            \n                        \n                \n                    \n                        Styling for the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:34\n                            \n                        \n                \n                    \n                        The label that appears next to the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isCheckbox\n                    \n                \n\n                \n                    \n                        getisCheckbox()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:51\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\nexport enum CheckBoxStyling {\n    CHECKBOX = 'checkbox',\n    TOGGLESWITCH = 'toggle-switch',\n}\n\n/**\n * {@link FormControl} wrapper around a input HTML element of checkbox type. The label input from\n * {@link BaseFormControl} is used for displaying a label on the left of a form field and the text input is used for\n * displaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\n * to display a checkbox or toggle switch on the UI.\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-checkbox',\n    templateUrl: './form-checkbox.component.html',\n})\nexport class FormCheckboxComponent extends BaseFormControl {\n    /**\n     * The label that appears next to the control\n     */\n    @Input() text: string;\n\n    /**\n     * Styling for the checkbox.\n     */\n    @Input() styling: CheckBoxStyling = CheckBoxStyling.CHECKBOX;\n\n    /**\n     * Put the label text on the right.\n     */\n    @Input() rightLabel = false;\n\n    /**\n     * A shape for the icon that appears next to the checkbox.\n     */\n    @Input() iconShape: string;\n\n    get isCheckbox(): boolean {\n        return this.styling === CheckBoxStyling.CHECKBOX;\n    }\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n}\n\n    \n\n    \n        \n    \n        {{ label }}\n        \n            \n                \n                \n                    \n                    {{ text }}\n                \n            \n            \n                \n                    {{ key | translate: formControl.value }}\n                \n            \n            \n                {{ description }}\n            \n        \n    \n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ label }}                                                                                            {{ text }}                                                                            {{ key | translate: formControl.value }}                                                        {{ description }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormCheckboxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormInputComponent.html":{"url":"components/FormInputComponent.html","title":"component - FormInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-input/form-input.component.ts\n\n\n    \n        Description\n    \n    \n        A FormControl that contains an input that supports string, number and datetime-local input types\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-input\n            \n\n            \n                styleUrls\n                ../form.scss,./form-input.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./form-input.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                textInput\n                            \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inputChanged\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                writeValue\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hint\n                            \n                            \n                                hintPosition\n                            \n                            \n                                max\n                            \n                            \n                                maxlength\n                            \n                            \n                                min\n                            \n                            \n                                placeholder\n                            \n                            \n                                size\n                            \n                            \n                                type\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                enterClicked\n                            \n                            \n                                escapeClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        hint\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:77\n                            \n                        \n                \n                    \n                        Hint to display in the content of a signpost\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'top-left'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:72\n                            \n                        \n                \n                    \n                        The direction for displaying the hint\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:52\n                            \n                        \n                \n                    \n                        Maximum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        maxlength\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:67\n                            \n                        \n                \n                    \n                        Maximum number of characters (in UTF-16 code units) that the user can enter.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MIN_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:46\n                            \n                        \n                \n                    \n                        Minimum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        placeholder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:40\n                            \n                        \n                \n                    \n                        Input 'placeholder' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:62\n                            \n                        \n                \n                    \n                        Input 'size' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'text'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:57\n                            \n                        \n                \n                    \n                        Input 'type' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        enterClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:88\n                            \n                        \n                \n                    \n                        Emitted when enter key is released for callers to handle the event like... closing a filter widget\nDatagridNumericFilterComponent.close\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        escapeClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n                \n                    \n                        Emitted when escape key is released for callers to handle the event\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inputChanged\n                        \n                        \n                    \n                \n            \n            \n                \ninputChanged()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:104\n                \n            \n\n\n            \n                \n                    Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\nbeing assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\nselector inside writeValue function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('textInput', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:82\n                            \n                        \n\n                \n                    \n                        The input field element\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * A {@link FormControl} that contains an input that supports string, number and datetime-local input types\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-input',\n    templateUrl: './form-input.component.html',\n    styleUrls: ['../form.scss', './form-input.component.scss'],\n})\nexport class FormInputComponent extends BaseFormControl implements AfterViewInit {\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = Number.MIN_SAFE_INTEGER;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'type' field.\n     */\n    @Input() type = 'text';\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The input field element\n     */\n    @ViewChild('textInput', { static: true }) textInput: ElementRef;\n\n    /**\n     * Emitted when enter key is released for callers to handle the event like... closing a filter widget\n     * {@link DatagridNumericFilterComponent.close}\n     */\n    @Output() enterClicked = new EventEmitter(false);\n\n    /**\n     * Emitted when escape key is released for callers to handle the event\n     */\n    @Output() escapeClicked = new EventEmitter(false);\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n\n    /**\n     * Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\n     * being assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\n     * selector inside writeValue function.\n     */\n    writeValue(value: any): void {\n        // The textInput view child element is undefined the first time. So, the initial value is stored in a variable\n        // to assign it later to the input field value.\n        this.initialValue = value;\n        if (!this.textInput) {\n            return;\n        }\n\n        if (typeof value === 'number') {\n            value = value.toString(10);\n        }\n        if (this.type === 'datetime-local') {\n            value = getFormattedDateValue(value);\n        }\n        this.textInput.nativeElement.value = value;\n    }\n\n    ngAfterViewInit(): void {\n        // The textInput view child element is only defined after this life cycle hook. So, the writeValue is called\n        // here.\n        this.writeValue(this.initialValue);\n    }\n\n    inputChanged(): void {\n        const value = this.textInput.nativeElement.value;\n        this.initialValue = value;\n\n        if (this.type === 'number') {\n            if (!value) {\n                this.onChange(value);\n            } else {\n                this.onChange(parseFloat(value));\n            }\n            return;\n        }\n        if (this.type === 'datetime-local' && value !== '') {\n            const isoDateValue = new Date(getFormattedDateValue(value)).toISOString();\n            this.onChange(isoDateValue);\n            return;\n        }\n        this.onChange(value);\n    }\n}\n\n/**\n * To format a date string into a value which can be given to the input html element\n */\nexport function getFormattedDateValue(value: string): string {\n    const date = new Date(value);\n    return (\n        date.getFullYear() +\n        '-' +\n        pad(date.getMonth() + 1) +\n        '-' +\n        pad(date.getDate()) +\n        'T' +\n        pad(date.getHours()) +\n        ':' +\n        pad(date.getMinutes())\n    );\n}\n\nexport function pad(num: number): string | number {\n    if (num \n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            \n                \n                \n            \n            \n                \n                    {{ key | translate: formControl.value:min.toString():max }}\n                \n            \n            \n                {{ description }}\n            \n        \n        \n        \n            \n                {{ hint }}\n            \n        \n    \n\n\n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-input.component.scss\n                \n                .form-group >>> aside {\n    margin-top: 6px;\n    margin-bottom: 6px;\n    flex-grow: 1;\n}\n\n.form-group.hide-label {\n    padding-left: 0;\n}\n\n.input-aside {\n    display: flex;\n    width: 100%;\n}\n\n:host-context(.modal):not(.adjust-aside-left) {\n    .form-label {\n        flex-grow: 1;\n    }\n    .form-label > input {\n        width: 100%;\n    }\n}\n\n.form-group-description {\n    margin-bottom: 15px;\n}\n\nclr-signpost p:first-child {\n    margin-top: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                                                                                                                        {{ key | translate: formControl.value:min.toString():max }}                                                        {{ description }}                                                                {{ hint }}                            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormSelectComponent.html":{"url":"components/FormSelectComponent.html","title":"component - FormSelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormSelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-select/form-select.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a select HTML element\n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-select\n            \n\n            \n                styleUrls\n                ../form.scss,./form-select.component.scss\n            \n\n\n\n            \n                templateUrl\n                form-select.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedOption\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         SelectOption[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n                \n                    \n                        The displayed options for the select element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedOption\n                    \n                \n\n                \n                    \n                        getselectedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * {@link FormControl} wrapper around a select HTML element\n */\n@Component({\n    selector: 'vcd-form-select',\n    templateUrl: 'form-select.component.html',\n    styleUrls: ['../form.scss', './form-select.component.scss'],\n})\nexport class FormSelectComponent extends BaseFormControl {\n    /**\n     * The displayed options for the select element\n     */\n    @Input() options: SelectOption[] = [];\n\n    constructor(@Self() @Optional() ngControl: NgControl) {\n        super(ngControl);\n    }\n\n    get selectedOption(): SelectOption {\n        if (!this.options) {\n            return undefined;\n        }\n        // option.value and formControl.value can be of type number or string\n        return this.options.find(option => option.value.toString() === this.formControl.value.toString());\n    }\n}\n\n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}\n        \n        \n            \n                \n                    \n                        {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                    \n                \n            \n\n            \n\n            \n                \n                    {{ key | translate: [formControl.value] }}\n                \n            \n        \n    \n    \n        \n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-select.component.scss\n                \n                .form-group.hide-label {\n    padding-left: 0;\n}\n\n.form-group.hide-label label:first-child {\n    visibility: hidden;\n}\n\n.error-content {\n    white-space: normal;\n}\n\n:host(.site-selector-single-site) {\n    display: none;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}                                                                                        {{ option.isTranslatable ? (option.display | translate) : option.display }}                                                                                                            {{ key | translate: [formControl.value] }}                                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormSelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormValidators.html":{"url":"classes/FormValidators.html","title":"class - FormValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/validators.ts\n        \n\n            \n                Description\n            \n            \n                validators used for form control validations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createNullSafeValidator\n                            \n                            \n                                    Static\n                                isNumberInRange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createNullSafeValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNullSafeValidator(validator: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:17\n                \n            \n\n\n            \n                \n                    A wrapper that validates that a control's value is defined before running the validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The validator function to run if the control's value is defined.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNumberInRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumberInRange(min: number, max: number, translationKey: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:32\n                \n            \n\n\n            \n                \n                    Create a validator that requires a number to be within a range.\nAlso checks that the value is numeric\nAccepts a translation key to display proper error messaging\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    translationKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'vcd.cc.warning.numRange'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\n/**\n * validators used for form control validations.\n */\nexport class FormValidators {\n    /**\n     * A wrapper that validates that a control's value is defined before running the validator function.\n     *\n     * @param validator The validator function to run if the control's value is defined.\n     */\n    static createNullSafeValidator(validator: (...args: any[]) => unknown): ValidatorFn {\n        const res = (control: FormControl) => {\n            if (Validators.required(control)) {\n                return null;\n            }\n            return validator(control);\n        };\n        return res;\n    }\n\n    /**\n     * Create a validator that requires a number to be within a range.\n     * Also checks that the value is numeric\n     * Accepts a translation key to display proper error messaging\n     */\n    static isNumberInRange(min: number, max: number, translationKey = 'vcd.cc.warning.numRange'): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const isNumber = !isNaN(parseFloat(control.value)) && isFinite(control.value);\n            return control.value >= min && control.value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyInputComponent.html":{"url":"components/FormlyInputComponent.html","title":"component - FormlyInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/input/formly-input.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-input\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onEnterClicked\n                            \n                            \n                                onEscapeClicked\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    min\n                                \n                                \n                                    max\n                                \n                                \n                                    type\n                                \n                                \n                                    hintPosition\n                                \n                                \n                                    errorLabels\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEnterClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEnterClicked()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:67\n                \n            \n\n\n            \n                \n                    FormInputComponent.enterClicked\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEscapeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEscapeClicked()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:75\n                \n            \n\n\n            \n                \n                    FormInputComponent.escapeClicked\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n\n                \n                    \n                        getmin()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:37\n                                \n                            \n                    \n                        \n                                FormInputComponent.min\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n\n                \n                    \n                        getmax()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:43\n                                \n                            \n                    \n                        \n                                FormInputComponent.max\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:49\n                                \n                            \n                    \n                        \n                                FormInputComponent.type\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n\n                \n                    \n                        gethintPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:55\n                                \n                            \n                    \n                        \n                                FormInputComponent.hintPosition\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/input/formly-input.component.ts:61\n                                \n                            \n                    \n                        \n                                FormInputComponent.errorLabels\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n    selector: 'vcd-formly-input',\n    template: `\n        \n        \n    `,\n})\nexport class FormlyInputComponent extends FieldType {\n    /**\n     * {@link FormInputComponent.min}\n     */\n    get min(): number {\n        return this.to.min || Number.MIN_SAFE_INTEGER;\n    }\n    /**\n     * {@link FormInputComponent.max}\n     */\n    get max(): number {\n        return this.to.max || Number.MAX_SAFE_INTEGER;\n    }\n    /**\n     * {@link FormInputComponent.type}\n     */\n    get type(): string {\n        return this.to.type || 'text';\n    }\n    /**\n     * {@link FormInputComponent.hintPosition}\n     */\n    get hintPosition(): string {\n        return this.to.hintPosition || 'top-left';\n    }\n    /**\n     * {@link FormInputComponent.errorLabels}\n     */\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n    /**\n     * {@link FormInputComponent.enterClicked}\n     */\n    onEnterClicked(): any {\n        if (this.to.onEnterClicked) {\n            return this.to.onEnterClicked(this.field);\n        }\n    }\n    /**\n     * {@link FormInputComponent.escapeClicked}\n     */\n    onEscapeClicked(): any {\n        if (this.to.onEscapeClicked) {\n            return this.to.onEscapeClicked(this.field);\n        }\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyNumberWithUnitInputComponent.html":{"url":"components/FormlyNumberWithUnitInputComponent.html","title":"component - FormlyNumberWithUnitInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyNumberWithUnitInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-number-with-unit-input\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorLabels\n                                \n                                \n                                    min\n                                \n                                \n                                    max\n                                \n                                \n                                    hintPosition\n                                \n                                \n                                    showUnlimitedOption\n                                \n                                \n                                    unlimitedValue\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:39\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.errorLabels\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n\n                \n                    \n                        getmin()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:45\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.min\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n\n                \n                    \n                        getmax()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:51\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.max\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n\n                \n                    \n                        gethintPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:57\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.hintPosition\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showUnlimitedOption\n                    \n                \n\n                \n                    \n                        getshowUnlimitedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:63\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.showUnlimitedOption\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedValue\n                    \n                \n\n                \n                    \n                        getunlimitedValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts:72\n                                \n                            \n                    \n                        \n                                NumberWithUnitFormInputComponent.unlimitedValue\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { UNLIMITED } from '../../../../form/number-with-unit-input/number-with-unit-form-input.component';\n\n@Component({\n    selector: 'vcd-formly-number-with-unit-input',\n    template: `\n        \n        \n    `,\n})\nexport class FormlyNumberWithUnitInputComponent extends FieldType {\n    /**\n     * {@link NumberWithUnitFormInputComponent.errorLabels}\n     */\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.min}\n     */\n    get min(): number {\n        return this.to.min || UNLIMITED;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.max}\n     */\n    get max(): number {\n        return this.to.max || Number.MAX_SAFE_INTEGER;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.hintPosition}\n     */\n    get hintPosition(): string {\n        return this.to.hintPosition || 'top-left';\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.showUnlimitedOption}\n     */\n    get showUnlimitedOption(): boolean {\n        if (typeof this.to.showUnlimitedOption !== 'boolean') {\n            return true;\n        }\n        return this.to.showUnlimitedOption;\n    }\n    /**\n     * {@link NumberWithUnitFormInputComponent.unlimitedValue}\n     */\n    get unlimitedValue(): number {\n        return this.to.unlimitedValue || UNLIMITED;\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyNumberWithUnitInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlySelectComponent.html":{"url":"components/FormlySelectComponent.html","title":"component - FormlySelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormlySelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/formly/vcd/inputs/select/formly-select.component.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-formly-select\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorLabels\n                                \n                                \n                                    selectOptions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n\n                \n                    \n                        geterrorLabels()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/select/formly-select.component.ts:27\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectOptions\n                    \n                \n\n                \n                    \n                        getselectOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/formly/vcd/inputs/select/formly-select.component.ts:31\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { Observable, of } from 'rxjs';\nimport { SelectOption } from '../../../../common/interfaces/select-option';\n\n@Component({\n    selector: 'vcd-formly-select',\n    template: `\n        \n        \n    `,\n})\nexport class FormlySelectComponent extends FieldType {\n    get errorLabels(): string[] {\n        return this.to.errorLabels || [];\n    }\n\n    get selectOptions(): Observable {\n        if (!(this.to.options instanceof Observable)) {\n            return of(this.to.options);\n        }\n        return this.to.options;\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlySelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FunctionRenderer.html":{"url":"interfaces/FunctionRenderer.html","title":"interface - FunctionRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FunctionRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Column renderer as a function. Defined in calling component when the cell value is calculated from different\nproperties.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [record: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         string\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FunctionRendererPipe.html":{"url":"pipes/FunctionRendererPipe.html","title":"pipe - FunctionRendererPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FunctionRendererPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for executing the functions of column cells which use functions to calculate their values from different\nproperties of an object\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        functionRenderer\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, renderer: (val: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/pipes/function-renderer.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderer\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\n@Pipe({\n    name: 'functionRenderer',\n    pure: true,\n})\nexport class FunctionRendererPipe implements PipeTransform {\n    public transform(item: any, renderer: (val: any) => any): string {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GlobalButton.html":{"url":"interfaces/GlobalButton.html","title":"interface - GlobalButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GlobalButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability does not depend on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridColumn.html":{"url":"interfaces/GridColumn.html","title":"interface - GridColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object defined in the caller. This contains properties for the column header (text, filtering,\nsorting, toggling etc.,) and content for row cells.\nExample:\nconst gridColumn: GridColumn = {\n   displayName: \"Column Heading\",\n   renderer: \"someRecord.property\",\n   hideable: \"NEVER\"\n}\nThe above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\nThe value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        cliptextConfig\n                                \n                                \n                                            Optional\n                                        clrDgColumnClassName\n                                \n                                \n                                        displayName\n                                \n                                \n                                            Optional\n                                        emptyColumnPlaceholder\n                                \n                                \n                                            Optional\n                                        filter\n                                \n                                \n                                            Optional\n                                        hideable\n                                \n                                \n                                            Optional\n                                        queryFieldName\n                                \n                                \n                                        renderer\n                                \n                                \n                                            Optional\n                                        sortable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cliptextConfig\n                                    \n                                \n                                \n                                    \n                                        cliptextConfig:         CliptextConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CliptextConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The configuration for the cliptext in the datagrid.\nDefaults to size: 'lg', mouseoutDelay: undefined.\nIf null, will disable cliptext\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clrDgColumnClassName\n                                    \n                                \n                                \n                                    \n                                        clrDgColumnClassName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class of the column header.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Header text for the column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emptyColumnPlaceholder\n                                    \n                                \n                                \n                                    \n                                        emptyColumnPlaceholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When there is no data, show this message.\nTry to avoid showing this before initial load.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:     FilterRendererSpec>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FilterRendererSpec>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    TODO: Should this be made to work with top level search on grids across all columns?\n  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideable\n                                    \n                                \n                                \n                                    \n                                        hideable:         GridColumnHideable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GridColumnHideable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryFieldName\n                                    \n                                \n                                \n                                    \n                                        queryFieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for sorting/filtering. Not needed for columns not filterable/sortable\nTODO: do we need to support array type for querying across multiple columns?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:     string | FunctionRenderer | ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | FunctionRenderer | ColumnRendererSpec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If the renderer passed in is a\n\nstring: Used as default renderer. Can be a dot separated string to identify a nested property of the item\nFunctionRenderer: When you want to create a calculated column, but don't need custom HTML\nTemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\nColumnRendererSpec: When HTML is needed and when the HTML is provided as a component\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortable\n                                    \n                                \n                                \n                                    \n                                        sortable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show the column as sortable. Defaults to true\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridDataFetchResult.html":{"url":"interfaces/GridDataFetchResult.html","title":"interface - GridDataFetchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridDataFetchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                Representation of data required for rendering contents of cells and pagination information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                            Optional\n                                        totalItems\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     R[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items to be listed in the grid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridState.html":{"url":"interfaces/GridState.html","title":"interface - GridState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\npart of the event DatagridComponent.gridRefresh. The handler then used this object to construct a query.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        filters\n                                \n                                \n                                            Optional\n                                        pagination\n                                \n                                \n                                            Optional\n                                        sortColumn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FIQL formatted list of active filters\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                    \n                                \n                                \n                                    \n                                        pagination:         PagionationInformation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PagionationInformation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The pagination information that the datagrid should show.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortColumn\n                                    \n                                \n                                \n                                    \n                                        sortColumn:         SortedColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortedColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The currently sorted column in the datagrid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasAngularFinder.html":{"url":"interfaces/HasAngularFinder.html","title":"interface - HasAngularFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasAngularFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/angular-widget-finder.ts\n        \n\n            \n                Description\n            \n            \n                Can be used in tests that use this to share a finder with before/AfterEach instead of leaky closures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        finder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finder\n                                    \n                                \n                                \n                                    \n                                        finder:         AngularWidgetFinder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AngularWidgetFinder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AngularWidgetDriver } from './angular-widget-driver';\nimport { FindableWidget, FindParams, isFindParamsObject } from './widget-object';\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class AngularWidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(arg: Type | ComponentFixture) {\n        this.fixture = (arg as ComponentFixture).componentRef\n            ? (arg as ComponentFixture)\n            : TestBed.createComponent(arg as Type);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(new AngularWidgetDriver(this.fixture, root, root.componentInstance))\n        );\n        return widgets as InstanceType[];\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T, parent?: DebugElement): InstanceType {\n        const widgets = this.findWidgets(params, parent);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasAngularFinder {\n    finder: AngularWidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFinder.html":{"url":"interfaces/HasFinder.html","title":"interface - HasFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Can be used in tests that use this to share a finder with before/AfterEach instead of leaky closures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        finder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finder\n                                    \n                                \n                                \n                                    \n                                        finder:         WidgetFinder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WidgetFinder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hertz.html":{"url":"classes/Hertz.html","title":"class - Hertz","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hertz\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Ghz\n                            \n                            \n                                    Static\n                                Hz\n                            \n                            \n                                    Static\n                                Khz\n                            \n                            \n                                    Static\n                                Mhz\n                            \n                            \n                                    Static\n                                Thz\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Ghz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e9, 'GHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:114\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Hz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1, 'Hz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:111\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Khz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e3, 'KHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Mhz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e6, 'MHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:113\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Thz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e12, 'THz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Hertz.Hz, Hertz.Khz, Hertz.Mhz, Hertz.Ghz]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.hertz.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.cpu.speed.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Hertz[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISubscriptionTracker.html":{"url":"interfaces/ISubscriptionTracker.html","title":"interface - ISubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                An interface that knows how to subscribe and unsubscribe from observables.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    subscribe\n                                \n                                \n                                    unsubscribe\n                                \n                                \n                                    unsubscribeAll\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\nWill call the {@param complete} when complete, and {@param error} when errors happen.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:28\n                \n            \n\n\n            \n                \n                    Unsubscribes from the given {@param subscription}.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:33\n                \n            \n\n\n            \n                \n                    Unsubscribes from all subscriptions on this Subscribable.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdGenerator.html":{"url":"classes/IdGenerator.html","title":"class - IdGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/id-generator/id-generator.ts\n        \n\n            \n                Description\n            \n            \n                Generates unique IDs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                idCounter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prefix: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/id-generator/id-generator.ts:17\n                            \n                        \n\n                \n                    \n                            The string to be prefixed for IdGenerator returned\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            idCounter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/id-generator/id-generator.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/id-generator/id-generator.ts:15\n                \n            \n\n\n            \n                \n                    Getter that returns the a unique ID\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class IdGenerator {\n    private static idCounter = 0;\n\n    /**\n     * Getter that returns the a unique ID\n     */\n    generate(): string {\n        return `${this.prefix}-${IdGenerator.idCounter++}`;\n    }\n\n    /**\n     * The string to be prefixed for {@link IdGenerator#id} returned\n     */\n    constructor(private prefix: string) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternalRegistrationData.html":{"url":"interfaces/InternalRegistrationData.html","title":"interface - InternalRegistrationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InternalRegistrationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                This interface is used internally by the service\n\n            \n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        order\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingIndicatorComponent.html":{"url":"components/LoadingIndicatorComponent.html","title":"component - LoadingIndicatorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoadingIndicatorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/loading/loading-indicator.component.ts\n\n\n    \n        Description\n    \n    \n        Loading indicator for blocking modal dialogs while loading.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-loading-indicator\n            \n\n            \n                styleUrls\n                loading-indicator.component.scss\n            \n\n\n\n            \n                templateUrl\n                loading-indicator.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _size\n                            \n                            \n                                    Private\n                                    Readonly\n                                defaultSpinnerSize\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                loadingTextKey\n                            \n                            \n                                showSpinner\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:43\n                            \n                        \n                \n                    \n                        Show/hide the loading indicator.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingTextKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:55\n                            \n                        \n                \n                    \n                        Text to show next to the spinner.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showSpinner\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:49\n                            \n                        \n                \n                    \n                        Show/hide the spinner if only an overlay is required.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         SpinnerSize\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                            \n                        \n                \n                    \n                        Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : this.defaultSpinnerSize\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:38\n                            \n                        \n\n                \n                    \n                        Spinner size.\nSpinners can be displayed in three sizes:\n\nsm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\nmd(Medium): Medium spinners measure 36x36 pixels. Default.\nlg(Large): This is the default size for page spinners (see above).\n\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            defaultSpinnerSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : SIZES.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:27\n                            \n                        \n\n                \n                    \n                        Default spinner size set to \"md\" - medium used within the modal dialogs\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:73\n                                \n                            \n                    \n                        \n                                Gives the size of this loading indicator.\n\n\n                                \n                                    Returns :         SpinnerSize\n\n                                \n                        \n                    \n\n                \n                    \n                        setsize(size)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                                \n                            \n                    \n                        \n                                Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            size\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\nexport enum SIZES {\n    sm = 'sm',\n    md = 'md',\n    lg = 'lg',\n}\nexport type SpinnerSize = keyof typeof SIZES;\n\n/**\n * Loading indicator for blocking modal dialogs while loading.\n */\n@Component({\n    selector: 'vcd-loading-indicator',\n    templateUrl: 'loading-indicator.component.html',\n    styleUrls: ['loading-indicator.component.scss'],\n})\nexport class LoadingIndicatorComponent {\n    /**\n     * Default spinner size set to \"md\" - medium used within the modal dialogs\n     */\n    private readonly defaultSpinnerSize: SpinnerSize = SIZES.md;\n    /**\n     * Spinner size.\n     *\n     * Spinners can be displayed in three sizes:\n     *\n     *  - sm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\n     *  - md(Medium): Medium spinners measure 36x36 pixels. Default.\n     *  - lg(Large): This is the default size for page spinners (see above).\n     *\n     */\n    private _size: SpinnerSize = this.defaultSpinnerSize;\n    /**\n     * Show/hide the loading indicator.\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * Show/hide the spinner if only an overlay is required.\n     */\n    @Input()\n    public showSpinner = true;\n\n    /**\n     * Text to show next to the spinner.\n     */\n    @Input()\n    public loadingTextKey: string = null;\n\n    /**\n     * Spinner size setter.\n     * Sets default size if provided value is not from specified sized.\n     */\n    @Input()\n    set size(size: SpinnerSize) {\n        if (!size || Object.keys(SIZES).indexOf(size) === -1) {\n            this._size = this.defaultSpinnerSize;\n        } else {\n            this._size = size;\n        }\n    }\n\n    /**\n     * Gives the size of this loading indicator.\n     */\n    get size(): SpinnerSize {\n        return this._size;\n    }\n}\n\n    \n\n    \n        \n    \n    \n        \n             \n            {{ loadingTextKey | translate }}\n        \n    \n\n\n\n    \n\n    \n                \n                    loading-indicator.component.scss\n                \n                $overlay-background-color-default: rgba(250, 250, 250, 0.5);\n$overlay-background-color-modal: rgba(255, 255, 255, 0.5);\n\n@mixin full-height {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host-context(.modal-body) .overlay {\n    background-color: $overlay-background-color-modal;\n}\n\n.overlay {\n    background-color: $overlay-background-color-default;\n    @include full-height();\n    z-index: 10;\n}\n\n.indicator-container {\n    z-index: 600;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    @include full-height();\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                         {{ loadingTextKey | translate }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoadingIndicatorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MinMaxValidator.html":{"url":"directives/MinMaxValidator.html","title":"directive - MinMaxValidator","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MinMaxValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n        \n\n            \n                Description\n            \n            \n                Directive for adding min, max inputs to NumberWithUnitFormInputComponent and also add min, max validators to\nthe list of NumberWithUnitFormInputComponent.formControl validators\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                max\n                            \n                            \n                                min\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:38\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Component, Directive, Input, OnDestroy, OnInit, Optional, Self, ViewChild } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    NG_VALIDATORS,\n    NgControl,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators,\n} from '@angular/forms';\nimport { TranslationService } from '@vcd/i18n';\nimport { SelectOption } from '../../common/interfaces';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport { Unit } from '../../utils/unit/unit';\nimport { UnitFormatter } from '../../utils/unit/unit-formatter';\nimport { BaseFormControl } from '../base-form-control';\nimport { FormSelectComponent } from '../form-select/form-select.component';\nimport { FormValidators } from '../validators';\n\n/**\n * Directive for adding min, max inputs to {@link NumberWithUnitFormInputComponent} and also add min, max validators to\n * the list of {@link NumberWithUnitFormInputComponent.formControl} validators\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]',\n    providers: [{ provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }],\n})\n/* tslint:enable:directive-selector */\nexport class MinMaxValidator implements Validator {\n    @Input() min: number;\n    @Input() max: number;\n    validate(control: AbstractControl): ValidationErrors | null {\n        const validators: ValidatorFn[] = [];\n        if (typeof this.min !== 'undefined') {\n            validators.push(Validators.min(this.min));\n        }\n        if (typeof this.max !== 'undefined') {\n            validators.push(Validators.max(this.max));\n        }\n        return Validators.compose(validators)(control);\n    }\n}\n\n/**\n * -1 is the number to specify a value of unlimited.\n */\nexport const UNLIMITED = -1;\n\n/**\n * A numerical form input component with unit selection and unlimited checkbox.\n * It doesn't take custom validation because it serve a specific use case.\n */\n@Component({\n    selector: 'vcd-number-with-unit-form-input',\n    templateUrl: './number-with-unit-form-input.component.html',\n    styleUrls: ['./number-with-unit-form-input.component.scss'],\n})\nexport class NumberWithUnitFormInputComponent extends BaseFormControl implements OnInit, OnDestroy {\n    @ViewChild('unitDropdown', { static: false }) unitDropdown: FormSelectComponent;\n\n    tracker = new SubscriptionTracker(this);\n\n    /**\n     * Show the Unlimited checkbox\n     */\n    @Input() showUnlimitedOption = true;\n\n    /**\n     * List of available units\n     */\n    @Input()\n    set unitOptions(unitOptions: Unit[]) {\n        this._unitOptions = unitOptions;\n\n        this.unitOptions.forEach(unitOption => {\n            const comboOption: SelectOption = {\n                display: unitOption.getUnitName(),\n                value: unitOption.getMultiplier(),\n            };\n            this.comboOptionUnitMap.set(comboOption, unitOption);\n            this.comboOptions.push(comboOption);\n        });\n    }\n\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * The value when the component is set to unlimited.\n     */\n    @Input() unlimitedValue: number = UNLIMITED;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = UNLIMITED;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The unit of FormControl.value. Not required when a single {@link unitOptions} is passed in\n     */\n    @Input() inputValueUnit: Unit;\n\n    public formGroup: FormGroup;\n\n    private _unitOptions: Unit[];\n\n    /**\n     * A drop down of available units\n     *\n     * This list is constructed from list of\n     * available units in _unitOptions\n     */\n    comboOptions: SelectOption[] = [];\n\n    /**\n     * Map of SelectOption and Unit which is used to\n     * extract Unit for a given SelectOption.\n     *\n     */\n    private comboOptionUnitMap: Map = new Map();\n\n    // value set to the formGroup\n    private bestValue: number = null;\n    // unit set to the formGroup\n    private bestUnit: Unit;\n\n    constructor(\n        @Self() @Optional() controlDirective: NgControl,\n        private fb: FormBuilder,\n        private translationService: TranslationService,\n        private unitFormattter: UnitFormatter\n    ) {\n        super(controlDirective);\n    }\n\n    ngOnInit(): void {\n        const validator = FormValidators.isNumberInRange(this.min, this.max, 'vcd.cc.warning.numRange');\n        const validatorUnlimited = FormValidators.isNumberInRange(-1, this.max, 'vcd.cc.warning.numRange');\n        this.computeBestUnitAndValue(this.initialValue as number);\n        if (!this.showUnlimitedOption) {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue, validator],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n            });\n        } else {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue === UNLIMITED ? 0 : this.bestValue, validatorUnlimited],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n                unlimited: this.bestValue === UNLIMITED,\n            });\n            this.tracker.subscribe(this.formGroup.get('unlimited').valueChanges, value => {\n                const input = this.formGroup.get('limited');\n                // If checkbox is limited and value is UNLIMITED, or if checkbox is unlimited and input value is empty,\n                // set input value to 0.\n                if ((value === false && input.value === UNLIMITED) || (value === true && !input.value)) {\n                    input.setValue(0);\n                }\n                const inputValue = this.value();\n                this.onChange(inputValue);\n                this.updateUiDisabledState(inputValue);\n            });\n        }\n        this.tracker.subscribe(this.formGroup.get('comboUnitOptions').valueChanges, () => {\n            this.onChange(this.value());\n        });\n        this.tracker.subscribe(this.formGroup.get('limited').valueChanges, () => {\n            this.onChange(this.value());\n        });\n        // Disable the limit and unit options if unlimited is been checked.\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value === true) {\n            this.disabled = true;\n        }\n\n        if (this.disabled) {\n            this.formGroup.get('comboUnitOptions').disable();\n            this.formGroup.get('limited').disable();\n        }\n    }\n\n    writeValue(value: number): void {\n        if (!this.formGroup) {\n            this.initialValue = value;\n            return;\n        }\n        const input = this.formGroup.get('limited');\n        const comboUnitOptions = this.formGroup.get('comboUnitOptions');\n        if (value === null) {\n            if (this.showUnlimitedOption) {\n                // Set Unlimited checkbox to false because the form control was reset\n                this.formGroup.get('unlimited').setValue(false);\n            }\n            input.setValue(null);\n            return;\n        }\n        this.computeBestUnitAndValue(value);\n\n        this.updateUiDisabledState(value);\n    }\n\n    private computeBestUnitAndValue(value: number): void {\n        if (value === null) {\n            this.bestValue = null;\n            this.bestUnit = this.unitOptions[0];\n        } else {\n            this.bestUnit = this.inputValueUnit.findBestUnit(value, this.unitOptions);\n            this.bestValue = this.inputValueUnit.getOutputValue(value, this.bestUnit);\n        }\n    }\n\n    private value(): number {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.unlimitedValue;\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value && this.unitOptions) {\n            const selectedComboUnit = this.comboOptions.find(\n                // tslint:disable-next-line:triple-equals\n                co => co.value == this.formGroup.get('comboUnitOptions').value\n            );\n            const selectedUnit = this.comboOptionUnitMap.get(selectedComboUnit);\n            return selectedUnit.getOutputValue(value, this.inputValueUnit);\n        }\n        return value;\n    }\n\n    private updateUiDisabledState(value: number): void {\n        const input = this.formGroup.get('limited');\n        const comboUnitOptions = this.formGroup.get('comboUnitOptions');\n        if (value === UNLIMITED) {\n            input.disable();\n            comboUnitOptions.disable();\n        } else {\n            input.enable();\n            comboUnitOptions.enable();\n            input.setValue(this.bestValue);\n            comboUnitOptions.setValue(this.bestUnit.getMultiplier());\n        }\n    }\n\n    get displayValue(): string {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.translationService.translate('unlimited');\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value) {\n            if (this.unitOptions && this.unitDropdown) {\n                // Return the value and the selected unit.\n                const inputUnit: Unit = this.comboOptionUnitMap.get(this.unitDropdown.selectedOption);\n                return this.unitFormattter.bestFormat(value, inputUnit, this.unitOptions);\n            } else if (this.unitOptions && this.unitOptions.length === 1) {\n                // Return the value and the predefined unit. For example, 100 %.\n                return this.unitFormattter.bestFormat(value, this.unitOptions[0], this.unitOptions);\n            } else if (this.isReadOnly) {\n                // Return the value with best unit when #limited FormControl.value\n                // is set programmatically\n                const displayComboUnit = this.comboOptions.find(\n                    // tslint:disable-next-line:triple-equals\n                    co => co.value == this.formGroup.get('comboUnitOptions').value\n                );\n                const displayUnit = this.comboOptionUnitMap.get(displayComboUnit);\n                return this.unitFormattter.bestFormat(value, displayUnit, this.unitOptions);\n            }\n            // Return only the value when unitOptions was not set.\n            return value.toString();\n        }\n        return;\n    }\n\n    /**\n     * Set the unit in the dropdown.\n     * @param value Should be one of the value that you pass in {@link #unitOptions} to select the Unit.\n     */\n    set selectedUnit(value: number) {\n        this.formGroup.get('comboUnitOptions').setValue(value);\n    }\n\n    ngOnDestroy(): void {\n        this.tracker.unsubscribeAll();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (this.formGroup) {\n            if (isDisabled) {\n                this.formGroup.get('comboUnitOptions').disable();\n                this.formGroup.get('limited').disable();\n            } else {\n                this.formGroup.get('comboUnitOptions').enable();\n                this.formGroup.get('limited').enable();\n            }\n        }\n        this.disabled = isDisabled;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockRecord.html":{"url":"interfaces/MockRecord.html","title":"interface - MockRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/mock-data.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        age\n                                \n                                \n                                        city\n                                \n                                \n                                        details\n                                \n                                \n                                        name\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nexport const mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOption.html":{"url":"interfaces/MultiSelectOption.html","title":"interface - MultiSelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Same as the SelectOption but value is always a string\n\n            \n\n            \n                Extends\n            \n            \n                        SelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOptionInternal.html":{"url":"interfaces/MultiSelectOptionInternal.html","title":"interface - MultiSelectOptionInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOptionInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Used internally for DatagridMultiSelectFilterComponent.options to add unique IDs to filter options. The IDs are used for\nassociating checkbox options with their labels in the HTML\n\n            \n\n            \n                Extends\n            \n            \n                        MultiSelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for each checkbox option instantiated in the HTML\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NestedPropertyPipe.html":{"url":"pipes/NestedPropertyPipe.html","title":"pipe - NestedPropertyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NestedPropertyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/nested-property.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for extracting the value of nested property of an object.\nExample:\nconst obj = {\n     a: {\n         b: {\n             c: 'c'\n         }\n     }\n}\nInvoking {{ obj | nestedProperty: 'a.b.c' }} in a template produces c\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nestedProperty\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/pipes/nested-property.pipe.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatePipe, DecimalPipe } from '@angular/common';\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\n\nconst OBJECT_PROPERTY_SEPARATOR = '.';\nconst DATE_OBJECT_CLASS = '[object Date]';\n\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\n@Pipe({\n    name: 'nestedProperty',\n    pure: true,\n})\nexport class NestedPropertyPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) private localeId: string) {}\n    public transform(item: any, property: string): string {\n        if (!item || !property) {\n            return null;\n        }\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        let returnValue;\n        if (splitProperty.length > 1) {\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        } else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\n\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n */\nfunction isNullOrUndefined(value: unknown): boolean {\n    return value == null;\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberWithUnitFormInputWidgetObject.html":{"url":"classes/NumberWithUnitFormInputWidgetObject.html","title":"class - NumberWithUnitFormInputWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberWithUnitFormInputWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Test wrapper for the VCD Number With Unit Form Input component.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNativeElement\n                            \n                            \n                                selectUnit\n                            \n                            \n                                setInputValueUnit\n                            \n                            \n                                setUnitOptionsToNone\n                            \n                            \n                                setUnitOptionsToPercent\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    displayValue\n                                \n                                \n                                    readonlyText\n                                \n                                \n                                    unlimitedFormControl\n                                \n                                \n                                    valueFormControl\n                                \n                                \n                                    unitFormControl\n                                \n                                \n                                    selectedUnit\n                                \n                                \n                                    selectedUnitDisplayValue\n                                \n                                \n                                    isUnitDropDownDisplayed\n                                \n                                \n                                    singleUnitDisplayText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-number-with-unit-form-input'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNativeElement\n                        \n                        \n                    \n                \n            \n            \n                \ngetNativeElement(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectUnit\n                        \n                        \n                    \n                \n            \n            \n                \nselectUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValueUnit\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValueUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToNone\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToNone()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToPercent\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToPercent()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        displayValue\n                    \n                \n\n                \n                    \n                        getdisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readonlyText\n                    \n                \n\n                \n                    \n                        getreadonlyText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:28\n                                \n                            \n                    \n                        \n                                Reads from the readonly section. If widget is not readonly, it returns an empty string;\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedFormControl\n                    \n                \n\n                \n                    \n                        getunlimitedFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:32\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        valueFormControl\n                    \n                \n\n                \n                    \n                        getvalueFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:36\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unitFormControl\n                    \n                \n\n                \n                    \n                        getunitFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnit\n                    \n                \n\n                \n                    \n                        getselectedUnit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnitDisplayValue\n                    \n                \n\n                \n                    \n                        getselectedUnitDisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUnitDropDownDisplayed\n                    \n                \n\n                \n                    \n                        getisUnitDropDownDisplayed()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        singleUnitDisplayText\n                    \n                \n\n                \n                    \n                        getsingleUnitDisplayText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:88\n                                \n                            \n                    \n                        \n                                Returns an empty string if there is no HTML for single unit\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AbstractControl } from '@angular/forms';\nimport { WidgetObject } from '../../utils/test';\nimport { Percent, Unit } from '../../utils/unit/unit';\nimport { NumberWithUnitFormInputComponent } from './number-with-unit-form-input.component';\n\n/**\n * Test wrapper for the VCD Number With Unit Form Input component.\n */\nexport class NumberWithUnitFormInputWidgetObject extends WidgetObject {\n    static tagName = 'vcd-number-with-unit-form-input';\n\n    get formControl(): AbstractControl {\n        return this.component.formControl;\n    }\n\n    get displayValue(): string {\n        return this.component.displayValue;\n    }\n\n    /**\n     * Reads from the readonly section. If widget is not readonly, it returns an empty string;\n     */\n    get readonlyText(): string {\n        return this.getText('.readonly-text');\n    }\n\n    get unlimitedFormControl(): AbstractControl {\n        return this.component.formGroup.get('unlimited');\n    }\n\n    get valueFormControl(): AbstractControl {\n        return this.component.formGroup.get('limited');\n    }\n\n    get unitFormControl(): AbstractControl {\n        return this.component.formGroup.get('comboUnitOptions');\n    }\n\n    selectUnit(unit: Unit): void {\n        this.component.selectedUnit = unit.getMultiplier();\n    }\n\n    setInputValueUnit(unit: Unit): void {\n        this.component.inputValueUnit = unit;\n    }\n\n    get selectedUnit(): number {\n        return this.component.formGroup.get('comboUnitOptions').value;\n    }\n\n    get selectedUnitDisplayValue(): string {\n        return (\n            this.component.unitOptions\n                // tslint:disable-next-line:triple-equals\n                .find(item => item.getMultiplier() == this.selectedUnit)\n                .getUnitName()\n        );\n    }\n\n    setUnitOptionsToPercent(): void {\n        this.component.unitOptions = [Percent.ZERO_TO_100];\n        this.component.inputValueUnit = Percent.ZERO_TO_1;\n        this.unitFormControl.setValue(this.component.unitOptions[0].getMultiplier());\n        this.fixture.detectChanges();\n    }\n\n    setUnitOptionsToNone(): void {\n        this.component.unitOptions = [];\n        this.fixture.detectChanges();\n    }\n\n    getNativeElement(cssSelector: string): HTMLElement {\n        return this.findElement(cssSelector) && this.findElement(cssSelector).nativeElement;\n    }\n\n    get isUnitDropDownDisplayed(): boolean {\n        return !!this.getNativeElement('.combo-options');\n    }\n\n    /**\n     * Returns an empty string if there is no HTML for single unit\n     */\n    get singleUnitDisplayText(): string {\n        const element = this.getNativeElement('.single-option');\n        return element ? element.innerHTML : '';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ObjectAndResponse.html":{"url":"interfaces/ObjectAndResponse.html","title":"interface - ObjectAndResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ObjectAndResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A combination of some object and the response that gave that object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        object\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                    \n                                \n                                \n                                    \n                                        object:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that was returned from a given activity, if any.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         ActivityResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivityResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The response that an activity returned.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationCallback.html":{"url":"interfaces/PaginationCallback.html","title":"interface - PaginationCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                A function that can be used to render the pagination data in the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [firstItem: number, lastItem: number, totalItems: number]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string | Observable\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationConfiguration.html":{"url":"interfaces/PaginationConfiguration.html","title":"interface - PaginationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information the user gives to show page size and page size options in the pagination footer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageSize\n                                \n                                \n                                            Optional\n                                        pageSizeOptions\n                                \n                                \n                                            Optional\n                                        rowHeight\n                                \n                                \n                                            Optional\n                                        shouldShowPageNumberInput\n                                \n                                \n                                            Optional\n                                        shouldShowPageSizeSelector\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:     number | \"Magic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"Magic\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\nnumber of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\nMagic: Auto calculates the size based on available height of the container\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSizeOptions\n                                    \n                                \n                                \n                                    \n                                        pageSizeOptions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Available page size options in the dropdown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowHeight\n                                    \n                                \n                                \n                                    \n                                        rowHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The height of a row in the datagrid. If not set, will use the default of ROW_HEIGHT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageNumberInput\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageNumberInput:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page number input should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageSizeSelector\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageSizeSelector:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page size option dropdown should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PagionationInformation.html":{"url":"interfaces/PagionationInformation.html","title":"interface - PagionationInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PagionationInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about pagionation that will be exposed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        itemsPerPage\n                                \n                                \n                                        pageNumber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    How many items belong on a page.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageNumber\n                                    \n                                \n                                \n                                    \n                                        pageNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    What page is currently selected.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percent.html":{"url":"classes/Percent.html","title":"class - Percent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Percent is handled differently compared to other Units.\nCan be represented in two different formats -\nZERO_TO_100 - ex: 50 %\nZERO_TO_1 - ex: 0.5 %\nIn both formats single unitName - \"%\" is used represent the value\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                unitTranslationKey\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKey\n                            \n                            \n                                    Static\n                                ZERO_TO_1\n                            \n                            \n                                    Static\n                                ZERO_TO_100\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n                \n                    \n                            Percent always has unitName as \"%\"\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.display.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:162\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(1)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_100\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(0.01)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:172\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, unitList: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:188\n                \n            \n\n\n            \n                \n                    Percent is always best represented in ZERO_TO_100 format\nand so returns ZERO_TO_100\nEx: 50 % is the display format for ZERO_TO_100 for value - 50\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unitList\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NestedPropertyPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { NestedPropertyPipe } from './nested-property.pipe';\n\nconst declarations = [NestedPropertyPipe];\n\n@NgModule({\n    declarations,\n    exports: [...declarations],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisteredProviders.html":{"url":"interfaces/RegisteredProviders.html","title":"interface - RegisteredProviders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisteredProviders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                Interface describing what providers are registered within the system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        provider\n                                \n                                \n                                        section\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         SpotlightSearchProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchProvider\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The very search provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The section name (the title or the group name) that this provider will provides results for.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchSection.html":{"url":"interfaces/SearchSection.html","title":"interface - SearchSection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchSection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isLoading\n                                \n                                \n                                        results\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                    \n                                \n                                \n                                    \n                                        results:         SpotlightSearchResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { DomUtil } from '../utils/dom-util';\nimport { SpotlightSearchResult, SpotlightSearchResultType } from './spotlight-search-result';\nimport { RegisteredProviders, SpotlightSearchService } from './spotlight-search.service';\n\ninterface SearchSection extends RegisteredProviders {\n    results: SpotlightSearchResult[];\n    isLoading: boolean;\n}\n\n/**\n * The Spotlight Search component is inspired by the Spotlight Search functionality in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Spotlight Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Spotlight Search consists of:\n * \n *     SpotlightSearchComponent - the visual component that you should include in your template\n *     {@link SpotlightSearchService}SpotlightSearchService\n *     - the service that you should register your own providers with\n *     {@link SpotlightSearchProvider}SpotlightSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link SpotlightSearchResult} or a promise for lazy loading of results\n * \n *\n * SpotlightSearchComponent:\n *\n *    \n *\n *\n * {@link SpotlightSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are gropued\n * in sections based on the registered provider {@link SpotlightSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Spotlight Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-spotlight-search',\n    templateUrl: './spotlight-search.component.html',\n    styleUrls: ['./spotlight-search.component.scss'],\n})\nexport class SpotlightSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    constructor(\n        private searchService: SpotlightSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private el: ElementRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link SpotlightSearchService} upon opening the Spotlight Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: SpotlightSearchResult;\n\n    itemClicked(item: SpotlightSearchResult): void {\n        this.handleItem(item);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n\n        // Mark each sections in loading state. This flag is needed when trying to select the first item\n        // while the search is still in progress\n        this.searchSections.forEach(searchSection => (searchSection.isLoading = true));\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async searchSection => {\n            let results: SpotlightSearchResultType = [];\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                results = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (results instanceof Promise) {\n                    results = await results;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.results = results;\n            searchSection.isLoading = false;\n            this.selectFirst(true);\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.results[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.results || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ ...data, results: [], isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: SpotlightSearchResult): void {\n        item.handler();\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        // In order to show a section title there should be more than one sections\n        // and the current section should either be loading data or have results\n        return searchSection.section && (searchSection.isLoading || searchSection.results.length > 0);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/select-option.ts\n        \n\n            \n                Description\n            \n            \n                Options displayed in a select input option list\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be shown for the option\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for translation of the SelectOption.display text\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value of a option\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SelectOption {\n    /**\n     * Value of a option\n     */\n    value: string | number;\n    /**\n     * Text to be shown for the option\n     */\n    display: string;\n    /**\n     * Used for translation of the {@link SelectOption.display} text\n     */\n    isTranslatable?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ShowClippedTextDirective.html":{"url":"directives/ShowClippedTextDirective.html","title":"directive - ShowClippedTextDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ShowClippedTextDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                Displays a clarity tooltip with the full contents of a host element on hover but only if\nthe elements is clipped.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdShowClippedText]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                    Public\n                                hostElement\n                            \n                            \n                                    Static\n                                instanceCount\n                            \n                            \n                                mouseoutDelay\n                            \n                            \n                                    Private\n                                onMouseIn\n                            \n                            \n                                    Private\n                                onMouseOut\n                            \n                            \n                                tooltipSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                deactivate\n                            \n                            \n                                    Private\n                                isOverflowing\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdShowClippedText\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(host: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        host\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdShowClippedText\n                    \n                \n                \n                    \n                        Type :         CliptextConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \nactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \ndeactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOverflowing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflowing()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:246\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.host.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                        The HTML element receiving the directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            instanceCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:222\n                            \n                        \n\n                \n                    \n                        To destroy the tooltip when no longer needed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mouseoutDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:244\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:288\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:299\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TooltipSize.md\n\n                        \n                    \n                    \n                        \n                            Default value : TooltipSize.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:245\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowClippedTextDirectiveModule.html":{"url":"modules/ShowClippedTextDirectiveModule.html","title":"module - ShowClippedTextDirectiveModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowClippedTextDirectiveModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ShowClippedTextDirective } from './show-clipped-text.directive';\n\n@NgModule({\n    declarations: [ShowClippedTextDirective],\n    exports: [ShowClippedTextDirective],\n})\nexport class ShowClippedTextDirectiveModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowClippedTextDirectiveTestHelper.html":{"url":"classes/ShowClippedTextDirectiveTestHelper.html","title":"class - ShowClippedTextDirectiveTestHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowClippedTextDirectiveTestHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n        \n\n            \n                Description\n            \n            \n                Used to remove DOM specific code from the jasmine tests while testing this directive\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                componentInstance\n                            \n                            \n                                    Public\n                                hideDelay\n                            \n                            \n                                    Private\n                                host\n                            \n                            \n                                    Private\n                                secondHost\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                moveMouseOffHost\n                            \n                            \n                                moveMouseOffTooltip\n                            \n                            \n                                moveMouseOverHost\n                            \n                            \n                                moveMouseOverSecondHost\n                            \n                            \n                                moveMouseOverTooltip\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    hostPosition\n                                \n                                \n                                    disabled\n                                \n                                \n                                    hostText\n                                \n                                \n                                    tooltipSize\n                                \n                                \n                                    isTooltipVisible\n                                \n                                \n                                    tooltipText\n                                \n                                \n                                    tooltipPosition\n                                \n                                \n                                    tooltipCount\n                                \n                                \n                                    tooltipVisibility\n                                \n                                \n                                    tooltipContent\n                                \n                                \n                                    tooltip\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                        ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            componentInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.fixture.componentInstance\n\n                        \n                    \n                    \n                        \n                            Default value : this.fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.componentInstance.directive.mouseoutDelay\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.directive.mouseoutDelay\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            host\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            secondHost\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div2.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverSecondHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverSecondHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n\n                \n                    \n                        setwidth(width: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            width\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostPosition\n                    \n                \n\n\n                \n                    \n                        sethostPosition(quadrant)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            quadrant\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n\n                \n                    \n                        setdisabled(disabled: boolean)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:44\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            disabled\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostText\n                    \n                \n\n\n                \n                    \n                        sethostText(text: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            text\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipSize\n                    \n                \n\n                \n                    \n                        gettooltipSize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:54\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTooltipVisible\n                    \n                \n\n                \n                    \n                        getisTooltipVisible()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:78\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipText\n                    \n                \n\n                \n                    \n                        gettooltipText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipPosition\n                    \n                \n\n                \n                    \n                        gettooltipPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:86\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipCount\n                    \n                \n\n                \n                    \n                        gettooltipCount()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:98\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipVisibility\n                    \n                \n\n                \n                    \n                        gettooltipVisibility()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:102\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipContent\n                    \n                \n\n                \n                    \n                        gettooltipContent()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:110\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltip\n                    \n                \n\n                \n                    \n                        gettooltip()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:114\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowClippedTextDirectiveTestHostComponent.html":{"url":"components/ShowClippedTextDirectiveTestHostComponent.html","title":"component - ShowClippedTextDirectiveTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowClippedTextDirectiveTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                {{ text }}\n{{ text2 }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                directive\n                            \n                            \n                                    Public\n                                disabled\n                            \n                            \n                                div\n                            \n                            \n                                div2\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                text2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ShowClippedTextDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(ShowClippedTextDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div2')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:128\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting too'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:131\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ text }}{{ text2 }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowClippedTextDirectiveTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortedColumn.html":{"url":"interfaces/SortedColumn.html","title":"interface - SortedColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SortedColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about the currently sorted column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        reverse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the column that is sorted.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reverse\n                                    \n                                \n                                \n                                    \n                                        reverse:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the column is sorted normally or reversed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TrackByFunction,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    ActionMenuComponent,\n} from '../action-menu/action-menu.component';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport {\n    ActionDisplayConfig,\n    ActionHandlerType,\n    ActionItem,\n    ActionType,\n} from '../common/interfaces/action-item.interface';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    ColumnRendererSpec,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n} from './interfaces/datagrid-column.interface';\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualActionPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: (record: R) => string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Actions to be displayed on a grid or in a row\n     */\n    private _actions: ActionItem[] = [];\n\n    /**\n     * List of actions given by the caller\n     */\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            const actionHandler: ActionHandlerType = action.handler;\n            action.handler = (selectedEntities, handlerData) => {\n                const actionHandlerResponse = actionHandler(selectedEntities, handlerData);\n                if (actionHandlerResponse && this.actionReporter) {\n                    this.actionReporter.monitorGet(actionHandlerResponse);\n                }\n            };\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    /**\n     * To display static and contextual actions in a action bar on top of a grid\n     */\n    get shouldShowActionBarOnTop(): boolean {\n        return (\n            this.actions.length &&\n            (this.hasStaticActions || (this.hasContextualActions && this.shouldDisplayContextualActionsOnTop))\n        );\n    }\n\n    private get hasStaticActions(): boolean {\n        return this.actions.some(\n            action => action.actionType === ActionType.STATIC_FEATURED || action.actionType === ActionType.STATIC\n        );\n    }\n\n    private get hasContextualActions(): boolean {\n        return this.contextualActions.length > 0;\n    }\n\n    /**\n     * Filters contextual actions from the list of actions to be displayed in a grid row\n     */\n    get contextualActions(): ActionItem[] {\n        return this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * If the contextual buttons should display on the top of a grid.\n     */\n    get shouldDisplayContextualActionsOnTop(): boolean {\n        return (\n            this.contextualActionPosition &&\n            this.contextualActionPosition === ContextualActionPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * If the contextual buttons should display in a row.\n     */\n    get shouldDisplayContextualActionsInRow(): boolean {\n        return this.contextualActionPosition && this.contextualActionPosition === ContextualActionPosition.ROW;\n    }\n\n    /**\n     * How to display the static and contextual actions.\n     */\n    @Input() actionDisplayConfig: ActionDisplayConfig;\n\n    /**\n     * Whether to display contextual actions inside the row or on top of the grid\n     */\n    @Input() contextualActionPosition: ContextualActionPosition = ContextualActionPosition.TOP;\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    private subTracker = new SubscriptionTracker(this);\n\n    /**\n     * Used for calculating the width of actions column\n     */\n    maxFeaturedActionsOnRow = 0;\n\n    /**\n     * The {@link maxFeaturedActionsOnRow} value depends in the contextual featured actions config which belongs to the\n     * {@link ActionMenuComponent} being used in the rows. So, we wait for action menus in rows to be initialized and then calculate\n     * the value\n     */\n    @ViewChildren('actionMenuInRow') set actionMenusInRow(actionMenus: QueryList>) {\n        if (!actionMenus || !actionMenus.length) {\n            this.maxFeaturedActionsOnRow = 0;\n            return;\n        }\n        let max = 0;\n        actionMenus.forEach(actionMenu => {\n            const contextualFeaturedActions = actionMenu.contextualFeaturedActions;\n            max = Math.max(contextualFeaturedActions.length + 1, max);\n        });\n        this.maxFeaturedActionsOnRow = max;\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBarOnTop) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n\n        this.datagrid.items.change.subscribe(() => {\n            if (this.datagrid.items.displayed.length > 0) {\n                (this.datagrid as any).organizer.resize();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerActivityReporterComponent.html":{"url":"components/SpinnerActivityReporterComponent.html","title":"component - SpinnerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Spinner activity reporter shows the spinner until an error or success message is returned.\nAn error message is displayed through the error banner.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-spinner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./spinner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errorText\n                            \n                            \n                                    Public\n                                running\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:44\n                \n            \n\n\n            \n                \n                    Hides the loading indicator and shows an error message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:52\n                \n            \n\n\n            \n                \n                    Hides the loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:36\n                \n            \n\n\n            \n                \n                    Begins to show the loading indicator to the user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                        When set show the error text\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:22\n                            \n                        \n\n                \n                    \n                        When true show the spinner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Spinner activity reporter shows the spinner until an error or success message is returned.\n * An error message is displayed through the error banner.\n */\n@Component({\n    selector: 'vcd-spinner-activity-reporter',\n    templateUrl: './spinner-activity-reporter.component.html',\n})\nexport class SpinnerActivityReporterComponent extends ActivityReporter {\n    /**\n     * When true show the spinner\n     */\n    public running = false;\n\n    /**\n     * When set show the error text\n     */\n    public errorText: string = null;\n\n    constructor(@Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the loading indicator to the user.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.errorText = null;\n    }\n\n    /**\n     * Hides the loading indicator and shows an error message.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Hides the loading indicator.\n     */\n    reportSuccess(): void {\n        this.running = false;\n    }\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'DropdownComponent', 'selector': 'vcd-dropdown'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormlyInputComponent', 'selector': 'vcd-formly-input'},{'name': 'FormlyNumberWithUnitInputComponent', 'selector': 'vcd-formly-number-with-unit-input'},{'name': 'FormlySelectComponent', 'selector': 'vcd-formly-select'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'DynamicDropdownPositionDirective', 'selector': 'clr-dropdown[vcdDynamicDropdown]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpinnerActivityReporterWidgetObject.html":{"url":"classes/SpinnerActivityReporterWidgetObject.html","title":"class - SpinnerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpinnerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getSpinner\n                            \n                            \n                                    Public\n                                isSpinnerSpinning\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-spinner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSpinner\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpinner()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:24\n                \n            \n\n\n            \n                \n                    Gives the spinner for this element\n\n\n                    \n                        Returns :         DebugElement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSpinnerSpinning\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSpinnerSpinning()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DebugElement } from '@angular/core';\nimport { SpinnerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class SpinnerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-spinner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    /**\n     * Gives the spinner for this element\n     */\n    private getSpinner(): DebugElement {\n        const element = this.findElement('.spinner');\n\n        if (!element) {\n            throw new Error('Could not find the spinner element.');\n        }\n        return element;\n    }\n\n    public isSpinnerSpinning(): boolean {\n        try {\n            return !!this.getSpinner();\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotlightSearchModule.html":{"url":"modules/SpotlightSearchModule.html","title":"module - SpotlightSearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotlightSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { SpotlightSearchComponent } from './spotlight-search.component';\n\n@NgModule({\n    imports: [CommonModule, ClarityModule, FormsModule, ReactiveFormsModule, I18nModule],\n    declarations: [SpotlightSearchComponent],\n    exports: [SpotlightSearchComponent],\n})\nexport class SpotlightSearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchProvider.html":{"url":"interfaces/SpotlightSearchProvider.html","title":"interface - SpotlightSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.provider.ts\n        \n\n            \n                Description\n            \n            \n                The interface a search providers should implement in order to register itself with the SpotlightSearchService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    search\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.provider.ts:16\n                \n            \n\n\n            \n                \n                    Returns an array or a promise of array of items that comply with the search criteria.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search string provided by the user when typing in the Spotlight Search Component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpotlightSearchResultType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpotlightSearchResultType } from './spotlight-search-result';\n\n/**\n * The interface a search providers should implement in order to register itself with the {@link SpotlightSearchService}\n */\nexport interface SpotlightSearchProvider {\n    /**\n     * Returns an array or a promise of array of items that comply with the search criteria.\n     * @param criteria The search string provided by the user when typing in the Spotlight Search Component\n     */\n    search(criteria: string): SpotlightSearchResultType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchResult.html":{"url":"interfaces/SpotlightSearchResult.html","title":"interface - SpotlightSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search-result.ts\n        \n\n            \n                Description\n            \n            \n                The interface a spotlight search result item should implement\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayText\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        kbdShortcut\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayText\n                                    \n                                \n                                \n                                    \n                                        displayText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text that will be displayed in the spotlight search component\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function that is going to be called when this item is to be handled, i.e. when the\nuser clicks on this item or  selects it and presses the Enter key.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        kbdShortcut\n                                    \n                                \n                                \n                                    \n                                        kbdShortcut:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The keyboard shortcut that can be used to call the handler of this item\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpotlightSearchResult {\n    /**\n     * The text that will be displayed in the spotlight search component\n     */\n    displayText: string;\n\n    /**\n     * The keyboard shortcut that can be used to call the handler of this item\n     */\n    kbdShortcut?: string;\n\n    /**\n     * Function that is going to be called when this item is to be handled, i.e. when the\n     * user clicks on this item or  selects it and presses the Enter key.\n     */\n    handler: () => void;\n}\n\n/**\n * The type of the spotlight search result which can be a promise\n */\nexport type SpotlightSearchResultType = SpotlightSearchResult[] | Promise;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotlightSearchService.html":{"url":"injectables/SpotlightSearchService.html","title":"injectable - SpotlightSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpotlightSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getRegisteredProviders\n                            \n                            \n                                    Public\n                                registerProvider\n                            \n                            \n                                    Public\n                                unregisterProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRegisteredProviders\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRegisteredProviders()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:98\n                \n            \n\n\n            \n                \n                    Get a list of all the registered search providers.\n\n\n                    \n                        Returns :         RegisteredProviders[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            registerProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerProvider(provider: SpotlightSearchProvider, section: string, order: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:53\n                \n            \n\n\n            \n                \n                    Register a search provider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                SpotlightSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The search provider {\n\n                                    \n                                \n                                \n                                    section\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The section name (the title or the group name) that this provider will provides results for.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        The order of the section in the spotlight search results. Less the order, closer to the beginning\nof the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            unregisterProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unregisterProvider(registrationId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:87\n                \n            \n\n\n            \n                \n                    Unregister a search provider by providing the registration id.\nReturns true if unregistration was done.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registrationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id returned when registering the provider\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InternalRegistrationData[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:44\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionTracker.html":{"url":"classes/SubscriptionTracker.html","title":"class - SubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                Components can use this to have subscriptions automatically removed when the component is destroyed\n\n            \n\n\n            \n                Implements\n            \n            \n                            ISubscriptionTracker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                unsubscribe\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(destroyable: OnDestroy)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n                \n                    \n                            Constructs this tracker to call unsubscribeAll when OnDestroy.ngOnDestroy is called.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        destroyable\n                                                  \n                                                        \n                                                                        OnDestroy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThousandsUnit.html":{"url":"classes/ThousandsUnit.html","title":"class - ThousandsUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThousandsUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of thousands\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:89\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unit.html":{"url":"classes/Unit.html","title":"class - Unit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Allows you to define different types of units with unitName and\nmultiplier that converts to baseUnit.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number, unitName: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nValue that is used to convert this to base unit\n\n\n                                                        \n                                                \n                                                \n                                                        unitName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nName of the Unit. Also used to construct translation\nkeys for each type of Unit.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:71\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:45\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:37\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:61\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:54\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnitFormatter.html":{"url":"injectables/UnitFormatter.html","title":"injectable - UnitFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnitFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit-formatter.ts\n        \n\n            \n                Description\n            \n            \n                UnitFormatter is used to format the value with unitName in localized string\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bestFormat\n                            \n                            \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit-formatter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bestFormat\n                        \n                        \n                    \n                \n            \n            \n                \nbestFormat(value: number, inputUnit: Unit, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:46\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to best unit out of availableUnits and returns\nin localized string format ${value} ${outputUnit.unitName}\nEx: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        = value of inputUnit\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlist of units from which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            format\n                        \n                        \n                    \n                \n            \n            \n                \nformat(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:29\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to outPutUnit returns in\nlocalized string format ${value} ${outputUnit.unitName}\nEx: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nvalue of inputUnit\n\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit to which value is converted\n\n\n                                    \n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nhow many digits are shown after decimal\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { CommonUtil } from '../common-util';\nimport { Unit } from './unit';\n\n/**\n * UnitFormatter is used to format the value with unitName in localized string\n */\n@Injectable()\nexport class UnitFormatter {\n    constructor(private translationService: TranslationService) {}\n\n    /**\n     * Converts the value of inputUnit to outPutUnit returns in\n     * localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n     *\n     * @param value - value of inputUnit\n     * @param inputUnit - unit of value\n     * @param outputUnit - unit to which value is converted\n     * @param precision - how many digits are shown after decimal\n     */\n    format(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number): string {\n        // TODO response from getOutputValue() needs to be formatted to localized number\n        return this.translationService.translate(outputUnit.getValueWithUnitTranslationKey(), [\n            CommonUtil.roundTo(inputUnit.getOutputValue(value, outputUnit), precision),\n        ]);\n    }\n\n    /**\n     * Converts the value of inputUnit to best unit out of availableUnits and returns\n     * in localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n     *\n     * @param value = value of inputUnit\n     * @param inputUnit - unit of value\n     * @param availableUnits - list of units from which best unit is calculated\n     */\n    bestFormat(value: number, inputUnit: Unit, availableUnits: Unit[]): string {\n        return this.format(value, inputUnit, inputUnit.findBestUnit(value, availableUnits));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActionMenuModule.html":{"url":"modules/VcdActionMenuModule.html","title":"module - VcdActionMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActionMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_imports\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\nDropdownModule\n\nDropdownModule\n\nVcdActionMenuModule -->\n\nDropdownModule->VcdActionMenuModule\n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdActionMenuModule -->\n\nShowClippedTextDirectiveModule->VcdActionMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/action-menu/action-menu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DropdownModule\n                        \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DropdownModule } from '../dropdown/dropdown.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { ActionMenuComponent } from './action-menu.component';\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, I18nModule, DropdownModule, ShowClippedTextDirectiveModule],\n    declarations: [ActionMenuComponent],\n    providers: [],\n    exports: [ActionMenuComponent],\n})\nexport class VcdActionMenuModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActivityReporterModule.html":{"url":"modules/VcdActivityReporterModule.html","title":"module - VcdActivityReporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActivityReporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdErrorBannerModule } from '../error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from '../loading/loading-indicator.module';\nimport { BannerActivityReporterComponent } from './banner-activity-reporter.component';\nimport { SpinnerActivityReporterComponent } from './spinner-activity-reporter.component';\n\n@NgModule({\n    declarations: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    imports: [CommonModule, ClarityModule, I18nModule, VcdErrorBannerModule, VcdLoadingIndicatorModule],\n    exports: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    entryComponents: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n})\nexport class VcdActivityReporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdComponentsModule.html":{"url":"modules/VcdComponentsModule.html","title":"module - VcdComponentsModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdComponentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\n\nDropdownModule \n\nDropdownModule \n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActionMenuModule \n\nVcdActionMenuModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nDropdownModule  -->\n\nVcdComponentsModule->DropdownModule \n\n\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActionMenuModule  -->\n\nVcdComponentsModule->VcdActionMenuModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/components.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            DropdownModule\n                        \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            SpotlightSearchModule\n                        \n                        \n                            VcdActionMenuModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdDataExporterModule\n                        \n                        \n                            VcdDatagridModule\n                        \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdFormModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { VcdActionMenuModule } from './action-menu/index';\nimport { VcdActivityReporterModule } from './common/activity-reporter/activity-reporter.module';\nimport { VcdErrorBannerModule } from './common/error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from './common/loading/loading-indicator.module';\nimport { VcdDataExporterModule } from './data-exporter/data-exporter.module';\nimport { VcdDatagridModule } from './datagrid/datagrid.module';\nimport { DropdownModule } from './dropdown/dropdown.module';\nimport { VcdFormModule } from './form/form.module';\nimport { ShowClippedTextDirectiveModule } from './lib/directives/show-clipped-text.directive.module';\nimport { SpotlightSearchModule } from './spotlight-search/spotlight-search.module';\n\n@NgModule({\n    exports: [\n        VcdDataExporterModule,\n        VcdDatagridModule,\n        ShowClippedTextDirectiveModule,\n        VcdErrorBannerModule,\n        VcdLoadingIndicatorModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        SpotlightSearchModule,\n        VcdActionMenuModule,\n        DropdownModule,\n    ],\n})\nexport class VcdComponentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDataExporterModule.html":{"url":"modules/VcdDataExporterModule.html","title":"module - VcdDataExporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDataExporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DataExporterComponent } from './data-exporter.component';\n\n@NgModule({\n    declarations: [DataExporterComponent],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n    exports: [DataExporterComponent],\n})\nexport class VcdDataExporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDatagridModule.html":{"url":"modules/VcdDatagridModule.html","title":"module - VcdDatagridModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDatagridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdDatagridModule -->\n\nVcdActionMenuModule->VcdDatagridModule\n\n\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            ComponentRendererOutletDirective\n                        \n                        \n                            DatagridComponent\n                        \n                        \n                            DatagridMultiSelectFilterComponent\n                        \n                        \n                            DatagridNumericFilterComponent\n                        \n                        \n                            DatagridSelectFilterComponent\n                        \n                        \n                            DatagridStringFilterComponent\n                        \n                        \n                            FunctionRendererPipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            filters\n                        \n                        \n                            renderers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            VcdActionMenuModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdFormModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            DatagridComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdActionMenuModule } from '../action-menu/action-menu.module';\nimport { VcdActivityReporterModule } from '../common/activity-reporter/activity-reporter.module';\nimport { PipesModule } from '../common/pipes/pipes.module';\nimport { VcdFormModule } from '../form/form.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DatagridComponent } from './datagrid.component';\nimport { ComponentRendererOutletDirective } from './directives/component-renderer-outlet.directive';\nimport { DatagridMultiSelectFilterComponent } from './filters/datagrid-multiselect-filter.component';\nimport { DatagridNumericFilterComponent } from './filters/datagrid-numeric-filter.component';\nimport { DatagridSelectFilterComponent } from './filters/datagrid-select-filter.component';\nimport { DatagridStringFilterComponent } from './filters/datagrid-string-filter.component';\nimport { FunctionRendererPipe } from './pipes/function-renderer.pipe';\nimport { BoldTextRendererComponent } from './renderers/bold-text-renderer.component';\n\nconst directives = [ComponentRendererOutletDirective];\nconst pipes = [FunctionRendererPipe];\nconst renderers = [BoldTextRendererComponent];\nconst filters = [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ClarityModule,\n        RouterModule,\n        PipesModule,\n        ReactiveFormsModule,\n        ShowClippedTextDirectiveModule,\n        FormsModule,\n        I18nModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        VcdActionMenuModule,\n    ],\n    declarations: [DatagridComponent, ...directives, ...renderers, ...pipes, ...filters],\n    providers: [],\n    exports: [DatagridComponent, ...renderers],\n    entryComponents: [...renderers, ...filters],\n})\nexport class VcdDatagridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VcdDatagridWidgetObject.html":{"url":"classes/VcdDatagridWidgetObject.html","title":"class - VcdDatagridWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VcdDatagridWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for our VCD DataGrid\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gridHeader\n                                \n                                \n                                    clrDatagrid\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : `vcd-datagrid`\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gridHeader\n                    \n                \n\n                \n                    \n                        getgridHeader()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:19\n                                \n                            \n                    \n                        \n                                Gives the header above the grid.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        clrDatagrid\n                    \n                \n\n                \n                    \n                        getclrDatagrid()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:26\n                                \n                            \n                    \n                        \n                                Gives the widget object for this clr datagrid.\n\n\n                                \n                                    Returns :         ClrDatagridWidgetObject\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../widget-object';\nimport { DatagridComponent } from './../../../datagrid/datagrid.component';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Widget Object for our VCD DataGrid\n */\nexport class VcdDatagridWidgetObject extends WidgetObject> {\n    static tagName = `vcd-datagrid`;\n\n    /**\n     * Gives the header above the grid.\n     */\n    get gridHeader(): string {\n        return this.getText('h3');\n    }\n\n    /**\n     * Gives the widget object for this clr datagrid.\n     */\n    get clrDatagrid(): ClrDatagridWidgetObject {\n        const constElement = this.findElement(ClrDatagridWidgetObject.tagName);\n        return new ClrDatagridWidgetObject(this.fixture, constElement, constElement.componentInstance);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdErrorBannerModule.html":{"url":"modules/VcdErrorBannerModule.html","title":"module - VcdErrorBannerModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdErrorBannerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/error/error-banner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ErrorBannerComponent } from './error-banner.component';\n\n@NgModule({\n    declarations: [ErrorBannerComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [ErrorBannerComponent],\n    entryComponents: [ErrorBannerComponent],\n})\nexport class VcdErrorBannerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormModule.html":{"url":"modules/VcdFormModule.html","title":"module - VcdFormModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_exports\n\n\n\ncluster_VcdFormModule_providers\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/form/form.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            UnitFormatter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { UnitFormatter } from '../utils/unit/unit-formatter';\nimport { FormCheckboxComponent } from './form-checkbox/form-checkbox.component';\nimport { FormInputComponent } from './form-input/form-input.component';\nimport { FormSelectComponent } from './form-select/form-select.component';\nimport {\n    MinMaxValidator,\n    NumberWithUnitFormInputComponent,\n} from './number-with-unit-input/number-with-unit-form-input.component';\n\nconst declarations = [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n];\n\n@NgModule({\n    imports: [ClarityModule, FormsModule, ReactiveFormsModule, CommonModule, I18nModule],\n    declarations,\n    providers: [UnitFormatter],\n    exports: [...declarations],\n})\nexport class VcdFormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VcdFormlyFieldConfig.html":{"url":"interfaces/VcdFormlyFieldConfig.html","title":"interface - VcdFormlyFieldConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VcdFormlyFieldConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of FormlyForm.fields that is specific to Vcd.\n\n            \n\n            \n                Extends\n            \n            \n                    FormlyFieldConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldGroup\n                                \n                                \n                                            Optional\n                                        templateOptions\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldGroup\n                                    \n                                \n                                \n                                    \n                                        fieldGroup:         VcdFormlyFieldConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyFieldConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FormlyForm.fields\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templateOptions\n                                    \n                                \n                                \n                                    \n                                        templateOptions:         VcdFormlyTemplateOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyTemplateOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    VcdFormlyTemplateOptions\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         VcdFormlyInputTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VcdFormlyInputTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    VcdFormlyInputTypes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConfigOption, FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';\nimport { Observable } from 'rxjs';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { Unit } from '../../utils/unit/unit';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\n\n/**\n * Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n */\nexport interface VcdFormlyTemplateOptions extends FormlyTemplateOptions {\n    options?: SelectOption[] | Observable;\n    inputValueUnit?: Unit;\n    unlimitedValue?: number;\n    showUnlimitedOption?: boolean;\n    unitOptions?: Unit[];\n    isReadOnly?: boolean;\n    hint?: string;\n    hintPosition?: string;\n    errorLabels?: string[];\n    onEnterClicked?: (field: FormlyFieldConfig) => any;\n    onEscapeClicked?: (field: FormlyFieldConfig) => any;\n}\n\n/**\n * Configuration of {@link FormlyForm.fields} that is specific to Vcd.\n */\nexport interface VcdFormlyFieldConfig extends FormlyFieldConfig {\n    /**\n     * {@link VcdFormlyInputTypes}\n     */\n    type?: VcdFormlyInputTypes;\n    /**\n     * {@link VcdFormlyTemplateOptions}\n     */\n    templateOptions?: VcdFormlyTemplateOptions;\n    /**\n     * {@link FormlyForm.fields}\n     */\n    fieldGroup?: VcdFormlyFieldConfig[];\n}\n\n/**\n * Different of Vcd form inputs that are configurable through Formly\n */\nexport enum VcdFormlyInputTypes {\n    /**\n     * Used for identifying {@link FormlyInputComponent} type\n     */\n    input = 'input',\n    /**\n     * Used for identifying {@link FormlySelectComponent} type\n     */\n    select = 'select',\n    /**\n     * Used for identifying {@link FormlyNumberWithUnitInputComponent} type\n     */\n    number_with_unit_input = 'number_with_unit_input',\n}\n\nexport const VCD_FORMLY_CONFIG: ConfigOption = {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormlyModule.html":{"url":"modules/VcdFormlyModule.html","title":"module - VcdFormlyModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormlyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormlyModule\n\n\n\ncluster_VcdFormlyModule_declarations\n\n\n\ncluster_VcdFormlyModule_imports\n\n\n\n\nFormlyInputComponent\n\nFormlyInputComponent\n\n\n\nVcdFormlyModule\n\nVcdFormlyModule\n\nVcdFormlyModule -->\n\nFormlyInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlyNumberWithUnitInputComponent\n\nFormlyNumberWithUnitInputComponent\n\nVcdFormlyModule -->\n\nFormlyNumberWithUnitInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlySelectComponent\n\nFormlySelectComponent\n\nVcdFormlyModule -->\n\nFormlySelectComponent->VcdFormlyModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormlyModule -->\n\nVcdFormModule->VcdFormlyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormlyInputComponent\n                        \n                        \n                            FormlyNumberWithUnitInputComponent\n                        \n                        \n                            FormlySelectComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdFormModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configOption: ConfigOption)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/formly/vcd/vcd-formly.module.ts:37\n                \n            \n\n\n            \n                \n                    Used for passing configuration in addition to default VCD_FORMLY_CONFIG\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configOption\n                                    \n                                            ConfigOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Additional Formly configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ConfigOption, FORMLY_CONFIG, FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdFormModule } from '../../form/form.module';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\nimport { VCD_FORMLY_CONFIG } from './vcd-formly.config';\n\nconst VCD_FORMLY_INPUT_COMPONENTS = [FormlyInputComponent, FormlySelectComponent, FormlyNumberWithUnitInputComponent];\n\n@NgModule({\n    declarations: [...VCD_FORMLY_INPUT_COMPONENTS],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormlyModule.forChild(VCD_FORMLY_CONFIG),\n        VcdFormModule,\n        FormlySelectModule,\n        I18nModule,\n    ],\n    exports: [],\n})\nexport class VcdFormlyModule {\n    /**\n     * Used for passing configuration in addition to default {@link VCD_FORMLY_CONFIG}\n     * @param configOption Additional Formly configuration\n     */\n    static forRoot(configOption: ConfigOption): ModuleWithProviders {\n        return {\n            ngModule: VcdFormlyModule,\n            providers: [{ provide: FORMLY_CONFIG, useValue: configOption, multi: true }],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VcdFormlyTemplateOptions.html":{"url":"interfaces/VcdFormlyTemplateOptions.html","title":"interface - VcdFormlyTemplateOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VcdFormlyTemplateOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/formly/vcd/vcd-formly.config.ts\n        \n\n            \n                Description\n            \n            \n                Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n\n            \n\n            \n                Extends\n            \n            \n                    FormlyTemplateOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        errorLabels\n                                \n                                \n                                            Optional\n                                        hint\n                                \n                                \n                                            Optional\n                                        hintPosition\n                                \n                                \n                                            Optional\n                                        inputValueUnit\n                                \n                                \n                                            Optional\n                                        isReadOnly\n                                \n                                \n                                            Optional\n                                        onEnterClicked\n                                \n                                \n                                            Optional\n                                        onEscapeClicked\n                                \n                                \n                                            Optional\n                                        options\n                                \n                                \n                                            Optional\n                                        showUnlimitedOption\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                                \n                                            Optional\n                                        unlimitedValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorLabels\n                                    \n                                \n                                \n                                    \n                                        errorLabels:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hint\n                                    \n                                \n                                \n                                    \n                                        hint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hintPosition\n                                    \n                                \n                                \n                                    \n                                        hintPosition:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputValueUnit\n                                    \n                                \n                                \n                                    \n                                        inputValueUnit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEnterClicked\n                                    \n                                \n                                \n                                    \n                                        onEnterClicked:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onEscapeClicked\n                                    \n                                \n                                \n                                    \n                                        onEscapeClicked:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[] | Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[] | Observable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showUnlimitedOption\n                                    \n                                \n                                \n                                    \n                                        showUnlimitedOption:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unlimitedValue\n                                    \n                                \n                                \n                                    \n                                        unlimitedValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigOption, FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';\nimport { Observable } from 'rxjs';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { Unit } from '../../utils/unit/unit';\nimport { FormlyInputComponent } from './inputs/input/formly-input.component';\nimport { FormlyNumberWithUnitInputComponent } from './inputs/number-with-unit-input/formly-number-with-unit-input.component';\nimport { FormlySelectComponent } from './inputs/select/formly-select.component';\n\n/**\n * Options that are specific to Vcd form components. These are passed as inputs or outputs in the HTML templates.\n */\nexport interface VcdFormlyTemplateOptions extends FormlyTemplateOptions {\n    options?: SelectOption[] | Observable;\n    inputValueUnit?: Unit;\n    unlimitedValue?: number;\n    showUnlimitedOption?: boolean;\n    unitOptions?: Unit[];\n    isReadOnly?: boolean;\n    hint?: string;\n    hintPosition?: string;\n    errorLabels?: string[];\n    onEnterClicked?: (field: FormlyFieldConfig) => any;\n    onEscapeClicked?: (field: FormlyFieldConfig) => any;\n}\n\n/**\n * Configuration of {@link FormlyForm.fields} that is specific to Vcd.\n */\nexport interface VcdFormlyFieldConfig extends FormlyFieldConfig {\n    /**\n     * {@link VcdFormlyInputTypes}\n     */\n    type?: VcdFormlyInputTypes;\n    /**\n     * {@link VcdFormlyTemplateOptions}\n     */\n    templateOptions?: VcdFormlyTemplateOptions;\n    /**\n     * {@link FormlyForm.fields}\n     */\n    fieldGroup?: VcdFormlyFieldConfig[];\n}\n\n/**\n * Different of Vcd form inputs that are configurable through Formly\n */\nexport enum VcdFormlyInputTypes {\n    /**\n     * Used for identifying {@link FormlyInputComponent} type\n     */\n    input = 'input',\n    /**\n     * Used for identifying {@link FormlySelectComponent} type\n     */\n    select = 'select',\n    /**\n     * Used for identifying {@link FormlyNumberWithUnitInputComponent} type\n     */\n    number_with_unit_input = 'number_with_unit_input',\n}\n\nexport const VCD_FORMLY_CONFIG: ConfigOption = {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdLoadingIndicatorModule.html":{"url":"modules/VcdLoadingIndicatorModule.html","title":"module - VcdLoadingIndicatorModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdLoadingIndicatorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/loading/loading-indicator.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { LoadingIndicatorComponent } from './loading-indicator.component';\n\n@NgModule({\n    declarations: [LoadingIndicatorComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [LoadingIndicatorComponent],\n    entryComponents: [LoadingIndicatorComponent],\n})\nexport class VcdLoadingIndicatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WidgetDriver.html":{"url":"interfaces/WidgetDriver.html","title":"interface - WidgetDriver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WidgetDriver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/base-widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Represents an object that knows how to drive testing for a specific testing type.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    check\n                                \n                                \n                                    classes\n                                \n                                \n                                    clearInputValue\n                                \n                                \n                                    click\n                                \n                                \n                                    disabled\n                                \n                                \n                                    exists\n                                \n                                \n                                    find\n                                \n                                \n                                    getChecked\n                                \n                                \n                                    getInputValue\n                                \n                                \n                                    getInputValues\n                                \n                                \n                                    getText\n                                \n                                \n                                    getTexts\n                                \n                                \n                                    hidden\n                                \n                                \n                                    select\n                                \n                                \n                                    sendKeyboardKey\n                                \n                                \n                                    setInputValue\n                                \n                                \n                                    visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:62\n                \n            \n\n\n            \n                \n                    Checks the checkbox contained in the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            classes\n                        \n                        \n                    \n                \n            \n            \n                \nclasses(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:48\n                \n            \n\n\n            \n                \n                    Gives the CSS classes applied to the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInputValue\n                        \n                        \n                    \n                \n            \n            \n                \nclearInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:114\n                \n            \n\n\n            \n                \n                    Clears the input value of the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:55\n                \n            \n\n\n            \n                \n                    Clicks the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disabled\n                        \n                        \n                    \n                \n            \n            \n                \ndisabled(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:27\n                \n            \n\n\n            \n                \n                    Says if the element is disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \nexists(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:20\n                \n            \n\n\n            \n                \n                    Says if any child elements exists that use this css selector.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(params: FindParams> | FindableWidget)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        W\n                    \n                \n            \n\n            \n                \n                    Finds a widget using the given params within this widget driver.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            FindParams> | FindableWidget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     W\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChecked\n                        \n                        \n                    \n                \n            \n            \n                \ngetChecked(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:69\n                \n            \n\n\n            \n                \n                    Says if the checkbox is checked within the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValue(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:99\n                \n            \n\n\n            \n                \n                    Gives the value of the input.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInputValues\n                        \n                        \n                    \n                \n            \n            \n                \ngetInputValues(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:107\n                \n            \n\n\n            \n                \n                    Gives the value of all inputs that match the given css selector.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the CSS selector of the immediate parent of the children.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the CSS selector to filter the children by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \ngetText(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:121\n                \n            \n\n\n            \n                \n                    Gives the text within the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \ngetTexts(parentCssSelector?: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:129\n                \n            \n\n\n            \n                \n                    Gives the text of all elements that match the given CSS selectors.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    parentCssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the CSS selector of the immediate parent of the children.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the CSS selector to filter the children by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hidden\n                        \n                        \n                    \n                \n            \n            \n                \nhidden(cssSeletor?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:34\n                \n            \n\n\n            \n                \n                    Says if the element is hidden.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSeletor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(option: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:76\n                \n            \n\n\n            \n                \n                    Selects the given option within the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendKeyboardKey\n                        \n                        \n                    \n                \n            \n            \n                \nsendKeyboardKey(key: string, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:83\n                \n            \n\n\n            \n                \n                    Sends a single key event to the element.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValue(value: string, shouldAppend?: boolean, cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:92\n                \n            \n\n\n            \n                \n                    Sets the input value of the element to the given value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    shouldAppend\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        if the value should be appended to the current input value or if the input should be cleared.\ndefaults to clearing the input (false).\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            visible\n                        \n                        \n                    \n                \n            \n            \n                \nvisible(cssSelector?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/base-widget-object.ts:41\n                \n            \n\n\n            \n                \n                    Says if the element is visible.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the selector to use to find the element, if null uses the current WidgetDriver.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindableWidget, FindParams } from './widget-object';\n\n/**\n * Represents an object that knows how to drive testing for a specific testing type.\n */\nexport interface WidgetDriver {\n    /**\n     * Finds a widget using the given params within this widget driver.\n     */\n    find(params: FindParams> | FindableWidget): W;\n\n    /**\n     * Says if any child elements exists that use this css selector.\n     */\n    exists(cssSelector?: string): Promise;\n\n    /**\n     * Says if the element is disabled.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    disabled(cssSelector?: string): Promise;\n\n    /**\n     * Says if the element is hidden.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    hidden(cssSeletor?: string): Promise;\n\n    /**\n     * Says if the element is visible.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    visible(cssSelector?: string): Promise;\n\n    /**\n     * Gives the CSS classes applied to the element\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    classes(cssSelector?: string): Promise;\n\n    /**\n     * Clicks the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    click(cssSelector?: string): Promise;\n\n    /**\n     * Checks the checkbox contained in the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    check(cssSelector?: string): Promise;\n\n    /**\n     * Says if the checkbox is checked within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getChecked(cssSelector?: string): Promise;\n\n    /**\n     * Selects the given option within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    select(option: string, cssSelector?: string): Promise;\n\n    /**\n     * Sends a single key event to the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    sendKeyboardKey(key: string, cssSelector?: string): Promise;\n\n    /**\n     * Sets the input value of the element to the given value.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     * @param shouldAppend if the value should be appended to the current input value or if the input should be cleared.\n     *                     defaults to clearing the input (false).\n     */\n    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise;\n\n    /**\n     * Gives the value of the input.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getInputValue(cssSelector?: string): Promise;\n\n    /**\n     * Gives the value of all inputs that match the given css selector.\n     *\n     * @param parentCssSelector the CSS selector of the immediate parent of the children.\n     * @param cssSelector the CSS selector to filter the children by.\n     */\n    getInputValues(parentCssSelector?: string, cssSelector?: string): Promise;\n\n    /**\n     * Clears the input value of the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    clearInputValue(cssSelector?: string): Promise;\n\n    /**\n     * Gives the text within the element.\n     *\n     * @param cssSelector the selector to use to find the element, if null uses the current WidgetDriver.\n     */\n    getText(cssSelector?: string): Promise;\n\n    /**\n     * Gives the text of all elements that match the given CSS selectors.\n     *\n     * @param parentCssSelector the CSS selector of the immediate parent of the children.\n     * @param cssSelector the CSS selector to filter the children by.\n     */\n    getTexts(parentCssSelector?: string, cssSelector?: string): Promise;\n}\n\n/**\n * An object that all other WidgetObjects should extend.\n */\nexport class BaseWidgetObject implements WidgetDriver {\n    constructor(private driver: WidgetDriver) {}\n\n    find(params: FindParams> | FindableWidget): W {\n        return this.driver.find(params);\n    }\n\n    exists(cssSelector?: string): Promise {\n        return this.driver.exists(cssSelector);\n    }\n\n    disabled(cssSelector?: string): Promise {\n        return this.driver.disabled(cssSelector);\n    }\n\n    visible(cssSelector?: string): Promise {\n        return this.driver.visible(cssSelector);\n    }\n\n    hidden(cssSelector?: string): Promise {\n        return this.driver.hidden(cssSelector);\n    }\n\n    click(cssSelector?: string): Promise {\n        return this.driver.click(cssSelector);\n    }\n\n    classes(cssSelector?: string): Promise {\n        return this.driver.classes(cssSelector);\n    }\n\n    check(cssSelector?: string): Promise {\n        return this.driver.check(cssSelector);\n    }\n\n    getChecked(cssSelector?: string): Promise {\n        return this.driver.getChecked(cssSelector);\n    }\n\n    select(option: string, cssSelector?: string): Promise {\n        return this.driver.select(option, cssSelector);\n    }\n\n    sendKeyboardKey(key: string, cssSelector?: string): Promise {\n        return this.driver.sendKeyboardKey(key, cssSelector);\n    }\n\n    setInputValue(value: string, shouldAppend?: boolean, cssSelector?: string): Promise {\n        return this.driver.setInputValue(value, shouldAppend, cssSelector);\n    }\n\n    clearInputValue(cssSelector?: string): Promise {\n        return this.driver.clearInputValue(cssSelector);\n    }\n\n    getText(cssSelector?: string): Promise {\n        return this.driver.getText(cssSelector);\n    }\n\n    getTexts(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.driver.getTexts(parentCssSelector, cssSelector);\n    }\n\n    getInputValue(cssSelector?: string): Promise {\n        return this.driver.getInputValue(cssSelector);\n    }\n\n    getInputValues(parentCssSelector?: string, cssSelector?: string): Promise {\n        return this.driver.getInputValues(parentCssSelector, cssSelector);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetFinder.html":{"url":"classes/WidgetFinder.html","title":"class - WidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                findWidgets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(componentConstructor: Type)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        componentConstructor\n                                                  \n                                                        \n                                                                    Type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The host component to be created as the root of the tests's fixture\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:173\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:217\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findWidgets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWidgets(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:192\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds widgets within a fixture\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType[]\n\n                    \n                    \n                        A Potentially empty list of widgets matching the given specs\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetObject.html":{"url":"classes/WidgetObject.html","title":"class - WidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\nThe main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\nqueries the internals of a component from a test.\nSubclass Rules\n\nMethods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\ncallers to query it from the outside creating potential duplicate querying code and abstraction leaks.\nSubclasses also should not have testing assertions. They should only provide the state and the calling test can\nassert code on its own.\n\n\n\nT is the type of the JS/TS object being wrapped\nIt is recommended that files for implementations be named with a .wo.ts extension\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture, root: DebugElement, component: T)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\nneed to find a widget within the tree, you should use find.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The test fixture, so we can call {\n\n                                                        \n                                                \n                                                \n                                                        root\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The root element (host) for the component instance. We typically prefer to interact with the\ncomponent but there are times when we must check the DOM.\n\n                                                        \n                                                \n                                                \n                                                        component\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The component instance being managed. Whenever possible, we should access the component's API.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:42\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:73\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:54\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:62\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:115\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:123\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:87\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:101\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\nexport interface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nexport function isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing to vcd-ui-common\nThe vcd-ui-common project team welcomes contributions from the community. Before you start working with vcd-ui-common, please\nread our Developer Certificate of Origin. All contributions to this repository must be\nsigned as described on that page. Your signature certifies that you wrote the patch or have the right to pass it on\nas an open-source patch.\nContribution Flow\nThis is a rough outline of what a contributor's workflow looks like:\n\nCreate a topic branch from where you want to base your work\nMake commits of logical units\nMake sure your commit messages are in the proper format (see below)\nPush your changes to a topic branch in your fork of the repository\nSubmit a pull request\n\nContribution Requirements\n\nPublic/exported members must be documented using tsdoc\n\nEvery commit must contain unit tests, striving for full coverage. If full coverage cannot be achieved, the Pull\nRequest should explain why tests could not be written.\n\nDescriptive Pull Requests:\n\nInclude list of steps for manual testing\nExplain alternatives that were considered\nFor bug fixes, explain what was causing the issue, don't repeat the text from the issue\n\n\n\nMerge vs fast-forward\nPRs with single commits should use --fast-forward. Otherwise, pull requests should be merge commits.\nStaying In Sync With Upstream\nWhen your branch gets out of sync with the vmware/master branch, use the following to update:\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream master\ngit push --force-with-lease origin my-new-featureUpdating pull requests\nIf your PR fails to pass CI or needs changes based on code review, you'll most likely want to squash these changes into\nexisting commits.\nIf your pull request contains a single commit or your changes are related to the most recent commit, you can simply\namend the commit.\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-featureIf you need to squash changes into an earlier commit, you can use:\ngit add .\ngit commit --fixup \ngit rebase -i --autosquash master\ngit push --force-with-lease origin my-new-featureBe sure to add a comment to the PR indicating your new changes are ready to review, as GitHub does not generate a\nnotification when you git push.\nCode Style\nFormatting Commit Messages\nWe follow the conventions on How to Write a Git Commit Message.\nBe sure to include any related GitHub issue references in the commit message. See\nGFM syntax for referencing issues\nand commits.\nReporting Bugs and Creating Issues\nWhen opening a new issue, try to roughly follow the commit message format conventions above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/components/src/action-menu/action-menu.component.ts\n            \n            component\n            ActionMenuComponent\n            \n                85 %\n                (24/28)\n            \n        \n        \n            \n                \n                projects/components/src/action-menu/action-menu.component.ts\n            \n            function\n            getDeepCopyOfActionItems\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/action-menu/action-menu.component.ts\n            \n            function\n            getDefaultActionDisplayConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/action-search-provider/action-search.provider.ts\n            \n            class\n            ActionSearchProvider\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                projects/components/src/action-search-provider/action-search.provider.ts\n            \n            variable\n            DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            class\n            ActivityPromiseResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ActivityResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ObjectAndResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-reporter.ts\n            \n            class\n            ActivityReporter\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n            \n            component\n            BannerActivityReporterComponent\n            \n                66 %\n                (12/18)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n            \n            component\n            SpinnerActivityReporterComponent\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                projects/components/src/common/error/error-banner.component.ts\n            \n            component\n            ErrorBannerComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionDisplayConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionItem\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/select-option.ts\n            \n            interface\n            SelectOption\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/common/loading/loading-indicator.component.ts\n            \n            component\n            LoadingIndicatorComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            pipe\n            NestedPropertyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            function\n            isNullOrUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            DATE_OBJECT_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            OBJECT_PROPERTY_SEPARATOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/pipes.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            class\n            SubscriptionTracker\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            interface\n            ISubscriptionTracker\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            injectable\n            CsvExporterService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            encodeValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            hasPotentialInjection\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            processRow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            sanitizeString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            variable\n            LEADING_CONTROL_CHAR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            component\n            DataExporterComponent\n            \n                58 %\n                (23/39)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            DataExportRequestEvent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            ExportColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.wo.ts\n            \n            class\n            DataExporterWidgetObject\n            \n                82 %\n                (14/17)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            component\n            DatagridComponent\n            \n                72 %\n                (49/68)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            ColumnConfigInternal\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPane\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPaneConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailRowConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridDataFetchResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridState\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationCallback\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PagionationInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            SortedColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_PAGINATION_TRANSLATION_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            MAX_HEADER_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            ROW_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            directives\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            filters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            pipes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            renderers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n            \n            directive\n            ComponentRendererOutletDirective\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            class\n            DatagridFilter\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            function\n            FilterComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            variable\n            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            component\n            DatagridMultiSelectFilterComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            DatagridMultiSelectFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOption\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOptionInternal\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            function\n            DatagridMultiSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            component\n            DatagridNumericFilterComponent\n            \n                36 %\n                (11/30)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            interface\n            DatagridNumericFilterConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            function\n            DatagridNumericFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            component\n            DatagridSelectFilterComponent\n            \n                47 %\n                (11/23)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            interface\n            DatagridSelectFilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            function\n            DatagridSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            component\n            DatagridStringFilterComponent\n            \n                45 %\n                (10/22)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            interface\n            DatagridStringFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            function\n            DatagridStringFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRenderer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRendererSpec\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            Button\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ButtonConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ColumnRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButton\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButtonConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            FunctionRenderer\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GlobalButton\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GridColumn\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            function\n            ColumnComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            interface\n            MockRecord\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            variable\n            mockData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n            \n            pipe\n            FunctionRendererPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            component\n            BoldTextRendererComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            interface\n            BoldTextRendererConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            function\n            BoldTextRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            class\n            BoldTextRendererWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            function\n            WithGridBoldRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dropdown.component.ts\n            \n            component\n            DropdownComponent\n            \n                76 %\n                (16/21)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dropdown.component.ts\n            \n            interface\n            DropdownItem\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n            \n            directive\n            DynamicDropdownPositionDirective\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n            \n            variable\n            CONTENT_AREA_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n            \n            variable\n            MENU_BUFFER_SPACE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n            \n            variable\n            NO_SCROLLING_CLASSNAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            class\n            BaseFormControl\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-checkbox/form-checkbox.component.ts\n            \n            component\n            FormCheckboxComponent\n            \n                76 %\n                (16/21)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            component\n            FormInputComponent\n            \n                77 %\n                (24/31)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            getFormattedDateValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            pad\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-select/form-select.component.ts\n            \n            component\n            FormSelectComponent\n            \n                72 %\n                (13/18)\n            \n        \n        \n            \n                \n                projects/components/src/form/form.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/interfaces/can-be-read-only.interface.ts\n            \n            interface\n            CanBeReadOnly\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            component\n            NumberWithUnitFormInputComponent\n            \n                58 %\n                (25/43)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            directive\n            MinMaxValidator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            variable\n            UNLIMITED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n            \n            class\n            NumberWithUnitFormInputWidgetObject\n            \n                52 %\n                (9/17)\n            \n        \n        \n            \n                \n                projects/components/src/form/validators.ts\n            \n            class\n            FormValidators\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/inputs/input/formly-input.component.ts\n            \n            component\n            FormlyInputComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/inputs/number-with-unit-input/formly-number-with-unit-input.component.ts\n            \n            component\n            FormlyNumberWithUnitInputComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/inputs/select/formly-select.component.ts\n            \n            component\n            FormlySelectComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/vcd-formly.config.ts\n            \n            interface\n            VcdFormlyFieldConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/vcd-formly.config.ts\n            \n            interface\n            VcdFormlyTemplateOptions\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/vcd-formly.config.ts\n            \n            variable\n            VCD_FORMLY_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/formly/vcd/vcd-formly.module.ts\n            \n            variable\n            VCD_FORMLY_INPUT_COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            component\n            ShowClippedTextDirectiveTestHostComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            class\n            ShowClippedTextDirectiveTestHelper\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            directive\n            ShowClippedTextDirective\n            \n                20 %\n                (3/15)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            interface\n            CliptextConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            setStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            unwatchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            watchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            fireTipTransitionEndForTests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            tip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search-result.ts\n            \n            interface\n            SpotlightSearchResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            component\n            SpotlightSearchComponent\n            \n                31 %\n                (7/22)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            interface\n            SearchSection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.provider.ts\n            \n            interface\n            SpotlightSearchProvider\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            injectable\n            SpotlightSearchService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            InternalRegistrationData\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            RegisteredProviders\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            variable\n            createId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/common-util.ts\n            \n            class\n            CommonUtil\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                projects/components/src/utils/dom-util.ts\n            \n            class\n            DomUtil\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            class\n            FilterBuilder\n            \n                70 %\n                (17/24)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            variable\n            Operators\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/id-generator/id-generator.ts\n            \n            class\n            IdGenerator\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n            \n            class\n            BannerActivityReporterWidgetObject\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n            \n            class\n            SpinnerActivityReporterWidgetObject\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/angular-widget-driver.ts\n            \n            class\n            AngularWidgetDriver\n            \n                4 %\n                (1/22)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/angular-widget-finder.ts\n            \n            class\n            AngularWidgetFinder\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/angular-widget-finder.ts\n            \n            interface\n            HasAngularFinder\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/base-widget-object.ts\n            \n            class\n            BaseWidgetObject\n            \n                5 %\n                (1/19)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/base-widget-object.ts\n            \n            interface\n            WidgetDriver\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/cypress-widget-driver.ts\n            \n            class\n            CypressWidgetDriver\n            \n                4 %\n                (1/22)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/cypress-widget-driver.ts\n            \n            function\n            promisify\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/cypress-widget-driver.ts\n            \n            variable\n            Cypress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/cypress-widget-finder.ts\n            \n            class\n            CypressWidgetFinder\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/cypress-widget-finder.ts\n            \n            variable\n            cy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            class\n            ClrDatagridWidgetObject\n            \n                90 %\n                (38/42)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            CELL_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_CSS_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            FILTER_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            ROW_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            component\n            FilterTestHostComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            configureTestingModule\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelperWithFinder\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n            \n            class\n            VcdDatagridWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetFinder\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetObject\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindableWidget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            HasFinder\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            function\n            isFindParamsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit-formatter.ts\n            \n            injectable\n            UnitFormatter\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Bytes\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Hertz\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Percent\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            ThousandsUnit\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Unit\n            \n                54 %\n                (6/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.9\n        \n            @angular/common : 9.1.9\n        \n            @angular/compiler : 9.1.9\n        \n            @angular/core : 9.1.9\n        \n            @angular/forms : 9.1.9\n        \n            @angular/platform-browser : 9.1.9\n        \n            @angular/platform-browser-dynamic : 9.1.9\n        \n            @angular/router : 9.1.9\n        \n            @clr/angular : 3.1.3\n        \n            @clr/core : 3.1.3\n        \n            @clr/icons : 3.1.3\n        \n            @clr/ui : 3.1.3\n        \n            @ngx-formly/core : 5.6.1\n        \n            @stackblitz/sdk : 1.3.0\n        \n            @vmw/ng-live-docs : 0.0.7\n        \n            @vmw/plain-js-live-docs : 0.0.2\n        \n            @webcomponents/webcomponentsjs : 2.0.0\n        \n            @wessberg/ts-evaluator : 0.0.25\n        \n            angular-cli-ghpages : 0.6.2\n        \n            classlist.js : 1.1.20150312\n        \n            codecov.io : 0.1.6\n        \n            karma-coverage : 2.0.2\n        \n            lit-html : 1.1.2\n        \n            messageformat : 1.0.2\n        \n            mousetrap : 1.6.5\n        \n            prismjs : 1.17.1\n        \n            properties : 1.2.1\n        \n            rbradford-compodoc : 1.1.11\n        \n            rxjs : 6.5.5\n        \n            tsickle : 0.38.1\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/animations : 9.*\n        \n            @angular/common : 9.*\n        \n            @angular/compiler : 9.*\n        \n            @angular/core : 9.*\n        \n            @angular/forms : 9.*\n        \n            @angular/platform-browser : 9.*\n        \n            @angular/platform-browser-dynamic : 9.*\n        \n            @angular/router : 9.*\n        \n            @clr/angular : 3.*\n        \n            @clr/ui : 3.*\n        \n            @clr/icons : 3.*\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionStyling   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActionType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActivityIndicatorType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            CheckBoxStyling   (projects/.../form-checkbox.component.ts)\n                        \n                        \n                            ContextualActionPosition   (projects/.../datagrid.component.ts)\n                        \n                        \n                            ContextualButtonPosition   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            FormFields   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            GridColumnHideable   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            GridSelectionType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            InactiveButtonDisplayMode   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            SIZES   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            TextIcon   (projects/.../action-item.interface.ts)\n                        \n                        \n                            TooltipPosition   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            TooltipSize   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UserOptions   (projects/.../data-exporter.component.ts)\n                        \n                        \n                            VcdFormlyInputTypes   (projects/.../vcd-formly.config.ts)\n                        \n                        \n                            WildCardPosition   (projects/.../datagrid-string-filter.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionStyling\n                    \n                \n                    \n                        \n                            Display options for action menu\n\n                        \n                    \n                        \n                            \n                                 INLINE\n                            \n                        \n                        \n                            \n                                Value : INLINE\n                            \n                        \n                        \n                            \n                                 DROPDOWN\n                            \n                        \n                        \n                            \n                                Value : DROPDOWN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                    \n                        \n                            List of different type of action buckets\n\n                        \n                    \n                        \n                            \n                                 STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                Value : STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n                        \n                            \n                                Value : STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TextIcon\n                    \n                \n                    \n                        \n                            An enum that describes the possible ways to display the button title.\n\n                        \n                    \n                        \n                            \n                                 ICON\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 ICON_AND_TEXT\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivityIndicatorType\n                    \n                \n                    \n                        \n                            The types of activity indicators that can be displayed on top of the grid.\n\n                        \n                    \n                        \n                            \n                                 SPINNER\n                            \n                        \n                        \n                            \n                                 BANNER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ContextualActionPosition\n                    \n                \n                    \n                        \n                            An enum that describes where the contextual buttons should display.\n\n                        \n                    \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 ROW\n                            \n                        \n                        \n                            \n                                Value : ROW\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridSelectionType\n                    \n                \n                    \n                        \n                            Different types of row selection on the grid\n\n                        \n                    \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : MULTI\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : SINGLE\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : NONE\n                            \n                        \n            \n        \n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n    \n        \n            \n                \n                    \n                        \n                        CheckBoxStyling\n                    \n                \n                        \n                            \n                                 CHECKBOX\n                            \n                        \n                        \n                            \n                                Value : checkbox\n                            \n                        \n                        \n                            \n                                 TOGGLESWITCH\n                            \n                        \n                        \n                            \n                                Value : toggle-switch\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ContextualButtonPosition\n                    \n                \n                    \n                        \n                            An enum that describes where the contextual buttons should display.\n\n                        \n                    \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 ROW\n                            \n                        \n                        \n                            \n                                Value : ROW\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridColumnHideable\n                    \n                \n                        \n                            \n                                 Never\n                            \n                        \n                        \n                            \n                                Value : NEVER\n                            \n                        \n                        \n                            \n                                 Shown\n                            \n                        \n                        \n                            \n                                Value : SHOWN\n                            \n                        \n                        \n                            \n                                 Hidden\n                            \n                        \n                        \n                            \n                                Value : HIDDEN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InactiveButtonDisplayMode\n                    \n                \n                    \n                        \n                            The ways buttons should be displayed when they are inactive.\n\n                        \n                    \n                        \n                            \n                                 Hide\n                            \n                        \n                        \n                            \n                                Value : HIDE\n                            \n                        \n                        \n                            \n                                 Disable\n                            \n                        \n                        \n                            \n                                Value : Disable\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        FormFields\n                    \n                \n                        \n                            \n                                 from\n                            \n                        \n                        \n                            \n                                Value : from\n                            \n                        \n                        \n                            \n                                 to\n                            \n                        \n                        \n                            \n                                Value : to\n                            \n                        \n            \n        \n\n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n        \n            \n                \n                    \n                        \n                        SIZES\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : sm\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : md\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : lg\n                            \n                        \n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        TooltipPosition\n                    \n                \n                        \n                            \n                                 tl\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-left\n                            \n                        \n                        \n                            \n                                 tr\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-right\n                            \n                        \n                        \n                            \n                                 br\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-right\n                            \n                        \n                        \n                            \n                                 bl\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-left\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TooltipSize\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : 100px\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : 200px\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : 400px\n                            \n                        \n            \n        \n\n    projects/components/src/data-exporter/data-exporter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        UserOptions\n                    \n                \n                        \n                            \n                                 selectAll\n                            \n                        \n                        \n                            \n                                Value : selectAll\n                            \n                        \n                        \n                            \n                                 friendlyNames\n                            \n                        \n                        \n                            \n                                Value : friendlyNames\n                            \n                        \n                        \n                            \n                                 sanitize\n                            \n                        \n                        \n                            \n                                Value : sanitize\n                            \n                        \n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.config.ts\n    \n        \n            \n                \n                    \n                        \n                        VcdFormlyInputTypes\n                    \n                \n                    \n                        \n                            Different of Vcd form inputs that are configurable through Formly\n\n                        \n                    \n                        \n                            \n                                 input\n                            \n                        \n                        \n                            \n                                Value : input\n                            \n                        \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 number_with_unit_input\n                            \n                        \n                        \n                            \n                                Value : number_with_unit_input\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        WildCardPosition\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 END\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 WRAP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BoldTextRenderer   (projects/.../bold-text-renderer.component.ts)\n                        \n                        \n                            ColumnComponentRendererSpec   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            configureTestingModule   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelper   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelperWithFinder   (projects/.../filter-utils.ts)\n                        \n                        \n                            DatagridMultiSelectFilter   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            DatagridNumericFilter   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            DatagridSelectFilter   (projects/.../datagrid-select-filter.component.ts)\n                        \n                        \n                            DatagridStringFilter   (projects/.../datagrid-string-filter.component.ts)\n                        \n                        \n                            encodeValue   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            FilterComponentRendererSpec   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            getDeepCopyOfActionItems   (projects/.../action-menu.component.ts)\n                        \n                        \n                            getDefaultActionDisplayConfig   (projects/.../action-menu.component.ts)\n                        \n                        \n                            getFormattedDateValue   (projects/.../form-input.component.ts)\n                        \n                        \n                            hasPotentialInjection   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            isFindParamsObject   (projects/.../widget-object.ts)\n                        \n                        \n                            isNullOrUndefined   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            pad   (projects/.../form-input.component.ts)\n                        \n                        \n                            processRow   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            promisify   (projects/.../cypress-widget-driver.ts)\n                        \n                        \n                            sanitizeString   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            setStyle   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            unwatchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            watchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            WithGridBoldRenderer   (projects/.../bold-text-renderer.wo.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            BoldTextRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nBoldTextRenderer(textExtractor)\n                \n            \n\n\n\n\n            \n                \n                    Creates a ColumnRendererSpec for rendering bold text in a column.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textExtractor\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ColumnComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nColumnComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specification of ColumnRendererSpec type\nExample usage:\nconst gridColumn = {\n   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n}\nIn the above example this method helps in making sure that:\n\nValue \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/datagrid/filter-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            configureTestingModule\n                        \n                        \n                    \n                \n            \n            \n                \nconfigureTestingModule()\n                \n            \n\n\n\n\n            \n                \n                    Creates a testing module with FilterTestHostComponent that has only single column for filter testing\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelper\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelper(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Used inside beforeEach functions of filter tests and it does the following:\n\nCreates a testing module with FilterTestHostComponent that has only single column for filter testing\nSets the filter on the column of host component(FilterTestHostComponent)\nOpens the filter and returns a component instance of the filter created\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to be created in the test host component grid's column\n\n                                    \n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The configuration for the filter\nExample:\nbeforeEach(function(this: HasDgStringFilter): void {\nthis.filter = createDatagridFilterTestHelper(\nDatagridStringFilterComponent,\n{ wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n);\n});\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DatagridFilter\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelperWithFinder\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelperWithFinder(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Same as the above function but used for tests which need finder\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridMultiSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridMultiSelectFilter(options, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this multi-select filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridNumericFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridNumericFilter(value?, unitOptions?, unit?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this numeric filter.\n\n                                    \n                                \n                                \n                                    unitOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Select dropdown options for unit input\n\n                                    \n                                \n                                \n                                    unit\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        initial value for unit input to be selected\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridSelectFilter(options, value?, customFiql?: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this select filter.\n\n                                    \n                                \n                                \n                                    customFiql\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        when set as true will disable any formatting by {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridStringFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridStringFilter(wildCardPosition?, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    wildCardPosition\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        where the * should go in the FIQL string output.\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value of the filter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(cellValue, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cellValue\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cell cellValue to be encoded\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If this cellValue starts with a control should it be\nprefixed with the tab character\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \nhasPotentialInjection(row)\n                \n            \n\n\n\n\n            \n                \n                    Whether the given row data is at risk of code injection when exported to CSV.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \nprocessRow(row, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A list of cells to be turned into a CSV string, separated by commas\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sanitizeString\n                        \n                        \n                    \n                \n            \n            \n                \nsanitizeString(value)\n                \n            \n\n\n\n\n            \n                \n                    Prevents CSV injection by prefixing with a tab character if the string contains a\nspecial character.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            FilterComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nFilterComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specifications of FilterRendererSpec type\nExample usage:\nconst gridColumn = {\n   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n}\nIn the above examples these methods help in making sure that:\n\nValue \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/action-menu/action-menu.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getDeepCopyOfActionItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetDeepCopyOfActionItems(actions)\n                \n            \n\n\n\n\n            \n                \n                    Without the deep copy, the changes made to any of the action children in one of the methods will persist in other methods\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDefaultActionDisplayConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetDefaultActionDisplayConfig(cfg)\n                \n            \n\n\n\n\n            \n                \n                    To add default values to configs if they are not provided by the caller in the input config\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cfg\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionDisplayConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/form/form-input/form-input.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getFormattedDateValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetFormattedDateValue(value)\n                \n            \n\n\n\n\n            \n                \n                    To format a date string into a value which can be given to the input html element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pad\n                        \n                        \n                    \n                \n            \n            \n                \npad(num)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/widget-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isFindParamsObject\n                        \n                        \n                    \n                \n            \n            \n                \nisFindParamsObject(params)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FindParams\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isNullOrUndefined\n                        \n                        \n                    \n                \n            \n            \n                \nisNullOrUndefined(value)\n                \n            \n\n\n\n\n            \n                \n                    Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/cypress-widget-driver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            promisify\n                        \n                        \n                    \n                \n            \n            \n                \npromisify(chain)\n                \n            \n\n\n\n\n            \n                \n                    Given some Cypress Chainable, returns a promise that will resolve when that Chainable completes\nand rejects when it fails.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chain\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setStyle\n                        \n                        \n                    \n                \n            \n            \n                \nsetStyle(el, style)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    style\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwatchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nunwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            watchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithGridBoldRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nWithGridBoldRenderer(Base)\n                \n            \n\n\n\n\n            \n                \n                    Mixin that allows ClrDatagridWidgetObject to read information from BoldTextRendererComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Base\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVMware Cloud Director UI Common Components\nRepo Structure\nThis monorepo contains four separate but related projects:\nComponent Library (./projects/components) @vcd/ui-components\nReusable components for vcd-ui and its plugin developers. See its README\nfor further details\nInternalization Library (./projects/i18n) @vcd/i18n\nTranslation code for vcd-ui and its plugin developers. See its README\nfor further details\nExamples App (./projects/examples)\nThe application that showcases @vcd/ui-components using @vmw/ng-live-docs.\nRun npm start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if\nyou change any of the source files. This is where you'll see changes made in components\nRoute Analyzer (./projects/route-analyzer) @vcd/route-analyzer\nRoute Analyzer statically analyzes angular source code and generates a json file with all the available routes,\nincluding the ones from lazy loaded modules. See its README\nfor further details\nPeer Dependencies\nThe component library depends on Clarity and Angular\nwhich must must be installed from your application's package.json. See package.json for version\ninformation.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use\nng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build:components, or npm run build:i18n. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun npm run test:components, or npm run test:i18n to execute the unit tests via Karma.\nRunning end-to-end tests (Examples App)\nRun ng e2e to execute the end-to-end tests via Protractor.\nCloning the repo\nWe typically use git clone https://github.com/vmware/vmware-cloud-director-ui-components ./vcd-ui-common to avoid\nthe extremely long folder name.\nPublishing\nPublishing happens through the CI/CD pipeline. See package.json\nVersioning\nFor all official releases, versioning should be semantic as per NPM's documentation.\nFor all development, nightly builds, the version should be created using npm version prerelease --preid=dev.\nSteps for publishing an @next release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, merge that PR into master\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @next tag(npm publish --tag next)\nSteps for publishing an @latest release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, Push the changes to remote repo using Git tag using following commands:\nAdd a Git tag to the HEAD commit that has to be published as latest: git tag -fa -v[0-999].[0-999].[0-999]\nPush to the remote repo(vmware/vmware-cloud-director-ui-components): git push git@github.com:vmware/vmware-cloud-director-ui-components.git refs/tags/-v[0-999].[0-999].[0-999]\n\n\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @latest tag(npm publish)\nAngular CLI\nThis project was generated with Angular CLI version 8.3.20. We attempt to\nkeep the project following CLI guidelines so we can benefit from ng update.\nFurther help\nTo get further help, please file issues on github.\nTo get more help on the Angular CLI use ng help or go check out the\nAngular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DropdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShowClippedTextDirectiveModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotlightSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActionMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActivityReporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdComponentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDataExporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDatagridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdErrorBannerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormlyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdLoadingIndicatorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_imports\n\n\n\ncluster_DropdownModule_exports\n\n\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\ncluster_VcdFormlyModule\n\n\n\ncluster_VcdFormlyModule_declarations\n\n\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_providers\n\n\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDynamicDropdownPositionDirective\n\nDynamicDropdownPositionDirective\n\nDropdownModule -->\n\nDynamicDropdownPositionDirective->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\n\n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective \n\nDynamicDropdownPositionDirective  -->\n\nDropdownModule->DynamicDropdownPositionDirective \n\n\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nDropdownModule->VcdActionMenuModule\n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nDropdownModule -->\n\nShowClippedTextDirectiveModule->DropdownModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\nVcdActionMenuModule -->\n\nShowClippedTextDirectiveModule->VcdActionMenuModule\n\n\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActionMenuModule->VcdDatagridModule\n\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\nDropdownModule \n\nDropdownModule \n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActionMenuModule \n\nVcdActionMenuModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nDropdownModule  -->\n\nVcdComponentsModule->DropdownModule \n\n\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActionMenuModule  -->\n\nVcdComponentsModule->VcdActionMenuModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\nVcdFormlyModule\n\nVcdFormlyModule\n\nVcdFormlyModule -->\n\nVcdFormModule->VcdFormlyModule\n\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nFormlyInputComponent\n\nFormlyInputComponent\n\nVcdFormlyModule -->\n\nFormlyInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlyNumberWithUnitInputComponent\n\nFormlyNumberWithUnitInputComponent\n\nVcdFormlyModule -->\n\nFormlyNumberWithUnitInputComponent->VcdFormlyModule\n\n\n\n\n\nFormlySelectComponent\n\nFormlySelectComponent\n\nVcdFormlyModule -->\n\nFormlySelectComponent->VcdFormlyModule\n\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    23 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    53 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionHandlerType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ComponentRendererConstructor   (projects/.../component-renderer.interface.ts)\n                        \n                        \n                            DatagridNumericFilterValue   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            EventHandler   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            LazyString   (projects/.../types.ts)\n                        \n                        \n                            Primitives   (projects/.../filter-builder.ts)\n                        \n                        \n                            SpinnerSize   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            SpotlightSearchResultType   (projects/.../spotlight-search-result.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ActionHandlerType\n                \n            \n            \n                \n                    Type of ActionItem.handler function\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentRendererConstructor\n                \n            \n            \n                \n                    Used for the type safety of ColumnRendererSpec\n\n                \n            \n            \n                \n                            Type>\n\n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n    \n        \n            \n                \n                    \n                    DatagridNumericFilterValue\n                \n            \n            \n                \n                    The type of value that goes in the DatagridNumericFilterConfig.\n\n                \n            \n            \n                \n                        [number, number]\n\n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n    \n        \n            \n                \n                    \n                    EventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    LazyString\n                \n            \n            \n                \n                    The result of a call to either TranslationService.translate or TranslationService.translateAsync.\nA duplicate of the @vcd/i18n LazyString.\n\n                \n            \n            \n                \n                        string | Observable | Promise\n\n                \n            \n        \n    \n    projects/components/src/utils/filter-builder.ts\n    \n    \n        \n            \n                \n                    \n                    Primitives\n                \n            \n            \n                \n                        boolean | string | number\n\n                \n            \n        \n    \n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerSize\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/components/src/spotlight-search/spotlight-search-result.ts\n    \n    \n        \n            \n                \n                    \n                    SpotlightSearchResultType\n                \n            \n            \n                \n                    The type of the spotlight search result which can be a promise\n\n                \n            \n            \n                \n                            SpotlightSearchResult[] | Promise\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CELL_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_CSS_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            CONTENT_AREA_SELECTOR   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            createId   (projects/.../spotlight-search.service.ts)\n                        \n                        \n                            cy   (projects/.../cypress-widget-finder.ts)\n                        \n                        \n                            Cypress   (projects/.../cypress-widget-driver.ts)\n                        \n                        \n                            DATE_OBJECT_CLASS   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            declarations   (projects/.../form.module.ts)\n                        \n                        \n                            declarations   (projects/.../pipes.module.ts)\n                        \n                        \n                            DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX   (projects/.../action-search.provider.ts)\n                        \n                        \n                            DEFAULT_PAGINATION_TRANSLATION_KEY   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE_OPTIONS   (projects/.../datagrid.component.ts)\n                        \n                        \n                            directives   (projects/.../datagrid.module.ts)\n                        \n                        \n                            FILTER_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            filters   (projects/.../datagrid.module.ts)\n                        \n                        \n                            fireTipTransitionEndForTests   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            idGenerator   (projects/.../base-form-control.ts)\n                        \n                        \n                            idGenerator   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            LEADING_CONTROL_CHAR   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            MAX_HEADER_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            MENU_BUFFER_SPACE   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            mockData   (projects/.../mock-data.ts)\n                        \n                        \n                            NO_SCROLLING_CLASSNAME   (projects/.../dynamic-dropdown-position.directive.ts)\n                        \n                        \n                            OBJECT_PROPERTY_SEPARATOR   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            Operators   (projects/.../filter-builder.ts)\n                        \n                        \n                            pipes   (projects/.../datagrid.module.ts)\n                        \n                        \n                            renderers   (projects/.../datagrid.module.ts)\n                        \n                        \n                            ROW_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            ROW_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            tip   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UNLIMITED   (projects/.../number-with-unit-form-input.component.ts)\n                        \n                        \n                            VCD_FORMLY_CONFIG   (projects/.../vcd-formly.config.ts)\n                        \n                        \n                            VCD_FORMLY_INPUT_COMPONENTS   (projects/.../vcd-formly.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/utils/test/datagrid/datagrid.wo.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CELL_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-cell'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_CSS_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.datagrid-column-title'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-column'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FILTER_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-filter'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-row'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/dropdown/dynamic-dropdown-position.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONTENT_AREA_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.content-area'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MENU_BUFFER_SPACE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 150\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NO_SCROLLING_CLASSNAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'no-scrolling'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/spotlight-search/spotlight-search.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})()\n                        \n                    \n\n                \n                    \n                        Create unique id\n\n                    \n                \n\n            \n        \n\n    projects/components/src/utils/test/cypress-widget-finder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cy\n                            \n                        \n                    \n                \n\n\n            \n        \n\n    projects/components/src/utils/test/cypress-widget-driver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Cypress\n                            \n                        \n                    \n                \n\n\n            \n        \n\n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DATE_OBJECT_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[object Date]'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OBJECT_PROPERTY_SEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n\n                \n                    \n                        Number of milliseconds delayed before emitting the filter has changed observable\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/form.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/common/pipes/pipes.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [NestedPropertyPipe]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/action-search-provider/action-search.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_ACTION_SEARCH_SECTION_HEADER_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.action.provider.section.title'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PAGINATION_TRANSLATION_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.grid.default.pagination'\n                        \n                    \n\n                \n                    \n                        Key used for translation of pagination when a translation key is not given as input from the caller\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 15\n                        \n                    \n\n                \n                    \n                        The default number of items on a single page.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [DEFAULT_SIZE, 20, 50, 100]\n                        \n                    \n\n                \n                    \n                        The default items to show in the page size dropdown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MAX_HEADER_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n\n                \n                    \n                        The maximum allowed .datagrid-header element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n\n                \n                    \n                        The default clr-dr-row element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/datagrid/datagrid.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            directives\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [ComponentRendererOutletDirective]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pipes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FunctionRendererPipe]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [BoldTextRendererComponent]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fireTipTransitionEndForTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (event: Event) => {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n}\n                        \n                    \n\n                \n                    \n                        Used to call tip.onTransitionEnd from outside this file.\nWe need to expose tip.onTransitionEnd because when the window is not focused\n(as in a headless chrome environment), the transitionend event is not fired.\nAs such, from the tests, you need to manually call this method.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n}\n                        \n                    \n\n                \n                    \n                        Singleton tooltip created by directive\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/base-form-control.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('base-form-control-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('vcd-multiselect-filter-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LEADING_CONTROL_CHAR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[-+=@]/\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/mock-data.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MockRecord[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/filter-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Operators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n}\n                        \n                    \n\n                \n                    \n                        TODO: Remove FilterBuilder from VCD-UI https://jira.eng.vmware.com/browse/VDUCC-115\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNLIMITED\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -1\n                        \n                    \n\n                \n                    \n                        -1 is the number to specify a value of unlimited.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            VCD_FORMLY_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    types: [\n        {\n            name: VcdFormlyInputTypes.input,\n            component: FormlyInputComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.select,\n            component: FormlySelectComponent,\n        },\n        {\n            name: VcdFormlyInputTypes.number_with_unit_input,\n            component: FormlyNumberWithUnitInputComponent,\n        },\n    ],\n}\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/formly/vcd/vcd-formly.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            VCD_FORMLY_INPUT_COMPONENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FormlyInputComponent, FormlySelectComponent, FormlyNumberWithUnitInputComponent]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
